# Format: 
# xml, json, yml, 
# csv, csv-excel, csv-informix-unload, csv-informix-unload-csv,
# csv-mysql, csv-oracle, csv-postgresql-csv, csv-postgresql-text,
# csv-rfc4180, csv-tdf
format: json

# Format options for any of the csv-* formats
#   allowMissingColumnNames
#   commentMarker
#   delimiter
#   escapeCharacter
#   ignoreEmptyLines
#   ignoreSurroundingSpaces
#   nullString
#   quoteCharacter
#   skipHeaderRecord
#   trailingDelimiter
#   trim
#   maxRecordsToCheck: 100  # Records to read from a csv file in order to determine the type and number of columns. This data is used to create a db table.
#   table: MyTable   # Available only in CSV format. Name of target db table. 
#           If not specified file name will be used. 
#           If stdin is used then the target db table name fill be generated as CSV_IMPORT_<number> where <number> is first available (non existing) table 
#           Any of these rules are overriden if atleast one defs item is specified.
#
#format: csv-excel
#formatOptions:
#    delimiter: "\t"

# Velocity macro
url: jdbc:derby:memory:MyDbTest;create=true
# Velocity macro
username: anonymous
# Velocity macro
password: anonymous@anonymous.com
dateFormats: ["YYYY-MM-DD", "DD/MM/YYYY"]

before: |                   # Velocity macro
    create table location (
        id int,
        line int,
        seq int,
        classes varchar(50),
        sources varchar(50)
    );

after: |                   # Velocity macro
    --begin
    --    exec_stored_procedure;
    --end

defs:
    -   # Comment
        name: Location          # Just a name
        path: /locations/\d+    # RegRex to math against record path
        dateFormats: ["YYYY-MM-DD", "YYYYMMDD", "DD/MM/YYYY"]
        before:                 # Velocity macro
            truncate table location
        after:                  # Velocity macro
            --begin
            --    exec_stored_procedure;
            --end
        sql: |                  # Velocity macro
            insert into location
                (id, line, seq, classes, sources)
            values
                (?,?,?,?,?)
        params:                 # SQL parameters formatting, Velocity macro
        - $rec._PARENT._ID
        - $rec._LINE
        - $rec._NAME
        - $su.abbreviate($rec.classes, 10)
        - $rec._PATH

    -   # Comment
        name: dest_patterns
        path: /destinations/[^/]*/patterns/[\d]+
        before: |
            create table dest_pattern (
                dest_id int,
                line int,
                seq int,
                pattern varchar(50)
            );
        sql: |
            insert into dest_pattern(dest_id, line, seq, pattern)
            values(?,?,?,?)
        params:
        - $rec._PARENT._PARENT._ID
        - $rec._LINE
        - $rec._NAME
        - $rec._VALUE

    -
        name: Destination patterns
        path: /destinations/[^/]*
        before: |
            create table destination (
                id int,
                line int,
                seq int,
                sources varchar(50)
            );
        sql: insert into destination (id, line, seq, sources) values(?,?,?,?)
        params:
        - $rec._ID
        - $rec._LINE
        - $rec._NAME
        - $rec.sources
