...
AVR Memory Usage
----------------
Device: atmega328p

Program:   18264 bytes (55.7% Full)
(.text + .data + .bootloader)

Data:        875 bytes (42.7% Full)
(.data + .bss + .noinit)


...
...
   text	   data	    bss	    dec	    hex	filename
  18194	     70	    805	  19069	   4a7d	ArduinoProject.elf
...
...

ArduinoProject.elf:     file format elf32-avr

Contents of section .data:
 800100 20000000 0000530e 85100000 00006a0d   .....S.......j.
 800110 00000000 520d550d 00000000 400d0000  ....R.U.....@...
 800120 0000b513 eb13080a 02060405 01090a06  ................
 800130 05090802 04010000 0000d319 5f1a6719  ............_.g.
 800140 98197819 c119                        ..x...          
...
...
Print final symbols sizes (b - .bss; d - .data; t - .text; v/w - weak)
...
...
00000025 b btn
00000005 b diButtonPin
00000006 b diLedPin
00000005 b diRotorPinA
00000005 b diRotorPinB
00000002 B errno
00000004 b intFunc
00000019 b led
00000004 B maxStep
00000001 B modeState
00000361 b pcb
00000007 b reader
00000100 b readerBuffer
00000001 B repRapMode
00000072 b rotor
00000068 B rx_buffer
00000002 B selectedAxis
00000002 B selectedAxisName
00000031 B Serial
00000001 b timer0_fract
00000004 B timer0_millis
00000004 B timer0_overflow_count
00000004 B timeStamp
00000004 B timeToMoveToEndMillis
00000068 B tx_buffer
00000008 d motorStatesMosfetHBridge_DoublePrecision
00000004 d motorStatesMosfetHBridge_FullPower
00000004 d motorStatesMosfetHBridge_HalfPower
00000056 T AdvButton::initialize(DigitalInputPin*, bool, unsigned int)
00000052 T AdvButton::reset()
00000252 T AdvButton::update()
00000008 T atof
00000060 T atoi
00000078 T atol
00000070 T attachInterrupt
00000010 T BLINK1
00000014 T BLINK2
00000006 T BLINK3
00000006 T BLINK_FAST
00000176 T BlinkingLed::getNextDelay()
00000028 T BlinkingLed::initialize(DigitalOutputPin*)
00000074 T BlinkingLed::playBlink(unsigned int const*, short)
00000164 T BlinkingLed::update()
00000006 T BLINK_MEDIUM
00000002 T BLINK_OFF
00000004 T BLINK_ON
00000006 T BLINK_SLOW
00000062 T Button::initialize(DigitalInputPin*, unsigned int)
00000056 T Button::reset()
00000190 T Button::update()
00000008 T __cmpsf2
00000036 T DigitalInputArduinoPin::getState()
00000128 T DigitalInputArduinoPin::initialize(unsigned char, bool)
00000092 T DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)
00000278 T DigitalInputShiftRegister_74HC166::update()
00000032 T DigitalInputShiftRegister::createPinHandler(unsigned char)
00000064 T DigitalInputShiftRegisterPin::getState()
00000006 T DigitalOutputArduinoPin::getState()
00000096 T DigitalOutputArduinoPin::initialize(unsigned char, bool)
00000042 T DigitalOutputArduinoPin::setState(bool)
00000032 T DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)
00000154 T DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)
00000070 T DigitalOutputShiftRegister_74HC595_Pin::getState()
00000016 T DigitalOutputShiftRegister_74HC595_Pin::setState(bool)
00000138 T DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)
00000762 T DigitalOutputShiftRegister_74HC595::update()
00000020 T digital_pin_to_bit_mask_PGM
00000020 T digital_pin_to_port_PGM
00000020 T digital_pin_to_timer_PGM
00000116 t doAlterDelayBetweenSteps()
00000025 t doAlterDelayBetweenSteps()::__c
00000003 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000021 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000050 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000658 t doAxis(char const*, char*, StepperMotorAxis&)
00000120 t doGotoStep()
00000013 t doGotoStep()::__c
00000660 t doMoveForthAndBackAtSpeed()
00000016 t doMoveForthAndBackAtSpeed()::__c
00000322 t doStepTicking()
00000010 t doStepTicking()::__c
00000013 t doStepTicking()::__c
00000006 T exit
00000010 T __fixsfsi
00000088 T __fixunssfsi
00000122 T __floatunsisf
00000072 T __fp_cmp
00000012 T __fp_inf
00000006 T __fp_nan
00000014 T __fp_pscA
00000014 T __fp_pscB
00000034 T __fp_round
00000068 T __fp_split3
00000014 T __fp_zero
00000160 t global constructors keyed to repRapMode
00000160 t global constructors keyed to rx_buffer
00000034 T HardwareSerial::available()
00000268 T HardwareSerial::begin(unsigned long)
00000036 T HardwareSerial::flush()
00000064 T HardwareSerial::peek()
00000082 T HardwareSerial::read()
00000120 T HardwareSerial::write(unsigned char)
00000845 t helpMessage
00000118 T init
00000014 T main
00000076 T micros
00000028 T millis
00000004 T __mulsf3
00000194 T __mulsf3x
00000007 t pgmAxisNameX
00000007 t pgmAxisNameY
00000007 t pgmAxisNameZ
00000005 t pgm_Down
00000003 t pgm_Up
00000076 T pinMode
00000010 T port_to_input_PGM
00000010 T port_to_mode_PGM
00000010 T port_to_output_PGM
00000014 t printHelp()
00000050 T Print::pgm_print(char const*)
00000022 T Print::pgm_println(char const*)
00000006 T Print::print(char const*)
00000016 T Print::print(char)
00000038 T Print::print(int, int)
00000064 T Print::println()
00000038 T Print::println(char const*)
00000048 T Print::println(char)
00000062 T Print::println(int, int)
00000040 T Print::println(long, int)
00000040 T Print::println(unsigned long, int)
00000058 T Print::println(unsigned int, int)
00000128 T Print::print(long, int)
00000200 T Print::printNumber(unsigned long, unsigned char)
00000030 T Print::print(unsigned long, int)
00000084 T Print::write(unsigned char const*, unsigned int)
00000003 t pstr_inf
00000005 t pstr_inity
00000003 t pstr_nan
00000024 t pwr_m10
00000024 t pwr_p10
00000234 T RepRapPCB::doInitializePosition()
00000108 T RepRapPCB::doInitializePositionXY()
00000934 T RepRapPCB::initialize()
00001082 T RepRapPCBTest::loop()
00000016 t RepRapPCBTest::loop()::__c
00000228 T RepRapPCBTest::setup()
00000012 t RepRapPCBTest::setup()::__c
00000025 t RepRapPCBTest::setup()::__c
00000094 T RepRapPCB::update()
00000106 T RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)
00000372 T RotaryEncoderAcceleration::update()
00000050 T RotaryEncoderState::setMinMax(long, long)
00000226 T RotaryEncoderState::setValue_unsafe(long)
00000060 T SerialReader::initialize(long, int, char*)
00000028 T SerialReader::readln()
00000140 T SerialReader::update()
00000007 t showError(char const*)::__c
00000052 t showError(char const*)
00000042 T StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)
00000114 T StateLed::setState(short)
00000010 t states
00000290 T StepperMotorAxis::debugPrint()
00000011 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000027 t StepperMotorAxis::debugPrint()::__c
00000088 T StepperMotorAxis::doDetermineAvailableSteps()
00000072 T StepperMotorAxis::doInitializePosition()
00000064 T StepperMotorAxis::getAbsolutePositionMicroM()
00000010 T StepperMotorAxis::initializePosition()
00000068 T StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)
00000088 T StepperMotorAxis::moveToPositionMicroMFast(long)
00000094 T StepperMotorAxis::moveToPositionMicroM(long, unsigned long)
00000016 T StepperMotorAxis::stop()
00000048 T StepperMotorAxis::update()
00000318 T StepperMotorControlWithButtons::debugPrint()
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000086 T StepperMotorControlWithButtons::gotoStep(long)
00000168 T StepperMotorControlWithButtons::moveTo(long, unsigned long)
00000052 T StepperMotorControlWithButtons::rotate(bool)
00000350 T StepperMotorControlWithButtons::update()
00000070 T StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)
00000152 T StepperMotorMosfetHBridge::setState(unsigned char)
00000108 T StepperMotorMosfetHBridge::step(bool)
00000008 T StepperMotorMosfetHBridge::stop()
00000048 t stop()
00000048 T strncasecmp_P
00000704 T strtod
00000068 T TicksPerSecond::getIntTPS_unsafe()
00000116 T TicksPerSecond::initialize(unsigned int)
00000070 T TicksPerSecond::tick()
00000216 T TicksPerSecond::update()
00000010 t UpdateRotor()
00000090 T __vector_1
00000144 T __vector_16
00000104 T __vector_18
00000146 T __vector_19
00000090 T __vector_2
00000006 V vtable for DigitalInputArduinoPin
00000006 V vtable for DigitalInputShiftRegisterPin
00000008 V vtable for DigitalOutputArduinoPin
00000008 V vtable for DigitalOutputShiftRegister_74HC595_Pin
00000008 V vtable for StepperMotorMosfetHBridge
00000016 V vtable for HardwareSerial
00000040 W Print::write(char const*)
00000074 W StepperMotorAxis::speedToDelayBetweenSteps(unsigned int)
...
...

ArduinoProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00004712  000047a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000325  00800146  00800146  000047ec  2**0
                  ALLOC
  3 .stab         00004b78  00000000  00000000  000047ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001520  00000000  00000000  00009364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 03 	jmp	0x682	; 0x682 <__ctors_end>
       4:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__vector_1>
       8:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__vector_2>
       c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      10:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      14:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      18:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      1c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      20:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      24:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      28:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      2c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      30:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      34:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      38:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      3c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      40:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_16>
      44:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      48:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__vector_18>
      4c:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__vector_19>
      50:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      54:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      58:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      5c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      60:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      64:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>

00000068 <pgmAxisNameX>:
      68:	58 20 61 78 69 73 00                                X axis.

0000006f <pgmAxisNameY>:
      6f:	59 20 61 78 69 73 00                                Y axis.

00000076 <pgmAxisNameZ>:
      76:	5a 20 61 78 69 73 00                                Z axis.

0000007d <RepRapPCBTest::loop()::__c>:
      7d:	69 6e 76 61 6c 69 64 20 63 6f 6d 6d 61 6e 64 00     invalid command.

0000008d <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      8d:	6f 6b 00                                            ok.

00000090 <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      90:	69 6e 76 61 6c 69 64 20 61 78 69 73 20 63 6f 6d     invalid axis com
      a0:	6d 61 6e 64 00                                      mand.

000000a5 <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      a5:	6d 61 78 53 74 65 70 09 6d 69 6e 53 74 65 70 09     maxStep.minStep.
      b5:	74 69 6d 65 54 6f 45 6e 64 4d 69 6c 6c 69 73 09     timeToEndMillis.
      c5:	74 69 6d 65 54 6f 53 74 61 72 74 4d 69 6c 6c 69     timeToStartMilli
      d5:	73 00                                               s.

000000d7 <showError(char const*)::__c>:
      d7:	45 72 72 6f 72 20 00                                Error .

000000de <doAlterDelayBetweenSteps()::__c>:
      de:	3a 20 64 65 6c 61 79 20 62 65 74 77 65 65 6e 20     : delay between 
      ee:	73 74 65 70 73 20 3d 20 00                          steps = .

000000f7 <doGotoStep()::__c>:
      f7:	3a 20 67 6f 74 6f 20 73 74 65 70 20 00              : goto step .

00000104 <doMoveForthAndBackAtSpeed()::__c>:
     104:	3a 20 73 70 65 65 64 20 6d 6d 2f 6d 69 6e 20 00     : speed mm/min .

00000114 <doStepTicking()::__c>:
     114:	54 69 63 6b 20 64 65 6c 61 79 3a 20 00              Tick delay: .

00000121 <doStepTicking()::__c>:
     121:	44 65 6c 61 79 20 69 73 20 00                       Delay is .

0000012b <helpMessage>:
     12b:	43 6f 6d 6d 61 6e 64 20 66 6f 72 6d 61 74 3a 20     Command format: 
     13b:	3c 63 6f 6d 6d 61 6e 64 3e 3c 73 75 62 2d 63 6f     <command><sub-co
     14b:	6d 6d 61 6e 64 3e 5b 70 61 72 61 6d 65 74 65 72     mmand>[parameter
     15b:	5d 3c 70 72 65 73 73 20 65 6e 74 65 72 3e 0a 57     ]<press enter>.W
     16b:	68 65 72 65 3a 0a 3c 63 6f 6d 6d 61 6e 64 3e 0a     here:.<command>.
     17b:	20 20 78 2c 20 79 2c 20 7a 20 2d 20 75 73 65 20       x, y, z - use 
     18b:	61 78 69 73 20 78 2c 79 20 6f 72 20 7a 2e 20 53     axis x,y or z. S
     19b:	65 65 20 61 78 69 73 20 63 6f 6d 6d 61 6e 64 73     ee axis commands
     1ab:	0a 20 20 61 20 2d 20 41 6c 6c 20 28 78 2c 79 2c     .  a - All (x,y,
     1bb:	7a 29 20 61 78 69 73 0a 20 20 73 20 2d 20 53 74     z) axis.  s - St
     1cb:	6f 70 20 61 6c 6c 20 6d 6f 74 6f 72 73 0a 20 20     op all motors.  
     1db:	69 20 2d 20 49 6e 69 74 69 61 6c 69 7a 65 20 61     i - Initialize a
     1eb:	6c 6c 20 6d 6f 74 6f 72 73 0a 20 20 68 20 2d 20     ll motors.  h - 
     1fb:	70 72 69 6e 74 20 74 68 69 73 20 48 65 6c 70 0a     print this Help.
     20b:	3c 61 78 69 73 20 63 6f 6d 6d 61 6e 64 73 3e 0a     <axis commands>.
     21b:	20 20 73 20 2d 20 67 6f 74 6f 20 53 74 61 72 74       s - goto Start
     22b:	20 70 6f 73 69 74 69 6f 6e 0a 20 20 65 20 2d 20      position.  e - 
     23b:	67 6f 74 6f 20 45 6e 64 20 70 6f 73 69 74 69 6f     goto End positio
     24b:	6e 0a 20 20 64 20 2d 20 64 6f 20 44 65 74 65 72     n.  d - do Deter
     25b:	6d 69 6e 65 20 61 76 61 69 6c 61 62 6c 65 20 73     mine available s
     26b:	74 65 70 73 0a 20 20 68 20 2d 20 67 6f 74 6f 20     teps.  h - goto 
     27b:	48 6f 6d 65 20 70 6f 73 69 74 69 6f 6e 0a 20 20     Home position.  
     28b:	70 20 2d 20 50 72 69 6e 74 20 61 78 69 73 20 73     p - Print axis s
     29b:	74 61 74 75 73 0a 20 20 67 20 2d 20 47 6f 74 6f     tatus.  g - Goto
     2ab:	20 73 74 65 70 20 28 70 61 72 61 6d 65 74 65 72      step (parameter
     2bb:	20 6c 6f 6e 67 20 69 6e 74 29 0a 20 20 6d 20 2d      long int).  m -
     2cb:	20 4d 6f 76 65 20 74 6f 20 70 6f 73 69 74 69 6f      Move to positio
     2db:	6e 20 28 70 61 72 61 6d 65 74 65 72 20 66 6c 6f     n (parameter flo
     2eb:	61 74 20 2d 20 61 62 73 6f 6c 75 74 65 20 70 6f     at - absolute po
     2fb:	73 69 74 69 6f 6e 20 69 6e 20 6d 69 6c 6c 69 6d     sition in millim
     30b:	65 74 65 72 73 29 0a 20 20 79 20 2d 20 73 65 74     eters).  y - set
     31b:	20 64 65 6c 61 59 20 62 65 74 77 65 65 6e 20 73      delaY between s
     32b:	74 65 70 73 20 61 74 20 6d 61 78 69 6d 75 6d 20     teps at maximum 
     33b:	73 70 65 65 64 20 28 70 61 72 61 6d 65 74 65 72     speed (parameter
     34b:	20 69 6e 74 20 2d 20 64 65 6c 61 79 20 6d 69 63      int - delay mic
     35b:	72 6f 73 65 63 6f 6e 64 73 29 0a 20 20 71 20 2d     roseconds).  q -
     36b:	20 73 65 74 20 73 70 65 65 64 20 74 6f 20 6d 6f      set speed to mo
     37b:	76 65 20 74 68 65 20 61 78 69 73 20 66 72 6f 6d     ve the axis from
     38b:	20 73 74 61 72 74 20 74 6f 20 65 6e 64 20 28 70      start to end (p
     39b:	61 72 61 6d 65 74 65 72 20 6c 6f 6e 67 20 2d 20     arameter long - 
     3ab:	73 70 65 65 64 20 69 6e 20 6d 6d 2f 6d 69 6e 29     speed in mm/min)
     3bb:	0a 2d 2d 20 73 65 74 20 74 68 65 20 72 6f 74 61     .-- set the rota
     3cb:	72 79 20 65 6e 63 6f 64 65 72 20 74 6f 20 63 6f     ry encoder to co
     3db:	6e 74 72 6f 6c 20 61 20 76 61 6c 75 65 2c 20 6f     ntrol a value, o
     3eb:	6e 6c 79 20 6f 6e 65 20 61 78 69 73 20 61 74 20     nly one axis at 
     3fb:	61 20 74 69 6d 65 2c 20 6c 6f 6e 67 20 63 6c 69     a time, long cli
     40b:	63 6b 20 74 6f 20 74 75 72 6e 20 6f 66 66 0a 20     ck to turn off. 
     41b:	20 47 20 2d 20 47 6f 74 6f 20 73 74 65 70 0a 20      G - Goto step. 
     42b:	20 59 20 2d 20 64 65 6c 61 59 20 62 65 74 77 65      Y - delaY betwe
     43b:	65 6e 20 73 74 65 70 73 0a 20 20 51 20 2d 20 73     en steps.  Q - s
     44b:	65 74 20 73 70 65 65 64 20 74 6f 20 6d 6f 76 65     et speed to move
     45b:	20 74 68 65 20 61 78 69 73 20 66 72 6f 6d 20 73      the axis from s
     46b:	74 61 72 74 20 74 6f 20 65 6e 64 0a 00              tart to end..

00000478 <states>:
     478:	a7 04 ad 04 b9 04 b3 04 ad 04                       ..........

00000482 <RepRapPCBTest::setup()::__c>:
     482:	50 72 65 73 73 20 74 68 65 20 62 75 74 74 6f 6e     Press the button
     492:	20 74 6f 20 73 74 6f 70 00                           to stop.

0000049b <RepRapPCBTest::setup()::__c>:
     49b:	49 6e 69 74 69 61 6c 69 7a 65 64 00                 Initialized.

000004a7 <BLINK_SLOW>:
     4a7:	f4 01 f4 01 00 00                                   ......

000004ad <BLINK_MEDIUM>:
     4ad:	fa 00 fa 00 00 00                                   ......

000004b3 <BLINK_FAST>:
     4b3:	32 00 32 00 00 00                                   2.2...

000004b9 <BLINK_OFF>:
	...

000004bb <BLINK_ON>:
     4bb:	32 00 00 00                                         2...

000004bf <BLINK1>:
     4bf:	32 00 32 00 fa 00 fa 00 00 00                       2.2.......

000004c9 <BLINK2>:
     4c9:	32 00 fa 00 32 00 fa 00 fa 00 fa 00 00 00           2...2.........

000004d7 <BLINK3>:
     4d7:	32 00 f4 01 00 00                                   2.....

000004dd <StepperMotorAxis::debugPrint()::__c>:
     4dd:	68 6f 6d 65 20 70 6f 73 69 74 69 6f 6e 3a 20 20     home position:  
	...

000004ee <StepperMotorAxis::debugPrint()::__c>:
     4ee:	61 78 69 73 20 72 65 73 6f 6c 75 74 69 6f 6e 3a     axis resolution:
	...

000004ff <StepperMotorAxis::debugPrint()::__c>:
     4ff:	64 65 6c 61 79 20 62 2f 6e 20 73 74 65 70 73 40     delay b/n steps@
     50f:	6d 61 78 20 73 70 65 65 64 3a 00                    max speed:.

0000051a <StepperMotorAxis::debugPrint()::__c>:
     51a:	73 70 65 65 64 20 28 51 29 3a 20 20 20 20 20 20     speed (Q):      
	...

0000052b <StepperMotorAxis::debugPrint()::__c>:
     52b:	61 62 73 20 70 6f 73 69 74 69 6f 6e 3a 20 20 20     abs position:   
	...

0000053c <StepperMotorAxis::debugPrint()::__c>:
     53c:	41 58 49 53 20 6d 6f 64 65 3a 20 20 20 20 20 20     AXIS mode:      
	...

0000054d <StepperMotorAxis::debugPrint()::__c>:
     54d:	41 58 49 53 20 73 74 61 74 65 00                    AXIS state.

00000558 <pgm_Up>:
     558:	55 70 00                                            Up.

0000055b <pgm_Down>:
     55b:	44 6f 77 6e 00                                      Down.

00000560 <StepperMotorControlWithButtons::debugPrint()::__c>:
     560:	64 65 6c 61 79 20 62 2f 6e 20 73 74 65 70 73 3a     delay b/n steps:
	...

00000571 <StepperMotorControlWithButtons::debugPrint()::__c>:
     571:	6c 61 73 74 54 69 6d 65 73 74 4d 69 63 72 6f 3a     lastTimestMicro:
	...

00000582 <StepperMotorControlWithButtons::debugPrint()::__c>:
     582:	6d 6f 76 65 6d 65 6e 74 20 6d 6f 64 65 3a 20 20     movement mode:  
	...

00000593 <StepperMotorControlWithButtons::debugPrint()::__c>:
     593:	65 6e 64 20 62 75 74 74 6f 6e 3a 20 20 20 20 20     end button:     
	...

000005a4 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5a4:	73 74 61 72 74 20 62 75 74 74 6f 6e 3a 20 20 20     start button:   
	...

000005b5 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5b5:	63 75 72 20 73 74 65 70 3a 20 20 20 20 20 20 20     cur step:       
	...

000005c6 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5c6:	72 65 6d 61 69 6e 69 6e 67 20 73 74 65 70 73 3a     remaining steps:
	...

000005d7 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5d7:	69 73 4d 6f 76 69 6e 67 3a 20 20 20 20 20 20 20     isMoving:       
	...

000005e8 <port_to_mode_PGM>:
     5e8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005f2 <port_to_output_PGM>:
     5f2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005fc <port_to_input_PGM>:
     5fc:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000606 <digital_pin_to_port_PGM>:
     606:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     616:	03 03 03 03                                         ....

0000061a <digital_pin_to_bit_mask_PGM>:
     61a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     62a:	04 08 10 20                                         ... 

0000062e <digital_pin_to_timer_PGM>:
     62e:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     63e:	00 00 00 00                                         ....

00000642 <pstr_inf>:
     642:	49 4e 46                                            INF

00000645 <pstr_inity>:
     645:	49 4e 49 54 59                                      INITY

0000064a <pstr_nan>:
     64a:	4e 41 4e                                            NAN

0000064d <pwr_m10>:
     64d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     65d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000665 <pwr_p10>:
     665:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     675:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000067e <__ctors_start>:
     67e:	4e 04       	cpc	r4, r14
     680:	0f 1a       	sub	r0, r31

00000682 <__ctors_end>:
     682:	11 24       	eor	r1, r1
     684:	1f be       	out	0x3f, r1	; 63
     686:	cf ef       	ldi	r28, 0xFF	; 255
     688:	d8 e0       	ldi	r29, 0x08	; 8
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	cd bf       	out	0x3d, r28	; 61

0000068e <__do_copy_data>:
     68e:	11 e0       	ldi	r17, 0x01	; 1
     690:	a0 e0       	ldi	r26, 0x00	; 0
     692:	b1 e0       	ldi	r27, 0x01	; 1
     694:	e2 e1       	ldi	r30, 0x12	; 18
     696:	f7 e4       	ldi	r31, 0x47	; 71
     698:	02 c0       	rjmp	.+4      	; 0x69e <.do_copy_data_start>

0000069a <.do_copy_data_loop>:
     69a:	05 90       	lpm	r0, Z+
     69c:	0d 92       	st	X+, r0

0000069e <.do_copy_data_start>:
     69e:	a6 34       	cpi	r26, 0x46	; 70
     6a0:	b1 07       	cpc	r27, r17
     6a2:	d9 f7       	brne	.-10     	; 0x69a <.do_copy_data_loop>

000006a4 <__do_clear_bss>:
     6a4:	14 e0       	ldi	r17, 0x04	; 4
     6a6:	a6 e4       	ldi	r26, 0x46	; 70
     6a8:	b1 e0       	ldi	r27, 0x01	; 1
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <.do_clear_bss_start>

000006ac <.do_clear_bss_loop>:
     6ac:	1d 92       	st	X+, r1

000006ae <.do_clear_bss_start>:
     6ae:	ab 36       	cpi	r26, 0x6B	; 107
     6b0:	b1 07       	cpc	r27, r17
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <.do_clear_bss_loop>

000006b4 <__do_global_ctors>:
     6b4:	16 e0       	ldi	r17, 0x06	; 6
     6b6:	c2 e8       	ldi	r28, 0x82	; 130
     6b8:	d6 e0       	ldi	r29, 0x06	; 6
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <.do_global_ctors_start>

000006bc <.do_global_ctors_loop>:
     6bc:	22 97       	sbiw	r28, 0x02	; 2
     6be:	fe 01       	movw	r30, r28
     6c0:	0e 94 83 23 	call	0x4706	; 0x4706 <__tablejump__>

000006c4 <.do_global_ctors_start>:
     6c4:	ce 37       	cpi	r28, 0x7E	; 126
     6c6:	d1 07       	cpc	r29, r17
     6c8:	c9 f7       	brne	.-14     	; 0x6bc <.do_global_ctors_loop>
     6ca:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <main>
     6ce:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <exit>

000006d2 <__bad_interrupt>:
     6d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006d6 <main>:
     6d6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <init>
     6da:	0e 94 9e 0a 	call	0x153c	; 0x153c <RepRapPCBTest::setup()>
     6de:	0e 94 81 08 	call	0x1102	; 0x1102 <RepRapPCBTest::loop()>
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <main+0x8>

000006e4 <__vector_16>:
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	8f 93       	push	r24
     6f4:	9f 93       	push	r25
     6f6:	af 93       	push	r26
     6f8:	bf 93       	push	r27
     6fa:	80 91 4a 01 	lds	r24, 0x014A
     6fe:	90 91 4b 01 	lds	r25, 0x014B
     702:	a0 91 4c 01 	lds	r26, 0x014C
     706:	b0 91 4d 01 	lds	r27, 0x014D
     70a:	30 91 4e 01 	lds	r19, 0x014E
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	a1 1d       	adc	r26, r1
     712:	b1 1d       	adc	r27, r1
     714:	23 2f       	mov	r18, r19
     716:	2d 5f       	subi	r18, 0xFD	; 253
     718:	2d 37       	cpi	r18, 0x7D	; 125
     71a:	20 f0       	brcs	.+8      	; 0x724 <__vector_16+0x40>
     71c:	2d 57       	subi	r18, 0x7D	; 125
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	a1 1d       	adc	r26, r1
     722:	b1 1d       	adc	r27, r1
     724:	20 93 4e 01 	sts	0x014E, r18
     728:	80 93 4a 01 	sts	0x014A, r24
     72c:	90 93 4b 01 	sts	0x014B, r25
     730:	a0 93 4c 01 	sts	0x014C, r26
     734:	b0 93 4d 01 	sts	0x014D, r27
     738:	80 91 46 01 	lds	r24, 0x0146
     73c:	90 91 47 01 	lds	r25, 0x0147
     740:	a0 91 48 01 	lds	r26, 0x0148
     744:	b0 91 49 01 	lds	r27, 0x0149
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	a1 1d       	adc	r26, r1
     74c:	b1 1d       	adc	r27, r1
     74e:	80 93 46 01 	sts	0x0146, r24
     752:	90 93 47 01 	sts	0x0147, r25
     756:	a0 93 48 01 	sts	0x0148, r26
     75a:	b0 93 49 01 	sts	0x0149, r27
     75e:	bf 91       	pop	r27
     760:	af 91       	pop	r26
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <millis>:
     774:	8f b7       	in	r24, 0x3f	; 63
     776:	f8 94       	cli
     778:	20 91 4a 01 	lds	r18, 0x014A
     77c:	30 91 4b 01 	lds	r19, 0x014B
     780:	40 91 4c 01 	lds	r20, 0x014C
     784:	50 91 4d 01 	lds	r21, 0x014D
     788:	8f bf       	out	0x3f, r24	; 63
     78a:	b9 01       	movw	r22, r18
     78c:	ca 01       	movw	r24, r20
     78e:	08 95       	ret

00000790 <micros>:
     790:	9f b7       	in	r25, 0x3f	; 63
     792:	f8 94       	cli
     794:	20 91 46 01 	lds	r18, 0x0146
     798:	30 91 47 01 	lds	r19, 0x0147
     79c:	40 91 48 01 	lds	r20, 0x0148
     7a0:	50 91 49 01 	lds	r21, 0x0149
     7a4:	86 b5       	in	r24, 0x26	; 38
     7a6:	a8 9b       	sbis	0x15, 0	; 21
     7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <micros+0x26>
     7aa:	8f 3f       	cpi	r24, 0xFF	; 255
     7ac:	21 f0       	breq	.+8      	; 0x7b6 <micros+0x26>
     7ae:	2f 5f       	subi	r18, 0xFF	; 255
     7b0:	3f 4f       	sbci	r19, 0xFF	; 255
     7b2:	4f 4f       	sbci	r20, 0xFF	; 255
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	9f bf       	out	0x3f, r25	; 63
     7b8:	54 2f       	mov	r21, r20
     7ba:	43 2f       	mov	r20, r19
     7bc:	32 2f       	mov	r19, r18
     7be:	22 27       	eor	r18, r18
     7c0:	28 0f       	add	r18, r24
     7c2:	31 1d       	adc	r19, r1
     7c4:	41 1d       	adc	r20, r1
     7c6:	51 1d       	adc	r21, r1
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	44 1f       	adc	r20, r20
     7d0:	55 1f       	adc	r21, r21
     7d2:	8a 95       	dec	r24
     7d4:	d1 f7       	brne	.-12     	; 0x7ca <micros+0x3a>
     7d6:	b9 01       	movw	r22, r18
     7d8:	ca 01       	movw	r24, r20
     7da:	08 95       	ret

000007dc <init>:
     7dc:	78 94       	sei
     7de:	84 b5       	in	r24, 0x24	; 36
     7e0:	82 60       	ori	r24, 0x02	; 2
     7e2:	84 bd       	out	0x24, r24	; 36
     7e4:	84 b5       	in	r24, 0x24	; 36
     7e6:	81 60       	ori	r24, 0x01	; 1
     7e8:	84 bd       	out	0x24, r24	; 36
     7ea:	85 b5       	in	r24, 0x25	; 37
     7ec:	82 60       	ori	r24, 0x02	; 2
     7ee:	85 bd       	out	0x25, r24	; 37
     7f0:	85 b5       	in	r24, 0x25	; 37
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	85 bd       	out	0x25, r24	; 37
     7f6:	ee e6       	ldi	r30, 0x6E	; 110
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	81 60       	ori	r24, 0x01	; 1
     7fe:	80 83       	st	Z, r24
     800:	e1 e8       	ldi	r30, 0x81	; 129
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	10 82       	st	Z, r1
     806:	80 81       	ld	r24, Z
     808:	82 60       	ori	r24, 0x02	; 2
     80a:	80 83       	st	Z, r24
     80c:	80 81       	ld	r24, Z
     80e:	81 60       	ori	r24, 0x01	; 1
     810:	80 83       	st	Z, r24
     812:	e0 e8       	ldi	r30, 0x80	; 128
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	81 60       	ori	r24, 0x01	; 1
     81a:	80 83       	st	Z, r24
     81c:	e1 eb       	ldi	r30, 0xB1	; 177
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	84 60       	ori	r24, 0x04	; 4
     824:	80 83       	st	Z, r24
     826:	e0 eb       	ldi	r30, 0xB0	; 176
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	80 83       	st	Z, r24
     830:	ea e7       	ldi	r30, 0x7A	; 122
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	84 60       	ori	r24, 0x04	; 4
     838:	80 83       	st	Z, r24
     83a:	80 81       	ld	r24, Z
     83c:	82 60       	ori	r24, 0x02	; 2
     83e:	80 83       	st	Z, r24
     840:	80 81       	ld	r24, Z
     842:	81 60       	ori	r24, 0x01	; 1
     844:	80 83       	st	Z, r24
     846:	80 81       	ld	r24, Z
     848:	80 68       	ori	r24, 0x80	; 128
     84a:	80 83       	st	Z, r24
     84c:	10 92 c1 00 	sts	0x00C1, r1
     850:	08 95       	ret

00000852 <StepperMotorAxis::speedToDelayBetweenSteps(unsigned int)>:
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	7b 01       	movw	r14, r22
     85c:	fc 01       	movw	r30, r24
     85e:	22 81       	ldd	r18, Z+2	; 0x02
     860:	33 81       	ldd	r19, Z+3	; 0x03
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	77 e8       	ldi	r23, 0x87	; 135
     86a:	83 e9       	ldi	r24, 0x93	; 147
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     872:	ca 01       	movw	r24, r20
     874:	b9 01       	movw	r22, r18
     876:	24 e6       	ldi	r18, 0x64	; 100
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	a8 01       	movw	r20, r16
     888:	97 01       	movw	r18, r14
     88a:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     88e:	ca 01       	movw	r24, r20
     890:	b9 01       	movw	r22, r18
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	08 95       	ret

0000089c <global constructors keyed to repRapMode>:
     89c:	84 e1       	ldi	r24, 0x14	; 20
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	90 93 62 01 	sts	0x0162, r25
     8a4:	80 93 61 01 	sts	0x0161, r24
     8a8:	90 93 68 01 	sts	0x0168, r25
     8ac:	80 93 67 01 	sts	0x0167, r24
     8b0:	90 93 6e 01 	sts	0x016E, r25
     8b4:	80 93 6d 01 	sts	0x016D, r24
     8b8:	90 93 74 01 	sts	0x0174, r25
     8bc:	80 93 73 01 	sts	0x0173, r24
     8c0:	90 93 7a 01 	sts	0x017A, r25
     8c4:	80 93 79 01 	sts	0x0179, r24
     8c8:	8c e1       	ldi	r24, 0x1C	; 28
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	90 93 80 01 	sts	0x0180, r25
     8d0:	80 93 7f 01 	sts	0x017F, r24
     8d4:	e6 e8       	ldi	r30, 0x86	; 134
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	86 e0       	ldi	r24, 0x06	; 6
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	91 83       	std	Z+1, r25	; 0x01
     8de:	80 83       	st	Z, r24
     8e0:	35 96       	adiw	r30, 0x05	; 5
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	eb 3d       	cpi	r30, 0xDB	; 219
     8e6:	f2 07       	cpc	r31, r18
     8e8:	c9 f7       	brne	.-14     	; 0x8dc <global constructors keyed to repRapMode+0x40>
     8ea:	3f 96       	adiw	r30, 0x0f	; 15
     8ec:	8e e0       	ldi	r24, 0x0E	; 14
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	80 83       	st	Z, r24
     8f4:	35 96       	adiw	r30, 0x05	; 5
     8f6:	22 e0       	ldi	r18, 0x02	; 2
     8f8:	e7 31       	cpi	r30, 0x17	; 23
     8fa:	f2 07       	cpc	r31, r18
     8fc:	c9 f7       	brne	.-14     	; 0x8f0 <global constructors keyed to repRapMode+0x54>
     8fe:	82 e2       	ldi	r24, 0x22	; 34
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	92 87       	std	Z+10, r25	; 0x0a
     904:	81 87       	std	Z+9, r24	; 0x09
     906:	95 8b       	std	Z+21, r25	; 0x15
     908:	84 8b       	std	Z+20, r24	; 0x14
     90a:	90 a3       	std	Z+32, r25	; 0x20
     90c:	87 8f       	std	Z+31, r24	; 0x1f
     90e:	93 a7       	std	Z+43, r25	; 0x2b
     910:	82 a7       	std	Z+42, r24	; 0x2a
     912:	2c e1       	ldi	r18, 0x1C	; 28
     914:	31 e0       	ldi	r19, 0x01	; 1
     916:	30 93 cb 02 	sts	0x02CB, r19
     91a:	20 93 ca 02 	sts	0x02CA, r18
     91e:	84 e1       	ldi	r24, 0x14	; 20
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	90 93 d0 02 	sts	0x02D0, r25
     926:	80 93 cf 02 	sts	0x02CF, r24
     92a:	30 93 d6 02 	sts	0x02D6, r19
     92e:	20 93 d5 02 	sts	0x02D5, r18
     932:	30 93 db 02 	sts	0x02DB, r19
     936:	20 93 da 02 	sts	0x02DA, r18
     93a:	08 95       	ret

0000093c <printHelp()>:
     93c:	86 e4       	ldi	r24, 0x46	; 70
     93e:	94 e0       	ldi	r25, 0x04	; 4
     940:	6b e2       	ldi	r22, 0x2B	; 43
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
     948:	08 95       	ret

0000094a <showError(char const*)>:
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	7c 01       	movw	r14, r24
     954:	06 e4       	ldi	r16, 0x46	; 70
     956:	14 e0       	ldi	r17, 0x04	; 4
     958:	c8 01       	movw	r24, r16
     95a:	67 ed       	ldi	r22, 0xD7	; 215
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
     962:	c8 01       	movw	r24, r16
     964:	b7 01       	movw	r22, r14
     966:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
     96a:	c8 01       	movw	r24, r16
     96c:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
     970:	0e 94 9e 04 	call	0x93c	; 0x93c <printHelp()>
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	08 95       	ret

0000097e <doAxis(char const*, char*, StepperMotorAxis&)>:
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	8c 01       	movw	r16, r24
     98c:	7b 01       	movw	r14, r22
     98e:	ea 01       	movw	r28, r20
     990:	86 e4       	ldi	r24, 0x46	; 70
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	b8 01       	movw	r22, r16
     996:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
     99a:	10 93 52 01 	sts	0x0152, r17
     99e:	00 93 51 01 	sts	0x0151, r16
     9a2:	d0 93 54 01 	sts	0x0154, r29
     9a6:	c0 93 53 01 	sts	0x0153, r28
     9aa:	c7 01       	movw	r24, r14
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	f7 01       	movw	r30, r14
     9b0:	20 81       	ld	r18, Z
     9b2:	27 36       	cpi	r18, 0x67	; 103
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <doAxis(char const*, char*, StepperMotorAxis&)+0x3a>
     9b6:	4a c0       	rjmp	.+148    	; 0xa4c <doAxis(char const*, char*, StepperMotorAxis&)+0xce>
     9b8:	28 36       	cpi	r18, 0x68	; 104
     9ba:	a0 f4       	brcc	.+40     	; 0x9e4 <doAxis(char const*, char*, StepperMotorAxis&)+0x66>
     9bc:	24 35       	cpi	r18, 0x54	; 84
     9be:	09 f4       	brne	.+2      	; 0x9c2 <doAxis(char const*, char*, StepperMotorAxis&)+0x44>
     9c0:	e7 c0       	rjmp	.+462    	; 0xb90 <doAxis(char const*, char*, StepperMotorAxis&)+0x212>
     9c2:	25 35       	cpi	r18, 0x55	; 85
     9c4:	38 f4       	brcc	.+14     	; 0x9d4 <doAxis(char const*, char*, StepperMotorAxis&)+0x56>
     9c6:	27 34       	cpi	r18, 0x47	; 71
     9c8:	09 f4       	brne	.+2      	; 0x9cc <doAxis(char const*, char*, StepperMotorAxis&)+0x4e>
     9ca:	c1 c0       	rjmp	.+386    	; 0xb4e <doAxis(char const*, char*, StepperMotorAxis&)+0x1d0>
     9cc:	21 35       	cpi	r18, 0x51	; 81
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <doAxis(char const*, char*, StepperMotorAxis&)+0x54>
     9d0:	0d c1       	rjmp	.+538    	; 0xbec <doAxis(char const*, char*, StepperMotorAxis&)+0x26e>
     9d2:	88 c0       	rjmp	.+272    	; 0xae4 <doAxis(char const*, char*, StepperMotorAxis&)+0x166>
     9d4:	24 36       	cpi	r18, 0x64	; 100
     9d6:	19 f1       	breq	.+70     	; 0xa1e <doAxis(char const*, char*, StepperMotorAxis&)+0xa0>
     9d8:	25 36       	cpi	r18, 0x65	; 101
     9da:	d9 f0       	breq	.+54     	; 0xa12 <doAxis(char const*, char*, StepperMotorAxis&)+0x94>
     9dc:	29 35       	cpi	r18, 0x59	; 89
     9de:	09 f0       	breq	.+2      	; 0x9e2 <doAxis(char const*, char*, StepperMotorAxis&)+0x64>
     9e0:	05 c1       	rjmp	.+522    	; 0xbec <doAxis(char const*, char*, StepperMotorAxis&)+0x26e>
     9e2:	58 c0       	rjmp	.+176    	; 0xa94 <doAxis(char const*, char*, StepperMotorAxis&)+0x116>
     9e4:	20 37       	cpi	r18, 0x70	; 112
     9e6:	09 f4       	brne	.+2      	; 0x9ea <doAxis(char const*, char*, StepperMotorAxis&)+0x6c>
     9e8:	fd c0       	rjmp	.+506    	; 0xbe4 <doAxis(char const*, char*, StepperMotorAxis&)+0x266>
     9ea:	21 37       	cpi	r18, 0x71	; 113
     9ec:	30 f4       	brcc	.+12     	; 0x9fa <doAxis(char const*, char*, StepperMotorAxis&)+0x7c>
     9ee:	28 36       	cpi	r18, 0x68	; 104
     9f0:	01 f1       	breq	.+64     	; 0xa32 <doAxis(char const*, char*, StepperMotorAxis&)+0xb4>
     9f2:	2d 36       	cpi	r18, 0x6D	; 109
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <doAxis(char const*, char*, StepperMotorAxis&)+0x7a>
     9f6:	fa c0       	rjmp	.+500    	; 0xbec <doAxis(char const*, char*, StepperMotorAxis&)+0x26e>
     9f8:	32 c0       	rjmp	.+100    	; 0xa5e <doAxis(char const*, char*, StepperMotorAxis&)+0xe0>
     9fa:	23 37       	cpi	r18, 0x73	; 115
     9fc:	31 f0       	breq	.+12     	; 0xa0a <doAxis(char const*, char*, StepperMotorAxis&)+0x8c>
     9fe:	29 37       	cpi	r18, 0x79	; 121
     a00:	f1 f1       	breq	.+124    	; 0xa7e <doAxis(char const*, char*, StepperMotorAxis&)+0x100>
     a02:	21 37       	cpi	r18, 0x71	; 113
     a04:	09 f0       	breq	.+2      	; 0xa08 <doAxis(char const*, char*, StepperMotorAxis&)+0x8a>
     a06:	f2 c0       	rjmp	.+484    	; 0xbec <doAxis(char const*, char*, StepperMotorAxis&)+0x26e>
     a08:	62 c0       	rjmp	.+196    	; 0xace <doAxis(char const*, char*, StepperMotorAxis&)+0x150>
     a0a:	ce 01       	movw	r24, r28
     a0c:	0a 96       	adiw	r24, 0x0a	; 10
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <doAxis(char const*, char*, StepperMotorAxis&)+0x9a>
     a12:	ce 01       	movw	r24, r28
     a14:	0a 96       	adiw	r24, 0x0a	; 10
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
     a1c:	ec c0       	rjmp	.+472    	; 0xbf6 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	80 93 4f 01 	sts	0x014F, r24
     a24:	86 e4       	ldi	r24, 0x46	; 70
     a26:	94 e0       	ldi	r25, 0x04	; 4
     a28:	65 ea       	ldi	r22, 0xA5	; 165
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
     a30:	ac c0       	rjmp	.+344    	; 0xb8a <doAxis(char const*, char*, StepperMotorAxis&)+0x20c>
     a32:	6c 81       	ldd	r22, Y+4	; 0x04
     a34:	7d 81       	ldd	r23, Y+5	; 0x05
     a36:	88 27       	eor	r24, r24
     a38:	77 fd       	sbrc	r23, 7
     a3a:	80 95       	com	r24
     a3c:	98 2f       	mov	r25, r24
     a3e:	28 ee       	ldi	r18, 0xE8	; 232
     a40:	33 e0       	ldi	r19, 0x03	; 3
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     a4a:	13 c0       	rjmp	.+38     	; 0xa72 <doAxis(char const*, char*, StepperMotorAxis&)+0xf4>
     a4c:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <atol>
     a50:	ab 01       	movw	r20, r22
     a52:	bc 01       	movw	r22, r24
     a54:	ce 01       	movw	r24, r28
     a56:	0a 96       	adiw	r24, 0x0a	; 10
     a58:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <StepperMotorControlWithButtons::gotoStep(long)>
     a5c:	cc c0       	rjmp	.+408    	; 0xbf6 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     a5e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <atof>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	4a e7       	ldi	r20, 0x7A	; 122
     a68:	54 e4       	ldi	r21, 0x44	; 68
     a6a:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__mulsf3>
     a6e:	0e 94 06 20 	call	0x400c	; 0x400c <__fixsfsi>
     a72:	ab 01       	movw	r20, r22
     a74:	bc 01       	movw	r22, r24
     a76:	ce 01       	movw	r24, r28
     a78:	0e 94 03 16 	call	0x2c06	; 0x2c06 <StepperMotorAxis::moveToPositionMicroMFast(long)>
     a7c:	bc c0       	rjmp	.+376    	; 0xbf6 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     a7e:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <atol>
     a82:	6e 83       	std	Y+6, r22	; 0x06
     a84:	7f 83       	std	Y+7, r23	; 0x07
     a86:	88 87       	std	Y+8, r24	; 0x08
     a88:	99 87       	std	Y+9, r25	; 0x09
     a8a:	6d 8b       	std	Y+21, r22	; 0x15
     a8c:	7e 8b       	std	Y+22, r23	; 0x16
     a8e:	8f 8b       	std	Y+23, r24	; 0x17
     a90:	98 8f       	std	Y+24, r25	; 0x18
     a92:	b1 c0       	rjmp	.+354    	; 0xbf6 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     a94:	80 91 21 03 	lds	r24, 0x0321
     a98:	90 91 22 03 	lds	r25, 0x0322
     a9c:	44 e6       	ldi	r20, 0x64	; 100
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	00 e1       	ldi	r16, 0x10	; 16
     aa6:	17 e2       	ldi	r17, 0x27	; 39
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	0e 94 7e 11 	call	0x22fc	; 0x22fc <RotaryEncoderState::setMinMax(long, long)>
     ab0:	1f b7       	in	r17, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	4e 81       	ldd	r20, Y+6	; 0x06
     ab6:	5f 81       	ldd	r21, Y+7	; 0x07
     ab8:	68 85       	ldd	r22, Y+8	; 0x08
     aba:	79 85       	ldd	r23, Y+9	; 0x09
     abc:	80 91 21 03 	lds	r24, 0x0321
     ac0:	90 91 22 03 	lds	r25, 0x0322
     ac4:	0e 94 0d 11 	call	0x221a	; 0x221a <RotaryEncoderState::setValue_unsafe(long)>
     ac8:	1f bf       	out	0x3f, r17	; 63
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	5c c0       	rjmp	.+184    	; 0xb86 <doAxis(char const*, char*, StepperMotorAxis&)+0x208>
     ace:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <atoi>
     ad2:	bc 01       	movw	r22, r24
     ad4:	ce 01       	movw	r24, r28
     ad6:	0e 94 29 04 	call	0x852	; 0x852 <StepperMotorAxis::speedToDelayBetweenSteps(unsigned int)>
     ada:	6d 8b       	std	Y+21, r22	; 0x15
     adc:	7e 8b       	std	Y+22, r23	; 0x16
     ade:	8f 8b       	std	Y+23, r24	; 0x17
     ae0:	98 8f       	std	Y+24, r25	; 0x18
     ae2:	33 c0       	rjmp	.+102    	; 0xb4a <doAxis(char const*, char*, StepperMotorAxis&)+0x1cc>
     ae4:	80 91 21 03 	lds	r24, 0x0321
     ae8:	90 91 22 03 	lds	r25, 0x0322
     aec:	4e e1       	ldi	r20, 0x1E	; 30
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	00 e7       	ldi	r16, 0x70	; 112
     af6:	17 e1       	ldi	r17, 0x17	; 23
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	0e 94 7e 11 	call	0x22fc	; 0x22fc <RotaryEncoderState::setMinMax(long, long)>
     b00:	1f b7       	in	r17, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	2a 81       	ldd	r18, Y+2	; 0x02
     b06:	3b 81       	ldd	r19, Y+3	; 0x03
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	77 e8       	ldi	r23, 0x87	; 135
     b10:	83 e9       	ldi	r24, 0x93	; 147
     b12:	93 e0       	ldi	r25, 0x03	; 3
     b14:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     b18:	ca 01       	movw	r24, r20
     b1a:	b9 01       	movw	r22, r18
     b1c:	24 e6       	ldi	r18, 0x64	; 100
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     b28:	2d 89       	ldd	r18, Y+21	; 0x15
     b2a:	3e 89       	ldd	r19, Y+22	; 0x16
     b2c:	4f 89       	ldd	r20, Y+23	; 0x17
     b2e:	58 8d       	ldd	r21, Y+24	; 0x18
     b30:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	80 91 21 03 	lds	r24, 0x0321
     b3c:	90 91 22 03 	lds	r25, 0x0322
     b40:	ba 01       	movw	r22, r20
     b42:	a9 01       	movw	r20, r18
     b44:	0e 94 0d 11 	call	0x221a	; 0x221a <RotaryEncoderState::setValue_unsafe(long)>
     b48:	1f bf       	out	0x3f, r17	; 63
     b4a:	84 e0       	ldi	r24, 0x04	; 4
     b4c:	1c c0       	rjmp	.+56     	; 0xb86 <doAxis(char const*, char*, StepperMotorAxis&)+0x208>
     b4e:	80 91 21 03 	lds	r24, 0x0321
     b52:	90 91 22 03 	lds	r25, 0x0322
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	00 e1       	ldi	r16, 0x10	; 16
     b60:	17 e2       	ldi	r17, 0x27	; 39
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	0e 94 7e 11 	call	0x22fc	; 0x22fc <RotaryEncoderState::setMinMax(long, long)>
     b6a:	1f b7       	in	r17, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	4c 85       	ldd	r20, Y+12	; 0x0c
     b70:	5d 85       	ldd	r21, Y+13	; 0x0d
     b72:	6e 85       	ldd	r22, Y+14	; 0x0e
     b74:	7f 85       	ldd	r23, Y+15	; 0x0f
     b76:	80 91 21 03 	lds	r24, 0x0321
     b7a:	90 91 22 03 	lds	r25, 0x0322
     b7e:	0e 94 0d 11 	call	0x221a	; 0x221a <RotaryEncoderState::setValue_unsafe(long)>
     b82:	1f bf       	out	0x3f, r17	; 63
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	80 93 4f 01 	sts	0x014F, r24
     b8a:	10 92 50 01 	sts	0x0150, r1
     b8e:	33 c0       	rjmp	.+102    	; 0xbf6 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     b90:	80 91 21 03 	lds	r24, 0x0321
     b94:	90 91 22 03 	lds	r25, 0x0322
     b98:	48 e0       	ldi	r20, 0x08	; 8
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	00 ed       	ldi	r16, 0xD0	; 208
     ba2:	17 e0       	ldi	r17, 0x07	; 7
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	0e 94 7e 11 	call	0x22fc	; 0x22fc <RotaryEncoderState::setMinMax(long, long)>
     bac:	1f b7       	in	r17, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	80 91 21 03 	lds	r24, 0x0321
     bb4:	90 91 22 03 	lds	r25, 0x0322
     bb8:	48 ee       	ldi	r20, 0xE8	; 232
     bba:	53 e0       	ldi	r21, 0x03	; 3
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	0e 94 0d 11 	call	0x221a	; 0x221a <RotaryEncoderState::setValue_unsafe(long)>
     bc4:	1f bf       	out	0x3f, r17	; 63
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	80 93 4f 01 	sts	0x014F, r24
     bcc:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
     bd0:	60 93 59 01 	sts	0x0159, r22
     bd4:	70 93 5a 01 	sts	0x015A, r23
     bd8:	80 93 5b 01 	sts	0x015B, r24
     bdc:	90 93 5c 01 	sts	0x015C, r25
     be0:	10 92 50 01 	sts	0x0150, r1
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 dd 14 	call	0x29ba	; 0x29ba <StepperMotorAxis::debugPrint()>
     bea:	0b c0       	rjmp	.+22     	; 0xc02 <doAxis(char const*, char*, StepperMotorAxis&)+0x284>
     bec:	80 e9       	ldi	r24, 0x90	; 144
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 a5 04 	call	0x94a	; 0x94a <showError(char const*)>
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <doAxis(char const*, char*, StepperMotorAxis&)+0x284>
     bf6:	86 e4       	ldi	r24, 0x46	; 70
     bf8:	94 e0       	ldi	r25, 0x04	; 4
     bfa:	6d e8       	ldi	r22, 0x8D	; 141
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	08 95       	ret

00000c10 <doAlterDelayBetweenSteps()>:
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	e0 91 21 03 	lds	r30, 0x0321
     c1c:	f0 91 22 03 	lds	r31, 0x0322
     c20:	86 85       	ldd	r24, Z+14	; 0x0e
     c22:	88 23       	and	r24, r24
     c24:	51 f1       	breq	.+84     	; 0xc7a <doAlterDelayBetweenSteps()+0x6a>
     c26:	8f b7       	in	r24, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	16 86       	std	Z+14, r1	; 0x0e
     c2c:	e0 84       	ldd	r14, Z+8	; 0x08
     c2e:	f1 84       	ldd	r15, Z+9	; 0x09
     c30:	02 85       	ldd	r16, Z+10	; 0x0a
     c32:	13 85       	ldd	r17, Z+11	; 0x0b
     c34:	8f bf       	out	0x3f, r24	; 63
     c36:	60 91 51 01 	lds	r22, 0x0151
     c3a:	70 91 52 01 	lds	r23, 0x0152
     c3e:	86 e4       	ldi	r24, 0x46	; 70
     c40:	94 e0       	ldi	r25, 0x04	; 4
     c42:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
     c46:	86 e4       	ldi	r24, 0x46	; 70
     c48:	94 e0       	ldi	r25, 0x04	; 4
     c4a:	6e ed       	ldi	r22, 0xDE	; 222
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
     c52:	86 e4       	ldi	r24, 0x46	; 70
     c54:	94 e0       	ldi	r25, 0x04	; 4
     c56:	b8 01       	movw	r22, r16
     c58:	a7 01       	movw	r20, r14
     c5a:	2a e0       	ldi	r18, 0x0A	; 10
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <Print::println(long, int)>
     c62:	e0 91 53 01 	lds	r30, 0x0153
     c66:	f0 91 54 01 	lds	r31, 0x0154
     c6a:	e6 82       	std	Z+6, r14	; 0x06
     c6c:	f7 82       	std	Z+7, r15	; 0x07
     c6e:	00 87       	std	Z+8, r16	; 0x08
     c70:	11 87       	std	Z+9, r17	; 0x09
     c72:	e5 8a       	std	Z+21, r14	; 0x15
     c74:	f6 8a       	std	Z+22, r15	; 0x16
     c76:	07 8b       	std	Z+23, r16	; 0x17
     c78:	10 8f       	std	Z+24, r17	; 0x18
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	08 95       	ret

00000c84 <doGotoStep()>:
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	e0 91 21 03 	lds	r30, 0x0321
     c90:	f0 91 22 03 	lds	r31, 0x0322
     c94:	86 85       	ldd	r24, Z+14	; 0x0e
     c96:	88 23       	and	r24, r24
     c98:	61 f1       	breq	.+88     	; 0xcf2 <doGotoStep()+0x6e>
     c9a:	8f b7       	in	r24, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	16 86       	std	Z+14, r1	; 0x0e
     ca0:	e0 84       	ldd	r14, Z+8	; 0x08
     ca2:	f1 84       	ldd	r15, Z+9	; 0x09
     ca4:	02 85       	ldd	r16, Z+10	; 0x0a
     ca6:	13 85       	ldd	r17, Z+11	; 0x0b
     ca8:	8f bf       	out	0x3f, r24	; 63
     caa:	60 91 51 01 	lds	r22, 0x0151
     cae:	70 91 52 01 	lds	r23, 0x0152
     cb2:	86 e4       	ldi	r24, 0x46	; 70
     cb4:	94 e0       	ldi	r25, 0x04	; 4
     cb6:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
     cba:	86 e4       	ldi	r24, 0x46	; 70
     cbc:	94 e0       	ldi	r25, 0x04	; 4
     cbe:	67 ef       	ldi	r22, 0xF7	; 247
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
     cc6:	86 e4       	ldi	r24, 0x46	; 70
     cc8:	94 e0       	ldi	r25, 0x04	; 4
     cca:	b8 01       	movw	r22, r16
     ccc:	a7 01       	movw	r20, r14
     cce:	2a e0       	ldi	r18, 0x0A	; 10
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <Print::println(long, int)>
     cd6:	e0 91 53 01 	lds	r30, 0x0153
     cda:	f0 91 54 01 	lds	r31, 0x0154
     cde:	e6 82       	std	Z+6, r14	; 0x06
     ce0:	f7 82       	std	Z+7, r15	; 0x07
     ce2:	00 87       	std	Z+8, r16	; 0x08
     ce4:	11 87       	std	Z+9, r17	; 0x09
     ce6:	cf 01       	movw	r24, r30
     ce8:	0a 96       	adiw	r24, 0x0a	; 10
     cea:	b8 01       	movw	r22, r16
     cec:	a7 01       	movw	r20, r14
     cee:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <StepperMotorControlWithButtons::gotoStep(long)>
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	08 95       	ret

00000cfc <doMoveForthAndBackAtSpeed()>:
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	e0 91 21 03 	lds	r30, 0x0321
     d10:	f0 91 22 03 	lds	r31, 0x0322
     d14:	86 85       	ldd	r24, Z+14	; 0x0e
     d16:	88 23       	and	r24, r24
     d18:	61 f1       	breq	.+88     	; 0xd72 <doMoveForthAndBackAtSpeed()+0x76>
     d1a:	8f b7       	in	r24, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	16 86       	std	Z+14, r1	; 0x0e
     d20:	c0 84       	ldd	r12, Z+8	; 0x08
     d22:	d1 84       	ldd	r13, Z+9	; 0x09
     d24:	e2 84       	ldd	r14, Z+10	; 0x0a
     d26:	f3 84       	ldd	r15, Z+11	; 0x0b
     d28:	8f bf       	out	0x3f, r24	; 63
     d2a:	60 91 51 01 	lds	r22, 0x0151
     d2e:	70 91 52 01 	lds	r23, 0x0152
     d32:	86 e4       	ldi	r24, 0x46	; 70
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
     d3a:	86 e4       	ldi	r24, 0x46	; 70
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	64 e0       	ldi	r22, 0x04	; 4
     d40:	71 e0       	ldi	r23, 0x01	; 1
     d42:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
     d46:	86 e4       	ldi	r24, 0x46	; 70
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	b6 01       	movw	r22, r12
     d4c:	4a e0       	ldi	r20, 0x0A	; 10
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 88 1b 	call	0x3710	; 0x3710 <Print::println(unsigned int, int)>
     d54:	00 91 53 01 	lds	r16, 0x0153
     d58:	10 91 54 01 	lds	r17, 0x0154
     d5c:	c8 01       	movw	r24, r16
     d5e:	b6 01       	movw	r22, r12
     d60:	0e 94 29 04 	call	0x852	; 0x852 <StepperMotorAxis::speedToDelayBetweenSteps(unsigned int)>
     d64:	d8 01       	movw	r26, r16
     d66:	55 96       	adiw	r26, 0x15	; 21
     d68:	6d 93       	st	X+, r22
     d6a:	7d 93       	st	X+, r23
     d6c:	8d 93       	st	X+, r24
     d6e:	9c 93       	st	X, r25
     d70:	58 97       	sbiw	r26, 0x18	; 24
     d72:	80 91 50 01 	lds	r24, 0x0150
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	09 f4       	brne	.+2      	; 0xd7c <doMoveForthAndBackAtSpeed()+0x80>
     d7a:	48 c0       	rjmp	.+144    	; 0xe0c <doMoveForthAndBackAtSpeed()+0x110>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	38 f0       	brcs	.+14     	; 0xd8e <doMoveForthAndBackAtSpeed()+0x92>
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	09 f4       	brne	.+2      	; 0xd86 <doMoveForthAndBackAtSpeed()+0x8a>
     d84:	6c c0       	rjmp	.+216    	; 0xe5e <doMoveForthAndBackAtSpeed()+0x162>
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	09 f0       	breq	.+2      	; 0xd8c <doMoveForthAndBackAtSpeed()+0x90>
     d8a:	f9 c0       	rjmp	.+498    	; 0xf7e <doMoveForthAndBackAtSpeed()+0x282>
     d8c:	b0 c0       	rjmp	.+352    	; 0xeee <doMoveForthAndBackAtSpeed()+0x1f2>
     d8e:	80 91 53 01 	lds	r24, 0x0153
     d92:	90 91 54 01 	lds	r25, 0x0154
     d96:	0e 94 16 14 	call	0x282c	; 0x282c <StepperMotorAxis::getAbsolutePositionMicroM()>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
     d9e:	a0 90 53 01 	lds	r10, 0x0153
     da2:	b0 90 54 01 	lds	r11, 0x0154
     da6:	80 e6       	ldi	r24, 0x60	; 96
     da8:	99 e7       	ldi	r25, 0x79	; 121
     daa:	ae ef       	ldi	r26, 0xFE	; 254
     dac:	bf ef       	ldi	r27, 0xFF	; 255
     dae:	c8 0e       	add	r12, r24
     db0:	d9 1e       	adc	r13, r25
     db2:	ea 1e       	adc	r14, r26
     db4:	fb 1e       	adc	r15, r27
     db6:	d5 01       	movw	r26, r10
     db8:	55 96       	adiw	r26, 0x15	; 21
     dba:	6d 91       	ld	r22, X+
     dbc:	7d 91       	ld	r23, X+
     dbe:	8d 91       	ld	r24, X+
     dc0:	9c 91       	ld	r25, X
     dc2:	58 97       	sbiw	r26, 0x18	; 24
     dc4:	20 ea       	ldi	r18, 0xA0	; 160
     dc6:	36 e8       	ldi	r19, 0x86	; 134
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     dd0:	28 ee       	ldi	r18, 0xE8	; 232
     dd2:	33 e0       	ldi	r19, 0x03	; 3
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     ddc:	ca 01       	movw	r24, r20
     dde:	b9 01       	movw	r22, r18
     de0:	f5 01       	movw	r30, r10
     de2:	22 81       	ldd	r18, Z+2	; 0x02
     de4:	33 81       	ldd	r19, Z+3	; 0x03
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     dee:	24 e6       	ldi	r18, 0x64	; 100
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     dfa:	89 01       	movw	r16, r18
     dfc:	9a 01       	movw	r18, r20
     dfe:	c5 01       	movw	r24, r10
     e00:	b7 01       	movw	r22, r14
     e02:	a6 01       	movw	r20, r12
     e04:	0e 94 83 16 	call	0x2d06	; 0x2d06 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	b7 c0       	rjmp	.+366    	; 0xf7a <doMoveForthAndBackAtSpeed()+0x27e>
     e0c:	e0 91 53 01 	lds	r30, 0x0153
     e10:	f0 91 54 01 	lds	r31, 0x0154
     e14:	80 81       	ld	r24, Z
     e16:	88 23       	and	r24, r24
     e18:	09 f0       	breq	.+2      	; 0xe1c <doMoveForthAndBackAtSpeed()+0x120>
     e1a:	b1 c0       	rjmp	.+354    	; 0xf7e <doMoveForthAndBackAtSpeed()+0x282>
     e1c:	84 89       	ldd	r24, Z+20	; 0x14
     e1e:	88 23       	and	r24, r24
     e20:	09 f0       	breq	.+2      	; 0xe24 <doMoveForthAndBackAtSpeed()+0x128>
     e22:	ad c0       	rjmp	.+346    	; 0xf7e <doMoveForthAndBackAtSpeed()+0x282>
     e24:	cf 01       	movw	r24, r30
     e26:	0e 94 16 14 	call	0x282c	; 0x282c <StepperMotorAxis::getAbsolutePositionMicroM()>
     e2a:	6b 01       	movw	r12, r22
     e2c:	7c 01       	movw	r14, r24
     e2e:	a0 90 53 01 	lds	r10, 0x0153
     e32:	b0 90 54 01 	lds	r11, 0x0154
     e36:	80 ea       	ldi	r24, 0xA0	; 160
     e38:	96 e8       	ldi	r25, 0x86	; 134
     e3a:	a1 e0       	ldi	r26, 0x01	; 1
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	c8 0e       	add	r12, r24
     e40:	d9 1e       	adc	r13, r25
     e42:	ea 1e       	adc	r14, r26
     e44:	fb 1e       	adc	r15, r27
     e46:	d5 01       	movw	r26, r10
     e48:	55 96       	adiw	r26, 0x15	; 21
     e4a:	6d 91       	ld	r22, X+
     e4c:	7d 91       	ld	r23, X+
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	58 97       	sbiw	r26, 0x18	; 24
     e54:	20 ea       	ldi	r18, 0xA0	; 160
     e56:	36 e8       	ldi	r19, 0x86	; 134
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	6f c0       	rjmp	.+222    	; 0xf3c <doMoveForthAndBackAtSpeed()+0x240>
     e5e:	e0 91 53 01 	lds	r30, 0x0153
     e62:	f0 91 54 01 	lds	r31, 0x0154
     e66:	80 81       	ld	r24, Z
     e68:	88 23       	and	r24, r24
     e6a:	09 f0       	breq	.+2      	; 0xe6e <doMoveForthAndBackAtSpeed()+0x172>
     e6c:	88 c0       	rjmp	.+272    	; 0xf7e <doMoveForthAndBackAtSpeed()+0x282>
     e6e:	84 89       	ldd	r24, Z+20	; 0x14
     e70:	88 23       	and	r24, r24
     e72:	09 f0       	breq	.+2      	; 0xe76 <doMoveForthAndBackAtSpeed()+0x17a>
     e74:	84 c0       	rjmp	.+264    	; 0xf7e <doMoveForthAndBackAtSpeed()+0x282>
     e76:	cf 01       	movw	r24, r30
     e78:	0e 94 16 14 	call	0x282c	; 0x282c <StepperMotorAxis::getAbsolutePositionMicroM()>
     e7c:	6b 01       	movw	r12, r22
     e7e:	7c 01       	movw	r14, r24
     e80:	a0 90 53 01 	lds	r10, 0x0153
     e84:	b0 90 54 01 	lds	r11, 0x0154
     e88:	80 e5       	ldi	r24, 0x50	; 80
     e8a:	93 ec       	ldi	r25, 0xC3	; 195
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	c8 0e       	add	r12, r24
     e92:	d9 1e       	adc	r13, r25
     e94:	ea 1e       	adc	r14, r26
     e96:	fb 1e       	adc	r15, r27
     e98:	d5 01       	movw	r26, r10
     e9a:	55 96       	adiw	r26, 0x15	; 21
     e9c:	6d 91       	ld	r22, X+
     e9e:	7d 91       	ld	r23, X+
     ea0:	8d 91       	ld	r24, X+
     ea2:	9c 91       	ld	r25, X
     ea4:	58 97       	sbiw	r26, 0x18	; 24
     ea6:	20 e5       	ldi	r18, 0x50	; 80
     ea8:	33 ec       	ldi	r19, 0xC3	; 195
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     eb2:	28 ee       	ldi	r18, 0xE8	; 232
     eb4:	33 e0       	ldi	r19, 0x03	; 3
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     ebe:	ca 01       	movw	r24, r20
     ec0:	b9 01       	movw	r22, r18
     ec2:	f5 01       	movw	r30, r10
     ec4:	22 81       	ldd	r18, Z+2	; 0x02
     ec6:	33 81       	ldd	r19, Z+3	; 0x03
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     ed0:	24 e6       	ldi	r18, 0x64	; 100
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     edc:	89 01       	movw	r16, r18
     ede:	9a 01       	movw	r18, r20
     ee0:	c5 01       	movw	r24, r10
     ee2:	b7 01       	movw	r22, r14
     ee4:	a6 01       	movw	r20, r12
     ee6:	0e 94 83 16 	call	0x2d06	; 0x2d06 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	46 c0       	rjmp	.+140    	; 0xf7a <doMoveForthAndBackAtSpeed()+0x27e>
     eee:	e0 91 53 01 	lds	r30, 0x0153
     ef2:	f0 91 54 01 	lds	r31, 0x0154
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	09 f0       	breq	.+2      	; 0xefe <doMoveForthAndBackAtSpeed()+0x202>
     efc:	40 c0       	rjmp	.+128    	; 0xf7e <doMoveForthAndBackAtSpeed()+0x282>
     efe:	84 89       	ldd	r24, Z+20	; 0x14
     f00:	88 23       	and	r24, r24
     f02:	e9 f5       	brne	.+122    	; 0xf7e <doMoveForthAndBackAtSpeed()+0x282>
     f04:	cf 01       	movw	r24, r30
     f06:	0e 94 16 14 	call	0x282c	; 0x282c <StepperMotorAxis::getAbsolutePositionMicroM()>
     f0a:	6b 01       	movw	r12, r22
     f0c:	7c 01       	movw	r14, r24
     f0e:	a0 90 53 01 	lds	r10, 0x0153
     f12:	b0 90 54 01 	lds	r11, 0x0154
     f16:	80 eb       	ldi	r24, 0xB0	; 176
     f18:	9c e3       	ldi	r25, 0x3C	; 60
     f1a:	af ef       	ldi	r26, 0xFF	; 255
     f1c:	bf ef       	ldi	r27, 0xFF	; 255
     f1e:	c8 0e       	add	r12, r24
     f20:	d9 1e       	adc	r13, r25
     f22:	ea 1e       	adc	r14, r26
     f24:	fb 1e       	adc	r15, r27
     f26:	d5 01       	movw	r26, r10
     f28:	55 96       	adiw	r26, 0x15	; 21
     f2a:	6d 91       	ld	r22, X+
     f2c:	7d 91       	ld	r23, X+
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	58 97       	sbiw	r26, 0x18	; 24
     f34:	20 e5       	ldi	r18, 0x50	; 80
     f36:	33 ec       	ldi	r19, 0xC3	; 195
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     f40:	28 ee       	ldi	r18, 0xE8	; 232
     f42:	33 e0       	ldi	r19, 0x03	; 3
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     f4c:	ca 01       	movw	r24, r20
     f4e:	b9 01       	movw	r22, r18
     f50:	f5 01       	movw	r30, r10
     f52:	22 81       	ldd	r18, Z+2	; 0x02
     f54:	33 81       	ldd	r19, Z+3	; 0x03
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
     f5e:	24 e6       	ldi	r18, 0x64	; 100
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
     f6a:	89 01       	movw	r16, r18
     f6c:	9a 01       	movw	r18, r20
     f6e:	c5 01       	movw	r24, r10
     f70:	b7 01       	movw	r22, r14
     f72:	a6 01       	movw	r20, r12
     f74:	0e 94 83 16 	call	0x2d06	; 0x2d06 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	80 93 50 01 	sts	0x0150, r24
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	af 90       	pop	r10
     f8e:	08 95       	ret

00000f90 <doStepTicking()>:
     f90:	6f 92       	push	r6
     f92:	7f 92       	push	r7
     f94:	8f 92       	push	r8
     f96:	9f 92       	push	r9
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	cf 92       	push	r12
     f9e:	df 92       	push	r13
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
     fac:	7b 01       	movw	r14, r22
     fae:	8c 01       	movw	r16, r24
     fb0:	60 90 59 01 	lds	r6, 0x0159
     fb4:	70 90 5a 01 	lds	r7, 0x015A
     fb8:	80 90 5b 01 	lds	r8, 0x015B
     fbc:	90 90 5c 01 	lds	r9, 0x015C
     fc0:	e0 91 21 03 	lds	r30, 0x0321
     fc4:	f0 91 22 03 	lds	r31, 0x0322
     fc8:	86 85       	ldd	r24, Z+14	; 0x0e
     fca:	88 23       	and	r24, r24
     fcc:	c1 f0       	breq	.+48     	; 0xffe <doStepTicking()+0x6e>
     fce:	86 e4       	ldi	r24, 0x46	; 70
     fd0:	94 e0       	ldi	r25, 0x04	; 4
     fd2:	61 e2       	ldi	r22, 0x21	; 33
     fd4:	71 e0       	ldi	r23, 0x01	; 1
     fd6:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
     fda:	e0 91 21 03 	lds	r30, 0x0321
     fde:	f0 91 22 03 	lds	r31, 0x0322
     fe2:	8f b7       	in	r24, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	16 86       	std	Z+14, r1	; 0x0e
     fe8:	40 85       	ldd	r20, Z+8	; 0x08
     fea:	51 85       	ldd	r21, Z+9	; 0x09
     fec:	62 85       	ldd	r22, Z+10	; 0x0a
     fee:	73 85       	ldd	r23, Z+11	; 0x0b
     ff0:	8f bf       	out	0x3f, r24	; 63
     ff2:	86 e4       	ldi	r24, 0x46	; 70
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	2a e0       	ldi	r18, 0x0A	; 10
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <Print::println(long, int)>
     ffe:	e0 91 21 03 	lds	r30, 0x0321
    1002:	f0 91 22 03 	lds	r31, 0x0322
    1006:	8f b7       	in	r24, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	16 86       	std	Z+14, r1	; 0x0e
    100c:	a0 84       	ldd	r10, Z+8	; 0x08
    100e:	b1 84       	ldd	r11, Z+9	; 0x09
    1010:	c2 84       	ldd	r12, Z+10	; 0x0a
    1012:	d3 84       	ldd	r13, Z+11	; 0x0b
    1014:	8f bf       	out	0x3f, r24	; 63
    1016:	e6 18       	sub	r14, r6
    1018:	f7 08       	sbc	r15, r7
    101a:	08 09       	sbc	r16, r8
    101c:	19 09       	sbc	r17, r9
    101e:	ea 14       	cp	r14, r10
    1020:	fb 04       	cpc	r15, r11
    1022:	0c 05       	cpc	r16, r12
    1024:	1d 05       	cpc	r17, r13
    1026:	08 f4       	brcc	.+2      	; 0x102a <doStepTicking()+0x9a>
    1028:	47 c0       	rjmp	.+142    	; 0x10b8 <doStepTicking()+0x128>
    102a:	e0 91 53 01 	lds	r30, 0x0153
    102e:	f0 91 54 01 	lds	r31, 0x0154
    1032:	44 85       	ldd	r20, Z+12	; 0x0c
    1034:	55 85       	ldd	r21, Z+13	; 0x0d
    1036:	66 85       	ldd	r22, Z+14	; 0x0e
    1038:	77 85       	ldd	r23, Z+15	; 0x0f
    103a:	80 91 50 01 	lds	r24, 0x0150
    103e:	88 23       	and	r24, r24
    1040:	41 f0       	breq	.+16     	; 0x1052 <doStepTicking()+0xc2>
    1042:	7a 01       	movw	r14, r20
    1044:	8b 01       	movw	r16, r22
    1046:	08 94       	sec
    1048:	e1 1c       	adc	r14, r1
    104a:	f1 1c       	adc	r15, r1
    104c:	01 1d       	adc	r16, r1
    104e:	11 1d       	adc	r17, r1
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <doStepTicking()+0xd0>
    1052:	7a 01       	movw	r14, r20
    1054:	8b 01       	movw	r16, r22
    1056:	08 94       	sec
    1058:	e1 08       	sbc	r14, r1
    105a:	f1 08       	sbc	r15, r1
    105c:	01 09       	sbc	r16, r1
    105e:	11 09       	sbc	r17, r1
    1060:	cf 01       	movw	r24, r30
    1062:	0a 96       	adiw	r24, 0x0a	; 10
    1064:	b8 01       	movw	r22, r16
    1066:	a7 01       	movw	r20, r14
    1068:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <StepperMotorControlWithButtons::gotoStep(long)>
    106c:	86 e4       	ldi	r24, 0x46	; 70
    106e:	94 e0       	ldi	r25, 0x04	; 4
    1070:	64 e1       	ldi	r22, 0x14	; 20
    1072:	71 e0       	ldi	r23, 0x01	; 1
    1074:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    1078:	86 e4       	ldi	r24, 0x46	; 70
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	b6 01       	movw	r22, r12
    107e:	a5 01       	movw	r20, r10
    1080:	2a e0       	ldi	r18, 0x0A	; 10
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	0e 94 65 1b 	call	0x36ca	; 0x36ca <Print::print(unsigned long, int)>
    1088:	86 e4       	ldi	r24, 0x46	; 70
    108a:	94 e0       	ldi	r25, 0x04	; 4
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	71 e0       	ldi	r23, 0x01	; 1
    1090:	0e 94 2b 1c 	call	0x3856	; 0x3856 <Print::print(char const*)>
    1094:	86 e4       	ldi	r24, 0x46	; 70
    1096:	94 e0       	ldi	r25, 0x04	; 4
    1098:	b8 01       	movw	r22, r16
    109a:	a7 01       	movw	r20, r14
    109c:	2a e0       	ldi	r18, 0x0A	; 10
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <Print::println(long, int)>
    10a4:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    10a8:	60 93 59 01 	sts	0x0159, r22
    10ac:	70 93 5a 01 	sts	0x015A, r23
    10b0:	80 93 5b 01 	sts	0x015B, r24
    10b4:	90 93 5c 01 	sts	0x015C, r25
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	7f 90       	pop	r7
    10ce:	6f 90       	pop	r6
    10d0:	08 95       	ret

000010d2 <stop()>:
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	0c e4       	ldi	r16, 0x4C	; 76
    10d8:	12 e0       	ldi	r17, 0x02	; 2
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 36 14 	call	0x286c	; 0x286c <StepperMotorAxis::stop()>
    10e0:	c8 01       	movw	r24, r16
    10e2:	4f 96       	adiw	r24, 0x1f	; 31
    10e4:	0e 94 36 14 	call	0x286c	; 0x286c <StepperMotorAxis::stop()>
    10e8:	c8 01       	movw	r24, r16
    10ea:	ce 96       	adiw	r24, 0x3e	; 62
    10ec:	0e 94 36 14 	call	0x286c	; 0x286c <StepperMotorAxis::stop()>
    10f0:	89 ea       	ldi	r24, 0xA9	; 169
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	0e 94 36 14 	call	0x286c	; 0x286c <StepperMotorAxis::stop()>
    10f8:	10 92 4f 01 	sts	0x014F, r1
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <RepRapPCBTest::loop()>:
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	81 e6       	ldi	r24, 0x61	; 97
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <RepRapPCB::update()>
    1112:	8f ed       	ldi	r24, 0xDF	; 223
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	0e 94 94 12 	call	0x2528	; 0x2528 <SerialReader::update()>
    111a:	86 ee       	ldi	r24, 0xE6	; 230
    111c:	92 e0       	ldi	r25, 0x02	; 2
    111e:	0e 94 2f 0b 	call	0x165e	; 0x165e <AdvButton::update()>
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 2f 0c 	call	0x185e	; 0x185e <BlinkingLed::update()>
    112a:	80 91 e5 02 	lds	r24, 0x02E5
    112e:	88 23       	and	r24, r24
    1130:	09 f4       	brne	.+2      	; 0x1134 <RepRapPCBTest::loop()+0x32>
    1132:	54 c0       	rjmp	.+168    	; 0x11dc <RepRapPCBTest::loop()+0xda>
    1134:	8f ed       	ldi	r24, 0xDF	; 223
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 86 12 	call	0x250c	; 0x250c <SerialReader::readln()>
    113c:	8c 01       	movw	r16, r24
    113e:	86 e4       	ldi	r24, 0x46	; 70
    1140:	94 e0       	ldi	r25, 0x04	; 4
    1142:	b8 01       	movw	r22, r16
    1144:	0e 94 2e 1c 	call	0x385c	; 0x385c <Print::println(char const*)>
    1148:	e8 01       	movw	r28, r16
    114a:	21 96       	adiw	r28, 0x01	; 1
    114c:	f8 01       	movw	r30, r16
    114e:	00 81       	ld	r16, Z
    1150:	03 37       	cpi	r16, 0x73	; 115
    1152:	e9 f1       	breq	.+122    	; 0x11ce <RepRapPCBTest::loop()+0xcc>
    1154:	04 37       	cpi	r16, 0x74	; 116
    1156:	38 f4       	brcc	.+14     	; 0x1166 <RepRapPCBTest::loop()+0x64>
    1158:	08 36       	cpi	r16, 0x68	; 104
    115a:	b1 f1       	breq	.+108    	; 0x11c8 <RepRapPCBTest::loop()+0xc6>
    115c:	09 36       	cpi	r16, 0x69	; 105
    115e:	51 f0       	breq	.+20     	; 0x1174 <RepRapPCBTest::loop()+0x72>
    1160:	01 36       	cpi	r16, 0x61	; 97
    1162:	c1 f5       	brne	.+112    	; 0x11d4 <RepRapPCBTest::loop()+0xd2>
    1164:	0e c0       	rjmp	.+28     	; 0x1182 <RepRapPCBTest::loop()+0x80>
    1166:	09 37       	cpi	r16, 0x79	; 121
    1168:	19 f1       	breq	.+70     	; 0x11b0 <RepRapPCBTest::loop()+0xae>
    116a:	0a 37       	cpi	r16, 0x7A	; 122
    116c:	39 f1       	breq	.+78     	; 0x11bc <RepRapPCBTest::loop()+0xba>
    116e:	08 37       	cpi	r16, 0x78	; 120
    1170:	89 f5       	brne	.+98     	; 0x11d4 <RepRapPCBTest::loop()+0xd2>
    1172:	16 c0       	rjmp	.+44     	; 0x11a0 <RepRapPCBTest::loop()+0x9e>
    1174:	0e 94 69 08 	call	0x10d2	; 0x10d2 <stop()>
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	80 93 4f 01 	sts	0x014F, r24
    117e:	10 92 50 01 	sts	0x0150, r1
    1182:	88 e6       	ldi	r24, 0x68	; 104
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	be 01       	movw	r22, r28
    1188:	4c e4       	ldi	r20, 0x4C	; 76
    118a:	52 e0       	ldi	r21, 0x02	; 2
    118c:	0e 94 bf 04 	call	0x97e	; 0x97e <doAxis(char const*, char*, StepperMotorAxis&)>
    1190:	8f e6       	ldi	r24, 0x6F	; 111
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	be 01       	movw	r22, r28
    1196:	4b e6       	ldi	r20, 0x6B	; 107
    1198:	52 e0       	ldi	r21, 0x02	; 2
    119a:	0e 94 bf 04 	call	0x97e	; 0x97e <doAxis(char const*, char*, StepperMotorAxis&)>
    119e:	0e c0       	rjmp	.+28     	; 0x11bc <RepRapPCBTest::loop()+0xba>
    11a0:	88 e6       	ldi	r24, 0x68	; 104
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	be 01       	movw	r22, r28
    11a6:	4c e4       	ldi	r20, 0x4C	; 76
    11a8:	52 e0       	ldi	r21, 0x02	; 2
    11aa:	0e 94 bf 04 	call	0x97e	; 0x97e <doAxis(char const*, char*, StepperMotorAxis&)>
    11ae:	16 c0       	rjmp	.+44     	; 0x11dc <RepRapPCBTest::loop()+0xda>
    11b0:	8f e6       	ldi	r24, 0x6F	; 111
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	be 01       	movw	r22, r28
    11b6:	4b e6       	ldi	r20, 0x6B	; 107
    11b8:	52 e0       	ldi	r21, 0x02	; 2
    11ba:	f7 cf       	rjmp	.-18     	; 0x11aa <RepRapPCBTest::loop()+0xa8>
    11bc:	86 e7       	ldi	r24, 0x76	; 118
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	be 01       	movw	r22, r28
    11c2:	4a e8       	ldi	r20, 0x8A	; 138
    11c4:	52 e0       	ldi	r21, 0x02	; 2
    11c6:	f1 cf       	rjmp	.-30     	; 0x11aa <RepRapPCBTest::loop()+0xa8>
    11c8:	0e 94 9e 04 	call	0x93c	; 0x93c <printHelp()>
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <RepRapPCBTest::loop()+0xda>
    11ce:	0e 94 69 08 	call	0x10d2	; 0x10d2 <stop()>
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <RepRapPCBTest::loop()+0xda>
    11d4:	8d e7       	ldi	r24, 0x7D	; 125
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 a5 04 	call	0x94a	; 0x94a <showError(char const*)>
    11dc:	00 91 4f 01 	lds	r16, 0x014F
    11e0:	03 30       	cpi	r16, 0x03	; 3
    11e2:	c1 f0       	breq	.+48     	; 0x1214 <RepRapPCBTest::loop()+0x112>
    11e4:	04 30       	cpi	r16, 0x04	; 4
    11e6:	30 f4       	brcc	.+12     	; 0x11f4 <RepRapPCBTest::loop()+0xf2>
    11e8:	01 30       	cpi	r16, 0x01	; 1
    11ea:	71 f0       	breq	.+28     	; 0x1208 <RepRapPCBTest::loop()+0x106>
    11ec:	02 30       	cpi	r16, 0x02	; 2
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <RepRapPCBTest::loop()+0xf0>
    11f0:	93 c1       	rjmp	.+806    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    11f2:	0d c0       	rjmp	.+26     	; 0x120e <RepRapPCBTest::loop()+0x10c>
    11f4:	05 30       	cpi	r16, 0x05	; 5
    11f6:	09 f4       	brne	.+2      	; 0x11fa <RepRapPCBTest::loop()+0xf8>
    11f8:	fe c0       	rjmp	.+508    	; 0x13f6 <RepRapPCBTest::loop()+0x2f4>
    11fa:	05 30       	cpi	r16, 0x05	; 5
    11fc:	08 f4       	brcc	.+2      	; 0x1200 <RepRapPCBTest::loop()+0xfe>
    11fe:	f8 c0       	rjmp	.+496    	; 0x13f0 <RepRapPCBTest::loop()+0x2ee>
    1200:	06 30       	cpi	r16, 0x06	; 6
    1202:	09 f0       	breq	.+2      	; 0x1206 <RepRapPCBTest::loop()+0x104>
    1204:	89 c1       	rjmp	.+786    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    1206:	76 c1       	rjmp	.+748    	; 0x14f4 <RepRapPCBTest::loop()+0x3f2>
    1208:	0e 94 08 06 	call	0xc10	; 0xc10 <doAlterDelayBetweenSteps()>
    120c:	85 c1       	rjmp	.+778    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    120e:	0e 94 42 06 	call	0xc84	; 0xc84 <doGotoStep()>
    1212:	82 c1       	rjmp	.+772    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    1214:	80 91 50 01 	lds	r24, 0x0150
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	b9 f0       	breq	.+46     	; 0x124a <RepRapPCBTest::loop()+0x148>
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	30 f0       	brcs	.+12     	; 0x122c <RepRapPCBTest::loop()+0x12a>
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	81 f1       	breq	.+96     	; 0x1284 <RepRapPCBTest::loop()+0x182>
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	09 f0       	breq	.+2      	; 0x122a <RepRapPCBTest::loop()+0x128>
    1228:	e0 c0       	rjmp	.+448    	; 0x13ea <RepRapPCBTest::loop()+0x2e8>
    122a:	6b c0       	rjmp	.+214    	; 0x1302 <RepRapPCBTest::loop()+0x200>
    122c:	e0 91 53 01 	lds	r30, 0x0153
    1230:	f0 91 54 01 	lds	r31, 0x0154
    1234:	86 81       	ldd	r24, Z+6	; 0x06
    1236:	97 81       	ldd	r25, Z+7	; 0x07
    1238:	a0 85       	ldd	r26, Z+8	; 0x08
    123a:	b1 85       	ldd	r27, Z+9	; 0x09
    123c:	85 8b       	std	Z+21, r24	; 0x15
    123e:	96 8b       	std	Z+22, r25	; 0x16
    1240:	a7 8b       	std	Z+23, r26	; 0x17
    1242:	b0 8f       	std	Z+24, r27	; 0x18
    1244:	cf 01       	movw	r24, r30
    1246:	0a 96       	adiw	r24, 0x0a	; 10
    1248:	1a c1       	rjmp	.+564    	; 0x147e <RepRapPCBTest::loop()+0x37c>
    124a:	e0 91 53 01 	lds	r30, 0x0153
    124e:	f0 91 54 01 	lds	r31, 0x0154
    1252:	84 89       	ldd	r24, Z+20	; 0x14
    1254:	88 23       	and	r24, r24
    1256:	09 f0       	breq	.+2      	; 0x125a <RepRapPCBTest::loop()+0x158>
    1258:	5f c1       	rjmp	.+702    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    125a:	14 86       	std	Z+12, r1	; 0x0c
    125c:	15 86       	std	Z+13, r1	; 0x0d
    125e:	16 86       	std	Z+14, r1	; 0x0e
    1260:	17 86       	std	Z+15, r1	; 0x0f
    1262:	cf 01       	movw	r24, r30
    1264:	0a 96       	adiw	r24, 0x0a	; 10
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    126c:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    1270:	60 93 59 01 	sts	0x0159, r22
    1274:	70 93 5a 01 	sts	0x015A, r23
    1278:	80 93 5b 01 	sts	0x015B, r24
    127c:	90 93 5c 01 	sts	0x015C, r25
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	01 c1       	rjmp	.+514    	; 0x1486 <RepRapPCBTest::loop()+0x384>
    1284:	e0 91 53 01 	lds	r30, 0x0153
    1288:	f0 91 54 01 	lds	r31, 0x0154
    128c:	84 89       	ldd	r24, Z+20	; 0x14
    128e:	88 23       	and	r24, r24
    1290:	09 f0       	breq	.+2      	; 0x1294 <RepRapPCBTest::loop()+0x192>
    1292:	42 c1       	rjmp	.+644    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    1294:	84 85       	ldd	r24, Z+12	; 0x0c
    1296:	95 85       	ldd	r25, Z+13	; 0x0d
    1298:	a6 85       	ldd	r26, Z+14	; 0x0e
    129a:	b7 85       	ldd	r27, Z+15	; 0x0f
    129c:	80 93 55 01 	sts	0x0155, r24
    12a0:	90 93 56 01 	sts	0x0156, r25
    12a4:	a0 93 57 01 	sts	0x0157, r26
    12a8:	b0 93 58 01 	sts	0x0158, r27
    12ac:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    12b0:	20 91 59 01 	lds	r18, 0x0159
    12b4:	30 91 5a 01 	lds	r19, 0x015A
    12b8:	40 91 5b 01 	lds	r20, 0x015B
    12bc:	50 91 5c 01 	lds	r21, 0x015C
    12c0:	62 1b       	sub	r22, r18
    12c2:	73 0b       	sbc	r23, r19
    12c4:	84 0b       	sbc	r24, r20
    12c6:	95 0b       	sbc	r25, r21
    12c8:	60 93 5d 01 	sts	0x015D, r22
    12cc:	70 93 5e 01 	sts	0x015E, r23
    12d0:	80 93 5f 01 	sts	0x015F, r24
    12d4:	90 93 60 01 	sts	0x0160, r25
    12d8:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    12dc:	60 93 59 01 	sts	0x0159, r22
    12e0:	70 93 5a 01 	sts	0x015A, r23
    12e4:	80 93 5b 01 	sts	0x015B, r24
    12e8:	90 93 5c 01 	sts	0x015C, r25
    12ec:	80 91 53 01 	lds	r24, 0x0153
    12f0:	90 91 54 01 	lds	r25, 0x0154
    12f4:	0a 96       	adiw	r24, 0x0a	; 10
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    12fc:	00 93 50 01 	sts	0x0150, r16
    1300:	0b c1       	rjmp	.+534    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    1302:	e0 91 53 01 	lds	r30, 0x0153
    1306:	f0 91 54 01 	lds	r31, 0x0154
    130a:	84 89       	ldd	r24, Z+20	; 0x14
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <RepRapPCBTest::loop()+0x210>
    1310:	03 c1       	rjmp	.+518    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    1312:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    1316:	20 91 59 01 	lds	r18, 0x0159
    131a:	30 91 5a 01 	lds	r19, 0x015A
    131e:	40 91 5b 01 	lds	r20, 0x015B
    1322:	50 91 5c 01 	lds	r21, 0x015C
    1326:	62 1b       	sub	r22, r18
    1328:	73 0b       	sbc	r23, r19
    132a:	84 0b       	sbc	r24, r20
    132c:	95 0b       	sbc	r25, r21
    132e:	60 93 59 01 	sts	0x0159, r22
    1332:	70 93 5a 01 	sts	0x015A, r23
    1336:	80 93 5b 01 	sts	0x015B, r24
    133a:	90 93 5c 01 	sts	0x015C, r25
    133e:	40 91 55 01 	lds	r20, 0x0155
    1342:	50 91 56 01 	lds	r21, 0x0156
    1346:	60 91 57 01 	lds	r22, 0x0157
    134a:	70 91 58 01 	lds	r23, 0x0158
    134e:	86 e4       	ldi	r24, 0x46	; 70
    1350:	94 e0       	ldi	r25, 0x04	; 4
    1352:	2a e0       	ldi	r18, 0x0A	; 10
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	0e 94 a5 1b 	call	0x374a	; 0x374a <Print::print(long, int)>
    135a:	86 e4       	ldi	r24, 0x46	; 70
    135c:	94 e0       	ldi	r25, 0x04	; 4
    135e:	69 e0       	ldi	r22, 0x09	; 9
    1360:	0e 94 a2 1a 	call	0x3544	; 0x3544 <Print::print(char)>
    1364:	e0 91 53 01 	lds	r30, 0x0153
    1368:	f0 91 54 01 	lds	r31, 0x0154
    136c:	44 85       	ldd	r20, Z+12	; 0x0c
    136e:	55 85       	ldd	r21, Z+13	; 0x0d
    1370:	66 85       	ldd	r22, Z+14	; 0x0e
    1372:	77 85       	ldd	r23, Z+15	; 0x0f
    1374:	86 e4       	ldi	r24, 0x46	; 70
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	2a e0       	ldi	r18, 0x0A	; 10
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	0e 94 a5 1b 	call	0x374a	; 0x374a <Print::print(long, int)>
    1380:	86 e4       	ldi	r24, 0x46	; 70
    1382:	94 e0       	ldi	r25, 0x04	; 4
    1384:	69 e0       	ldi	r22, 0x09	; 9
    1386:	0e 94 a2 1a 	call	0x3544	; 0x3544 <Print::print(char)>
    138a:	40 91 5d 01 	lds	r20, 0x015D
    138e:	50 91 5e 01 	lds	r21, 0x015E
    1392:	60 91 5f 01 	lds	r22, 0x015F
    1396:	70 91 60 01 	lds	r23, 0x0160
    139a:	86 e4       	ldi	r24, 0x46	; 70
    139c:	94 e0       	ldi	r25, 0x04	; 4
    139e:	2a e0       	ldi	r18, 0x0A	; 10
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	0e 94 65 1b 	call	0x36ca	; 0x36ca <Print::print(unsigned long, int)>
    13a6:	86 e4       	ldi	r24, 0x46	; 70
    13a8:	94 e0       	ldi	r25, 0x04	; 4
    13aa:	69 e0       	ldi	r22, 0x09	; 9
    13ac:	0e 94 a2 1a 	call	0x3544	; 0x3544 <Print::print(char)>
    13b0:	40 91 59 01 	lds	r20, 0x0159
    13b4:	50 91 5a 01 	lds	r21, 0x015A
    13b8:	60 91 5b 01 	lds	r22, 0x015B
    13bc:	70 91 5c 01 	lds	r23, 0x015C
    13c0:	86 e4       	ldi	r24, 0x46	; 70
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	2a e0       	ldi	r18, 0x0A	; 10
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <Print::print(unsigned long, int)>
    13cc:	86 e4       	ldi	r24, 0x46	; 70
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    13d4:	e0 91 53 01 	lds	r30, 0x0153
    13d8:	f0 91 54 01 	lds	r31, 0x0154
    13dc:	14 86       	std	Z+12, r1	; 0x0c
    13de:	15 86       	std	Z+13, r1	; 0x0d
    13e0:	16 86       	std	Z+14, r1	; 0x0e
    13e2:	17 86       	std	Z+15, r1	; 0x0f
    13e4:	10 92 50 01 	sts	0x0150, r1
    13e8:	97 c0       	rjmp	.+302    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    13ea:	0e 94 69 08 	call	0x10d2	; 0x10d2 <stop()>
    13ee:	94 c0       	rjmp	.+296    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    13f0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <doMoveForthAndBackAtSpeed()>
    13f4:	91 c0       	rjmp	.+290    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    13f6:	80 91 50 01 	lds	r24, 0x0150
    13fa:	88 23       	and	r24, r24
    13fc:	21 f0       	breq	.+8      	; 0x1406 <RepRapPCBTest::loop()+0x304>
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	09 f0       	breq	.+2      	; 0x1404 <RepRapPCBTest::loop()+0x302>
    1402:	8a c0       	rjmp	.+276    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    1404:	43 c0       	rjmp	.+134    	; 0x148c <RepRapPCBTest::loop()+0x38a>
    1406:	80 91 52 02 	lds	r24, 0x0252
    140a:	90 91 53 02 	lds	r25, 0x0253
    140e:	a0 91 54 02 	lds	r26, 0x0254
    1412:	b0 91 55 02 	lds	r27, 0x0255
    1416:	80 93 61 02 	sts	0x0261, r24
    141a:	90 93 62 02 	sts	0x0262, r25
    141e:	a0 93 63 02 	sts	0x0263, r26
    1422:	b0 93 64 02 	sts	0x0264, r27
    1426:	80 91 71 02 	lds	r24, 0x0271
    142a:	90 91 72 02 	lds	r25, 0x0272
    142e:	a0 91 73 02 	lds	r26, 0x0273
    1432:	b0 91 74 02 	lds	r27, 0x0274
    1436:	80 93 80 02 	sts	0x0280, r24
    143a:	90 93 81 02 	sts	0x0281, r25
    143e:	a0 93 82 02 	sts	0x0282, r26
    1442:	b0 93 83 02 	sts	0x0283, r27
    1446:	80 91 90 02 	lds	r24, 0x0290
    144a:	90 91 91 02 	lds	r25, 0x0291
    144e:	a0 91 92 02 	lds	r26, 0x0292
    1452:	b0 91 93 02 	lds	r27, 0x0293
    1456:	80 93 9f 02 	sts	0x029F, r24
    145a:	90 93 a0 02 	sts	0x02A0, r25
    145e:	a0 93 a1 02 	sts	0x02A1, r26
    1462:	b0 93 a2 02 	sts	0x02A2, r27
    1466:	86 e5       	ldi	r24, 0x56	; 86
    1468:	92 e0       	ldi	r25, 0x02	; 2
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    1470:	85 e7       	ldi	r24, 0x75	; 117
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    147a:	84 e9       	ldi	r24, 0x94	; 148
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	80 93 50 01 	sts	0x0150, r24
    148a:	46 c0       	rjmp	.+140    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    148c:	80 91 4c 02 	lds	r24, 0x024C
    1490:	88 23       	and	r24, r24
    1492:	09 f0       	breq	.+2      	; 0x1496 <RepRapPCBTest::loop()+0x394>
    1494:	41 c0       	rjmp	.+130    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    1496:	80 91 60 02 	lds	r24, 0x0260
    149a:	88 23       	and	r24, r24
    149c:	e9 f5       	brne	.+122    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    149e:	80 91 6b 02 	lds	r24, 0x026B
    14a2:	88 23       	and	r24, r24
    14a4:	c9 f5       	brne	.+114    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    14a6:	80 91 7f 02 	lds	r24, 0x027F
    14aa:	88 23       	and	r24, r24
    14ac:	a9 f5       	brne	.+106    	; 0x1518 <RepRapPCBTest::loop()+0x416>
    14ae:	80 91 8a 02 	lds	r24, 0x028A
    14b2:	88 23       	and	r24, r24
    14b4:	89 f5       	brne	.+98     	; 0x1518 <RepRapPCBTest::loop()+0x416>
    14b6:	80 91 9e 02 	lds	r24, 0x029E
    14ba:	88 23       	and	r24, r24
    14bc:	69 f5       	brne	.+90     	; 0x1518 <RepRapPCBTest::loop()+0x416>
    14be:	10 92 58 02 	sts	0x0258, r1
    14c2:	10 92 59 02 	sts	0x0259, r1
    14c6:	10 92 5a 02 	sts	0x025A, r1
    14ca:	10 92 5b 02 	sts	0x025B, r1
    14ce:	10 92 77 02 	sts	0x0277, r1
    14d2:	10 92 78 02 	sts	0x0278, r1
    14d6:	10 92 79 02 	sts	0x0279, r1
    14da:	10 92 7a 02 	sts	0x027A, r1
    14de:	10 92 96 02 	sts	0x0296, r1
    14e2:	10 92 97 02 	sts	0x0297, r1
    14e6:	10 92 98 02 	sts	0x0298, r1
    14ea:	10 92 99 02 	sts	0x0299, r1
    14ee:	10 92 4f 01 	sts	0x014F, r1
    14f2:	12 c0       	rjmp	.+36     	; 0x1518 <RepRapPCBTest::loop()+0x416>
    14f4:	0e 94 c8 07 	call	0xf90	; 0xf90 <doStepTicking()>
    14f8:	80 91 fe 02 	lds	r24, 0x02FE
    14fc:	88 23       	and	r24, r24
    14fe:	61 f0       	breq	.+24     	; 0x1518 <RepRapPCBTest::loop()+0x416>
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	80 91 50 01 	lds	r24, 0x0150
    1506:	88 23       	and	r24, r24
    1508:	09 f4       	brne	.+2      	; 0x150c <RepRapPCBTest::loop()+0x40a>
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	90 93 50 01 	sts	0x0150, r25
    1510:	86 ee       	ldi	r24, 0xE6	; 230
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	0e 94 15 0b 	call	0x162a	; 0x162a <AdvButton::reset()>
    1518:	80 91 fe 02 	lds	r24, 0x02FE
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	29 f4       	brne	.+10     	; 0x152a <RepRapPCBTest::loop()+0x428>
    1520:	0e 94 69 08 	call	0x10d2	; 0x10d2 <stop()>
    1524:	0e 94 9e 04 	call	0x93c	; 0x93c <printHelp()>
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <RepRapPCBTest::loop()+0x430>
    152a:	88 23       	and	r24, r24
    152c:	11 f0       	breq	.+4      	; 0x1532 <RepRapPCBTest::loop()+0x430>
    152e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <stop()>
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <RepRapPCBTest::setup()>:
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	0a ec       	ldi	r16, 0xCA	; 202
    1546:	12 e0       	ldi	r17, 0x02	; 2
    1548:	c8 01       	movw	r24, r16
    154a:	64 e0       	ldi	r22, 0x04	; 4
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	0e 94 cd 10 	call	0x219a	; 0x219a <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    1552:	86 ee       	ldi	r24, 0xE6	; 230
    1554:	92 e0       	ldi	r25, 0x02	; 2
    1556:	b8 01       	movw	r22, r16
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	2a e0       	ldi	r18, 0x0A	; 10
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	0e 94 ad 0b 	call	0x175a	; 0x175a <AdvButton::initialize(DigitalInputPin*, bool, unsigned int)>
    1562:	0f ec       	ldi	r16, 0xCF	; 207
    1564:	12 e0       	ldi	r17, 0x02	; 2
    1566:	c8 01       	movw	r24, r16
    1568:	66 e0       	ldi	r22, 0x06	; 6
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	0e 94 9d 10 	call	0x213a	; 0x213a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	b8 01       	movw	r22, r16
    1576:	48 e7       	ldi	r20, 0x78	; 120
    1578:	54 e0       	ldi	r21, 0x04	; 4
    157a:	25 e0       	ldi	r18, 0x05	; 5
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	01 e0       	ldi	r16, 0x01	; 1
    1580:	0e 94 31 13 	call	0x2662	; 0x2662 <StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)>
    1584:	8f ed       	ldi	r24, 0xDF	; 223
    1586:	92 e0       	ldi	r25, 0x02	; 2
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	52 ec       	ldi	r21, 0xC2	; 194
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	24 e6       	ldi	r18, 0x64	; 100
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	0a e5       	ldi	r16, 0x5A	; 90
    1596:	13 e0       	ldi	r17, 0x03	; 3
    1598:	0e 94 da 12 	call	0x25b4	; 0x25b4 <SerialReader::initialize(long, int, char*)>
    159c:	85 ed       	ldi	r24, 0xD5	; 213
    159e:	e8 2e       	mov	r14, r24
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	f8 2e       	mov	r15, r24
    15a4:	c7 01       	movw	r24, r14
    15a6:	62 e0       	ldi	r22, 0x02	; 2
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	0e 94 cd 10 	call	0x219a	; 0x219a <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    15ae:	0a ed       	ldi	r16, 0xDA	; 218
    15b0:	12 e0       	ldi	r17, 0x02	; 2
    15b2:	c8 01       	movw	r24, r16
    15b4:	63 e0       	ldi	r22, 0x03	; 3
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 cd 10 	call	0x219a	; 0x219a <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    15bc:	82 e1       	ldi	r24, 0x12	; 18
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	b7 01       	movw	r22, r14
    15c2:	a8 01       	movw	r20, r16
    15c4:	0e 94 51 12 	call	0x24a2	; 0x24a2 <RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	60 e1       	ldi	r22, 0x10	; 16
    15cc:	7b e0       	ldi	r23, 0x0B	; 11
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	0e 94 41 1c 	call	0x3882	; 0x3882 <attachInterrupt>
    15d6:	81 e6       	ldi	r24, 0x61	; 97
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <RepRapPCB::initialize()>
    15de:	10 92 4f 01 	sts	0x014F, r1
    15e2:	88 e6       	ldi	r24, 0x68	; 104
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	90 93 52 01 	sts	0x0152, r25
    15ea:	80 93 51 01 	sts	0x0151, r24
    15ee:	8c e4       	ldi	r24, 0x4C	; 76
    15f0:	92 e0       	ldi	r25, 0x02	; 2
    15f2:	90 93 54 01 	sts	0x0154, r25
    15f6:	80 93 53 01 	sts	0x0153, r24
    15fa:	06 e4       	ldi	r16, 0x46	; 70
    15fc:	14 e0       	ldi	r17, 0x04	; 4
    15fe:	c8 01       	movw	r24, r16
    1600:	6b e9       	ldi	r22, 0x9B	; 155
    1602:	74 e0       	ldi	r23, 0x04	; 4
    1604:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
    1608:	c8 01       	movw	r24, r16
    160a:	62 e8       	ldi	r22, 0x82	; 130
    160c:	74 e0       	ldi	r23, 0x04	; 4
    160e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
    1612:	0e 94 9e 04 	call	0x93c	; 0x93c <printHelp()>
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	08 95       	ret

00001620 <UpdateRotor()>:
    1620:	82 e1       	ldi	r24, 0x12	; 18
    1622:	93 e0       	ldi	r25, 0x03	; 3
    1624:	0e 94 97 11 	call	0x232e	; 0x232e <RotaryEncoderAcceleration::update()>
    1628:	08 95       	ret

0000162a <AdvButton::reset()>:
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	8c 01       	movw	r16, r24
    1630:	0e 94 a6 0c 	call	0x194c	; 0x194c <Button::reset()>
    1634:	f8 01       	movw	r30, r16
    1636:	17 8a       	std	Z+23, r1	; 0x17
    1638:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    163c:	f8 01       	movw	r30, r16
    163e:	66 87       	std	Z+14, r22	; 0x0e
    1640:	77 87       	std	Z+15, r23	; 0x0f
    1642:	80 8b       	std	Z+16, r24	; 0x10
    1644:	91 8b       	std	Z+17, r25	; 0x11
    1646:	68 51       	subi	r22, 0x18	; 24
    1648:	7c 4f       	sbci	r23, 0xFC	; 252
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	62 8b       	std	Z+18, r22	; 0x12
    1650:	73 8b       	std	Z+19, r23	; 0x13
    1652:	84 8b       	std	Z+20, r24	; 0x14
    1654:	95 8b       	std	Z+21, r25	; 0x15
    1656:	10 8e       	std	Z+24, r1	; 0x18
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	08 95       	ret

0000165e <AdvButton::update()>:
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	ec 01       	movw	r28, r24
    166c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <Button::update()>
    1670:	18 8e       	std	Y+24, r1	; 0x18
    1672:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    1676:	9b 01       	movw	r18, r22
    1678:	ac 01       	movw	r20, r24
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	98 17       	cp	r25, r24
    1680:	b9 f1       	breq	.+110    	; 0x16f0 <AdvButton::update()+0x92>
    1682:	99 23       	and	r25, r25
    1684:	71 f4       	brne	.+28     	; 0x16a2 <AdvButton::update()+0x44>
    1686:	2e 87       	std	Y+14, r18	; 0x0e
    1688:	3f 87       	std	Y+15, r19	; 0x0f
    168a:	48 8b       	std	Y+16, r20	; 0x10
    168c:	59 8b       	std	Y+17, r21	; 0x11
    168e:	28 51       	subi	r18, 0x18	; 24
    1690:	3c 4f       	sbci	r19, 0xFC	; 252
    1692:	4f 4f       	sbci	r20, 0xFF	; 255
    1694:	5f 4f       	sbci	r21, 0xFF	; 255
    1696:	2a 8b       	std	Y+18, r18	; 0x12
    1698:	3b 8b       	std	Y+19, r19	; 0x13
    169a:	4c 8b       	std	Y+20, r20	; 0x14
    169c:	5d 8b       	std	Y+21, r21	; 0x15
    169e:	1f 8a       	std	Y+23, r1	; 0x17
    16a0:	55 c0       	rjmp	.+170    	; 0x174c <AdvButton::update()+0xee>
    16a2:	8f 89       	ldd	r24, Y+23	; 0x17
    16a4:	88 23       	and	r24, r24
    16a6:	a9 f4       	brne	.+42     	; 0x16d2 <AdvButton::update()+0x74>
    16a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ac:	ac 85       	ldd	r26, Y+12	; 0x0c
    16ae:	bd 85       	ldd	r27, Y+13	; 0x0d
    16b0:	79 01       	movw	r14, r18
    16b2:	8a 01       	movw	r16, r20
    16b4:	e8 1a       	sub	r14, r24
    16b6:	f9 0a       	sbc	r15, r25
    16b8:	0a 0b       	sbc	r16, r26
    16ba:	1b 0b       	sbc	r17, r27
    16bc:	d8 01       	movw	r26, r16
    16be:	c7 01       	movw	r24, r14
    16c0:	81 59       	subi	r24, 0x91	; 145
    16c2:	91 40       	sbci	r25, 0x01	; 1
    16c4:	a0 40       	sbci	r26, 0x00	; 0
    16c6:	b0 40       	sbci	r27, 0x00	; 0
    16c8:	10 f4       	brcc	.+4      	; 0x16ce <AdvButton::update()+0x70>
    16ca:	83 e0       	ldi	r24, 0x03	; 3
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <AdvButton::update()+0x72>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	88 8f       	std	Y+24, r24	; 0x18
    16d2:	8f 89       	ldd	r24, Y+23	; 0x17
    16d4:	88 23       	and	r24, r24
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <AdvButton::update()+0x88>
    16d8:	8e 89       	ldd	r24, Y+22	; 0x16
    16da:	88 23       	and	r24, r24
    16dc:	21 f4       	brne	.+8      	; 0x16e6 <AdvButton::update()+0x88>
    16de:	20 52       	subi	r18, 0x20	; 32
    16e0:	33 40       	sbci	r19, 0x03	; 3
    16e2:	40 40       	sbci	r20, 0x00	; 0
    16e4:	50 40       	sbci	r21, 0x00	; 0
    16e6:	2a 87       	std	Y+10, r18	; 0x0a
    16e8:	3b 87       	std	Y+11, r19	; 0x0b
    16ea:	4c 87       	std	Y+12, r20	; 0x0c
    16ec:	5d 87       	std	Y+13, r21	; 0x0d
    16ee:	2e c0       	rjmp	.+92     	; 0x174c <AdvButton::update()+0xee>
    16f0:	99 23       	and	r25, r25
    16f2:	61 f5       	brne	.+88     	; 0x174c <AdvButton::update()+0xee>
    16f4:	8e 89       	ldd	r24, Y+22	; 0x16
    16f6:	88 23       	and	r24, r24
    16f8:	a9 f0       	breq	.+42     	; 0x1724 <AdvButton::update()+0xc6>
    16fa:	8a 89       	ldd	r24, Y+18	; 0x12
    16fc:	9b 89       	ldd	r25, Y+19	; 0x13
    16fe:	ac 89       	ldd	r26, Y+20	; 0x14
    1700:	bd 89       	ldd	r27, Y+21	; 0x15
    1702:	28 17       	cp	r18, r24
    1704:	39 07       	cpc	r19, r25
    1706:	4a 07       	cpc	r20, r26
    1708:	5b 07       	cpc	r21, r27
    170a:	00 f1       	brcs	.+64     	; 0x174c <AdvButton::update()+0xee>
    170c:	2e 5c       	subi	r18, 0xCE	; 206
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	4f 4f       	sbci	r20, 0xFF	; 255
    1712:	5f 4f       	sbci	r21, 0xFF	; 255
    1714:	2a 8b       	std	Y+18, r18	; 0x12
    1716:	3b 8b       	std	Y+19, r19	; 0x13
    1718:	4c 8b       	std	Y+20, r20	; 0x14
    171a:	5d 8b       	std	Y+21, r21	; 0x15
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	8f 8b       	std	Y+23, r24	; 0x17
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	13 c0       	rjmp	.+38     	; 0x174a <AdvButton::update()+0xec>
    1724:	8f 89       	ldd	r24, Y+23	; 0x17
    1726:	88 23       	and	r24, r24
    1728:	89 f4       	brne	.+34     	; 0x174c <AdvButton::update()+0xee>
    172a:	8e 85       	ldd	r24, Y+14	; 0x0e
    172c:	9f 85       	ldd	r25, Y+15	; 0x0f
    172e:	a8 89       	ldd	r26, Y+16	; 0x10
    1730:	b9 89       	ldd	r27, Y+17	; 0x11
    1732:	28 1b       	sub	r18, r24
    1734:	39 0b       	sbc	r19, r25
    1736:	4a 0b       	sbc	r20, r26
    1738:	5b 0b       	sbc	r21, r27
    173a:	28 55       	subi	r18, 0x58	; 88
    173c:	32 40       	sbci	r19, 0x02	; 2
    173e:	40 40       	sbci	r20, 0x00	; 0
    1740:	50 40       	sbci	r21, 0x00	; 0
    1742:	20 f0       	brcs	.+8      	; 0x174c <AdvButton::update()+0xee>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	8f 8b       	std	Y+23, r24	; 0x17
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	88 8f       	std	Y+24, r24	; 0x18
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	08 95       	ret

0000175a <AdvButton::initialize(DigitalInputPin*, bool, unsigned int)>:
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	8c 01       	movw	r16, r24
    1762:	f4 2e       	mov	r15, r20
    1764:	a9 01       	movw	r20, r18
    1766:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Button::initialize(DigitalInputPin*, unsigned int)>
    176a:	f8 01       	movw	r30, r16
    176c:	f6 8a       	std	Z+22, r15	; 0x16
    176e:	16 86       	std	Z+14, r1	; 0x0e
    1770:	17 86       	std	Z+15, r1	; 0x0f
    1772:	10 8a       	std	Z+16, r1	; 0x10
    1774:	11 8a       	std	Z+17, r1	; 0x11
    1776:	12 86       	std	Z+10, r1	; 0x0a
    1778:	13 86       	std	Z+11, r1	; 0x0b
    177a:	14 86       	std	Z+12, r1	; 0x0c
    177c:	15 86       	std	Z+13, r1	; 0x0d
    177e:	12 8a       	std	Z+18, r1	; 0x12
    1780:	13 8a       	std	Z+19, r1	; 0x13
    1782:	14 8a       	std	Z+20, r1	; 0x14
    1784:	15 8a       	std	Z+21, r1	; 0x15
    1786:	17 8a       	std	Z+23, r1	; 0x17
    1788:	10 8e       	std	Z+24, r1	; 0x18
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	08 95       	ret

00001792 <BlinkingLed::initialize(DigitalOutputPin*)>:
    1792:	fc 01       	movw	r30, r24
    1794:	71 83       	std	Z+1, r23	; 0x01
    1796:	60 83       	st	Z, r22
    1798:	13 82       	std	Z+3, r1	; 0x03
    179a:	12 82       	std	Z+2, r1	; 0x02
    179c:	14 82       	std	Z+4, r1	; 0x04
    179e:	13 86       	std	Z+11, r1	; 0x0b
    17a0:	12 86       	std	Z+10, r1	; 0x0a
    17a2:	11 86       	std	Z+9, r1	; 0x09
    17a4:	15 82       	std	Z+5, r1	; 0x05
    17a6:	16 82       	std	Z+6, r1	; 0x06
    17a8:	17 82       	std	Z+7, r1	; 0x07
    17aa:	10 86       	std	Z+8, r1	; 0x08
    17ac:	08 95       	ret

000017ae <BlinkingLed::getNextDelay()>:
    17ae:	dc 01       	movw	r26, r24
    17b0:	6f b7       	in	r22, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	19 96       	adiw	r26, 0x09	; 9
    17b6:	4d 91       	ld	r20, X+
    17b8:	5c 91       	ld	r21, X
    17ba:	1a 97       	sbiw	r26, 0x0a	; 10
    17bc:	41 15       	cp	r20, r1
    17be:	51 05       	cpc	r21, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <BlinkingLed::getNextDelay()+0x16>
    17c2:	48 c0       	rjmp	.+144    	; 0x1854 <BlinkingLed::getNextDelay()+0xa6>
    17c4:	14 96       	adiw	r26, 0x04	; 4
    17c6:	2c 91       	ld	r18, X
    17c8:	14 97       	sbiw	r26, 0x04	; 4
    17ca:	82 2f       	mov	r24, r18
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	12 96       	adiw	r26, 0x02	; 2
    17d4:	ed 91       	ld	r30, X+
    17d6:	fc 91       	ld	r31, X
    17d8:	13 97       	sbiw	r26, 0x03	; 3
    17da:	e8 0f       	add	r30, r24
    17dc:	f9 1f       	adc	r31, r25
    17de:	2f 5f       	subi	r18, 0xFF	; 255
    17e0:	14 96       	adiw	r26, 0x04	; 4
    17e2:	2c 93       	st	X, r18
    17e4:	14 97       	sbiw	r26, 0x04	; 4
    17e6:	85 91       	lpm	r24, Z+
    17e8:	94 91       	lpm	r25, Z+
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	51 f5       	brne	.+84     	; 0x1842 <BlinkingLed::getNextDelay()+0x94>
    17ee:	1b 96       	adiw	r26, 0x0b	; 11
    17f0:	1c 92       	st	X, r1
    17f2:	1b 97       	sbiw	r26, 0x0b	; 11
    17f4:	14 96       	adiw	r26, 0x04	; 4
    17f6:	1c 92       	st	X, r1
    17f8:	14 97       	sbiw	r26, 0x04	; 4
    17fa:	14 16       	cp	r1, r20
    17fc:	15 06       	cpc	r1, r21
    17fe:	34 f4       	brge	.+12     	; 0x180c <BlinkingLed::getNextDelay()+0x5e>
    1800:	41 50       	subi	r20, 0x01	; 1
    1802:	50 40       	sbci	r21, 0x00	; 0
    1804:	1a 96       	adiw	r26, 0x0a	; 10
    1806:	5c 93       	st	X, r21
    1808:	4e 93       	st	-X, r20
    180a:	19 97       	sbiw	r26, 0x09	; 9
    180c:	19 96       	adiw	r26, 0x09	; 9
    180e:	8d 91       	ld	r24, X+
    1810:	9c 91       	ld	r25, X
    1812:	1a 97       	sbiw	r26, 0x0a	; 10
    1814:	89 2b       	or	r24, r25
    1816:	f1 f0       	breq	.+60     	; 0x1854 <BlinkingLed::getNextDelay()+0xa6>
    1818:	14 96       	adiw	r26, 0x04	; 4
    181a:	2c 91       	ld	r18, X
    181c:	14 97       	sbiw	r26, 0x04	; 4
    181e:	82 2f       	mov	r24, r18
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	12 96       	adiw	r26, 0x02	; 2
    1828:	ed 91       	ld	r30, X+
    182a:	fc 91       	ld	r31, X
    182c:	13 97       	sbiw	r26, 0x03	; 3
    182e:	e8 0f       	add	r30, r24
    1830:	f9 1f       	adc	r31, r25
    1832:	2f 5f       	subi	r18, 0xFF	; 255
    1834:	14 96       	adiw	r26, 0x04	; 4
    1836:	2c 93       	st	X, r18
    1838:	14 97       	sbiw	r26, 0x04	; 4
    183a:	85 91       	lpm	r24, Z+
    183c:	94 91       	lpm	r25, Z+
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	11 f0       	breq	.+4      	; 0x1846 <BlinkingLed::getNextDelay()+0x98>
    1842:	9c 01       	movw	r18, r24
    1844:	09 c0       	rjmp	.+18     	; 0x1858 <BlinkingLed::getNextDelay()+0xaa>
    1846:	14 96       	adiw	r26, 0x04	; 4
    1848:	1c 92       	st	X, r1
    184a:	14 97       	sbiw	r26, 0x04	; 4
    184c:	1a 96       	adiw	r26, 0x0a	; 10
    184e:	1c 92       	st	X, r1
    1850:	1e 92       	st	-X, r1
    1852:	19 97       	sbiw	r26, 0x09	; 9
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	6f bf       	out	0x3f, r22	; 63
    185a:	c9 01       	movw	r24, r18
    185c:	08 95       	ret

0000185e <BlinkingLed::update()>:
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	89 2b       	or	r24, r25
    1872:	99 f1       	breq	.+102    	; 0x18da <BlinkingLed::update()+0x7c>
    1874:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    1878:	7b 01       	movw	r14, r22
    187a:	8c 01       	movw	r16, r24
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	af 81       	ldd	r26, Y+7	; 0x07
    1882:	b8 85       	ldd	r27, Y+8	; 0x08
    1884:	a8 01       	movw	r20, r16
    1886:	97 01       	movw	r18, r14
    1888:	28 1b       	sub	r18, r24
    188a:	39 0b       	sbc	r19, r25
    188c:	4a 0b       	sbc	r20, r26
    188e:	5b 0b       	sbc	r21, r27
    1890:	57 fd       	sbrc	r21, 7
    1892:	30 c0       	rjmp	.+96     	; 0x18f4 <BlinkingLed::update()+0x96>
    1894:	ce 01       	movw	r24, r28
    1896:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <BlinkingLed::getNextDelay()>
    189a:	9c 01       	movw	r18, r24
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	11 f4       	brne	.+4      	; 0x18a4 <BlinkingLed::update()+0x46>
    18a0:	1b 86       	std	Y+11, r1	; 0x0b
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <BlinkingLed::update()+0x4e>
    18a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	89 27       	eor	r24, r25
    18aa:	8b 87       	std	Y+11, r24	; 0x0b
    18ac:	c9 01       	movw	r24, r18
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	8e 0d       	add	r24, r14
    18b4:	9f 1d       	adc	r25, r15
    18b6:	a0 1f       	adc	r26, r16
    18b8:	b1 1f       	adc	r27, r17
    18ba:	8d 83       	std	Y+5, r24	; 0x05
    18bc:	9e 83       	std	Y+6, r25	; 0x06
    18be:	af 83       	std	Y+7, r26	; 0x07
    18c0:	b8 87       	std	Y+8, r27	; 0x08
    18c2:	a8 81       	ld	r26, Y
    18c4:	b9 81       	ldd	r27, Y+1	; 0x01
    18c6:	ed 91       	ld	r30, X+
    18c8:	fc 91       	ld	r31, X
    18ca:	11 97       	sbiw	r26, 0x01	; 1
    18cc:	02 80       	ldd	r0, Z+2	; 0x02
    18ce:	f3 81       	ldd	r31, Z+3	; 0x03
    18d0:	e0 2d       	mov	r30, r0
    18d2:	cd 01       	movw	r24, r26
    18d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d6:	09 95       	icall
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <BlinkingLed::update()+0x96>
    18da:	1b 86       	std	Y+11, r1	; 0x0b
    18dc:	e8 81       	ld	r30, Y
    18de:	f9 81       	ldd	r31, Y+1	; 0x01
    18e0:	a0 81       	ld	r26, Z
    18e2:	b1 81       	ldd	r27, Z+1	; 0x01
    18e4:	12 96       	adiw	r26, 0x02	; 2
    18e6:	2d 91       	ld	r18, X+
    18e8:	3c 91       	ld	r19, X
    18ea:	13 97       	sbiw	r26, 0x03	; 3
    18ec:	cf 01       	movw	r24, r30
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	f9 01       	movw	r30, r18
    18f2:	09 95       	icall
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	ff 90       	pop	r15
    18fe:	ef 90       	pop	r14
    1900:	08 95       	ret

00001902 <BlinkingLed::playBlink(unsigned int const*, short)>:
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	ec 01       	movw	r28, r24
    1908:	61 15       	cp	r22, r1
    190a:	71 05       	cpc	r23, r1
    190c:	11 f4       	brne	.+4      	; 0x1912 <BlinkingLed::playBlink(unsigned int const*, short)+0x10>
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	68 17       	cp	r22, r24
    1918:	79 07       	cpc	r23, r25
    191a:	19 f4       	brne	.+6      	; 0x1922 <BlinkingLed::playBlink(unsigned int const*, short)+0x20>
    191c:	5a 87       	std	Y+10, r21	; 0x0a
    191e:	49 87       	std	Y+9, r20	; 0x09
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <BlinkingLed::playBlink(unsigned int const*, short)+0x3e>
    1922:	8f b7       	in	r24, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	1c 82       	std	Y+4, r1	; 0x04
    1928:	7b 83       	std	Y+3, r23	; 0x03
    192a:	6a 83       	std	Y+2, r22	; 0x02
    192c:	5a 87       	std	Y+10, r21	; 0x0a
    192e:	49 87       	std	Y+9, r20	; 0x09
    1930:	1b 86       	std	Y+11, r1	; 0x0b
    1932:	8f bf       	out	0x3f, r24	; 63
    1934:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    1938:	6d 83       	std	Y+5, r22	; 0x05
    193a:	7e 83       	std	Y+6, r23	; 0x06
    193c:	8f 83       	std	Y+7, r24	; 0x07
    193e:	98 87       	std	Y+8, r25	; 0x08
    1940:	ce 01       	movw	r24, r28
    1942:	0e 94 2f 0c 	call	0x185e	; 0x185e <BlinkingLed::update()>
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	08 95       	ret

0000194c <Button::reset()>:
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	8c 01       	movw	r16, r24
    1952:	fc 01       	movw	r30, r24
    1954:	83 81       	ldd	r24, Z+3	; 0x03
    1956:	82 83       	std	Z+2, r24	; 0x02
    1958:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    195c:	f8 01       	movw	r30, r16
    195e:	20 85       	ldd	r18, Z+8	; 0x08
    1960:	31 85       	ldd	r19, Z+9	; 0x09
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	20 95       	com	r18
    1968:	30 95       	com	r19
    196a:	40 95       	com	r20
    196c:	50 95       	com	r21
    196e:	26 0f       	add	r18, r22
    1970:	37 1f       	adc	r19, r23
    1972:	48 1f       	adc	r20, r24
    1974:	59 1f       	adc	r21, r25
    1976:	24 83       	std	Z+4, r18	; 0x04
    1978:	35 83       	std	Z+5, r19	; 0x05
    197a:	46 83       	std	Z+6, r20	; 0x06
    197c:	57 83       	std	Z+7, r21	; 0x07
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <Button::update()>:
    1984:	9f 92       	push	r9
    1986:	af 92       	push	r10
    1988:	bf 92       	push	r11
    198a:	cf 92       	push	r12
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24
    199c:	a8 81       	ld	r26, Y
    199e:	b9 81       	ldd	r27, Y+1	; 0x01
    19a0:	ed 91       	ld	r30, X+
    19a2:	fc 91       	ld	r31, X
    19a4:	11 97       	sbiw	r26, 0x01	; 1
    19a6:	01 90       	ld	r0, Z+
    19a8:	f0 81       	ld	r31, Z
    19aa:	e0 2d       	mov	r30, r0
    19ac:	cd 01       	movw	r24, r26
    19ae:	09 95       	icall
    19b0:	98 2e       	mov	r9, r24
    19b2:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    19b6:	7b 01       	movw	r14, r22
    19b8:	8c 01       	movw	r16, r24
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	8a 83       	std	Y+2, r24	; 0x02
    19be:	ac 80       	ldd	r10, Y+4	; 0x04
    19c0:	bd 80       	ldd	r11, Y+5	; 0x05
    19c2:	ce 80       	ldd	r12, Y+6	; 0x06
    19c4:	df 80       	ldd	r13, Y+7	; 0x07
    19c6:	68 85       	ldd	r22, Y+8	; 0x08
    19c8:	79 85       	ldd	r23, Y+9	; 0x09
    19ca:	98 16       	cp	r9, r24
    19cc:	a1 f0       	breq	.+40     	; 0x19f6 <Button::update()+0x72>
    19ce:	a8 01       	movw	r20, r16
    19d0:	97 01       	movw	r18, r14
    19d2:	2a 19       	sub	r18, r10
    19d4:	3b 09       	sbc	r19, r11
    19d6:	4c 09       	sbc	r20, r12
    19d8:	5d 09       	sbc	r21, r13
    19da:	cb 01       	movw	r24, r22
    19dc:	a0 e0       	ldi	r26, 0x00	; 0
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	28 17       	cp	r18, r24
    19e2:	39 07       	cpc	r19, r25
    19e4:	4a 07       	cpc	r20, r26
    19e6:	5b 07       	cpc	r21, r27
    19e8:	08 f0       	brcs	.+2      	; 0x19ec <Button::update()+0x68>
    19ea:	9b 82       	std	Y+3, r9	; 0x03
    19ec:	ec 82       	std	Y+4, r14	; 0x04
    19ee:	fd 82       	std	Y+5, r15	; 0x05
    19f0:	0e 83       	std	Y+6, r16	; 0x06
    19f2:	1f 83       	std	Y+7, r17	; 0x07
    19f4:	1a c0       	rjmp	.+52     	; 0x1a2a <Button::update()+0xa6>
    19f6:	9b 01       	movw	r18, r22
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	d8 01       	movw	r26, r16
    19fe:	c7 01       	movw	r24, r14
    1a00:	8a 19       	sub	r24, r10
    1a02:	9b 09       	sbc	r25, r11
    1a04:	ac 09       	sbc	r26, r12
    1a06:	bd 09       	sbc	r27, r13
    1a08:	82 17       	cp	r24, r18
    1a0a:	93 07       	cpc	r25, r19
    1a0c:	a4 07       	cpc	r26, r20
    1a0e:	b5 07       	cpc	r27, r21
    1a10:	60 f0       	brcs	.+24     	; 0x1a2a <Button::update()+0xa6>
    1a12:	20 95       	com	r18
    1a14:	30 95       	com	r19
    1a16:	40 95       	com	r20
    1a18:	50 95       	com	r21
    1a1a:	2e 0d       	add	r18, r14
    1a1c:	3f 1d       	adc	r19, r15
    1a1e:	40 1f       	adc	r20, r16
    1a20:	51 1f       	adc	r21, r17
    1a22:	2c 83       	std	Y+4, r18	; 0x04
    1a24:	3d 83       	std	Y+5, r19	; 0x05
    1a26:	4e 83       	std	Y+6, r20	; 0x06
    1a28:	5f 83       	std	Y+7, r21	; 0x07
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	bf 90       	pop	r11
    1a3c:	af 90       	pop	r10
    1a3e:	9f 90       	pop	r9
    1a40:	08 95       	ret

00001a42 <Button::initialize(DigitalInputPin*, unsigned int)>:
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	8c 01       	movw	r16, r24
    1a48:	fc 01       	movw	r30, r24
    1a4a:	71 83       	std	Z+1, r23	; 0x01
    1a4c:	60 83       	st	Z, r22
    1a4e:	51 87       	std	Z+9, r21	; 0x09
    1a50:	40 87       	std	Z+8, r20	; 0x08
    1a52:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    1a56:	f8 01       	movw	r30, r16
    1a58:	64 83       	std	Z+4, r22	; 0x04
    1a5a:	75 83       	std	Z+5, r23	; 0x05
    1a5c:	86 83       	std	Z+6, r24	; 0x06
    1a5e:	97 83       	std	Z+7, r25	; 0x07
    1a60:	a0 81       	ld	r26, Z
    1a62:	b1 81       	ldd	r27, Z+1	; 0x01
    1a64:	ed 91       	ld	r30, X+
    1a66:	fc 91       	ld	r31, X
    1a68:	11 97       	sbiw	r26, 0x01	; 1
    1a6a:	01 90       	ld	r0, Z+
    1a6c:	f0 81       	ld	r31, Z
    1a6e:	e0 2d       	mov	r30, r0
    1a70:	cd 01       	movw	r24, r26
    1a72:	09 95       	icall
    1a74:	f8 01       	movw	r30, r16
    1a76:	83 83       	std	Z+3, r24	; 0x03
    1a78:	82 83       	std	Z+2, r24	; 0x02
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <DigitalInputArduinoPin::getState()>:
    1a80:	dc 01       	movw	r26, r24
    1a82:	13 96       	adiw	r26, 0x03	; 3
    1a84:	ed 91       	ld	r30, X+
    1a86:	fc 91       	ld	r31, X
    1a88:	14 97       	sbiw	r26, 0x04	; 4
    1a8a:	20 81       	ld	r18, Z
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	12 96       	adiw	r26, 0x02	; 2
    1a92:	8c 91       	ld	r24, X
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	28 23       	and	r18, r24
    1a98:	39 23       	and	r19, r25
    1a9a:	23 2b       	or	r18, r19
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <DigitalInputArduinoPin::getState()+0x20>
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	84 2f       	mov	r24, r20
    1aa2:	08 95       	ret

00001aa4 <DigitalOutputArduinoPin::getState()>:
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	85 81       	ldd	r24, Z+5	; 0x05
    1aa8:	08 95       	ret

00001aaa <DigitalOutputArduinoPin::setState(bool)>:
    1aaa:	fc 01       	movw	r30, r24
    1aac:	65 83       	std	Z+5, r22	; 0x05
    1aae:	a3 81       	ldd	r26, Z+3	; 0x03
    1ab0:	b4 81       	ldd	r27, Z+4	; 0x04
    1ab2:	22 81       	ldd	r18, Z+2	; 0x02
    1ab4:	66 23       	and	r22, r22
    1ab6:	31 f0       	breq	.+12     	; 0x1ac4 <DigitalOutputArduinoPin::setState(bool)+0x1a>
    1ab8:	9f b7       	in	r25, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	8c 91       	ld	r24, X
    1abe:	82 2b       	or	r24, r18
    1ac0:	8c 93       	st	X, r24
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <DigitalOutputArduinoPin::setState(bool)+0x26>
    1ac4:	9f b7       	in	r25, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	8c 91       	ld	r24, X
    1aca:	20 95       	com	r18
    1acc:	28 23       	and	r18, r24
    1ace:	2c 93       	st	X, r18
    1ad0:	9f bf       	out	0x3f, r25	; 63
    1ad2:	08 95       	ret

00001ad4 <DigitalInputShiftRegisterPin::getState()>:
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	a2 81       	ldd	r26, Z+2	; 0x02
    1ad8:	b3 81       	ldd	r27, Z+3	; 0x03
    1ada:	24 81       	ldd	r18, Z+4	; 0x04
    1adc:	9f 96       	adiw	r26, 0x2f	; 47
    1ade:	8c 91       	ld	r24, X
    1ae0:	9f 97       	sbiw	r26, 0x2f	; 47
    1ae2:	28 17       	cp	r18, r24
    1ae4:	10 f0       	brcs	.+4      	; 0x1aea <DigitalInputShiftRegisterPin::getState()+0x16>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	08 95       	ret
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	c9 01       	movw	r24, r18
    1aee:	43 e0       	ldi	r20, 0x03	; 3
    1af0:	95 95       	asr	r25
    1af2:	87 95       	ror	r24
    1af4:	4a 95       	dec	r20
    1af6:	e1 f7       	brne	.-8      	; 0x1af0 <DigitalInputShiftRegisterPin::getState()+0x1c>
    1af8:	a8 0f       	add	r26, r24
    1afa:	b9 1f       	adc	r27, r25
    1afc:	9d 96       	adiw	r26, 0x2d	; 45
    1afe:	8c 91       	ld	r24, X
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	27 70       	andi	r18, 0x07	; 7
    1b04:	30 70       	andi	r19, 0x00	; 0
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DigitalInputShiftRegisterPin::getState()+0x38>
    1b08:	95 95       	asr	r25
    1b0a:	87 95       	ror	r24
    1b0c:	2a 95       	dec	r18
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DigitalInputShiftRegisterPin::getState()+0x34>
    1b10:	81 70       	andi	r24, 0x01	; 1
    1b12:	08 95       	ret

00001b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>:
    1b14:	26 2f       	mov	r18, r22
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	f9 01       	movw	r30, r18
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	e2 0f       	add	r30, r18
    1b24:	f3 1f       	adc	r31, r19
    1b26:	e8 0f       	add	r30, r24
    1b28:	f9 1f       	adc	r31, r25
    1b2a:	93 83       	std	Z+3, r25	; 0x03
    1b2c:	82 83       	std	Z+2, r24	; 0x02
    1b2e:	64 83       	std	Z+4, r22	; 0x04
    1b30:	cf 01       	movw	r24, r30
    1b32:	08 95       	ret

00001b34 <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)>:
    1b34:	ef 92       	push	r14
    1b36:	ff 92       	push	r15
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	ec 01       	movw	r28, r24
    1b42:	da 01       	movw	r26, r20
    1b44:	79 01       	movw	r14, r18
    1b46:	69 30       	cpi	r22, 0x09	; 9
    1b48:	08 f4       	brcc	.+2      	; 0x1b4c <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)+0x18>
    1b4a:	69 e0       	ldi	r22, 0x09	; 9
    1b4c:	6f a7       	std	Y+47, r22	; 0x2f
    1b4e:	b9 ab       	std	Y+49, r27	; 0x31
    1b50:	a8 ab       	std	Y+48, r26	; 0x30
    1b52:	fb aa       	std	Y+51, r15	; 0x33
    1b54:	ea aa       	std	Y+50, r14	; 0x32
    1b56:	1d ab       	std	Y+53, r17	; 0x35
    1b58:	0c ab       	std	Y+52, r16	; 0x34
    1b5a:	ed 91       	ld	r30, X+
    1b5c:	fc 91       	ld	r31, X
    1b5e:	11 97       	sbiw	r26, 0x01	; 1
    1b60:	02 80       	ldd	r0, Z+2	; 0x02
    1b62:	f3 81       	ldd	r31, Z+3	; 0x03
    1b64:	e0 2d       	mov	r30, r0
    1b66:	cd 01       	movw	r24, r26
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	09 95       	icall
    1b6c:	d7 01       	movw	r26, r14
    1b6e:	ed 91       	ld	r30, X+
    1b70:	fc 91       	ld	r31, X
    1b72:	02 80       	ldd	r0, Z+2	; 0x02
    1b74:	f3 81       	ldd	r31, Z+3	; 0x03
    1b76:	e0 2d       	mov	r30, r0
    1b78:	c7 01       	movw	r24, r14
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	09 95       	icall
    1b7e:	1e a6       	std	Y+46, r1	; 0x2e
    1b80:	1d a6       	std	Y+45, r1	; 0x2d
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	ff 90       	pop	r15
    1b8c:	ef 90       	pop	r14
    1b8e:	08 95       	ret

00001b90 <DigitalInputShiftRegister_74HC166::update()>:
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	ec 01       	movw	r28, r24
    1b9e:	aa a9       	ldd	r26, Y+50	; 0x32
    1ba0:	bb a9       	ldd	r27, Y+51	; 0x33
    1ba2:	ed 91       	ld	r30, X+
    1ba4:	fc 91       	ld	r31, X
    1ba6:	11 97       	sbiw	r26, 0x01	; 1
    1ba8:	02 80       	ldd	r0, Z+2	; 0x02
    1baa:	f3 81       	ldd	r31, Z+3	; 0x03
    1bac:	e0 2d       	mov	r30, r0
    1bae:	cd 01       	movw	r24, r26
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	09 95       	icall
    1bb4:	a8 a9       	ldd	r26, Y+48	; 0x30
    1bb6:	b9 a9       	ldd	r27, Y+49	; 0x31
    1bb8:	ed 91       	ld	r30, X+
    1bba:	fc 91       	ld	r31, X
    1bbc:	11 97       	sbiw	r26, 0x01	; 1
    1bbe:	02 80       	ldd	r0, Z+2	; 0x02
    1bc0:	f3 81       	ldd	r31, Z+3	; 0x03
    1bc2:	e0 2d       	mov	r30, r0
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	09 95       	icall
    1bca:	aa a9       	ldd	r26, Y+50	; 0x32
    1bcc:	bb a9       	ldd	r27, Y+51	; 0x33
    1bce:	ed 91       	ld	r30, X+
    1bd0:	fc 91       	ld	r31, X
    1bd2:	11 97       	sbiw	r26, 0x01	; 1
    1bd4:	02 80       	ldd	r0, Z+2	; 0x02
    1bd6:	f3 81       	ldd	r31, Z+3	; 0x03
    1bd8:	e0 2d       	mov	r30, r0
    1bda:	cd 01       	movw	r24, r26
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	09 95       	icall
    1be0:	a8 a9       	ldd	r26, Y+48	; 0x30
    1be2:	b9 a9       	ldd	r27, Y+49	; 0x31
    1be4:	ed 91       	ld	r30, X+
    1be6:	fc 91       	ld	r31, X
    1be8:	11 97       	sbiw	r26, 0x01	; 1
    1bea:	02 80       	ldd	r0, Z+2	; 0x02
    1bec:	f3 81       	ldd	r31, Z+3	; 0x03
    1bee:	e0 2d       	mov	r30, r0
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	09 95       	icall
    1bf6:	8e 01       	movw	r16, r28
    1bf8:	03 5d       	subi	r16, 0xD3	; 211
    1bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfc:	ff 24       	eor	r15, r15
    1bfe:	f3 94       	inc	r15
    1c00:	ee 24       	eor	r14, r14
    1c02:	31 c0       	rjmp	.+98     	; 0x1c66 <DigitalInputShiftRegister_74HC166::update()+0xd6>
    1c04:	ec a9       	ldd	r30, Y+52	; 0x34
    1c06:	fd a9       	ldd	r31, Y+53	; 0x35
    1c08:	a0 81       	ld	r26, Z
    1c0a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c0c:	2d 91       	ld	r18, X+
    1c0e:	3c 91       	ld	r19, X
    1c10:	cf 01       	movw	r24, r30
    1c12:	f9 01       	movw	r30, r18
    1c14:	09 95       	icall
    1c16:	f8 01       	movw	r30, r16
    1c18:	90 81       	ld	r25, Z
    1c1a:	88 23       	and	r24, r24
    1c1c:	11 f0       	breq	.+4      	; 0x1c22 <DigitalInputShiftRegister_74HC166::update()+0x92>
    1c1e:	9f 29       	or	r25, r15
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <DigitalInputShiftRegister_74HC166::update()+0x9a>
    1c22:	8f 2d       	mov	r24, r15
    1c24:	80 95       	com	r24
    1c26:	98 23       	and	r25, r24
    1c28:	f8 01       	movw	r30, r16
    1c2a:	90 83       	st	Z, r25
    1c2c:	aa a9       	ldd	r26, Y+50	; 0x32
    1c2e:	bb a9       	ldd	r27, Y+51	; 0x33
    1c30:	ed 91       	ld	r30, X+
    1c32:	fc 91       	ld	r31, X
    1c34:	11 97       	sbiw	r26, 0x01	; 1
    1c36:	02 80       	ldd	r0, Z+2	; 0x02
    1c38:	f3 81       	ldd	r31, Z+3	; 0x03
    1c3a:	e0 2d       	mov	r30, r0
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	09 95       	icall
    1c42:	aa a9       	ldd	r26, Y+50	; 0x32
    1c44:	bb a9       	ldd	r27, Y+51	; 0x33
    1c46:	ed 91       	ld	r30, X+
    1c48:	fc 91       	ld	r31, X
    1c4a:	11 97       	sbiw	r26, 0x01	; 1
    1c4c:	02 80       	ldd	r0, Z+2	; 0x02
    1c4e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c50:	e0 2d       	mov	r30, r0
    1c52:	cd 01       	movw	r24, r26
    1c54:	61 e0       	ldi	r22, 0x01	; 1
    1c56:	09 95       	icall
    1c58:	ff 0c       	add	r15, r15
    1c5a:	21 f4       	brne	.+8      	; 0x1c64 <DigitalInputShiftRegister_74HC166::update()+0xd4>
    1c5c:	0f 5f       	subi	r16, 0xFF	; 255
    1c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c60:	ff 24       	eor	r15, r15
    1c62:	f3 94       	inc	r15
    1c64:	e3 94       	inc	r14
    1c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c68:	e8 16       	cp	r14, r24
    1c6a:	60 f2       	brcs	.-104    	; 0x1c04 <DigitalInputShiftRegister_74HC166::update()+0x74>
    1c6c:	a8 a9       	ldd	r26, Y+48	; 0x30
    1c6e:	b9 a9       	ldd	r27, Y+49	; 0x31
    1c70:	ed 91       	ld	r30, X+
    1c72:	fc 91       	ld	r31, X
    1c74:	11 97       	sbiw	r26, 0x01	; 1
    1c76:	02 80       	ldd	r0, Z+2	; 0x02
    1c78:	f3 81       	ldd	r31, Z+3	; 0x03
    1c7a:	e0 2d       	mov	r30, r0
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	09 95       	icall
    1c82:	aa a9       	ldd	r26, Y+50	; 0x32
    1c84:	bb a9       	ldd	r27, Y+51	; 0x33
    1c86:	ed 91       	ld	r30, X+
    1c88:	fc 91       	ld	r31, X
    1c8a:	11 97       	sbiw	r26, 0x01	; 1
    1c8c:	02 80       	ldd	r0, Z+2	; 0x02
    1c8e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c90:	e0 2d       	mov	r30, r0
    1c92:	cd 01       	movw	r24, r26
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	09 95       	icall
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	08 95       	ret

00001ca6 <DigitalOutputShiftRegister_74HC595_Pin::getState()>:
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	a2 81       	ldd	r26, Z+2	; 0x02
    1caa:	b3 81       	ldd	r27, Z+3	; 0x03
    1cac:	24 81       	ldd	r18, Z+4	; 0x04
    1cae:	a4 5a       	subi	r26, 0xA4	; 164
    1cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb2:	8c 91       	ld	r24, X
    1cb4:	ac 55       	subi	r26, 0x5C	; 92
    1cb6:	b0 40       	sbci	r27, 0x00	; 0
    1cb8:	28 17       	cp	r18, r24
    1cba:	10 f0       	brcs	.+4      	; 0x1cc0 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x1a>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	08 95       	ret
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	e3 e0       	ldi	r30, 0x03	; 3
    1cc6:	95 95       	asr	r25
    1cc8:	87 95       	ror	r24
    1cca:	ea 95       	dec	r30
    1ccc:	e1 f7       	brne	.-8      	; 0x1cc6 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x20>
    1cce:	a8 0f       	add	r26, r24
    1cd0:	b9 1f       	adc	r27, r25
    1cd2:	aa 5a       	subi	r26, 0xAA	; 170
    1cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd6:	8c 91       	ld	r24, X
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	27 70       	andi	r18, 0x07	; 7
    1cdc:	30 70       	andi	r19, 0x00	; 0
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x3e>
    1ce0:	95 95       	asr	r25
    1ce2:	87 95       	ror	r24
    1ce4:	2a 95       	dec	r18
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x3a>
    1ce8:	81 70       	andi	r24, 0x01	; 1
    1cea:	08 95       	ret

00001cec <DigitalOutputShiftRegister_74HC595::update()>:
    1cec:	6f 92       	push	r6
    1cee:	7f 92       	push	r7
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	ec 01       	movw	r28, r24
    1d0a:	c3 5a       	subi	r28, 0xA3	; 163
    1d0c:	df 4f       	sbci	r29, 0xFF	; 255
    1d0e:	88 81       	ld	r24, Y
    1d10:	cd 55       	subi	r28, 0x5D	; 93
    1d12:	d0 40       	sbci	r29, 0x00	; 0
    1d14:	88 23       	and	r24, r24
    1d16:	41 f4       	brne	.+16     	; 0x1d28 <DigitalOutputShiftRegister_74HC595::update()+0x3c>
    1d18:	cb 5a       	subi	r28, 0xAB	; 171
    1d1a:	df 4f       	sbci	r29, 0xFF	; 255
    1d1c:	88 81       	ld	r24, Y
    1d1e:	c5 55       	subi	r28, 0x55	; 85
    1d20:	d0 40       	sbci	r29, 0x00	; 0
    1d22:	88 23       	and	r24, r24
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <DigitalOutputShiftRegister_74HC595::update()+0x3c>
    1d26:	50 c1       	rjmp	.+672    	; 0x1fc8 <DigitalOutputShiftRegister_74HC595::update()+0x2dc>
    1d28:	c0 5a       	subi	r28, 0xA0	; 160
    1d2a:	df 4f       	sbci	r29, 0xFF	; 255
    1d2c:	a8 81       	ld	r26, Y
    1d2e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d30:	c0 56       	subi	r28, 0x60	; 96
    1d32:	d0 40       	sbci	r29, 0x00	; 0
    1d34:	ed 91       	ld	r30, X+
    1d36:	fc 91       	ld	r31, X
    1d38:	11 97       	sbiw	r26, 0x01	; 1
    1d3a:	02 80       	ldd	r0, Z+2	; 0x02
    1d3c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d3e:	e0 2d       	mov	r30, r0
    1d40:	cd 01       	movw	r24, r26
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	09 95       	icall
    1d46:	65 e5       	ldi	r22, 0x55	; 85
    1d48:	c6 2e       	mov	r12, r22
    1d4a:	d1 2c       	mov	r13, r1
    1d4c:	cc 0e       	add	r12, r28
    1d4e:	dd 1e       	adc	r13, r29
    1d50:	d6 01       	movw	r26, r12
    1d52:	8c 91       	ld	r24, X
    1d54:	82 50       	subi	r24, 0x02	; 2
    1d56:	82 30       	cpi	r24, 0x02	; 2
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <DigitalOutputShiftRegister_74HC595::update()+0x70>
    1d5a:	96 c0       	rjmp	.+300    	; 0x1e88 <DigitalOutputShiftRegister_74HC595::update()+0x19c>
    1d5c:	8e 01       	movw	r16, r28
    1d5e:	0e 59       	subi	r16, 0x9E	; 158
    1d60:	1f 4f       	sbci	r17, 0xFF	; 255
    1d62:	f8 01       	movw	r30, r16
    1d64:	a0 81       	ld	r26, Z
    1d66:	b1 81       	ldd	r27, Z+1	; 0x01
    1d68:	ed 91       	ld	r30, X+
    1d6a:	fc 91       	ld	r31, X
    1d6c:	11 97       	sbiw	r26, 0x01	; 1
    1d6e:	02 80       	ldd	r0, Z+2	; 0x02
    1d70:	f3 81       	ldd	r31, Z+3	; 0x03
    1d72:	e0 2d       	mov	r30, r0
    1d74:	cd 01       	movw	r24, r26
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	09 95       	icall
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e4 5a       	subi	r30, 0xA4	; 164
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	20 81       	ld	r18, Z
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	21 50       	subi	r18, 0x01	; 1
    1d86:	30 40       	sbci	r19, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	47 70       	andi	r20, 0x07	; 7
    1d8c:	50 70       	andi	r21, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DigitalOutputShiftRegister_74HC595::update()+0xac>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	4a 95       	dec	r20
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DigitalOutputShiftRegister_74HC595::update()+0xa8>
    1d9c:	b8 2e       	mov	r11, r24
    1d9e:	79 01       	movw	r14, r18
    1da0:	53 e0       	ldi	r21, 0x03	; 3
    1da2:	f5 94       	asr	r15
    1da4:	e7 94       	ror	r14
    1da6:	5a 95       	dec	r21
    1da8:	e1 f7       	brne	.-8      	; 0x1da2 <DigitalOutputShiftRegister_74HC595::update()+0xb6>
    1daa:	86 e5       	ldi	r24, 0x56	; 86
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	e8 0e       	add	r14, r24
    1db0:	f9 1e       	adc	r15, r25
    1db2:	ec 0e       	add	r14, r28
    1db4:	fd 1e       	adc	r15, r29
    1db6:	aa 24       	eor	r10, r10
    1db8:	3f 01       	movw	r6, r30
    1dba:	4e e5       	ldi	r20, 0x5E	; 94
    1dbc:	84 2e       	mov	r8, r20
    1dbe:	91 2c       	mov	r9, r1
    1dc0:	8c 0e       	add	r8, r28
    1dc2:	9d 1e       	adc	r9, r29
    1dc4:	41 c0       	rjmp	.+130    	; 0x1e48 <DigitalOutputShiftRegister_74HC595::update()+0x15c>
    1dc6:	f4 01       	movw	r30, r8
    1dc8:	a0 81       	ld	r26, Z
    1dca:	b1 81       	ldd	r27, Z+1	; 0x01
    1dcc:	ed 91       	ld	r30, X+
    1dce:	fc 91       	ld	r31, X
    1dd0:	11 97       	sbiw	r26, 0x01	; 1
    1dd2:	02 80       	ldd	r0, Z+2	; 0x02
    1dd4:	f3 81       	ldd	r31, Z+3	; 0x03
    1dd6:	e0 2d       	mov	r30, r0
    1dd8:	cd 01       	movw	r24, r26
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	09 95       	icall
    1dde:	d6 01       	movw	r26, r12
    1de0:	8c 91       	ld	r24, X
    1de2:	83 30       	cpi	r24, 0x03	; 3
    1de4:	19 f5       	brne	.+70     	; 0x1e2c <DigitalOutputShiftRegister_74HC595::update()+0x140>
    1de6:	f8 01       	movw	r30, r16
    1de8:	a0 81       	ld	r26, Z
    1dea:	b1 81       	ldd	r27, Z+1	; 0x01
    1dec:	4d 91       	ld	r20, X+
    1dee:	5c 91       	ld	r21, X
    1df0:	11 97       	sbiw	r26, 0x01	; 1
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	f7 01       	movw	r30, r14
    1df6:	80 81       	ld	r24, Z
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	2b 2d       	mov	r18, r11
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	82 23       	and	r24, r18
    1e00:	93 23       	and	r25, r19
    1e02:	89 2b       	or	r24, r25
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <DigitalOutputShiftRegister_74HC595::update()+0x11c>
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	fa 01       	movw	r30, r20
    1e0a:	22 81       	ldd	r18, Z+2	; 0x02
    1e0c:	33 81       	ldd	r19, Z+3	; 0x03
    1e0e:	cd 01       	movw	r24, r26
    1e10:	f9 01       	movw	r30, r18
    1e12:	09 95       	icall
    1e14:	8b 2d       	mov	r24, r11
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	95 95       	asr	r25
    1e1a:	87 95       	ror	r24
    1e1c:	b8 2e       	mov	r11, r24
    1e1e:	88 23       	and	r24, r24
    1e20:	29 f4       	brne	.+10     	; 0x1e2c <DigitalOutputShiftRegister_74HC595::update()+0x140>
    1e22:	08 94       	sec
    1e24:	e1 08       	sbc	r14, r1
    1e26:	f1 08       	sbc	r15, r1
    1e28:	20 e8       	ldi	r18, 0x80	; 128
    1e2a:	b2 2e       	mov	r11, r18
    1e2c:	d4 01       	movw	r26, r8
    1e2e:	ed 91       	ld	r30, X+
    1e30:	fc 91       	ld	r31, X
    1e32:	a0 81       	ld	r26, Z
    1e34:	b1 81       	ldd	r27, Z+1	; 0x01
    1e36:	12 96       	adiw	r26, 0x02	; 2
    1e38:	2d 91       	ld	r18, X+
    1e3a:	3c 91       	ld	r19, X
    1e3c:	13 97       	sbiw	r26, 0x03	; 3
    1e3e:	cf 01       	movw	r24, r30
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	f9 01       	movw	r30, r18
    1e44:	09 95       	icall
    1e46:	a3 94       	inc	r10
    1e48:	f3 01       	movw	r30, r6
    1e4a:	80 81       	ld	r24, Z
    1e4c:	a8 16       	cp	r10, r24
    1e4e:	08 f4       	brcc	.+2      	; 0x1e52 <DigitalOutputShiftRegister_74HC595::update()+0x166>
    1e50:	ba cf       	rjmp	.-140    	; 0x1dc6 <DigitalOutputShiftRegister_74HC595::update()+0xda>
    1e52:	8e 01       	movw	r16, r28
    1e54:	00 5a       	subi	r16, 0xA0	; 160
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	f8 01       	movw	r30, r16
    1e5a:	a0 81       	ld	r26, Z
    1e5c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	11 97       	sbiw	r26, 0x01	; 1
    1e64:	02 80       	ldd	r0, Z+2	; 0x02
    1e66:	f3 81       	ldd	r31, Z+3	; 0x03
    1e68:	e0 2d       	mov	r30, r0
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	61 e0       	ldi	r22, 0x01	; 1
    1e6e:	09 95       	icall
    1e70:	f8 01       	movw	r30, r16
    1e72:	a0 81       	ld	r26, Z
    1e74:	b1 81       	ldd	r27, Z+1	; 0x01
    1e76:	ed 91       	ld	r30, X+
    1e78:	fc 91       	ld	r31, X
    1e7a:	11 97       	sbiw	r26, 0x01	; 1
    1e7c:	02 80       	ldd	r0, Z+2	; 0x02
    1e7e:	f3 81       	ldd	r31, Z+3	; 0x03
    1e80:	e0 2d       	mov	r30, r0
    1e82:	cd 01       	movw	r24, r26
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	09 95       	icall
    1e88:	c3 5a       	subi	r28, 0xA3	; 163
    1e8a:	df 4f       	sbci	r29, 0xFF	; 255
    1e8c:	18 82       	st	Y, r1
    1e8e:	cd 55       	subi	r28, 0x5D	; 93
    1e90:	d0 40       	sbci	r29, 0x00	; 0
    1e92:	fe 01       	movw	r30, r28
    1e94:	e4 5a       	subi	r30, 0xA4	; 164
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	20 81       	ld	r18, Z
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	21 50       	subi	r18, 0x01	; 1
    1e9e:	30 40       	sbci	r19, 0x00	; 0
    1ea0:	a9 01       	movw	r20, r18
    1ea2:	47 70       	andi	r20, 0x07	; 7
    1ea4:	50 70       	andi	r21, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <DigitalOutputShiftRegister_74HC595::update()+0x1c4>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	4a 95       	dec	r20
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <DigitalOutputShiftRegister_74HC595::update()+0x1c0>
    1eb4:	d8 2e       	mov	r13, r24
    1eb6:	89 01       	movw	r16, r18
    1eb8:	93 e0       	ldi	r25, 0x03	; 3
    1eba:	15 95       	asr	r17
    1ebc:	07 95       	ror	r16
    1ebe:	9a 95       	dec	r25
    1ec0:	e1 f7       	brne	.-8      	; 0x1eba <DigitalOutputShiftRegister_74HC595::update()+0x1ce>
    1ec2:	0a 5a       	subi	r16, 0xAA	; 170
    1ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec6:	0c 0f       	add	r16, r28
    1ec8:	1d 1f       	adc	r17, r29
    1eca:	cc 24       	eor	r12, r12
    1ecc:	4f 01       	movw	r8, r30
    1ece:	82 e6       	ldi	r24, 0x62	; 98
    1ed0:	a8 2e       	mov	r10, r24
    1ed2:	b1 2c       	mov	r11, r1
    1ed4:	ac 0e       	add	r10, r28
    1ed6:	bd 1e       	adc	r11, r29
    1ed8:	be e5       	ldi	r27, 0x5E	; 94
    1eda:	eb 2e       	mov	r14, r27
    1edc:	f1 2c       	mov	r15, r1
    1ede:	ec 0e       	add	r14, r28
    1ee0:	fd 1e       	adc	r15, r29
    1ee2:	3b c0       	rjmp	.+118    	; 0x1f5a <DigitalOutputShiftRegister_74HC595::update()+0x26e>
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	a0 81       	ld	r26, Z
    1ee8:	b1 81       	ldd	r27, Z+1	; 0x01
    1eea:	ed 91       	ld	r30, X+
    1eec:	fc 91       	ld	r31, X
    1eee:	11 97       	sbiw	r26, 0x01	; 1
    1ef0:	02 80       	ldd	r0, Z+2	; 0x02
    1ef2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	09 95       	icall
    1efc:	f5 01       	movw	r30, r10
    1efe:	a0 81       	ld	r26, Z
    1f00:	b1 81       	ldd	r27, Z+1	; 0x01
    1f02:	4d 91       	ld	r20, X+
    1f04:	5c 91       	ld	r21, X
    1f06:	11 97       	sbiw	r26, 0x01	; 1
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	80 81       	ld	r24, Z
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	2d 2d       	mov	r18, r13
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	82 23       	and	r24, r18
    1f16:	93 23       	and	r25, r19
    1f18:	89 2b       	or	r24, r25
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <DigitalOutputShiftRegister_74HC595::update()+0x232>
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	fa 01       	movw	r30, r20
    1f20:	22 81       	ldd	r18, Z+2	; 0x02
    1f22:	33 81       	ldd	r19, Z+3	; 0x03
    1f24:	cd 01       	movw	r24, r26
    1f26:	f9 01       	movw	r30, r18
    1f28:	09 95       	icall
    1f2a:	f7 01       	movw	r30, r14
    1f2c:	a0 81       	ld	r26, Z
    1f2e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f30:	ed 91       	ld	r30, X+
    1f32:	fc 91       	ld	r31, X
    1f34:	11 97       	sbiw	r26, 0x01	; 1
    1f36:	02 80       	ldd	r0, Z+2	; 0x02
    1f38:	f3 81       	ldd	r31, Z+3	; 0x03
    1f3a:	e0 2d       	mov	r30, r0
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	09 95       	icall
    1f42:	8d 2d       	mov	r24, r13
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	95 95       	asr	r25
    1f48:	87 95       	ror	r24
    1f4a:	d8 2e       	mov	r13, r24
    1f4c:	88 23       	and	r24, r24
    1f4e:	21 f4       	brne	.+8      	; 0x1f58 <DigitalOutputShiftRegister_74HC595::update()+0x26c>
    1f50:	01 50       	subi	r16, 0x01	; 1
    1f52:	10 40       	sbci	r17, 0x00	; 0
    1f54:	f0 e8       	ldi	r31, 0x80	; 128
    1f56:	df 2e       	mov	r13, r31
    1f58:	c3 94       	inc	r12
    1f5a:	d4 01       	movw	r26, r8
    1f5c:	8c 91       	ld	r24, X
    1f5e:	c8 16       	cp	r12, r24
    1f60:	08 f2       	brcs	.-126    	; 0x1ee4 <DigitalOutputShiftRegister_74HC595::update()+0x1f8>
    1f62:	f7 01       	movw	r30, r14
    1f64:	a0 81       	ld	r26, Z
    1f66:	b1 81       	ldd	r27, Z+1	; 0x01
    1f68:	ed 91       	ld	r30, X+
    1f6a:	fc 91       	ld	r31, X
    1f6c:	11 97       	sbiw	r26, 0x01	; 1
    1f6e:	02 80       	ldd	r0, Z+2	; 0x02
    1f70:	f3 81       	ldd	r31, Z+3	; 0x03
    1f72:	e0 2d       	mov	r30, r0
    1f74:	cd 01       	movw	r24, r26
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	09 95       	icall
    1f7a:	f5 01       	movw	r30, r10
    1f7c:	a0 81       	ld	r26, Z
    1f7e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f80:	ed 91       	ld	r30, X+
    1f82:	fc 91       	ld	r31, X
    1f84:	11 97       	sbiw	r26, 0x01	; 1
    1f86:	02 80       	ldd	r0, Z+2	; 0x02
    1f88:	f3 81       	ldd	r31, Z+3	; 0x03
    1f8a:	e0 2d       	mov	r30, r0
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	09 95       	icall
    1f92:	8e 01       	movw	r16, r28
    1f94:	00 5a       	subi	r16, 0xA0	; 160
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	f8 01       	movw	r30, r16
    1f9a:	a0 81       	ld	r26, Z
    1f9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f9e:	ed 91       	ld	r30, X+
    1fa0:	fc 91       	ld	r31, X
    1fa2:	11 97       	sbiw	r26, 0x01	; 1
    1fa4:	02 80       	ldd	r0, Z+2	; 0x02
    1fa6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa8:	e0 2d       	mov	r30, r0
    1faa:	cd 01       	movw	r24, r26
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	09 95       	icall
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	a0 81       	ld	r26, Z
    1fb4:	b1 81       	ldd	r27, Z+1	; 0x01
    1fb6:	ed 91       	ld	r30, X+
    1fb8:	fc 91       	ld	r31, X
    1fba:	11 97       	sbiw	r26, 0x01	; 1
    1fbc:	02 80       	ldd	r0, Z+2	; 0x02
    1fbe:	f3 81       	ldd	r31, Z+3	; 0x03
    1fc0:	e0 2d       	mov	r30, r0
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	09 95       	icall
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	cf 90       	pop	r12
    1fd8:	bf 90       	pop	r11
    1fda:	af 90       	pop	r10
    1fdc:	9f 90       	pop	r9
    1fde:	8f 90       	pop	r8
    1fe0:	7f 90       	pop	r7
    1fe2:	6f 90       	pop	r6
    1fe4:	08 95       	ret

00001fe6 <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>:
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	ec 01       	movw	r28, r24
    1ff4:	d9 01       	movw	r26, r18
    1ff6:	61 31       	cpi	r22, 0x11	; 17
    1ff8:	08 f4       	brcc	.+2      	; 0x1ffc <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)+0x16>
    1ffa:	61 e1       	ldi	r22, 0x11	; 17
    1ffc:	c4 5a       	subi	r28, 0xA4	; 164
    1ffe:	df 4f       	sbci	r29, 0xFF	; 255
    2000:	68 83       	st	Y, r22
    2002:	22 96       	adiw	r28, 0x02	; 2
    2004:	a9 93       	st	Y+, r26
    2006:	b9 93       	st	Y+, r27
    2008:	09 93       	st	Y+, r16
    200a:	19 93       	st	Y+, r17
    200c:	f9 82       	std	Y+1, r15	; 0x01
    200e:	e8 82       	st	Y, r14
    2010:	2d 97       	sbiw	r28, 0x0d	; 13
    2012:	48 83       	st	Y, r20
    2014:	28 96       	adiw	r28, 0x08	; 8
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	88 83       	st	Y, r24
    201a:	ed 91       	ld	r30, X+
    201c:	fc 91       	ld	r31, X
    201e:	11 97       	sbiw	r26, 0x01	; 1
    2020:	02 80       	ldd	r0, Z+2	; 0x02
    2022:	f3 81       	ldd	r31, Z+3	; 0x03
    2024:	e0 2d       	mov	r30, r0
    2026:	cd 01       	movw	r24, r26
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	09 95       	icall
    202c:	d8 01       	movw	r26, r16
    202e:	ed 91       	ld	r30, X+
    2030:	fc 91       	ld	r31, X
    2032:	02 80       	ldd	r0, Z+2	; 0x02
    2034:	f3 81       	ldd	r31, Z+3	; 0x03
    2036:	e0 2d       	mov	r30, r0
    2038:	c8 01       	movw	r24, r16
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	09 95       	icall
    203e:	d7 01       	movw	r26, r14
    2040:	ed 91       	ld	r30, X+
    2042:	fc 91       	ld	r31, X
    2044:	02 80       	ldd	r0, Z+2	; 0x02
    2046:	f3 81       	ldd	r31, Z+3	; 0x03
    2048:	e0 2d       	mov	r30, r0
    204a:	c7 01       	movw	r24, r14
    204c:	60 e0       	ldi	r22, 0x00	; 0
    204e:	09 95       	icall
    2050:	25 97       	sbiw	r28, 0x05	; 5
    2052:	18 82       	st	Y, r1
    2054:	23 96       	adiw	r28, 0x03	; 3
    2056:	18 82       	st	Y, r1
    2058:	24 97       	sbiw	r28, 0x04	; 4
    205a:	18 82       	st	Y, r1
    205c:	23 96       	adiw	r28, 0x03	; 3
    205e:	18 82       	st	Y, r1
    2060:	24 97       	sbiw	r28, 0x04	; 4
    2062:	18 82       	st	Y, r1
    2064:	23 96       	adiw	r28, 0x03	; 3
    2066:	18 82       	st	Y, r1
    2068:	c9 55       	subi	r28, 0x59	; 89
    206a:	d0 40       	sbci	r29, 0x00	; 0
    206c:	ce 01       	movw	r24, r28
    206e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <DigitalOutputShiftRegister_74HC595::update()>
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	08 95       	ret

00002080 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)>:
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	dc 01       	movw	r26, r24
    2088:	14 2f       	mov	r17, r20
    208a:	a4 5a       	subi	r26, 0xA4	; 164
    208c:	bf 4f       	sbci	r27, 0xFF	; 255
    208e:	8c 91       	ld	r24, X
    2090:	ac 55       	subi	r26, 0x5C	; 92
    2092:	b0 40       	sbci	r27, 0x00	; 0
    2094:	68 17       	cp	r22, r24
    2096:	a8 f5       	brcc	.+106    	; 0x2102 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x82>
    2098:	46 2f       	mov	r20, r22
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	9a 01       	movw	r18, r20
    209e:	27 70       	andi	r18, 0x07	; 7
    20a0:	30 70       	andi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x2c>
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	2a 95       	dec	r18
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x28>
    20b0:	78 2f       	mov	r23, r24
    20b2:	e3 e0       	ldi	r30, 0x03	; 3
    20b4:	56 95       	lsr	r21
    20b6:	47 95       	ror	r20
    20b8:	ea 95       	dec	r30
    20ba:	e1 f7       	brne	.-8      	; 0x20b4 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x34>
    20bc:	4a 0f       	add	r20, r26
    20be:	5b 1f       	adc	r21, r27
    20c0:	ea 01       	movw	r28, r20
    20c2:	ca 5a       	subi	r28, 0xAA	; 170
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	68 81       	ld	r22, Y
    20c8:	86 2f       	mov	r24, r22
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	27 2f       	mov	r18, r23
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	82 23       	and	r24, r18
    20d2:	93 23       	and	r25, r19
    20d4:	21 2f       	mov	r18, r17
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	82 17       	cp	r24, r18
    20da:	93 07       	cpc	r25, r19
    20dc:	91 f0       	breq	.+36     	; 0x2102 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x82>
    20de:	a3 5a       	subi	r26, 0xA3	; 163
    20e0:	bf 4f       	sbci	r27, 0xFF	; 255
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	8c 93       	st	X, r24
    20e6:	97 2f       	mov	r25, r23
    20e8:	90 95       	com	r25
    20ea:	fa 01       	movw	r30, r20
    20ec:	e7 5a       	subi	r30, 0xA7	; 167
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	89 23       	and	r24, r25
    20f4:	80 83       	st	Z, r24
    20f6:	11 23       	and	r17, r17
    20f8:	11 f0       	breq	.+4      	; 0x20fe <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x7e>
    20fa:	67 2b       	or	r22, r23
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x80>
    20fe:	69 23       	and	r22, r25
    2100:	68 83       	st	Y, r22
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	08 95       	ret

0000210a <DigitalOutputShiftRegister_74HC595_Pin::setState(bool)>:
    210a:	fc 01       	movw	r30, r24
    210c:	46 2f       	mov	r20, r22
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	64 81       	ldd	r22, Z+4	; 0x04
    2114:	0e 94 40 10 	call	0x2080	; 0x2080 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)>
    2118:	08 95       	ret

0000211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>:
    211a:	26 2f       	mov	r18, r22
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	f9 01       	movw	r30, r18
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	e2 0f       	add	r30, r18
    212a:	f3 1f       	adc	r31, r19
    212c:	e8 0f       	add	r30, r24
    212e:	f9 1f       	adc	r31, r25
    2130:	93 83       	std	Z+3, r25	; 0x03
    2132:	82 83       	std	Z+2, r24	; 0x02
    2134:	64 83       	std	Z+4, r22	; 0x04
    2136:	cf 01       	movw	r24, r30
    2138:	08 95       	ret

0000213a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>:
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	8c 01       	movw	r16, r24
    2142:	86 2f       	mov	r24, r22
    2144:	f4 2e       	mov	r15, r20
    2146:	26 2f       	mov	r18, r22
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	f9 01       	movw	r30, r18
    214c:	e6 5e       	subi	r30, 0xE6	; 230
    214e:	f9 4f       	sbci	r31, 0xF9	; 249
    2150:	e4 91       	lpm	r30, Z+
    2152:	d8 01       	movw	r26, r16
    2154:	12 96       	adiw	r26, 0x02	; 2
    2156:	ec 93       	st	X, r30
    2158:	12 97       	sbiw	r26, 0x02	; 2
    215a:	2a 5f       	subi	r18, 0xFA	; 250
    215c:	39 4f       	sbci	r19, 0xF9	; 249
    215e:	f9 01       	movw	r30, r18
    2160:	94 91       	lpm	r25, Z+
    2162:	e9 2f       	mov	r30, r25
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	ee 0f       	add	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	ee 50       	subi	r30, 0x0E	; 14
    216c:	fa 4f       	sbci	r31, 0xFA	; 250
    216e:	25 91       	lpm	r18, Z+
    2170:	34 91       	lpm	r19, Z+
    2172:	14 96       	adiw	r26, 0x04	; 4
    2174:	3c 93       	st	X, r19
    2176:	2e 93       	st	-X, r18
    2178:	13 97       	sbiw	r26, 0x03	; 3
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	0e 94 be 1c 	call	0x397c	; 0x397c <pinMode>
    2180:	d8 01       	movw	r26, r16
    2182:	ed 91       	ld	r30, X+
    2184:	fc 91       	ld	r31, X
    2186:	02 80       	ldd	r0, Z+2	; 0x02
    2188:	f3 81       	ldd	r31, Z+3	; 0x03
    218a:	e0 2d       	mov	r30, r0
    218c:	c8 01       	movw	r24, r16
    218e:	6f 2d       	mov	r22, r15
    2190:	09 95       	icall
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	ff 90       	pop	r15
    2198:	08 95       	ret

0000219a <DigitalInputArduinoPin::initialize(unsigned char, bool)>:
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	7c 01       	movw	r14, r24
    21a6:	86 2f       	mov	r24, r22
    21a8:	d4 2e       	mov	r13, r20
    21aa:	26 2f       	mov	r18, r22
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	f9 01       	movw	r30, r18
    21b0:	e6 5e       	subi	r30, 0xE6	; 230
    21b2:	f9 4f       	sbci	r31, 0xF9	; 249
    21b4:	e4 91       	lpm	r30, Z+
    21b6:	d7 01       	movw	r26, r14
    21b8:	12 96       	adiw	r26, 0x02	; 2
    21ba:	ec 93       	st	X, r30
    21bc:	12 97       	sbiw	r26, 0x02	; 2
    21be:	2a 5f       	subi	r18, 0xFA	; 250
    21c0:	39 4f       	sbci	r19, 0xF9	; 249
    21c2:	f9 01       	movw	r30, r18
    21c4:	04 91       	lpm	r16, Z+
    21c6:	10 e0       	ldi	r17, 0x00	; 0
    21c8:	00 0f       	add	r16, r16
    21ca:	11 1f       	adc	r17, r17
    21cc:	f8 01       	movw	r30, r16
    21ce:	e4 50       	subi	r30, 0x04	; 4
    21d0:	fa 4f       	sbci	r31, 0xFA	; 250
    21d2:	25 91       	lpm	r18, Z+
    21d4:	34 91       	lpm	r19, Z+
    21d6:	14 96       	adiw	r26, 0x04	; 4
    21d8:	3c 93       	st	X, r19
    21da:	2e 93       	st	-X, r18
    21dc:	13 97       	sbiw	r26, 0x03	; 3
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	0e 94 be 1c 	call	0x397c	; 0x397c <pinMode>
    21e4:	f8 01       	movw	r30, r16
    21e6:	ee 50       	subi	r30, 0x0E	; 14
    21e8:	fa 4f       	sbci	r31, 0xFA	; 250
    21ea:	a5 91       	lpm	r26, Z+
    21ec:	b4 91       	lpm	r27, Z+
    21ee:	f7 01       	movw	r30, r14
    21f0:	22 81       	ldd	r18, Z+2	; 0x02
    21f2:	dd 20       	and	r13, r13
    21f4:	29 f0       	breq	.+10     	; 0x2200 <DigitalInputArduinoPin::initialize(unsigned char, bool)+0x66>
    21f6:	9f b7       	in	r25, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	8c 91       	ld	r24, X
    21fc:	82 2b       	or	r24, r18
    21fe:	05 c0       	rjmp	.+10     	; 0x220a <DigitalInputArduinoPin::initialize(unsigned char, bool)+0x70>
    2200:	9f b7       	in	r25, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	8c 91       	ld	r24, X
    2206:	20 95       	com	r18
    2208:	82 23       	and	r24, r18
    220a:	8c 93       	st	X, r24
    220c:	9f bf       	out	0x3f, r25	; 63
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	ff 90       	pop	r15
    2214:	ef 90       	pop	r14
    2216:	df 90       	pop	r13
    2218:	08 95       	ret

0000221a <RotaryEncoderState::setValue_unsafe(long)>:
    221a:	8f 92       	push	r8
    221c:	9f 92       	push	r9
    221e:	af 92       	push	r10
    2220:	bf 92       	push	r11
    2222:	cf 92       	push	r12
    2224:	df 92       	push	r13
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	fc 01       	movw	r30, r24
    2230:	85 85       	ldd	r24, Z+13	; 0x0d
    2232:	80 80       	ld	r8, Z
    2234:	91 80       	ldd	r9, Z+1	; 0x01
    2236:	a2 80       	ldd	r10, Z+2	; 0x02
    2238:	b3 80       	ldd	r11, Z+3	; 0x03
    223a:	88 23       	and	r24, r24
    223c:	d1 f1       	breq	.+116    	; 0x22b2 <RotaryEncoderState::setValue_unsafe(long)+0x98>
    223e:	84 81       	ldd	r24, Z+4	; 0x04
    2240:	95 81       	ldd	r25, Z+5	; 0x05
    2242:	a6 81       	ldd	r26, Z+6	; 0x06
    2244:	b7 81       	ldd	r27, Z+7	; 0x07
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	a1 1d       	adc	r26, r1
    224a:	b1 1d       	adc	r27, r1
    224c:	8c 01       	movw	r16, r24
    224e:	9d 01       	movw	r18, r26
    2250:	08 19       	sub	r16, r8
    2252:	19 09       	sbc	r17, r9
    2254:	2a 09       	sbc	r18, r10
    2256:	3b 09       	sbc	r19, r11
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	a1 09       	sbc	r26, r1
    225c:	b1 09       	sbc	r27, r1
    225e:	10 16       	cp	r1, r16
    2260:	11 06       	cpc	r1, r17
    2262:	12 06       	cpc	r1, r18
    2264:	13 06       	cpc	r1, r19
    2266:	54 f0       	brlt	.+20     	; 0x227c <RotaryEncoderState::setValue_unsafe(long)+0x62>
    2268:	01 e0       	ldi	r16, 0x01	; 1
    226a:	10 e0       	ldi	r17, 0x00	; 0
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	05 c0       	rjmp	.+10     	; 0x227c <RotaryEncoderState::setValue_unsafe(long)+0x62>
    2272:	4c 0d       	add	r20, r12
    2274:	5d 1d       	adc	r21, r13
    2276:	6e 1d       	adc	r22, r14
    2278:	7f 1d       	adc	r23, r15
    227a:	07 c0       	rjmp	.+14     	; 0x228a <RotaryEncoderState::setValue_unsafe(long)+0x70>
    227c:	cc 24       	eor	r12, r12
    227e:	dd 24       	eor	r13, r13
    2280:	76 01       	movw	r14, r12
    2282:	c0 1a       	sub	r12, r16
    2284:	d1 0a       	sbc	r13, r17
    2286:	e2 0a       	sbc	r14, r18
    2288:	f3 0a       	sbc	r15, r19
    228a:	84 17       	cp	r24, r20
    228c:	95 07       	cpc	r25, r21
    228e:	a6 07       	cpc	r26, r22
    2290:	b7 07       	cpc	r27, r23
    2292:	7c f3       	brlt	.-34     	; 0x2272 <RotaryEncoderState::setValue_unsafe(long)+0x58>
    2294:	04 c0       	rjmp	.+8      	; 0x229e <RotaryEncoderState::setValue_unsafe(long)+0x84>
    2296:	40 0f       	add	r20, r16
    2298:	51 1f       	adc	r21, r17
    229a:	62 1f       	adc	r22, r18
    229c:	73 1f       	adc	r23, r19
    229e:	48 15       	cp	r20, r8
    22a0:	59 05       	cpc	r21, r9
    22a2:	6a 05       	cpc	r22, r10
    22a4:	7b 05       	cpc	r23, r11
    22a6:	bc f3       	brlt	.-18     	; 0x2296 <RotaryEncoderState::setValue_unsafe(long)+0x7c>
    22a8:	40 87       	std	Z+8, r20	; 0x08
    22aa:	51 87       	std	Z+9, r21	; 0x09
    22ac:	62 87       	std	Z+10, r22	; 0x0a
    22ae:	73 87       	std	Z+11, r23	; 0x0b
    22b0:	18 c0       	rjmp	.+48     	; 0x22e2 <RotaryEncoderState::setValue_unsafe(long)+0xc8>
    22b2:	d5 01       	movw	r26, r10
    22b4:	c4 01       	movw	r24, r8
    22b6:	48 15       	cp	r20, r8
    22b8:	59 05       	cpc	r21, r9
    22ba:	6a 05       	cpc	r22, r10
    22bc:	7b 05       	cpc	r23, r11
    22be:	6c f0       	brlt	.+26     	; 0x22da <RotaryEncoderState::setValue_unsafe(long)+0xc0>
    22c0:	04 81       	ldd	r16, Z+4	; 0x04
    22c2:	15 81       	ldd	r17, Z+5	; 0x05
    22c4:	26 81       	ldd	r18, Z+6	; 0x06
    22c6:	37 81       	ldd	r19, Z+7	; 0x07
    22c8:	db 01       	movw	r26, r22
    22ca:	ca 01       	movw	r24, r20
    22cc:	04 17       	cp	r16, r20
    22ce:	15 07       	cpc	r17, r21
    22d0:	26 07       	cpc	r18, r22
    22d2:	37 07       	cpc	r19, r23
    22d4:	14 f4       	brge	.+4      	; 0x22da <RotaryEncoderState::setValue_unsafe(long)+0xc0>
    22d6:	d9 01       	movw	r26, r18
    22d8:	c8 01       	movw	r24, r16
    22da:	80 87       	std	Z+8, r24	; 0x08
    22dc:	91 87       	std	Z+9, r25	; 0x09
    22de:	a2 87       	std	Z+10, r26	; 0x0a
    22e0:	b3 87       	std	Z+11, r27	; 0x0b
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	86 87       	std	Z+14, r24	; 0x0e
    22e6:	1f 91       	pop	r17
    22e8:	0f 91       	pop	r16
    22ea:	ff 90       	pop	r15
    22ec:	ef 90       	pop	r14
    22ee:	df 90       	pop	r13
    22f0:	cf 90       	pop	r12
    22f2:	bf 90       	pop	r11
    22f4:	af 90       	pop	r10
    22f6:	9f 90       	pop	r9
    22f8:	8f 90       	pop	r8
    22fa:	08 95       	ret

000022fc <RotaryEncoderState::setMinMax(long, long)>:
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	fc 01       	movw	r30, r24
    2304:	ff b6       	in	r15, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	40 83       	st	Z, r20
    230a:	51 83       	std	Z+1, r21	; 0x01
    230c:	62 83       	std	Z+2, r22	; 0x02
    230e:	73 83       	std	Z+3, r23	; 0x03
    2310:	04 83       	std	Z+4, r16	; 0x04
    2312:	15 83       	std	Z+5, r17	; 0x05
    2314:	26 83       	std	Z+6, r18	; 0x06
    2316:	37 83       	std	Z+7, r19	; 0x07
    2318:	40 85       	ldd	r20, Z+8	; 0x08
    231a:	51 85       	ldd	r21, Z+9	; 0x09
    231c:	62 85       	ldd	r22, Z+10	; 0x0a
    231e:	73 85       	ldd	r23, Z+11	; 0x0b
    2320:	0e 94 0d 11 	call	0x221a	; 0x221a <RotaryEncoderState::setValue_unsafe(long)>
    2324:	ff be       	out	0x3f, r15	; 63
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	08 95       	ret

0000232e <RotaryEncoderAcceleration::update()>:
    232e:	6f 92       	push	r6
    2330:	7f 92       	push	r7
    2332:	8f 92       	push	r8
    2334:	9f 92       	push	r9
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	cf 92       	push	r12
    233c:	df 92       	push	r13
    233e:	ef 92       	push	r14
    2340:	ff 92       	push	r15
    2342:	0f 93       	push	r16
    2344:	1f 93       	push	r17
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	4c 01       	movw	r8, r24
    234c:	41 96       	adiw	r24, 0x11	; 17
    234e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <Button::update()>
    2352:	c4 01       	movw	r24, r8
    2354:	4b 96       	adiw	r24, 0x1b	; 27
    2356:	0e 94 c2 0c 	call	0x1984	; 0x1984 <Button::update()>
    235a:	d4 01       	movw	r26, r8
    235c:	1f 96       	adiw	r26, 0x0f	; 15
    235e:	ed 91       	ld	r30, X+
    2360:	fc 91       	ld	r31, X
    2362:	50 97       	sbiw	r26, 0x10	; 16
    2364:	84 85       	ldd	r24, Z+12	; 0x0c
    2366:	88 23       	and	r24, r24
    2368:	09 f4       	brne	.+2      	; 0x236c <RotaryEncoderAcceleration::update()+0x3e>
    236a:	88 c0       	rjmp	.+272    	; 0x247c <RotaryEncoderAcceleration::update()+0x14e>
    236c:	54 96       	adiw	r26, 0x14	; 20
    236e:	8c 91       	ld	r24, X
    2370:	54 97       	sbiw	r26, 0x14	; 20
    2372:	88 23       	and	r24, r24
    2374:	09 f0       	breq	.+2      	; 0x2378 <RotaryEncoderAcceleration::update()+0x4a>
    2376:	82 c0       	rjmp	.+260    	; 0x247c <RotaryEncoderAcceleration::update()+0x14e>
    2378:	53 96       	adiw	r26, 0x13	; 19
    237a:	8c 91       	ld	r24, X
    237c:	88 23       	and	r24, r24
    237e:	09 f4       	brne	.+2      	; 0x2382 <RotaryEncoderAcceleration::update()+0x54>
    2380:	7d c0       	rjmp	.+250    	; 0x247c <RotaryEncoderAcceleration::update()+0x14e>
    2382:	e4 01       	movw	r28, r8
    2384:	a5 96       	adiw	r28, 0x25	; 37
    2386:	ce 01       	movw	r24, r28
    2388:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <TicksPerSecond::tick()>
    238c:	ce 01       	movw	r24, r28
    238e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <TicksPerSecond::update()>
    2392:	ce 01       	movw	r24, r28
    2394:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <TicksPerSecond::getIntTPS_unsafe()>
    2398:	05 97       	sbiw	r24, 0x05	; 5
    239a:	1c f4       	brge	.+6      	; 0x23a2 <RotaryEncoderAcceleration::update()+0x74>
    239c:	c0 e0       	ldi	r28, 0x00	; 0
    239e:	d0 e0       	ldi	r29, 0x00	; 0
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <RotaryEncoderAcceleration::update()+0x8e>
    23a2:	ce 01       	movw	r24, r28
    23a4:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <TicksPerSecond::getIntTPS_unsafe()>
    23a8:	4f 97       	sbiw	r24, 0x1f	; 31
    23aa:	1c f0       	brlt	.+6      	; 0x23b2 <RotaryEncoderAcceleration::update()+0x84>
    23ac:	c9 e1       	ldi	r28, 0x19	; 25
    23ae:	d0 e0       	ldi	r29, 0x00	; 0
    23b0:	05 c0       	rjmp	.+10     	; 0x23bc <RotaryEncoderAcceleration::update()+0x8e>
    23b2:	ce 01       	movw	r24, r28
    23b4:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <TicksPerSecond::getIntTPS_unsafe()>
    23b8:	ec 01       	movw	r28, r24
    23ba:	25 97       	sbiw	r28, 0x05	; 5
    23bc:	f4 01       	movw	r30, r8
    23be:	67 84       	ldd	r6, Z+15	; 0x0f
    23c0:	70 88       	ldd	r7, Z+16	; 0x10
    23c2:	d3 01       	movw	r26, r6
    23c4:	14 96       	adiw	r26, 0x04	; 4
    23c6:	2d 91       	ld	r18, X+
    23c8:	3d 91       	ld	r19, X+
    23ca:	4d 91       	ld	r20, X+
    23cc:	5c 91       	ld	r21, X
    23ce:	17 97       	sbiw	r26, 0x07	; 7
    23d0:	8d 91       	ld	r24, X+
    23d2:	9d 91       	ld	r25, X+
    23d4:	0d 90       	ld	r0, X+
    23d6:	bc 91       	ld	r27, X
    23d8:	a0 2d       	mov	r26, r0
    23da:	28 1b       	sub	r18, r24
    23dc:	39 0b       	sbc	r19, r25
    23de:	4a 0b       	sbc	r20, r26
    23e0:	5b 0b       	sbc	r21, r27
    23e2:	24 36       	cpi	r18, 0x64	; 100
    23e4:	31 05       	cpc	r19, r1
    23e6:	41 05       	cpc	r20, r1
    23e8:	51 05       	cpc	r21, r1
    23ea:	34 f4       	brge	.+12     	; 0x23f8 <RotaryEncoderAcceleration::update()+0xca>
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	a8 2e       	mov	r10, r24
    23f0:	b1 2c       	mov	r11, r1
    23f2:	c1 2c       	mov	r12, r1
    23f4:	d1 2c       	mov	r13, r1
    23f6:	0c c0       	rjmp	.+24     	; 0x2410 <RotaryEncoderAcceleration::update()+0xe2>
    23f8:	ca 01       	movw	r24, r20
    23fa:	b9 01       	movw	r22, r18
    23fc:	24 e6       	ldi	r18, 0x64	; 100
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	0e 94 2f 23 	call	0x465e	; 0x465e <__divmodsi4>
    2408:	c9 01       	movw	r24, r18
    240a:	da 01       	movw	r26, r20
    240c:	5c 01       	movw	r10, r24
    240e:	6d 01       	movw	r12, r26
    2410:	7e 01       	movw	r14, r28
    2412:	00 27       	eor	r16, r16
    2414:	f7 fc       	sbrc	r15, 7
    2416:	00 95       	com	r16
    2418:	10 2f       	mov	r17, r16
    241a:	c8 01       	movw	r24, r16
    241c:	b7 01       	movw	r22, r14
    241e:	a8 01       	movw	r20, r16
    2420:	97 01       	movw	r18, r14
    2422:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2426:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    242a:	a6 01       	movw	r20, r12
    242c:	95 01       	movw	r18, r10
    242e:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2432:	29 e0       	ldi	r18, 0x09	; 9
    2434:	3d e3       	ldi	r19, 0x3D	; 61
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	0e 94 2f 23 	call	0x465e	; 0x465e <__divmodsi4>
    243e:	2f 5f       	subi	r18, 0xFF	; 255
    2440:	3f 4f       	sbci	r19, 0xFF	; 255
    2442:	4f 4f       	sbci	r20, 0xFF	; 255
    2444:	5f 4f       	sbci	r21, 0xFF	; 255
    2446:	f3 01       	movw	r30, r6
    2448:	e0 84       	ldd	r14, Z+8	; 0x08
    244a:	f1 84       	ldd	r15, Z+9	; 0x09
    244c:	02 85       	ldd	r16, Z+10	; 0x0a
    244e:	13 85       	ldd	r17, Z+11	; 0x0b
    2450:	d4 01       	movw	r26, r8
    2452:	5e 96       	adiw	r26, 0x1e	; 30
    2454:	8c 91       	ld	r24, X
    2456:	88 23       	and	r24, r24
    2458:	39 f4       	brne	.+14     	; 0x2468 <RotaryEncoderAcceleration::update()+0x13a>
    245a:	50 95       	com	r21
    245c:	40 95       	com	r20
    245e:	30 95       	com	r19
    2460:	21 95       	neg	r18
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	4f 4f       	sbci	r20, 0xFF	; 255
    2466:	5f 4f       	sbci	r21, 0xFF	; 255
    2468:	2e 0d       	add	r18, r14
    246a:	3f 1d       	adc	r19, r15
    246c:	40 1f       	adc	r20, r16
    246e:	51 1f       	adc	r21, r17
    2470:	c3 01       	movw	r24, r6
    2472:	ba 01       	movw	r22, r20
    2474:	a9 01       	movw	r20, r18
    2476:	0e 94 0d 11 	call	0x221a	; 0x221a <RotaryEncoderState::setValue_unsafe(long)>
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <RotaryEncoderAcceleration::update()+0x156>
    247c:	c4 01       	movw	r24, r8
    247e:	85 96       	adiw	r24, 0x25	; 37
    2480:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <TicksPerSecond::update()>
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	df 90       	pop	r13
    2492:	cf 90       	pop	r12
    2494:	bf 90       	pop	r11
    2496:	af 90       	pop	r10
    2498:	9f 90       	pop	r9
    249a:	8f 90       	pop	r8
    249c:	7f 90       	pop	r7
    249e:	6f 90       	pop	r6
    24a0:	08 95       	ret

000024a2 <RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)>:
    24a2:	ef 92       	push	r14
    24a4:	ff 92       	push	r15
    24a6:	0f 93       	push	r16
    24a8:	1f 93       	push	r17
    24aa:	8c 01       	movw	r16, r24
    24ac:	7a 01       	movw	r14, r20
    24ae:	fc 01       	movw	r30, r24
    24b0:	15 86       	std	Z+13, r1	; 0x0d
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	86 87       	std	Z+14, r24	; 0x0e
    24b6:	84 87       	std	Z+12, r24	; 0x0c
    24b8:	10 86       	std	Z+8, r1	; 0x08
    24ba:	11 86       	std	Z+9, r1	; 0x09
    24bc:	12 86       	std	Z+10, r1	; 0x0a
    24be:	13 86       	std	Z+11, r1	; 0x0b
    24c0:	10 82       	st	Z, r1
    24c2:	11 82       	std	Z+1, r1	; 0x01
    24c4:	12 82       	std	Z+2, r1	; 0x02
    24c6:	13 82       	std	Z+3, r1	; 0x03
    24c8:	88 ee       	ldi	r24, 0xE8	; 232
    24ca:	93 e0       	ldi	r25, 0x03	; 3
    24cc:	a0 e0       	ldi	r26, 0x00	; 0
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	84 83       	std	Z+4, r24	; 0x04
    24d2:	95 83       	std	Z+5, r25	; 0x05
    24d4:	a6 83       	std	Z+6, r26	; 0x06
    24d6:	b7 83       	std	Z+7, r27	; 0x07
    24d8:	10 8b       	std	Z+16, r17	; 0x10
    24da:	07 87       	std	Z+15, r16	; 0x0f
    24dc:	c8 01       	movw	r24, r16
    24de:	41 96       	adiw	r24, 0x11	; 17
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Button::initialize(DigitalInputPin*, unsigned int)>
    24e8:	c8 01       	movw	r24, r16
    24ea:	4b 96       	adiw	r24, 0x1b	; 27
    24ec:	b7 01       	movw	r22, r14
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Button::initialize(DigitalInputPin*, unsigned int)>
    24f6:	c8 01       	movw	r24, r16
    24f8:	85 96       	adiw	r24, 0x25	; 37
    24fa:	64 ef       	ldi	r22, 0xF4	; 244
    24fc:	71 e0       	ldi	r23, 0x01	; 1
    24fe:	0e 94 2a 18 	call	0x3054	; 0x3054 <TicksPerSecond::initialize(unsigned int)>
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	ff 90       	pop	r15
    2508:	ef 90       	pop	r14
    250a:	08 95       	ret

0000250c <SerialReader::readln()>:
    250c:	fc 01       	movw	r30, r24
    250e:	86 81       	ldd	r24, Z+6	; 0x06
    2510:	88 23       	and	r24, r24
    2512:	19 f4       	brne	.+6      	; 0x251a <SerialReader::readln()+0xe>
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <SerialReader::readln()+0x18>
    251a:	16 82       	std	Z+6, r1	; 0x06
    251c:	13 82       	std	Z+3, r1	; 0x03
    251e:	12 82       	std	Z+2, r1	; 0x02
    2520:	24 81       	ldd	r18, Z+4	; 0x04
    2522:	35 81       	ldd	r19, Z+5	; 0x05
    2524:	c9 01       	movw	r24, r18
    2526:	08 95       	ret

00002528 <SerialReader::update()>:
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	ec 01       	movw	r28, r24
    252e:	8e 81       	ldd	r24, Y+6	; 0x06
    2530:	88 23       	and	r24, r24
    2532:	e1 f0       	breq	.+56     	; 0x256c <SerialReader::update()+0x44>
    2534:	3c c0       	rjmp	.+120    	; 0x25ae <SerialReader::update()+0x86>
    2536:	2d 30       	cpi	r18, 0x0D	; 13
    2538:	51 f4       	brne	.+20     	; 0x254e <SerialReader::update()+0x26>
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	8e 83       	std	Y+6, r24	; 0x06
    253e:	ec 81       	ldd	r30, Y+4	; 0x04
    2540:	fd 81       	ldd	r31, Y+5	; 0x05
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	9b 81       	ldd	r25, Y+3	; 0x03
    2546:	e8 0f       	add	r30, r24
    2548:	f9 1f       	adc	r31, r25
    254a:	10 82       	st	Z, r1
    254c:	26 c0       	rjmp	.+76     	; 0x259a <SerialReader::update()+0x72>
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	9b 81       	ldd	r25, Y+3	; 0x03
    2552:	ec 81       	ldd	r30, Y+4	; 0x04
    2554:	fd 81       	ldd	r31, Y+5	; 0x05
    2556:	e8 0f       	add	r30, r24
    2558:	f9 1f       	adc	r31, r25
    255a:	20 83       	st	Z, r18
    255c:	01 96       	adiw	r24, 0x01	; 1
    255e:	9b 83       	std	Y+3, r25	; 0x03
    2560:	8a 83       	std	Y+2, r24	; 0x02
    2562:	ec 81       	ldd	r30, Y+4	; 0x04
    2564:	fd 81       	ldd	r31, Y+5	; 0x05
    2566:	e8 0f       	add	r30, r24
    2568:	f9 1f       	adc	r31, r25
    256a:	10 82       	st	Z, r1
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	9b 81       	ldd	r25, Y+3	; 0x03
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	28 81       	ld	r18, Y
    2574:	39 81       	ldd	r19, Y+1	; 0x01
    2576:	82 17       	cp	r24, r18
    2578:	93 07       	cpc	r25, r19
    257a:	7c f4       	brge	.+30     	; 0x259a <SerialReader::update()+0x72>
    257c:	86 e4       	ldi	r24, 0x46	; 70
    257e:	94 e0       	ldi	r25, 0x04	; 4
    2580:	0e 94 67 19 	call	0x32ce	; 0x32ce <HardwareSerial::available()>
    2584:	18 16       	cp	r1, r24
    2586:	19 06       	cpc	r1, r25
    2588:	44 f4       	brge	.+16     	; 0x259a <SerialReader::update()+0x72>
    258a:	86 e4       	ldi	r24, 0x46	; 70
    258c:	94 e0       	ldi	r25, 0x04	; 4
    258e:	0e 94 98 19 	call	0x3330	; 0x3330 <HardwareSerial::read()>
    2592:	28 2f       	mov	r18, r24
    2594:	8a 30       	cpi	r24, 0x0A	; 10
    2596:	79 f6       	brne	.-98     	; 0x2536 <SerialReader::update()+0xe>
    2598:	d0 cf       	rjmp	.-96     	; 0x253a <SerialReader::update()+0x12>
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	9b 81       	ldd	r25, Y+3	; 0x03
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	28 81       	ld	r18, Y
    25a2:	39 81       	ldd	r19, Y+1	; 0x01
    25a4:	82 17       	cp	r24, r18
    25a6:	93 07       	cpc	r25, r19
    25a8:	14 f0       	brlt	.+4      	; 0x25ae <SerialReader::update()+0x86>
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	8e 83       	std	Y+6, r24	; 0x06
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	08 95       	ret

000025b4 <SerialReader::initialize(long, int, char*)>:
    25b4:	cf 92       	push	r12
    25b6:	df 92       	push	r13
    25b8:	ef 92       	push	r14
    25ba:	ff 92       	push	r15
    25bc:	0f 93       	push	r16
    25be:	1f 93       	push	r17
    25c0:	7c 01       	movw	r14, r24
    25c2:	69 01       	movw	r12, r18
    25c4:	86 e4       	ldi	r24, 0x46	; 70
    25c6:	94 e0       	ldi	r25, 0x04	; 4
    25c8:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <HardwareSerial::begin(unsigned long)>
    25cc:	f7 01       	movw	r30, r14
    25ce:	13 82       	std	Z+3, r1	; 0x03
    25d0:	12 82       	std	Z+2, r1	; 0x02
    25d2:	d1 82       	std	Z+1, r13	; 0x01
    25d4:	c0 82       	st	Z, r12
    25d6:	15 83       	std	Z+5, r17	; 0x05
    25d8:	04 83       	std	Z+4, r16	; 0x04
    25da:	f8 01       	movw	r30, r16
    25dc:	10 82       	st	Z, r1
    25de:	f7 01       	movw	r30, r14
    25e0:	16 82       	std	Z+6, r1	; 0x06
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	08 95       	ret

000025f0 <StateLed::setState(short)>:
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	ec 01       	movw	r28, r24
    25f6:	ef 85       	ldd	r30, Y+15	; 0x0f
    25f8:	f8 89       	ldd	r31, Y+16	; 0x10
    25fa:	6e 17       	cp	r22, r30
    25fc:	7f 07       	cpc	r23, r31
    25fe:	2c f0       	brlt	.+10     	; 0x260a <StateLed::setState(short)+0x1a>
    2600:	cb 01       	movw	r24, r22
    2602:	bf 01       	movw	r22, r30
    2604:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__divmodhi4>
    2608:	bc 01       	movw	r22, r24
    260a:	77 ff       	sbrs	r23, 7
    260c:	09 c0       	rjmp	.+18     	; 0x2620 <StateLed::setState(short)+0x30>
    260e:	cb 01       	movw	r24, r22
    2610:	bf 01       	movw	r22, r30
    2612:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__divmodhi4>
    2616:	bf 01       	movw	r22, r30
    2618:	61 50       	subi	r22, 0x01	; 1
    261a:	70 40       	sbci	r23, 0x00	; 0
    261c:	68 0f       	add	r22, r24
    261e:	79 1f       	adc	r23, r25
    2620:	8d 85       	ldd	r24, Y+13	; 0x0d
    2622:	9e 85       	ldd	r25, Y+14	; 0x0e
    2624:	86 17       	cp	r24, r22
    2626:	97 07       	cpc	r25, r23
    2628:	21 f4       	brne	.+8      	; 0x2632 <StateLed::setState(short)+0x42>
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	89 2b       	or	r24, r25
    2630:	a9 f4       	brne	.+42     	; 0x265c <StateLed::setState(short)+0x6c>
    2632:	7e 87       	std	Y+14, r23	; 0x0e
    2634:	6d 87       	std	Y+13, r22	; 0x0d
    2636:	66 0f       	add	r22, r22
    2638:	77 1f       	adc	r23, r23
    263a:	e9 89       	ldd	r30, Y+17	; 0x11
    263c:	fa 89       	ldd	r31, Y+18	; 0x12
    263e:	e6 0f       	add	r30, r22
    2640:	f7 1f       	adc	r31, r23
    2642:	65 91       	lpm	r22, Z+
    2644:	74 91       	lpm	r23, Z+
    2646:	8c 85       	ldd	r24, Y+12	; 0x0c
    2648:	88 23       	and	r24, r24
    264a:	19 f4       	brne	.+6      	; 0x2652 <StateLed::setState(short)+0x62>
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <StateLed::setState(short)+0x66>
    2652:	4f ef       	ldi	r20, 0xFF	; 255
    2654:	5f ef       	ldi	r21, 0xFF	; 255
    2656:	ce 01       	movw	r24, r28
    2658:	0e 94 81 0c 	call	0x1902	; 0x1902 <BlinkingLed::playBlink(unsigned int const*, short)>
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	08 95       	ret

00002662 <StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)>:
    2662:	ef 92       	push	r14
    2664:	ff 92       	push	r15
    2666:	0f 93       	push	r16
    2668:	7c 01       	movw	r14, r24
    266a:	fc 01       	movw	r30, r24
    266c:	04 87       	std	Z+12, r16	; 0x0c
    266e:	30 8b       	std	Z+16, r19	; 0x10
    2670:	27 87       	std	Z+15, r18	; 0x0f
    2672:	52 8b       	std	Z+18, r21	; 0x12
    2674:	41 8b       	std	Z+17, r20	; 0x11
    2676:	0e 94 c9 0b 	call	0x1792	; 0x1792 <BlinkingLed::initialize(DigitalOutputPin*)>
    267a:	c7 01       	movw	r24, r14
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <StateLed::setState(short)>
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	08 95       	ret

0000268c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>:
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	dc 01       	movw	r26, r24
    2696:	14 96       	adiw	r26, 0x04	; 4
    2698:	5c 93       	st	X, r21
    269a:	4e 93       	st	-X, r20
    269c:	13 97       	sbiw	r26, 0x03	; 3
    269e:	16 96       	adiw	r26, 0x06	; 6
    26a0:	3c 93       	st	X, r19
    26a2:	2e 93       	st	-X, r18
    26a4:	15 97       	sbiw	r26, 0x05	; 5
    26a6:	18 96       	adiw	r26, 0x08	; 8
    26a8:	1c 93       	st	X, r17
    26aa:	0e 93       	st	-X, r16
    26ac:	17 97       	sbiw	r26, 0x07	; 7
    26ae:	1a 96       	adiw	r26, 0x0a	; 10
    26b0:	fc 92       	st	X, r15
    26b2:	ee 92       	st	-X, r14
    26b4:	19 97       	sbiw	r26, 0x09	; 9
    26b6:	12 96       	adiw	r26, 0x02	; 2
    26b8:	6c 93       	st	X, r22
    26ba:	12 97       	sbiw	r26, 0x02	; 2
    26bc:	ed 91       	ld	r30, X+
    26be:	fc 91       	ld	r31, X
    26c0:	02 80       	ldd	r0, Z+2	; 0x02
    26c2:	f3 81       	ldd	r31, Z+3	; 0x03
    26c4:	e0 2d       	mov	r30, r0
    26c6:	09 95       	icall
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	ef 90       	pop	r14
    26d0:	08 95       	ret

000026d2 <StepperMotorMosfetHBridge::setState(unsigned char)>:
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	7c 01       	movw	r14, r24
    26dc:	06 2f       	mov	r16, r22
    26de:	fc 01       	movw	r30, r24
    26e0:	a3 81       	ldd	r26, Z+3	; 0x03
    26e2:	b4 81       	ldd	r27, Z+4	; 0x04
    26e4:	10 e0       	ldi	r17, 0x00	; 0
    26e6:	ed 91       	ld	r30, X+
    26e8:	fc 91       	ld	r31, X
    26ea:	11 97       	sbiw	r26, 0x01	; 1
    26ec:	b8 01       	movw	r22, r16
    26ee:	83 e0       	ldi	r24, 0x03	; 3
    26f0:	76 95       	lsr	r23
    26f2:	67 95       	ror	r22
    26f4:	8a 95       	dec	r24
    26f6:	e1 f7       	brne	.-8      	; 0x26f0 <StepperMotorMosfetHBridge::setState(unsigned char)+0x1e>
    26f8:	61 70       	andi	r22, 0x01	; 1
    26fa:	02 80       	ldd	r0, Z+2	; 0x02
    26fc:	f3 81       	ldd	r31, Z+3	; 0x03
    26fe:	e0 2d       	mov	r30, r0
    2700:	cd 01       	movw	r24, r26
    2702:	09 95       	icall
    2704:	f7 01       	movw	r30, r14
    2706:	a5 81       	ldd	r26, Z+5	; 0x05
    2708:	b6 81       	ldd	r27, Z+6	; 0x06
    270a:	ed 91       	ld	r30, X+
    270c:	fc 91       	ld	r31, X
    270e:	11 97       	sbiw	r26, 0x01	; 1
    2710:	b8 01       	movw	r22, r16
    2712:	76 95       	lsr	r23
    2714:	67 95       	ror	r22
    2716:	76 95       	lsr	r23
    2718:	67 95       	ror	r22
    271a:	61 70       	andi	r22, 0x01	; 1
    271c:	02 80       	ldd	r0, Z+2	; 0x02
    271e:	f3 81       	ldd	r31, Z+3	; 0x03
    2720:	e0 2d       	mov	r30, r0
    2722:	cd 01       	movw	r24, r26
    2724:	09 95       	icall
    2726:	f7 01       	movw	r30, r14
    2728:	a7 81       	ldd	r26, Z+7	; 0x07
    272a:	b0 85       	ldd	r27, Z+8	; 0x08
    272c:	ed 91       	ld	r30, X+
    272e:	fc 91       	ld	r31, X
    2730:	11 97       	sbiw	r26, 0x01	; 1
    2732:	b8 01       	movw	r22, r16
    2734:	76 95       	lsr	r23
    2736:	67 95       	ror	r22
    2738:	61 70       	andi	r22, 0x01	; 1
    273a:	02 80       	ldd	r0, Z+2	; 0x02
    273c:	f3 81       	ldd	r31, Z+3	; 0x03
    273e:	e0 2d       	mov	r30, r0
    2740:	cd 01       	movw	r24, r26
    2742:	09 95       	icall
    2744:	f7 01       	movw	r30, r14
    2746:	a1 85       	ldd	r26, Z+9	; 0x09
    2748:	b2 85       	ldd	r27, Z+10	; 0x0a
    274a:	ed 91       	ld	r30, X+
    274c:	fc 91       	ld	r31, X
    274e:	11 97       	sbiw	r26, 0x01	; 1
    2750:	01 70       	andi	r16, 0x01	; 1
    2752:	10 70       	andi	r17, 0x00	; 0
    2754:	02 80       	ldd	r0, Z+2	; 0x02
    2756:	f3 81       	ldd	r31, Z+3	; 0x03
    2758:	e0 2d       	mov	r30, r0
    275a:	cd 01       	movw	r24, r26
    275c:	60 2f       	mov	r22, r16
    275e:	09 95       	icall
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	08 95       	ret

0000276a <StepperMotorMosfetHBridge::step(bool)>:
    276a:	dc 01       	movw	r26, r24
    276c:	12 96       	adiw	r26, 0x02	; 2
    276e:	8c 91       	ld	r24, X
    2770:	12 97       	sbiw	r26, 0x02	; 2
    2772:	28 2f       	mov	r18, r24
    2774:	23 70       	andi	r18, 0x03	; 3
    2776:	86 95       	lsr	r24
    2778:	86 95       	lsr	r24
    277a:	22 30       	cpi	r18, 0x02	; 2
    277c:	11 f0       	breq	.+4      	; 0x2782 <StepperMotorMosfetHBridge::step(bool)+0x18>
    277e:	94 e0       	ldi	r25, 0x04	; 4
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <StepperMotorMosfetHBridge::step(bool)+0x1a>
    2782:	98 e0       	ldi	r25, 0x08	; 8
    2784:	66 23       	and	r22, r22
    2786:	29 f0       	breq	.+10     	; 0x2792 <StepperMotorMosfetHBridge::step(bool)+0x28>
    2788:	8f 5f       	subi	r24, 0xFF	; 255
    278a:	89 17       	cp	r24, r25
    278c:	34 f0       	brlt	.+12     	; 0x279a <StepperMotorMosfetHBridge::step(bool)+0x30>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	04 c0       	rjmp	.+8      	; 0x279a <StepperMotorMosfetHBridge::step(bool)+0x30>
    2792:	81 50       	subi	r24, 0x01	; 1
    2794:	10 f4       	brcc	.+4      	; 0x279a <StepperMotorMosfetHBridge::step(bool)+0x30>
    2796:	89 2f       	mov	r24, r25
    2798:	81 50       	subi	r24, 0x01	; 1
    279a:	e8 2f       	mov	r30, r24
    279c:	ff 27       	eor	r31, r31
    279e:	e7 fd       	sbrc	r30, 7
    27a0:	f0 95       	com	r31
    27a2:	cf 01       	movw	r24, r30
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	82 2b       	or	r24, r18
    27ae:	12 96       	adiw	r26, 0x02	; 2
    27b0:	8c 93       	st	X, r24
    27b2:	12 97       	sbiw	r26, 0x02	; 2
    27b4:	21 30       	cpi	r18, 0x01	; 1
    27b6:	29 f0       	breq	.+10     	; 0x27c2 <StepperMotorMosfetHBridge::step(bool)+0x58>
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	31 f4       	brne	.+12     	; 0x27c8 <StepperMotorMosfetHBridge::step(bool)+0x5e>
    27bc:	ea 5d       	subi	r30, 0xDA	; 218
    27be:	fe 4f       	sbci	r31, 0xFE	; 254
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <StepperMotorMosfetHBridge::step(bool)+0x62>
    27c2:	e2 5d       	subi	r30, 0xD2	; 210
    27c4:	fe 4f       	sbci	r31, 0xFE	; 254
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <StepperMotorMosfetHBridge::step(bool)+0x62>
    27c8:	ee 5c       	subi	r30, 0xCE	; 206
    27ca:	fe 4f       	sbci	r31, 0xFE	; 254
    27cc:	60 81       	ld	r22, Z
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 69 13 	call	0x26d2	; 0x26d2 <StepperMotorMosfetHBridge::setState(unsigned char)>
    27d4:	08 95       	ret

000027d6 <StepperMotorMosfetHBridge::stop()>:
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <StepperMotorMosfetHBridge::setState(unsigned char)>
    27dc:	08 95       	ret

000027de <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>:
    27de:	fc 01       	movw	r30, r24
    27e0:	73 87       	std	Z+11, r23	; 0x0b
    27e2:	62 87       	std	Z+10, r22	; 0x0a
    27e4:	51 8b       	std	Z+17, r21	; 0x11
    27e6:	40 8b       	std	Z+16, r20	; 0x10
    27e8:	33 8b       	std	Z+19, r19	; 0x13
    27ea:	22 8b       	std	Z+18, r18	; 0x12
    27ec:	14 86       	std	Z+12, r1	; 0x0c
    27ee:	15 86       	std	Z+13, r1	; 0x0d
    27f0:	16 86       	std	Z+14, r1	; 0x0e
    27f2:	17 86       	std	Z+15, r1	; 0x0f
    27f4:	14 8a       	std	Z+20, r1	; 0x14
    27f6:	20 ed       	ldi	r18, 0xD0	; 208
    27f8:	37 e0       	ldi	r19, 0x07	; 7
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	25 8b       	std	Z+21, r18	; 0x15
    2800:	36 8b       	std	Z+22, r19	; 0x16
    2802:	47 8b       	std	Z+23, r20	; 0x17
    2804:	50 8f       	std	Z+24, r21	; 0x18
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e8       	ldi	r25, 0x80	; 128
    280a:	95 83       	std	Z+5, r25	; 0x05
    280c:	84 83       	std	Z+4, r24	; 0x04
    280e:	26 83       	std	Z+6, r18	; 0x06
    2810:	37 83       	std	Z+7, r19	; 0x07
    2812:	40 87       	std	Z+8, r20	; 0x08
    2814:	51 87       	std	Z+9, r21	; 0x09
    2816:	88 ee       	ldi	r24, 0xE8	; 232
    2818:	93 e0       	ldi	r25, 0x03	; 3
    281a:	93 83       	std	Z+3, r25	; 0x03
    281c:	82 83       	std	Z+2, r24	; 0x02
    281e:	10 82       	st	Z, r1
    2820:	08 95       	ret

00002822 <StepperMotorAxis::initializePosition()>:
    2822:	fc 01       	movw	r30, r24
    2824:	83 e0       	ldi	r24, 0x03	; 3
    2826:	80 83       	st	Z, r24
    2828:	11 82       	std	Z+1, r1	; 0x01
    282a:	08 95       	ret

0000282c <StepperMotorAxis::getAbsolutePositionMicroM()>:
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	8c 01       	movw	r16, r24
    2832:	fc 01       	movw	r30, r24
    2834:	64 85       	ldd	r22, Z+12	; 0x0c
    2836:	75 85       	ldd	r23, Z+13	; 0x0d
    2838:	86 85       	ldd	r24, Z+14	; 0x0e
    283a:	97 85       	ldd	r25, Z+15	; 0x0f
    283c:	28 ee       	ldi	r18, 0xE8	; 232
    283e:	33 e0       	ldi	r19, 0x03	; 3
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2848:	f8 01       	movw	r30, r16
    284a:	22 81       	ldd	r18, Z+2	; 0x02
    284c:	33 81       	ldd	r19, Z+3	; 0x03
    284e:	40 e0       	ldi	r20, 0x00	; 0
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	0e 94 2f 23 	call	0x465e	; 0x465e <__divmodsi4>
    2856:	ca 01       	movw	r24, r20
    2858:	b9 01       	movw	r22, r18
    285a:	24 e6       	ldi	r18, 0x64	; 100
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	08 95       	ret

0000286c <StepperMotorAxis::stop()>:
    286c:	fc 01       	movw	r30, r24
    286e:	84 89       	ldd	r24, Z+20	; 0x14
    2870:	88 23       	and	r24, r24
    2872:	11 f0       	breq	.+4      	; 0x2878 <StepperMotorAxis::stop()+0xc>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	84 8b       	std	Z+20, r24	; 0x14
    2878:	10 82       	st	Z, r1
    287a:	08 95       	ret

0000287c <StepperMotorControlWithButtons::debugPrint()>:
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	ec 01       	movw	r28, r24
    2882:	86 e4       	ldi	r24, 0x46	; 70
    2884:	94 e0       	ldi	r25, 0x04	; 4
    2886:	67 ed       	ldi	r22, 0xD7	; 215
    2888:	75 e0       	ldi	r23, 0x05	; 5
    288a:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    288e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2890:	88 23       	and	r24, r24
    2892:	11 f4       	brne	.+4      	; 0x2898 <StepperMotorControlWithButtons::debugPrint()+0x1c>
    2894:	66 e4       	ldi	r22, 0x46	; 70
    2896:	01 c0       	rjmp	.+2      	; 0x289a <StepperMotorControlWithButtons::debugPrint()+0x1e>
    2898:	64 e5       	ldi	r22, 0x54	; 84
    289a:	86 e4       	ldi	r24, 0x46	; 70
    289c:	94 e0       	ldi	r25, 0x04	; 4
    289e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <Print::println(char)>
    28a2:	86 e4       	ldi	r24, 0x46	; 70
    28a4:	94 e0       	ldi	r25, 0x04	; 4
    28a6:	66 ec       	ldi	r22, 0xC6	; 198
    28a8:	75 e0       	ldi	r23, 0x05	; 5
    28aa:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    28ae:	6b 89       	ldd	r22, Y+19	; 0x13
    28b0:	7c 89       	ldd	r23, Y+20	; 0x14
    28b2:	86 e4       	ldi	r24, 0x46	; 70
    28b4:	94 e0       	ldi	r25, 0x04	; 4
    28b6:	4a e0       	ldi	r20, 0x0A	; 10
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	0e 94 88 1b 	call	0x3710	; 0x3710 <Print::println(unsigned int, int)>
    28be:	86 e4       	ldi	r24, 0x46	; 70
    28c0:	94 e0       	ldi	r25, 0x04	; 4
    28c2:	65 eb       	ldi	r22, 0xB5	; 181
    28c4:	75 e0       	ldi	r23, 0x05	; 5
    28c6:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    28ca:	4a 81       	ldd	r20, Y+2	; 0x02
    28cc:	5b 81       	ldd	r21, Y+3	; 0x03
    28ce:	6c 81       	ldd	r22, Y+4	; 0x04
    28d0:	7d 81       	ldd	r23, Y+5	; 0x05
    28d2:	86 e4       	ldi	r24, 0x46	; 70
    28d4:	94 e0       	ldi	r25, 0x04	; 4
    28d6:	2a e0       	ldi	r18, 0x0A	; 10
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <Print::println(long, int)>
    28de:	86 e4       	ldi	r24, 0x46	; 70
    28e0:	94 e0       	ldi	r25, 0x04	; 4
    28e2:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    28e6:	86 e4       	ldi	r24, 0x46	; 70
    28e8:	94 e0       	ldi	r25, 0x04	; 4
    28ea:	64 ea       	ldi	r22, 0xA4	; 164
    28ec:	75 e0       	ldi	r23, 0x05	; 5
    28ee:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    28f2:	ae 81       	ldd	r26, Y+6	; 0x06
    28f4:	bf 81       	ldd	r27, Y+7	; 0x07
    28f6:	ed 91       	ld	r30, X+
    28f8:	fc 91       	ld	r31, X
    28fa:	11 97       	sbiw	r26, 0x01	; 1
    28fc:	01 90       	ld	r0, Z+
    28fe:	f0 81       	ld	r31, Z
    2900:	e0 2d       	mov	r30, r0
    2902:	cd 01       	movw	r24, r26
    2904:	09 95       	icall
    2906:	88 23       	and	r24, r24
    2908:	19 f4       	brne	.+6      	; 0x2910 <StepperMotorControlWithButtons::debugPrint()+0x94>
    290a:	6b e5       	ldi	r22, 0x5B	; 91
    290c:	75 e0       	ldi	r23, 0x05	; 5
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <StepperMotorControlWithButtons::debugPrint()+0x98>
    2910:	68 e5       	ldi	r22, 0x58	; 88
    2912:	75 e0       	ldi	r23, 0x05	; 5
    2914:	86 e4       	ldi	r24, 0x46	; 70
    2916:	94 e0       	ldi	r25, 0x04	; 4
    2918:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
    291c:	86 e4       	ldi	r24, 0x46	; 70
    291e:	94 e0       	ldi	r25, 0x04	; 4
    2920:	63 e9       	ldi	r22, 0x93	; 147
    2922:	75 e0       	ldi	r23, 0x05	; 5
    2924:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    2928:	e8 85       	ldd	r30, Y+8	; 0x08
    292a:	f9 85       	ldd	r31, Y+9	; 0x09
    292c:	a0 81       	ld	r26, Z
    292e:	b1 81       	ldd	r27, Z+1	; 0x01
    2930:	2d 91       	ld	r18, X+
    2932:	3c 91       	ld	r19, X
    2934:	cf 01       	movw	r24, r30
    2936:	f9 01       	movw	r30, r18
    2938:	09 95       	icall
    293a:	88 23       	and	r24, r24
    293c:	19 f4       	brne	.+6      	; 0x2944 <StepperMotorControlWithButtons::debugPrint()+0xc8>
    293e:	6b e5       	ldi	r22, 0x5B	; 91
    2940:	75 e0       	ldi	r23, 0x05	; 5
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <StepperMotorControlWithButtons::debugPrint()+0xcc>
    2944:	68 e5       	ldi	r22, 0x58	; 88
    2946:	75 e0       	ldi	r23, 0x05	; 5
    2948:	86 e4       	ldi	r24, 0x46	; 70
    294a:	94 e0       	ldi	r25, 0x04	; 4
    294c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
    2950:	86 e4       	ldi	r24, 0x46	; 70
    2952:	94 e0       	ldi	r25, 0x04	; 4
    2954:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    2958:	86 e4       	ldi	r24, 0x46	; 70
    295a:	94 e0       	ldi	r25, 0x04	; 4
    295c:	62 e8       	ldi	r22, 0x82	; 130
    295e:	75 e0       	ldi	r23, 0x05	; 5
    2960:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    2964:	6a 85       	ldd	r22, Y+10	; 0x0a
    2966:	86 e4       	ldi	r24, 0x46	; 70
    2968:	94 e0       	ldi	r25, 0x04	; 4
    296a:	70 e0       	ldi	r23, 0x00	; 0
    296c:	4a e0       	ldi	r20, 0x0A	; 10
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	0e 94 0c 1c 	call	0x3818	; 0x3818 <Print::println(int, int)>
    2974:	86 e4       	ldi	r24, 0x46	; 70
    2976:	94 e0       	ldi	r25, 0x04	; 4
    2978:	61 e7       	ldi	r22, 0x71	; 113
    297a:	75 e0       	ldi	r23, 0x05	; 5
    297c:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    2980:	4f 85       	ldd	r20, Y+15	; 0x0f
    2982:	58 89       	ldd	r21, Y+16	; 0x10
    2984:	69 89       	ldd	r22, Y+17	; 0x11
    2986:	7a 89       	ldd	r23, Y+18	; 0x12
    2988:	86 e4       	ldi	r24, 0x46	; 70
    298a:	94 e0       	ldi	r25, 0x04	; 4
    298c:	2a e0       	ldi	r18, 0x0A	; 10
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Print::println(unsigned long, int)>
    2994:	86 e4       	ldi	r24, 0x46	; 70
    2996:	94 e0       	ldi	r25, 0x04	; 4
    2998:	60 e6       	ldi	r22, 0x60	; 96
    299a:	75 e0       	ldi	r23, 0x05	; 5
    299c:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    29a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    29a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    29a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    29a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    29a8:	86 e4       	ldi	r24, 0x46	; 70
    29aa:	94 e0       	ldi	r25, 0x04	; 4
    29ac:	2a e0       	ldi	r18, 0x0A	; 10
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Print::println(unsigned long, int)>
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret

000029ba <StepperMotorAxis::debugPrint()>:
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	7c 01       	movw	r14, r24
    29c4:	06 e4       	ldi	r16, 0x46	; 70
    29c6:	14 e0       	ldi	r17, 0x04	; 4
    29c8:	c8 01       	movw	r24, r16
    29ca:	6d e4       	ldi	r22, 0x4D	; 77
    29cc:	75 e0       	ldi	r23, 0x05	; 5
    29ce:	0e 94 ca 1a 	call	0x3594	; 0x3594 <Print::pgm_println(char const*)>
    29d2:	c8 01       	movw	r24, r16
    29d4:	6c e3       	ldi	r22, 0x3C	; 60
    29d6:	75 e0       	ldi	r23, 0x05	; 5
    29d8:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    29dc:	f7 01       	movw	r30, r14
    29de:	60 81       	ld	r22, Z
    29e0:	c8 01       	movw	r24, r16
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	4a e0       	ldi	r20, 0x0A	; 10
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <Print::print(int, int)>
    29ec:	c8 01       	movw	r24, r16
    29ee:	6f e2       	ldi	r22, 0x2F	; 47
    29f0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <Print::print(char)>
    29f4:	f7 01       	movw	r30, r14
    29f6:	61 81       	ldd	r22, Z+1	; 0x01
    29f8:	c8 01       	movw	r24, r16
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	4a e0       	ldi	r20, 0x0A	; 10
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	0e 94 0c 1c 	call	0x3818	; 0x3818 <Print::println(int, int)>
    2a04:	c8 01       	movw	r24, r16
    2a06:	6b e2       	ldi	r22, 0x2B	; 43
    2a08:	75 e0       	ldi	r23, 0x05	; 5
    2a0a:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    2a0e:	c7 01       	movw	r24, r14
    2a10:	0e 94 16 14 	call	0x282c	; 0x282c <StepperMotorAxis::getAbsolutePositionMicroM()>
    2a14:	ab 01       	movw	r20, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	c8 01       	movw	r24, r16
    2a1a:	2a e0       	ldi	r18, 0x0A	; 10
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <Print::println(long, int)>
    2a22:	c8 01       	movw	r24, r16
    2a24:	6a e1       	ldi	r22, 0x1A	; 26
    2a26:	75 e0       	ldi	r23, 0x05	; 5
    2a28:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    2a2c:	f7 01       	movw	r30, r14
    2a2e:	22 81       	ldd	r18, Z+2	; 0x02
    2a30:	33 81       	ldd	r19, Z+3	; 0x03
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	77 e8       	ldi	r23, 0x87	; 135
    2a3a:	83 e9       	ldi	r24, 0x93	; 147
    2a3c:	93 e0       	ldi	r25, 0x03	; 3
    2a3e:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
    2a42:	ca 01       	movw	r24, r20
    2a44:	b9 01       	movw	r22, r18
    2a46:	24 e6       	ldi	r18, 0x64	; 100
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2a52:	f7 01       	movw	r30, r14
    2a54:	25 89       	ldd	r18, Z+21	; 0x15
    2a56:	36 89       	ldd	r19, Z+22	; 0x16
    2a58:	47 89       	ldd	r20, Z+23	; 0x17
    2a5a:	50 8d       	ldd	r21, Z+24	; 0x18
    2a5c:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
    2a60:	c8 01       	movw	r24, r16
    2a62:	b9 01       	movw	r22, r18
    2a64:	4a e0       	ldi	r20, 0x0A	; 10
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	0e 94 88 1b 	call	0x3710	; 0x3710 <Print::println(unsigned int, int)>
    2a6c:	c8 01       	movw	r24, r16
    2a6e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    2a72:	c7 01       	movw	r24, r14
    2a74:	0a 96       	adiw	r24, 0x0a	; 10
    2a76:	0e 94 3e 14 	call	0x287c	; 0x287c <StepperMotorControlWithButtons::debugPrint()>
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	6f ef       	ldi	r22, 0xFF	; 255
    2a7e:	74 e0       	ldi	r23, 0x04	; 4
    2a80:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    2a84:	f7 01       	movw	r30, r14
    2a86:	46 81       	ldd	r20, Z+6	; 0x06
    2a88:	57 81       	ldd	r21, Z+7	; 0x07
    2a8a:	60 85       	ldd	r22, Z+8	; 0x08
    2a8c:	71 85       	ldd	r23, Z+9	; 0x09
    2a8e:	c8 01       	movw	r24, r16
    2a90:	2a e0       	ldi	r18, 0x0A	; 10
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Print::println(unsigned long, int)>
    2a98:	c8 01       	movw	r24, r16
    2a9a:	6e ee       	ldi	r22, 0xEE	; 238
    2a9c:	74 e0       	ldi	r23, 0x04	; 4
    2a9e:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    2aa2:	f7 01       	movw	r30, r14
    2aa4:	62 81       	ldd	r22, Z+2	; 0x02
    2aa6:	73 81       	ldd	r23, Z+3	; 0x03
    2aa8:	c8 01       	movw	r24, r16
    2aaa:	4a e0       	ldi	r20, 0x0A	; 10
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	0e 94 88 1b 	call	0x3710	; 0x3710 <Print::println(unsigned int, int)>
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	6d ed       	ldi	r22, 0xDD	; 221
    2ab6:	74 e0       	ldi	r23, 0x04	; 4
    2ab8:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    2abc:	f7 01       	movw	r30, r14
    2abe:	64 81       	ldd	r22, Z+4	; 0x04
    2ac0:	75 81       	ldd	r23, Z+5	; 0x05
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	4a e0       	ldi	r20, 0x0A	; 10
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	0e 94 0c 1c 	call	0x3818	; 0x3818 <Print::println(int, int)>
    2acc:	c8 01       	movw	r24, r16
    2ace:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	ff 90       	pop	r15
    2ad8:	ef 90       	pop	r14
    2ada:	08 95       	ret

00002adc <StepperMotorControlWithButtons::rotate(bool)>:
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	ec 01       	movw	r28, r24
    2ae2:	66 23       	and	r22, r22
    2ae4:	11 f4       	brne	.+4      	; 0x2aea <StepperMotorControlWithButtons::rotate(bool)+0xe>
    2ae6:	85 e0       	ldi	r24, 0x05	; 5
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <StepperMotorControlWithButtons::rotate(bool)+0x10>
    2aea:	84 e0       	ldi	r24, 0x04	; 4
    2aec:	8a 87       	std	Y+10, r24	; 0x0a
    2aee:	0e 94 c8 03 	call	0x790	; 0x790 <micros>
    2af2:	2b 85       	ldd	r18, Y+11	; 0x0b
    2af4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2af6:	4d 85       	ldd	r20, Y+13	; 0x0d
    2af8:	5e 85       	ldd	r21, Y+14	; 0x0e
    2afa:	62 1b       	sub	r22, r18
    2afc:	73 0b       	sbc	r23, r19
    2afe:	84 0b       	sbc	r24, r20
    2b00:	95 0b       	sbc	r25, r21
    2b02:	6f 87       	std	Y+15, r22	; 0x0f
    2b04:	78 8b       	std	Y+16, r23	; 0x10
    2b06:	89 8b       	std	Y+17, r24	; 0x11
    2b08:	9a 8b       	std	Y+18, r25	; 0x12
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	08 95       	ret

00002b10 <StepperMotorAxis::doInitializePosition()>:
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	ec 01       	movw	r28, r24
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	88 23       	and	r24, r24
    2b1a:	19 f0       	breq	.+6      	; 0x2b22 <StepperMotorAxis::doInitializePosition()+0x12>
    2b1c:	81 30       	cpi	r24, 0x01	; 1
    2b1e:	c9 f4       	brne	.+50     	; 0x2b52 <StepperMotorAxis::doInitializePosition()+0x42>
    2b20:	10 c0       	rjmp	.+32     	; 0x2b42 <StepperMotorAxis::doInitializePosition()+0x32>
    2b22:	8e 81       	ldd	r24, Y+6	; 0x06
    2b24:	9f 81       	ldd	r25, Y+7	; 0x07
    2b26:	a8 85       	ldd	r26, Y+8	; 0x08
    2b28:	b9 85       	ldd	r27, Y+9	; 0x09
    2b2a:	8d 8b       	std	Y+21, r24	; 0x15
    2b2c:	9e 8b       	std	Y+22, r25	; 0x16
    2b2e:	af 8b       	std	Y+23, r26	; 0x17
    2b30:	b8 8f       	std	Y+24, r27	; 0x18
    2b32:	ce 01       	movw	r24, r28
    2b34:	0a 96       	adiw	r24, 0x0a	; 10
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <StepperMotorAxis::doInitializePosition()+0x42>
    2b42:	8c 89       	ldd	r24, Y+20	; 0x14
    2b44:	88 23       	and	r24, r24
    2b46:	29 f4       	brne	.+10     	; 0x2b52 <StepperMotorAxis::doInitializePosition()+0x42>
    2b48:	1c 86       	std	Y+12, r1	; 0x0c
    2b4a:	1d 86       	std	Y+13, r1	; 0x0d
    2b4c:	1e 86       	std	Y+14, r1	; 0x0e
    2b4e:	1f 86       	std	Y+15, r1	; 0x0f
    2b50:	18 82       	st	Y, r1
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

00002b58 <StepperMotorAxis::doDetermineAvailableSteps()>:
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	81 30       	cpi	r24, 0x01	; 1
    2b62:	a1 f0       	breq	.+40     	; 0x2b8c <StepperMotorAxis::doDetermineAvailableSteps()+0x34>
    2b64:	81 30       	cpi	r24, 0x01	; 1
    2b66:	18 f0       	brcs	.+6      	; 0x2b6e <StepperMotorAxis::doDetermineAvailableSteps()+0x16>
    2b68:	82 30       	cpi	r24, 0x02	; 2
    2b6a:	f9 f4       	brne	.+62     	; 0x2baa <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2b6c:	1a c0       	rjmp	.+52     	; 0x2ba2 <StepperMotorAxis::doDetermineAvailableSteps()+0x4a>
    2b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b70:	9f 81       	ldd	r25, Y+7	; 0x07
    2b72:	a8 85       	ldd	r26, Y+8	; 0x08
    2b74:	b9 85       	ldd	r27, Y+9	; 0x09
    2b76:	8d 8b       	std	Y+21, r24	; 0x15
    2b78:	9e 8b       	std	Y+22, r25	; 0x16
    2b7a:	af 8b       	std	Y+23, r26	; 0x17
    2b7c:	b8 8f       	std	Y+24, r27	; 0x18
    2b7e:	ce 01       	movw	r24, r28
    2b80:	0a 96       	adiw	r24, 0x0a	; 10
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	09 c0       	rjmp	.+18     	; 0x2b9e <StepperMotorAxis::doDetermineAvailableSteps()+0x46>
    2b8c:	8c 89       	ldd	r24, Y+20	; 0x14
    2b8e:	88 23       	and	r24, r24
    2b90:	61 f4       	brne	.+24     	; 0x2baa <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2b92:	ce 01       	movw	r24, r28
    2b94:	0a 96       	adiw	r24, 0x0a	; 10
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    2b9c:	82 e0       	ldi	r24, 0x02	; 2
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	04 c0       	rjmp	.+8      	; 0x2baa <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2ba2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ba4:	88 23       	and	r24, r24
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2ba8:	18 82       	st	Y, r1
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <StepperMotorControlWithButtons::gotoStep(long)>:
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	ec 01       	movw	r28, r24
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bba:	ac 81       	ldd	r26, Y+4	; 0x04
    2bbc:	bd 81       	ldd	r27, Y+5	; 0x05
    2bbe:	48 1b       	sub	r20, r24
    2bc0:	59 0b       	sbc	r21, r25
    2bc2:	6a 0b       	sbc	r22, r26
    2bc4:	7b 0b       	sbc	r23, r27
    2bc6:	77 fd       	sbrc	r23, 7
    2bc8:	05 c0       	rjmp	.+10     	; 0x2bd4 <StepperMotorControlWithButtons::gotoStep(long)+0x24>
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	8a 87       	std	Y+10, r24	; 0x0a
    2bce:	5c 8b       	std	Y+20, r21	; 0x14
    2bd0:	4b 8b       	std	Y+19, r20	; 0x13
    2bd2:	08 c0       	rjmp	.+16     	; 0x2be4 <StepperMotorControlWithButtons::gotoStep(long)+0x34>
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	8a 87       	std	Y+10, r24	; 0x0a
    2bd8:	88 27       	eor	r24, r24
    2bda:	99 27       	eor	r25, r25
    2bdc:	84 1b       	sub	r24, r20
    2bde:	95 0b       	sbc	r25, r21
    2be0:	9c 8b       	std	Y+20, r25	; 0x14
    2be2:	8b 8b       	std	Y+19, r24	; 0x13
    2be4:	0e 94 c8 03 	call	0x790	; 0x790 <micros>
    2be8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bea:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bec:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bee:	5e 85       	ldd	r21, Y+14	; 0x0e
    2bf0:	62 1b       	sub	r22, r18
    2bf2:	73 0b       	sbc	r23, r19
    2bf4:	84 0b       	sbc	r24, r20
    2bf6:	95 0b       	sbc	r25, r21
    2bf8:	6f 87       	std	Y+15, r22	; 0x0f
    2bfa:	78 8b       	std	Y+16, r23	; 0x10
    2bfc:	89 8b       	std	Y+17, r24	; 0x11
    2bfe:	9a 8b       	std	Y+18, r25	; 0x12
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	08 95       	ret

00002c06 <StepperMotorAxis::moveToPositionMicroMFast(long)>:
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	8c 01       	movw	r16, r24
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	86 81       	ldd	r24, Z+6	; 0x06
    2c10:	97 81       	ldd	r25, Z+7	; 0x07
    2c12:	a0 85       	ldd	r26, Z+8	; 0x08
    2c14:	b1 85       	ldd	r27, Z+9	; 0x09
    2c16:	85 8b       	std	Z+21, r24	; 0x15
    2c18:	96 8b       	std	Z+22, r25	; 0x16
    2c1a:	a7 8b       	std	Z+23, r26	; 0x17
    2c1c:	b0 8f       	std	Z+24, r27	; 0x18
    2c1e:	cb 01       	movw	r24, r22
    2c20:	ba 01       	movw	r22, r20
    2c22:	24 e6       	ldi	r18, 0x64	; 100
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	0e 94 2f 23 	call	0x465e	; 0x465e <__divmodsi4>
    2c2e:	ca 01       	movw	r24, r20
    2c30:	b9 01       	movw	r22, r18
    2c32:	f8 01       	movw	r30, r16
    2c34:	22 81       	ldd	r18, Z+2	; 0x02
    2c36:	33 81       	ldd	r19, Z+3	; 0x03
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2c40:	28 ee       	ldi	r18, 0xE8	; 232
    2c42:	33 e0       	ldi	r19, 0x03	; 3
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	50 e0       	ldi	r21, 0x00	; 0
    2c48:	0e 94 2f 23 	call	0x465e	; 0x465e <__divmodsi4>
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	0a 96       	adiw	r24, 0x0a	; 10
    2c50:	ba 01       	movw	r22, r20
    2c52:	a9 01       	movw	r20, r18
    2c54:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <StepperMotorControlWithButtons::gotoStep(long)>
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	08 95       	ret

00002c5e <StepperMotorControlWithButtons::moveTo(long, unsigned long)>:
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	ec 01       	movw	r28, r24
    2c6c:	78 01       	movw	r14, r16
    2c6e:	89 01       	movw	r16, r18
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	9b 81       	ldd	r25, Y+3	; 0x03
    2c74:	ac 81       	ldd	r26, Y+4	; 0x04
    2c76:	bd 81       	ldd	r27, Y+5	; 0x05
    2c78:	48 1b       	sub	r20, r24
    2c7a:	59 0b       	sbc	r21, r25
    2c7c:	6a 0b       	sbc	r22, r26
    2c7e:	7b 0b       	sbc	r23, r27
    2c80:	77 fd       	sbrc	r23, 7
    2c82:	05 c0       	rjmp	.+10     	; 0x2c8e <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x30>
    2c84:	82 e0       	ldi	r24, 0x02	; 2
    2c86:	8a 87       	std	Y+10, r24	; 0x0a
    2c88:	5c 8b       	std	Y+20, r21	; 0x14
    2c8a:	4b 8b       	std	Y+19, r20	; 0x13
    2c8c:	08 c0       	rjmp	.+16     	; 0x2c9e <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x40>
    2c8e:	83 e0       	ldi	r24, 0x03	; 3
    2c90:	8a 87       	std	Y+10, r24	; 0x0a
    2c92:	88 27       	eor	r24, r24
    2c94:	99 27       	eor	r25, r25
    2c96:	84 1b       	sub	r24, r20
    2c98:	95 0b       	sbc	r25, r21
    2c9a:	9c 8b       	std	Y+20, r25	; 0x14
    2c9c:	8b 8b       	std	Y+19, r24	; 0x13
    2c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca2:	9c 01       	movw	r18, r24
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	2b 87       	std	Y+11, r18	; 0x0b
    2caa:	3c 87       	std	Y+12, r19	; 0x0c
    2cac:	4d 87       	std	Y+13, r20	; 0x0d
    2cae:	5e 87       	std	Y+14, r21	; 0x0e
    2cb0:	03 97       	sbiw	r24, 0x03	; 3
    2cb2:	40 f4       	brcc	.+16     	; 0x2cc4 <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x66>
    2cb4:	2f 5f       	subi	r18, 0xFF	; 255
    2cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cba:	5f 4f       	sbci	r21, 0xFF	; 255
    2cbc:	2b 87       	std	Y+11, r18	; 0x0b
    2cbe:	3c 87       	std	Y+12, r19	; 0x0c
    2cc0:	4d 87       	std	Y+13, r20	; 0x0d
    2cc2:	5e 87       	std	Y+14, r21	; 0x0e
    2cc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cc8:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cca:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ccc:	c8 01       	movw	r24, r16
    2cce:	b7 01       	movw	r22, r14
    2cd0:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
    2cd4:	2b 87       	std	Y+11, r18	; 0x0b
    2cd6:	3c 87       	std	Y+12, r19	; 0x0c
    2cd8:	4d 87       	std	Y+13, r20	; 0x0d
    2cda:	5e 87       	std	Y+14, r21	; 0x0e
    2cdc:	0e 94 c8 03 	call	0x790	; 0x790 <micros>
    2ce0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ce2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ce4:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ce6:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ce8:	62 1b       	sub	r22, r18
    2cea:	73 0b       	sbc	r23, r19
    2cec:	84 0b       	sbc	r24, r20
    2cee:	95 0b       	sbc	r25, r21
    2cf0:	6f 87       	std	Y+15, r22	; 0x0f
    2cf2:	78 8b       	std	Y+16, r23	; 0x10
    2cf4:	89 8b       	std	Y+17, r24	; 0x11
    2cf6:	9a 8b       	std	Y+18, r25	; 0x12
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	ff 90       	pop	r15
    2d02:	ef 90       	pop	r14
    2d04:	08 95       	ret

00002d06 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>:
    2d06:	cf 92       	push	r12
    2d08:	df 92       	push	r13
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	6c 01       	movw	r12, r24
    2d14:	78 01       	movw	r14, r16
    2d16:	89 01       	movw	r16, r18
    2d18:	cb 01       	movw	r24, r22
    2d1a:	ba 01       	movw	r22, r20
    2d1c:	24 e6       	ldi	r18, 0x64	; 100
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e0       	ldi	r20, 0x00	; 0
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	0e 94 2f 23 	call	0x465e	; 0x465e <__divmodsi4>
    2d28:	ca 01       	movw	r24, r20
    2d2a:	b9 01       	movw	r22, r18
    2d2c:	f6 01       	movw	r30, r12
    2d2e:	22 81       	ldd	r18, Z+2	; 0x02
    2d30:	33 81       	ldd	r19, Z+3	; 0x03
    2d32:	40 e0       	ldi	r20, 0x00	; 0
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2d3a:	28 ee       	ldi	r18, 0xE8	; 232
    2d3c:	33 e0       	ldi	r19, 0x03	; 3
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	0e 94 2f 23 	call	0x465e	; 0x465e <__divmodsi4>
    2d46:	c6 01       	movw	r24, r12
    2d48:	0a 96       	adiw	r24, 0x0a	; 10
    2d4a:	ba 01       	movw	r22, r20
    2d4c:	a9 01       	movw	r20, r18
    2d4e:	98 01       	movw	r18, r16
    2d50:	87 01       	movw	r16, r14
    2d52:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <StepperMotorControlWithButtons::moveTo(long, unsigned long)>
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	df 90       	pop	r13
    2d60:	cf 90       	pop	r12
    2d62:	08 95       	ret

00002d64 <StepperMotorControlWithButtons::update()>:
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	ec 01       	movw	r28, r24
    2d74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d76:	83 30       	cpi	r24, 0x03	; 3
    2d78:	41 f0       	breq	.+16     	; 0x2d8a <StepperMotorControlWithButtons::update()+0x26>
    2d7a:	85 30       	cpi	r24, 0x05	; 5
    2d7c:	31 f0       	breq	.+12     	; 0x2d8a <StepperMotorControlWithButtons::update()+0x26>
    2d7e:	88 23       	and	r24, r24
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <StepperMotorControlWithButtons::update()+0x20>
    2d82:	97 c0       	rjmp	.+302    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2d84:	dd 24       	eor	r13, r13
    2d86:	d3 94       	inc	r13
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <StepperMotorControlWithButtons::update()+0x28>
    2d8a:	dd 24       	eor	r13, r13
    2d8c:	0e 94 c8 03 	call	0x790	; 0x790 <micros>
    2d90:	7b 01       	movw	r14, r22
    2d92:	8c 01       	movw	r16, r24
    2d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d96:	98 89       	ldd	r25, Y+16	; 0x10
    2d98:	a9 89       	ldd	r26, Y+17	; 0x11
    2d9a:	ba 89       	ldd	r27, Y+18	; 0x12
    2d9c:	e8 1a       	sub	r14, r24
    2d9e:	f9 0a       	sbc	r15, r25
    2da0:	0a 0b       	sbc	r16, r26
    2da2:	1b 0b       	sbc	r17, r27
    2da4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da6:	81 30       	cpi	r24, 0x01	; 1
    2da8:	89 f0       	breq	.+34     	; 0x2dcc <StepperMotorControlWithButtons::update()+0x68>
    2daa:	dd 20       	and	r13, r13
    2dac:	19 f0       	breq	.+6      	; 0x2db4 <StepperMotorControlWithButtons::update()+0x50>
    2dae:	e8 85       	ldd	r30, Y+8	; 0x08
    2db0:	f9 85       	ldd	r31, Y+9	; 0x09
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <StepperMotorControlWithButtons::update()+0x54>
    2db4:	ee 81       	ldd	r30, Y+6	; 0x06
    2db6:	ff 81       	ldd	r31, Y+7	; 0x07
    2db8:	a0 81       	ld	r26, Z
    2dba:	b1 81       	ldd	r27, Z+1	; 0x01
    2dbc:	2d 91       	ld	r18, X+
    2dbe:	3c 91       	ld	r19, X
    2dc0:	cf 01       	movw	r24, r30
    2dc2:	f9 01       	movw	r30, r18
    2dc4:	09 95       	icall
    2dc6:	88 23       	and	r24, r24
    2dc8:	09 f0       	breq	.+2      	; 0x2dcc <StepperMotorControlWithButtons::update()+0x68>
    2dca:	68 c0       	rjmp	.+208    	; 0x2e9c <StepperMotorControlWithButtons::update()+0x138>
    2dcc:	88 e8       	ldi	r24, 0x88	; 136
    2dce:	e8 16       	cp	r14, r24
    2dd0:	83 e1       	ldi	r24, 0x13	; 19
    2dd2:	f8 06       	cpc	r15, r24
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	08 07       	cpc	r16, r24
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	18 07       	cpc	r17, r24
    2ddc:	08 f4       	brcc	.+2      	; 0x2de0 <StepperMotorControlWithButtons::update()+0x7c>
    2dde:	69 c0       	rjmp	.+210    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2de0:	e8 81       	ld	r30, Y
    2de2:	f9 81       	ldd	r31, Y+1	; 0x01
    2de4:	a0 81       	ld	r26, Z
    2de6:	b1 81       	ldd	r27, Z+1	; 0x01
    2de8:	12 96       	adiw	r26, 0x02	; 2
    2dea:	2d 91       	ld	r18, X+
    2dec:	3c 91       	ld	r19, X
    2dee:	13 97       	sbiw	r26, 0x03	; 3
    2df0:	cf 01       	movw	r24, r30
    2df2:	f9 01       	movw	r30, r18
    2df4:	09 95       	icall
    2df6:	1a 86       	std	Y+10, r1	; 0x0a
    2df8:	5c c0       	rjmp	.+184    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2dfa:	88 e8       	ldi	r24, 0x88	; 136
    2dfc:	e8 16       	cp	r14, r24
    2dfe:	83 e1       	ldi	r24, 0x13	; 19
    2e00:	f8 06       	cpc	r15, r24
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	08 07       	cpc	r16, r24
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	18 07       	cpc	r17, r24
    2e0a:	08 f4       	brcc	.+2      	; 0x2e0e <StepperMotorControlWithButtons::update()+0xaa>
    2e0c:	52 c0       	rjmp	.+164    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2e0e:	e8 81       	ld	r30, Y
    2e10:	f9 81       	ldd	r31, Y+1	; 0x01
    2e12:	a0 81       	ld	r26, Z
    2e14:	b1 81       	ldd	r27, Z+1	; 0x01
    2e16:	12 96       	adiw	r26, 0x02	; 2
    2e18:	2d 91       	ld	r18, X+
    2e1a:	3c 91       	ld	r19, X
    2e1c:	13 97       	sbiw	r26, 0x03	; 3
    2e1e:	cf 01       	movw	r24, r30
    2e20:	f9 01       	movw	r30, r18
    2e22:	09 95       	icall
    2e24:	46 c0       	rjmp	.+140    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2e26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e28:	82 50       	subi	r24, 0x02	; 2
    2e2a:	82 30       	cpi	r24, 0x02	; 2
    2e2c:	50 f4       	brcc	.+20     	; 0x2e42 <StepperMotorControlWithButtons::update()+0xde>
    2e2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e30:	9c 89       	ldd	r25, Y+20	; 0x14
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	19 f4       	brne	.+6      	; 0x2e3c <StepperMotorControlWithButtons::update()+0xd8>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	8a 87       	std	Y+10, r24	; 0x0a
    2e3a:	3b c0       	rjmp	.+118    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	9c 8b       	std	Y+20, r25	; 0x14
    2e40:	8b 8b       	std	Y+19, r24	; 0x13
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	ac 81       	ldd	r26, Y+4	; 0x04
    2e48:	bd 81       	ldd	r27, Y+5	; 0x05
    2e4a:	dd 20       	and	r13, r13
    2e4c:	21 f0       	breq	.+8      	; 0x2e56 <StepperMotorControlWithButtons::update()+0xf2>
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	a1 1d       	adc	r26, r1
    2e52:	b1 1d       	adc	r27, r1
    2e54:	03 c0       	rjmp	.+6      	; 0x2e5c <StepperMotorControlWithButtons::update()+0xf8>
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	a1 09       	sbc	r26, r1
    2e5a:	b1 09       	sbc	r27, r1
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	9b 83       	std	Y+3, r25	; 0x03
    2e60:	ac 83       	std	Y+4, r26	; 0x04
    2e62:	bd 83       	std	Y+5, r27	; 0x05
    2e64:	a8 81       	ld	r26, Y
    2e66:	b9 81       	ldd	r27, Y+1	; 0x01
    2e68:	ed 91       	ld	r30, X+
    2e6a:	fc 91       	ld	r31, X
    2e6c:	11 97       	sbiw	r26, 0x01	; 1
    2e6e:	01 90       	ld	r0, Z+
    2e70:	f0 81       	ld	r31, Z
    2e72:	e0 2d       	mov	r30, r0
    2e74:	cd 01       	movw	r24, r26
    2e76:	6d 2d       	mov	r22, r13
    2e78:	09 95       	icall
    2e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e7c:	98 89       	ldd	r25, Y+16	; 0x10
    2e7e:	a9 89       	ldd	r26, Y+17	; 0x11
    2e80:	ba 89       	ldd	r27, Y+18	; 0x12
    2e82:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e84:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e86:	4d 85       	ldd	r20, Y+13	; 0x0d
    2e88:	5e 85       	ldd	r21, Y+14	; 0x0e
    2e8a:	82 0f       	add	r24, r18
    2e8c:	93 1f       	adc	r25, r19
    2e8e:	a4 1f       	adc	r26, r20
    2e90:	b5 1f       	adc	r27, r21
    2e92:	8f 87       	std	Y+15, r24	; 0x0f
    2e94:	98 8b       	std	Y+16, r25	; 0x10
    2e96:	a9 8b       	std	Y+17, r26	; 0x11
    2e98:	ba 8b       	std	Y+18, r27	; 0x12
    2e9a:	0b c0       	rjmp	.+22     	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2e9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ea0:	ad 85       	ldd	r26, Y+13	; 0x0d
    2ea2:	be 85       	ldd	r27, Y+14	; 0x0e
    2ea4:	e8 16       	cp	r14, r24
    2ea6:	f9 06       	cpc	r15, r25
    2ea8:	0a 07       	cpc	r16, r26
    2eaa:	1b 07       	cpc	r17, r27
    2eac:	08 f4       	brcc	.+2      	; 0x2eb0 <StepperMotorControlWithButtons::update()+0x14c>
    2eae:	a5 cf       	rjmp	.-182    	; 0x2dfa <StepperMotorControlWithButtons::update()+0x96>
    2eb0:	ba cf       	rjmp	.-140    	; 0x2e26 <StepperMotorControlWithButtons::update()+0xc2>
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	1f 91       	pop	r17
    2eb8:	0f 91       	pop	r16
    2eba:	ff 90       	pop	r15
    2ebc:	ef 90       	pop	r14
    2ebe:	df 90       	pop	r13
    2ec0:	08 95       	ret

00002ec2 <StepperMotorAxis::update()>:
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	ec 01       	movw	r28, r24
    2ec8:	0a 96       	adiw	r24, 0x0a	; 10
    2eca:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <StepperMotorControlWithButtons::update()>
    2ece:	88 81       	ld	r24, Y
    2ed0:	83 30       	cpi	r24, 0x03	; 3
    2ed2:	19 f0       	breq	.+6      	; 0x2eda <StepperMotorAxis::update()+0x18>
    2ed4:	8a 30       	cpi	r24, 0x0A	; 10
    2ed6:	49 f4       	brne	.+18     	; 0x2eea <StepperMotorAxis::update()+0x28>
    2ed8:	04 c0       	rjmp	.+8      	; 0x2ee2 <StepperMotorAxis::update()+0x20>
    2eda:	ce 01       	movw	r24, r28
    2edc:	0e 94 88 15 	call	0x2b10	; 0x2b10 <StepperMotorAxis::doInitializePosition()>
    2ee0:	05 c0       	rjmp	.+10     	; 0x2eec <StepperMotorAxis::update()+0x2a>
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <StepperMotorAxis::doDetermineAvailableSteps()>
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <StepperMotorAxis::update()+0x2a>
    2eea:	19 82       	std	Y+1, r1	; 0x01
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	08 95       	ret

00002ef2 <TicksPerSecond::tick()>:
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	80 81       	ld	r24, Z
    2ef6:	91 81       	ldd	r25, Z+1	; 0x01
    2ef8:	a2 81       	ldd	r26, Z+2	; 0x02
    2efa:	b3 81       	ldd	r27, Z+3	; 0x03
    2efc:	01 96       	adiw	r24, 0x01	; 1
    2efe:	a1 1d       	adc	r26, r1
    2f00:	b1 1d       	adc	r27, r1
    2f02:	80 83       	st	Z, r24
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	a2 83       	std	Z+2, r26	; 0x02
    2f08:	b3 83       	std	Z+3, r27	; 0x03
    2f0a:	84 81       	ldd	r24, Z+4	; 0x04
    2f0c:	95 81       	ldd	r25, Z+5	; 0x05
    2f0e:	a6 81       	ldd	r26, Z+6	; 0x06
    2f10:	b7 81       	ldd	r27, Z+7	; 0x07
    2f12:	01 96       	adiw	r24, 0x01	; 1
    2f14:	a1 1d       	adc	r26, r1
    2f16:	b1 1d       	adc	r27, r1
    2f18:	84 83       	std	Z+4, r24	; 0x04
    2f1a:	95 83       	std	Z+5, r25	; 0x05
    2f1c:	a6 83       	std	Z+6, r26	; 0x06
    2f1e:	b7 83       	std	Z+7, r27	; 0x07
    2f20:	80 85       	ldd	r24, Z+8	; 0x08
    2f22:	91 85       	ldd	r25, Z+9	; 0x09
    2f24:	a2 85       	ldd	r26, Z+10	; 0x0a
    2f26:	b3 85       	ldd	r27, Z+11	; 0x0b
    2f28:	01 96       	adiw	r24, 0x01	; 1
    2f2a:	a1 1d       	adc	r26, r1
    2f2c:	b1 1d       	adc	r27, r1
    2f2e:	80 87       	std	Z+8, r24	; 0x08
    2f30:	91 87       	std	Z+9, r25	; 0x09
    2f32:	a2 87       	std	Z+10, r26	; 0x0a
    2f34:	b3 87       	std	Z+11, r27	; 0x0b
    2f36:	08 95       	ret

00002f38 <TicksPerSecond::getIntTPS_unsafe()>:
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	8c 01       	movw	r16, r24
    2f3e:	dc 01       	movw	r26, r24
    2f40:	58 96       	adiw	r26, 0x18	; 24
    2f42:	ec 91       	ld	r30, X
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	ee 0f       	add	r30, r30
    2f48:	ff 1f       	adc	r31, r31
    2f4a:	ee 0f       	add	r30, r30
    2f4c:	ff 1f       	adc	r31, r31
    2f4e:	e0 0f       	add	r30, r16
    2f50:	f1 1f       	adc	r31, r17
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	28 ee       	ldi	r18, 0xE8	; 232
    2f5c:	33 e0       	ldi	r19, 0x03	; 3
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2f66:	f8 01       	movw	r30, r16
    2f68:	25 8d       	ldd	r18, Z+29	; 0x1d
    2f6a:	36 8d       	ldd	r19, Z+30	; 0x1e
    2f6c:	47 8d       	ldd	r20, Z+31	; 0x1f
    2f6e:	50 a1       	ldd	r21, Z+32	; 0x20
    2f70:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
    2f74:	c9 01       	movw	r24, r18
    2f76:	1f 91       	pop	r17
    2f78:	0f 91       	pop	r16
    2f7a:	08 95       	ret

00002f7c <TicksPerSecond::update()>:
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	ec 01       	movw	r28, r24
    2f8a:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    2f8e:	7b 01       	movw	r14, r22
    2f90:	8c 01       	movw	r16, r24
    2f92:	89 8d       	ldd	r24, Y+25	; 0x19
    2f94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f96:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2f98:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2f9a:	a8 01       	movw	r20, r16
    2f9c:	97 01       	movw	r18, r14
    2f9e:	28 1b       	sub	r18, r24
    2fa0:	39 0b       	sbc	r19, r25
    2fa2:	4a 0b       	sbc	r20, r26
    2fa4:	5b 0b       	sbc	r21, r27
    2fa6:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa8:	9a a1       	ldd	r25, Y+34	; 0x22
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	28 17       	cp	r18, r24
    2fb0:	39 07       	cpc	r19, r25
    2fb2:	4a 07       	cpc	r20, r26
    2fb4:	5b 07       	cpc	r21, r27
    2fb6:	18 f1       	brcs	.+70     	; 0x2ffe <TicksPerSecond::update()+0x82>
    2fb8:	88 8d       	ldd	r24, Y+24	; 0x18
    2fba:	a8 2f       	mov	r26, r24
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	fd 01       	movw	r30, r26
    2fc0:	ee 0f       	add	r30, r30
    2fc2:	ff 1f       	adc	r31, r31
    2fc4:	ee 0f       	add	r30, r30
    2fc6:	ff 1f       	adc	r31, r31
    2fc8:	ec 0f       	add	r30, r28
    2fca:	fd 1f       	adc	r31, r29
    2fcc:	10 82       	st	Z, r1
    2fce:	11 82       	std	Z+1, r1	; 0x01
    2fd0:	12 82       	std	Z+2, r1	; 0x02
    2fd2:	13 82       	std	Z+3, r1	; 0x03
    2fd4:	13 96       	adiw	r26, 0x03	; 3
    2fd6:	aa 0f       	add	r26, r26
    2fd8:	bb 1f       	adc	r27, r27
    2fda:	aa 0f       	add	r26, r26
    2fdc:	bb 1f       	adc	r27, r27
    2fde:	ac 0f       	add	r26, r28
    2fe0:	bd 1f       	adc	r27, r29
    2fe2:	ed 92       	st	X+, r14
    2fe4:	fd 92       	st	X+, r15
    2fe6:	0d 93       	st	X+, r16
    2fe8:	1c 93       	st	X, r17
    2fea:	13 97       	sbiw	r26, 0x03	; 3
    2fec:	e9 8e       	std	Y+25, r14	; 0x19
    2fee:	fa 8e       	std	Y+26, r15	; 0x1a
    2ff0:	0b 8f       	std	Y+27, r16	; 0x1b
    2ff2:	1c 8f       	std	Y+28, r17	; 0x1c
    2ff4:	8f 5f       	subi	r24, 0xFF	; 255
    2ff6:	88 8f       	std	Y+24, r24	; 0x18
    2ff8:	83 30       	cpi	r24, 0x03	; 3
    2ffa:	08 f0       	brcs	.+2      	; 0x2ffe <TicksPerSecond::update()+0x82>
    2ffc:	18 8e       	std	Y+24, r1	; 0x18
    2ffe:	e8 8d       	ldd	r30, Y+24	; 0x18
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	33 96       	adiw	r30, 0x03	; 3
    3004:	ee 0f       	add	r30, r30
    3006:	ff 1f       	adc	r31, r31
    3008:	ee 0f       	add	r30, r30
    300a:	ff 1f       	adc	r31, r31
    300c:	ec 0f       	add	r30, r28
    300e:	fd 1f       	adc	r31, r29
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	a2 81       	ldd	r26, Z+2	; 0x02
    3016:	b3 81       	ldd	r27, Z+3	; 0x03
    3018:	a8 01       	movw	r20, r16
    301a:	97 01       	movw	r18, r14
    301c:	28 1b       	sub	r18, r24
    301e:	39 0b       	sbc	r19, r25
    3020:	4a 0b       	sbc	r20, r26
    3022:	5b 0b       	sbc	r21, r27
    3024:	2d 8f       	std	Y+29, r18	; 0x1d
    3026:	3e 8f       	std	Y+30, r19	; 0x1e
    3028:	4f 8f       	std	Y+31, r20	; 0x1f
    302a:	58 a3       	std	Y+32, r21	; 0x20
    302c:	21 15       	cp	r18, r1
    302e:	31 05       	cpc	r19, r1
    3030:	41 05       	cpc	r20, r1
    3032:	51 05       	cpc	r21, r1
    3034:	41 f4       	brne	.+16     	; 0x3046 <TicksPerSecond::update()+0xca>
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	a0 e0       	ldi	r26, 0x00	; 0
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	8d 8f       	std	Y+29, r24	; 0x1d
    3040:	9e 8f       	std	Y+30, r25	; 0x1e
    3042:	af 8f       	std	Y+31, r26	; 0x1f
    3044:	b8 a3       	std	Y+32, r27	; 0x20
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	08 95       	ret

00003054 <TicksPerSecond::initialize(unsigned int)>:
    3054:	ef 92       	push	r14
    3056:	ff 92       	push	r15
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	8c 01       	movw	r16, r24
    305e:	7b 01       	movw	r14, r22
    3060:	0e 94 ba 03 	call	0x774	; 0x774 <millis>
    3064:	f8 01       	movw	r30, r16
    3066:	61 8f       	std	Z+25, r22	; 0x19
    3068:	72 8f       	std	Z+26, r23	; 0x1a
    306a:	83 8f       	std	Z+27, r24	; 0x1b
    306c:	94 8f       	std	Z+28, r25	; 0x1c
    306e:	10 82       	st	Z, r1
    3070:	11 82       	std	Z+1, r1	; 0x01
    3072:	12 82       	std	Z+2, r1	; 0x02
    3074:	13 82       	std	Z+3, r1	; 0x03
    3076:	64 87       	std	Z+12, r22	; 0x0c
    3078:	75 87       	std	Z+13, r23	; 0x0d
    307a:	86 87       	std	Z+14, r24	; 0x0e
    307c:	97 87       	std	Z+15, r25	; 0x0f
    307e:	14 82       	std	Z+4, r1	; 0x04
    3080:	15 82       	std	Z+5, r1	; 0x05
    3082:	16 82       	std	Z+6, r1	; 0x06
    3084:	17 82       	std	Z+7, r1	; 0x07
    3086:	60 8b       	std	Z+16, r22	; 0x10
    3088:	71 8b       	std	Z+17, r23	; 0x11
    308a:	82 8b       	std	Z+18, r24	; 0x12
    308c:	93 8b       	std	Z+19, r25	; 0x13
    308e:	10 86       	std	Z+8, r1	; 0x08
    3090:	11 86       	std	Z+9, r1	; 0x09
    3092:	12 86       	std	Z+10, r1	; 0x0a
    3094:	13 86       	std	Z+11, r1	; 0x0b
    3096:	64 8b       	std	Z+20, r22	; 0x14
    3098:	75 8b       	std	Z+21, r23	; 0x15
    309a:	86 8b       	std	Z+22, r24	; 0x16
    309c:	97 8b       	std	Z+23, r25	; 0x17
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a0 e0       	ldi	r26, 0x00	; 0
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	85 8f       	std	Z+29, r24	; 0x1d
    30a8:	96 8f       	std	Z+30, r25	; 0x1e
    30aa:	a7 8f       	std	Z+31, r26	; 0x1f
    30ac:	b0 a3       	std	Z+32, r27	; 0x20
    30ae:	10 8e       	std	Z+24, r1	; 0x18
    30b0:	c7 01       	movw	r24, r14
    30b2:	63 e0       	ldi	r22, 0x03	; 3
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__udivmodhi4>
    30ba:	72 a3       	std	Z+34, r23	; 0x22
    30bc:	61 a3       	std	Z+33, r22	; 0x21
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	08 95       	ret

000030c8 <__vector_18>:
    30c8:	1f 92       	push	r1
    30ca:	0f 92       	push	r0
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	0f 92       	push	r0
    30d0:	11 24       	eor	r1, r1
    30d2:	2f 93       	push	r18
    30d4:	3f 93       	push	r19
    30d6:	4f 93       	push	r20
    30d8:	8f 93       	push	r24
    30da:	9f 93       	push	r25
    30dc:	ef 93       	push	r30
    30de:	ff 93       	push	r31
    30e0:	40 91 c6 00 	lds	r20, 0x00C6
    30e4:	20 91 fe 03 	lds	r18, 0x03FE
    30e8:	30 91 ff 03 	lds	r19, 0x03FF
    30ec:	2f 5f       	subi	r18, 0xFF	; 255
    30ee:	3f 4f       	sbci	r19, 0xFF	; 255
    30f0:	2f 73       	andi	r18, 0x3F	; 63
    30f2:	30 70       	andi	r19, 0x00	; 0
    30f4:	80 91 00 04 	lds	r24, 0x0400
    30f8:	90 91 01 04 	lds	r25, 0x0401
    30fc:	28 17       	cp	r18, r24
    30fe:	39 07       	cpc	r19, r25
    3100:	59 f0       	breq	.+22     	; 0x3118 <__vector_18+0x50>
    3102:	e0 91 fe 03 	lds	r30, 0x03FE
    3106:	f0 91 ff 03 	lds	r31, 0x03FF
    310a:	e2 54       	subi	r30, 0x42	; 66
    310c:	fc 4f       	sbci	r31, 0xFC	; 252
    310e:	40 83       	st	Z, r20
    3110:	30 93 ff 03 	sts	0x03FF, r19
    3114:	20 93 fe 03 	sts	0x03FE, r18
    3118:	ff 91       	pop	r31
    311a:	ef 91       	pop	r30
    311c:	9f 91       	pop	r25
    311e:	8f 91       	pop	r24
    3120:	4f 91       	pop	r20
    3122:	3f 91       	pop	r19
    3124:	2f 91       	pop	r18
    3126:	0f 90       	pop	r0
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	0f 90       	pop	r0
    312c:	1f 90       	pop	r1
    312e:	18 95       	reti

00003130 <__vector_19>:
    3130:	1f 92       	push	r1
    3132:	0f 92       	push	r0
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	0f 92       	push	r0
    3138:	11 24       	eor	r1, r1
    313a:	2f 93       	push	r18
    313c:	3f 93       	push	r19
    313e:	4f 93       	push	r20
    3140:	5f 93       	push	r21
    3142:	6f 93       	push	r22
    3144:	7f 93       	push	r23
    3146:	8f 93       	push	r24
    3148:	9f 93       	push	r25
    314a:	af 93       	push	r26
    314c:	bf 93       	push	r27
    314e:	ef 93       	push	r30
    3150:	ff 93       	push	r31
    3152:	20 91 42 04 	lds	r18, 0x0442
    3156:	30 91 43 04 	lds	r19, 0x0443
    315a:	80 91 44 04 	lds	r24, 0x0444
    315e:	90 91 45 04 	lds	r25, 0x0445
    3162:	28 17       	cp	r18, r24
    3164:	39 07       	cpc	r19, r25
    3166:	31 f4       	brne	.+12     	; 0x3174 <__vector_19+0x44>
    3168:	80 91 c1 00 	lds	r24, 0x00C1
    316c:	8f 7d       	andi	r24, 0xDF	; 223
    316e:	80 93 c1 00 	sts	0x00C1, r24
    3172:	16 c0       	rjmp	.+44     	; 0x31a0 <__vector_19+0x70>
    3174:	e0 91 44 04 	lds	r30, 0x0444
    3178:	f0 91 45 04 	lds	r31, 0x0445
    317c:	ee 5f       	subi	r30, 0xFE	; 254
    317e:	fb 4f       	sbci	r31, 0xFB	; 251
    3180:	40 81       	ld	r20, Z
    3182:	80 91 44 04 	lds	r24, 0x0444
    3186:	90 91 45 04 	lds	r25, 0x0445
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	60 e4       	ldi	r22, 0x40	; 64
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__divmodhi4>
    3194:	90 93 45 04 	sts	0x0445, r25
    3198:	80 93 44 04 	sts	0x0444, r24
    319c:	40 93 c6 00 	sts	0x00C6, r20
    31a0:	ff 91       	pop	r31
    31a2:	ef 91       	pop	r30
    31a4:	bf 91       	pop	r27
    31a6:	af 91       	pop	r26
    31a8:	9f 91       	pop	r25
    31aa:	8f 91       	pop	r24
    31ac:	7f 91       	pop	r23
    31ae:	6f 91       	pop	r22
    31b0:	5f 91       	pop	r21
    31b2:	4f 91       	pop	r20
    31b4:	3f 91       	pop	r19
    31b6:	2f 91       	pop	r18
    31b8:	0f 90       	pop	r0
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	0f 90       	pop	r0
    31be:	1f 90       	pop	r1
    31c0:	18 95       	reti

000031c2 <HardwareSerial::begin(unsigned long)>:
    31c2:	af 92       	push	r10
    31c4:	bf 92       	push	r11
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	0f 93       	push	r16
    31ce:	1f 93       	push	r17
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	ec 01       	movw	r28, r24
    31d6:	7a 01       	movw	r14, r20
    31d8:	8b 01       	movw	r16, r22
    31da:	dd 24       	eor	r13, r13
    31dc:	40 30       	cpi	r20, 0x00	; 0
    31de:	81 ee       	ldi	r24, 0xE1	; 225
    31e0:	58 07       	cpc	r21, r24
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	68 07       	cpc	r22, r24
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	78 07       	cpc	r23, r24
    31ea:	11 f0       	breq	.+4      	; 0x31f0 <HardwareSerial::begin(unsigned long)+0x2e>
    31ec:	dd 24       	eor	r13, r13
    31ee:	d3 94       	inc	r13
    31f0:	91 e0       	ldi	r25, 0x01	; 1
    31f2:	a9 2e       	mov	r10, r25
    31f4:	b1 2c       	mov	r11, r1
    31f6:	ec 89       	ldd	r30, Y+20	; 0x14
    31f8:	fd 89       	ldd	r31, Y+21	; 0x15
    31fa:	dd 20       	and	r13, r13
    31fc:	69 f0       	breq	.+26     	; 0x3218 <HardwareSerial::begin(unsigned long)+0x56>
    31fe:	c5 01       	movw	r24, r10
    3200:	0e 8c       	ldd	r0, Y+30	; 0x1e
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <HardwareSerial::begin(unsigned long)+0x46>
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	0a 94       	dec	r0
    320a:	e2 f7       	brpl	.-8      	; 0x3204 <HardwareSerial::begin(unsigned long)+0x42>
    320c:	80 83       	st	Z, r24
    320e:	60 e0       	ldi	r22, 0x00	; 0
    3210:	79 e0       	ldi	r23, 0x09	; 9
    3212:	8d e3       	ldi	r24, 0x3D	; 61
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	05 c0       	rjmp	.+10     	; 0x3222 <HardwareSerial::begin(unsigned long)+0x60>
    3218:	10 82       	st	Z, r1
    321a:	60 e8       	ldi	r22, 0x80	; 128
    321c:	74 e8       	ldi	r23, 0x84	; 132
    321e:	8e e1       	ldi	r24, 0x1E	; 30
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	a8 01       	movw	r20, r16
    3224:	97 01       	movw	r18, r14
    3226:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
    322a:	21 50       	subi	r18, 0x01	; 1
    322c:	30 40       	sbci	r19, 0x00	; 0
    322e:	40 40       	sbci	r20, 0x00	; 0
    3230:	50 40       	sbci	r21, 0x00	; 0
    3232:	56 95       	lsr	r21
    3234:	47 95       	ror	r20
    3236:	37 95       	ror	r19
    3238:	27 95       	ror	r18
    323a:	80 e1       	ldi	r24, 0x10	; 16
    323c:	20 30       	cpi	r18, 0x00	; 0
    323e:	38 07       	cpc	r19, r24
    3240:	20 f0       	brcs	.+8      	; 0x324a <HardwareSerial::begin(unsigned long)+0x88>
    3242:	dd 20       	and	r13, r13
    3244:	11 f0       	breq	.+4      	; 0x324a <HardwareSerial::begin(unsigned long)+0x88>
    3246:	dd 24       	eor	r13, r13
    3248:	d6 cf       	rjmp	.-84     	; 0x31f6 <HardwareSerial::begin(unsigned long)+0x34>
    324a:	e8 89       	ldd	r30, Y+16	; 0x10
    324c:	f9 89       	ldd	r31, Y+17	; 0x11
    324e:	30 83       	st	Z, r19
    3250:	ea 89       	ldd	r30, Y+18	; 0x12
    3252:	fb 89       	ldd	r31, Y+19	; 0x13
    3254:	20 83       	st	Z, r18
    3256:	ee 89       	ldd	r30, Y+22	; 0x16
    3258:	ff 89       	ldd	r31, Y+23	; 0x17
    325a:	40 81       	ld	r20, Z
    325c:	21 e0       	ldi	r18, 0x01	; 1
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	c9 01       	movw	r24, r18
    3262:	0a 8c       	ldd	r0, Y+26	; 0x1a
    3264:	02 c0       	rjmp	.+4      	; 0x326a <HardwareSerial::begin(unsigned long)+0xa8>
    3266:	88 0f       	add	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	0a 94       	dec	r0
    326c:	e2 f7       	brpl	.-8      	; 0x3266 <HardwareSerial::begin(unsigned long)+0xa4>
    326e:	48 2b       	or	r20, r24
    3270:	40 83       	st	Z, r20
    3272:	ee 89       	ldd	r30, Y+22	; 0x16
    3274:	ff 89       	ldd	r31, Y+23	; 0x17
    3276:	40 81       	ld	r20, Z
    3278:	c9 01       	movw	r24, r18
    327a:	0b 8c       	ldd	r0, Y+27	; 0x1b
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <HardwareSerial::begin(unsigned long)+0xc0>
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	0a 94       	dec	r0
    3284:	e2 f7       	brpl	.-8      	; 0x327e <HardwareSerial::begin(unsigned long)+0xbc>
    3286:	48 2b       	or	r20, r24
    3288:	40 83       	st	Z, r20
    328a:	ee 89       	ldd	r30, Y+22	; 0x16
    328c:	ff 89       	ldd	r31, Y+23	; 0x17
    328e:	40 81       	ld	r20, Z
    3290:	c9 01       	movw	r24, r18
    3292:	0c 8c       	ldd	r0, Y+28	; 0x1c
    3294:	02 c0       	rjmp	.+4      	; 0x329a <HardwareSerial::begin(unsigned long)+0xd8>
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	0a 94       	dec	r0
    329c:	e2 f7       	brpl	.-8      	; 0x3296 <HardwareSerial::begin(unsigned long)+0xd4>
    329e:	48 2b       	or	r20, r24
    32a0:	40 83       	st	Z, r20
    32a2:	ee 89       	ldd	r30, Y+22	; 0x16
    32a4:	ff 89       	ldd	r31, Y+23	; 0x17
    32a6:	80 81       	ld	r24, Z
    32a8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    32aa:	02 c0       	rjmp	.+4      	; 0x32b0 <HardwareSerial::begin(unsigned long)+0xee>
    32ac:	22 0f       	add	r18, r18
    32ae:	33 1f       	adc	r19, r19
    32b0:	0a 94       	dec	r0
    32b2:	e2 f7       	brpl	.-8      	; 0x32ac <HardwareSerial::begin(unsigned long)+0xea>
    32b4:	20 95       	com	r18
    32b6:	28 23       	and	r18, r24
    32b8:	20 83       	st	Z, r18
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	1f 91       	pop	r17
    32c0:	0f 91       	pop	r16
    32c2:	ff 90       	pop	r15
    32c4:	ef 90       	pop	r14
    32c6:	df 90       	pop	r13
    32c8:	bf 90       	pop	r11
    32ca:	af 90       	pop	r10
    32cc:	08 95       	ret

000032ce <HardwareSerial::available()>:
    32ce:	dc 01       	movw	r26, r24
    32d0:	1c 96       	adiw	r26, 0x0c	; 12
    32d2:	ed 91       	ld	r30, X+
    32d4:	fc 91       	ld	r31, X
    32d6:	1d 97       	sbiw	r26, 0x0d	; 13
    32d8:	e0 5c       	subi	r30, 0xC0	; 192
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	21 91       	ld	r18, Z+
    32de:	31 91       	ld	r19, Z+
    32e0:	80 81       	ld	r24, Z
    32e2:	91 81       	ldd	r25, Z+1	; 0x01
    32e4:	28 1b       	sub	r18, r24
    32e6:	39 0b       	sbc	r19, r25
    32e8:	2f 73       	andi	r18, 0x3F	; 63
    32ea:	30 70       	andi	r19, 0x00	; 0
    32ec:	c9 01       	movw	r24, r18
    32ee:	08 95       	ret

000032f0 <HardwareSerial::peek()>:
    32f0:	dc 01       	movw	r26, r24
    32f2:	1c 96       	adiw	r26, 0x0c	; 12
    32f4:	ed 91       	ld	r30, X+
    32f6:	fc 91       	ld	r31, X
    32f8:	1d 97       	sbiw	r26, 0x0d	; 13
    32fa:	e0 5c       	subi	r30, 0xC0	; 192
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	20 81       	ld	r18, Z
    3300:	31 81       	ldd	r19, Z+1	; 0x01
    3302:	e0 54       	subi	r30, 0x40	; 64
    3304:	f0 40       	sbci	r31, 0x00	; 0
    3306:	df 01       	movw	r26, r30
    3308:	ae 5b       	subi	r26, 0xBE	; 190
    330a:	bf 4f       	sbci	r27, 0xFF	; 255
    330c:	8d 91       	ld	r24, X+
    330e:	9c 91       	ld	r25, X
    3310:	11 97       	sbiw	r26, 0x01	; 1
    3312:	28 17       	cp	r18, r24
    3314:	39 07       	cpc	r19, r25
    3316:	19 f4       	brne	.+6      	; 0x331e <HardwareSerial::peek()+0x2e>
    3318:	2f ef       	ldi	r18, 0xFF	; 255
    331a:	3f ef       	ldi	r19, 0xFF	; 255
    331c:	07 c0       	rjmp	.+14     	; 0x332c <HardwareSerial::peek()+0x3c>
    331e:	8d 91       	ld	r24, X+
    3320:	9c 91       	ld	r25, X
    3322:	e8 0f       	add	r30, r24
    3324:	f9 1f       	adc	r31, r25
    3326:	80 81       	ld	r24, Z
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	c9 01       	movw	r24, r18
    332e:	08 95       	ret

00003330 <HardwareSerial::read()>:
    3330:	dc 01       	movw	r26, r24
    3332:	1c 96       	adiw	r26, 0x0c	; 12
    3334:	ed 91       	ld	r30, X+
    3336:	fc 91       	ld	r31, X
    3338:	1d 97       	sbiw	r26, 0x0d	; 13
    333a:	e0 5c       	subi	r30, 0xC0	; 192
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	20 81       	ld	r18, Z
    3340:	31 81       	ldd	r19, Z+1	; 0x01
    3342:	e0 54       	subi	r30, 0x40	; 64
    3344:	f0 40       	sbci	r31, 0x00	; 0
    3346:	df 01       	movw	r26, r30
    3348:	ae 5b       	subi	r26, 0xBE	; 190
    334a:	bf 4f       	sbci	r27, 0xFF	; 255
    334c:	8d 91       	ld	r24, X+
    334e:	9c 91       	ld	r25, X
    3350:	11 97       	sbiw	r26, 0x01	; 1
    3352:	28 17       	cp	r18, r24
    3354:	39 07       	cpc	r19, r25
    3356:	19 f4       	brne	.+6      	; 0x335e <HardwareSerial::read()+0x2e>
    3358:	2f ef       	ldi	r18, 0xFF	; 255
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	10 c0       	rjmp	.+32     	; 0x337e <HardwareSerial::read()+0x4e>
    335e:	8d 91       	ld	r24, X+
    3360:	9c 91       	ld	r25, X
    3362:	11 97       	sbiw	r26, 0x01	; 1
    3364:	e8 0f       	add	r30, r24
    3366:	f9 1f       	adc	r31, r25
    3368:	20 81       	ld	r18, Z
    336a:	8d 91       	ld	r24, X+
    336c:	9c 91       	ld	r25, X
    336e:	11 97       	sbiw	r26, 0x01	; 1
    3370:	01 96       	adiw	r24, 0x01	; 1
    3372:	8f 73       	andi	r24, 0x3F	; 63
    3374:	90 70       	andi	r25, 0x00	; 0
    3376:	11 96       	adiw	r26, 0x01	; 1
    3378:	9c 93       	st	X, r25
    337a:	8e 93       	st	-X, r24
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	c9 01       	movw	r24, r18
    3380:	08 95       	ret

00003382 <HardwareSerial::flush()>:
    3382:	fc 01       	movw	r30, r24
    3384:	86 85       	ldd	r24, Z+14	; 0x0e
    3386:	97 85       	ldd	r25, Z+15	; 0x0f
    3388:	dc 01       	movw	r26, r24
    338a:	a0 5c       	subi	r26, 0xC0	; 192
    338c:	bf 4f       	sbci	r27, 0xFF	; 255
    338e:	fc 01       	movw	r30, r24
    3390:	ee 5b       	subi	r30, 0xBE	; 190
    3392:	ff 4f       	sbci	r31, 0xFF	; 255
    3394:	2d 91       	ld	r18, X+
    3396:	3c 91       	ld	r19, X
    3398:	11 97       	sbiw	r26, 0x01	; 1
    339a:	80 81       	ld	r24, Z
    339c:	91 81       	ldd	r25, Z+1	; 0x01
    339e:	28 17       	cp	r18, r24
    33a0:	39 07       	cpc	r19, r25
    33a2:	c1 f7       	brne	.-16     	; 0x3394 <HardwareSerial::flush()+0x12>
    33a4:	08 95       	ret

000033a6 <HardwareSerial::write(unsigned char)>:
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	ec 01       	movw	r28, r24
    33ac:	46 2f       	mov	r20, r22
    33ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    33b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    33b2:	e0 5c       	subi	r30, 0xC0	; 192
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 81       	ld	r24, Z
    33b8:	91 81       	ldd	r25, Z+1	; 0x01
    33ba:	e0 54       	subi	r30, 0x40	; 64
    33bc:	f0 40       	sbci	r31, 0x00	; 0
    33be:	01 96       	adiw	r24, 0x01	; 1
    33c0:	60 e4       	ldi	r22, 0x40	; 64
    33c2:	70 e0       	ldi	r23, 0x00	; 0
    33c4:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__divmodhi4>
    33c8:	9c 01       	movw	r18, r24
    33ca:	df 01       	movw	r26, r30
    33cc:	ae 5b       	subi	r26, 0xBE	; 190
    33ce:	bf 4f       	sbci	r27, 0xFF	; 255
    33d0:	8d 91       	ld	r24, X+
    33d2:	9c 91       	ld	r25, X
    33d4:	11 97       	sbiw	r26, 0x01	; 1
    33d6:	28 17       	cp	r18, r24
    33d8:	39 07       	cpc	r19, r25
    33da:	d1 f3       	breq	.-12     	; 0x33d0 <HardwareSerial::write(unsigned char)+0x2a>
    33dc:	e0 5c       	subi	r30, 0xC0	; 192
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	e0 54       	subi	r30, 0x40	; 64
    33e6:	f0 40       	sbci	r31, 0x00	; 0
    33e8:	e8 0f       	add	r30, r24
    33ea:	f9 1f       	adc	r31, r25
    33ec:	40 83       	st	Z, r20
    33ee:	ee 85       	ldd	r30, Y+14	; 0x0e
    33f0:	ff 85       	ldd	r31, Y+15	; 0x0f
    33f2:	e0 5c       	subi	r30, 0xC0	; 192
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	31 83       	std	Z+1, r19	; 0x01
    33f8:	20 83       	st	Z, r18
    33fa:	ee 89       	ldd	r30, Y+22	; 0x16
    33fc:	ff 89       	ldd	r31, Y+23	; 0x17
    33fe:	20 81       	ld	r18, Z
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0d 8c       	ldd	r0, Y+29	; 0x1d
    3406:	02 c0       	rjmp	.+4      	; 0x340c <HardwareSerial::write(unsigned char)+0x66>
    3408:	88 0f       	add	r24, r24
    340a:	99 1f       	adc	r25, r25
    340c:	0a 94       	dec	r0
    340e:	e2 f7       	brpl	.-8      	; 0x3408 <HardwareSerial::write(unsigned char)+0x62>
    3410:	28 2b       	or	r18, r24
    3412:	20 83       	st	Z, r18
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	08 95       	ret

0000341e <global constructors keyed to rx_buffer>:
    341e:	10 92 49 04 	sts	0x0449, r1
    3422:	10 92 48 04 	sts	0x0448, r1
    3426:	88 ee       	ldi	r24, 0xE8	; 232
    3428:	93 e0       	ldi	r25, 0x03	; 3
    342a:	a0 e0       	ldi	r26, 0x00	; 0
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	80 93 4a 04 	sts	0x044A, r24
    3432:	90 93 4b 04 	sts	0x044B, r25
    3436:	a0 93 4c 04 	sts	0x044C, r26
    343a:	b0 93 4d 04 	sts	0x044D, r27
    343e:	8a e3       	ldi	r24, 0x3A	; 58
    3440:	91 e0       	ldi	r25, 0x01	; 1
    3442:	90 93 47 04 	sts	0x0447, r25
    3446:	80 93 46 04 	sts	0x0446, r24
    344a:	8e eb       	ldi	r24, 0xBE	; 190
    344c:	93 e0       	ldi	r25, 0x03	; 3
    344e:	90 93 53 04 	sts	0x0453, r25
    3452:	80 93 52 04 	sts	0x0452, r24
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	94 e0       	ldi	r25, 0x04	; 4
    345a:	90 93 55 04 	sts	0x0455, r25
    345e:	80 93 54 04 	sts	0x0454, r24
    3462:	85 ec       	ldi	r24, 0xC5	; 197
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	90 93 57 04 	sts	0x0457, r25
    346a:	80 93 56 04 	sts	0x0456, r24
    346e:	84 ec       	ldi	r24, 0xC4	; 196
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	90 93 59 04 	sts	0x0459, r25
    3476:	80 93 58 04 	sts	0x0458, r24
    347a:	80 ec       	ldi	r24, 0xC0	; 192
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	90 93 5b 04 	sts	0x045B, r25
    3482:	80 93 5a 04 	sts	0x045A, r24
    3486:	81 ec       	ldi	r24, 0xC1	; 193
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	90 93 5d 04 	sts	0x045D, r25
    348e:	80 93 5c 04 	sts	0x045C, r24
    3492:	86 ec       	ldi	r24, 0xC6	; 198
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	90 93 5f 04 	sts	0x045F, r25
    349a:	80 93 5e 04 	sts	0x045E, r24
    349e:	84 e0       	ldi	r24, 0x04	; 4
    34a0:	80 93 60 04 	sts	0x0460, r24
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	80 93 61 04 	sts	0x0461, r24
    34aa:	87 e0       	ldi	r24, 0x07	; 7
    34ac:	80 93 62 04 	sts	0x0462, r24
    34b0:	85 e0       	ldi	r24, 0x05	; 5
    34b2:	80 93 63 04 	sts	0x0463, r24
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	80 93 64 04 	sts	0x0464, r24
    34bc:	08 95       	ret

000034be <Print::write(unsigned char const*, unsigned int)>:
    34be:	cf 92       	push	r12
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	7c 01       	movw	r14, r24
    34d0:	6b 01       	movw	r12, r22
    34d2:	8a 01       	movw	r16, r20
    34d4:	c0 e0       	ldi	r28, 0x00	; 0
    34d6:	d0 e0       	ldi	r29, 0x00	; 0
    34d8:	0f c0       	rjmp	.+30     	; 0x34f8 <Print::write(unsigned char const*, unsigned int)+0x3a>
    34da:	d6 01       	movw	r26, r12
    34dc:	6d 91       	ld	r22, X+
    34de:	6d 01       	movw	r12, r26
    34e0:	d7 01       	movw	r26, r14
    34e2:	ed 91       	ld	r30, X+
    34e4:	fc 91       	ld	r31, X
    34e6:	01 90       	ld	r0, Z+
    34e8:	f0 81       	ld	r31, Z
    34ea:	e0 2d       	mov	r30, r0
    34ec:	c7 01       	movw	r24, r14
    34ee:	09 95       	icall
    34f0:	c8 0f       	add	r28, r24
    34f2:	d9 1f       	adc	r29, r25
    34f4:	01 50       	subi	r16, 0x01	; 1
    34f6:	10 40       	sbci	r17, 0x00	; 0
    34f8:	01 15       	cp	r16, r1
    34fa:	11 05       	cpc	r17, r1
    34fc:	71 f7       	brne	.-36     	; 0x34da <Print::write(unsigned char const*, unsigned int)+0x1c>
    34fe:	ce 01       	movw	r24, r28
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	1f 91       	pop	r17
    3506:	0f 91       	pop	r16
    3508:	ff 90       	pop	r15
    350a:	ef 90       	pop	r14
    350c:	df 90       	pop	r13
    350e:	cf 90       	pop	r12
    3510:	08 95       	ret

00003512 <Print::pgm_print(char const*)>:
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	8c 01       	movw	r16, r24
    351c:	eb 01       	movw	r28, r22
    351e:	fe 01       	movw	r30, r28
    3520:	21 96       	adiw	r28, 0x01	; 1
    3522:	64 91       	lpm	r22, Z+
    3524:	66 23       	and	r22, r22
    3526:	49 f0       	breq	.+18     	; 0x353a <Print::pgm_print(char const*)+0x28>
    3528:	d8 01       	movw	r26, r16
    352a:	ed 91       	ld	r30, X+
    352c:	fc 91       	ld	r31, X
    352e:	01 90       	ld	r0, Z+
    3530:	f0 81       	ld	r31, Z
    3532:	e0 2d       	mov	r30, r0
    3534:	c8 01       	movw	r24, r16
    3536:	09 95       	icall
    3538:	f2 cf       	rjmp	.-28     	; 0x351e <Print::pgm_print(char const*)+0xc>
    353a:	df 91       	pop	r29
    353c:	cf 91       	pop	r28
    353e:	1f 91       	pop	r17
    3540:	0f 91       	pop	r16
    3542:	08 95       	ret

00003544 <Print::print(char)>:
    3544:	dc 01       	movw	r26, r24
    3546:	ed 91       	ld	r30, X+
    3548:	fc 91       	ld	r31, X
    354a:	01 90       	ld	r0, Z+
    354c:	f0 81       	ld	r31, Z
    354e:	e0 2d       	mov	r30, r0
    3550:	09 95       	icall
    3552:	08 95       	ret

00003554 <Print::println()>:
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	8c 01       	movw	r16, r24
    355e:	dc 01       	movw	r26, r24
    3560:	ed 91       	ld	r30, X+
    3562:	fc 91       	ld	r31, X
    3564:	01 90       	ld	r0, Z+
    3566:	f0 81       	ld	r31, Z
    3568:	e0 2d       	mov	r30, r0
    356a:	6d e0       	ldi	r22, 0x0D	; 13
    356c:	09 95       	icall
    356e:	7c 01       	movw	r14, r24
    3570:	d8 01       	movw	r26, r16
    3572:	ed 91       	ld	r30, X+
    3574:	fc 91       	ld	r31, X
    3576:	01 90       	ld	r0, Z+
    3578:	f0 81       	ld	r31, Z
    357a:	e0 2d       	mov	r30, r0
    357c:	c8 01       	movw	r24, r16
    357e:	6a e0       	ldi	r22, 0x0A	; 10
    3580:	09 95       	icall
    3582:	9c 01       	movw	r18, r24
    3584:	2e 0d       	add	r18, r14
    3586:	3f 1d       	adc	r19, r15
    3588:	c9 01       	movw	r24, r18
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	ef 90       	pop	r14
    3592:	08 95       	ret

00003594 <Print::pgm_println(char const*)>:
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	8c 01       	movw	r16, r24
    359a:	0e 94 89 1a 	call	0x3512	; 0x3512 <Print::pgm_print(char const*)>
    359e:	c8 01       	movw	r24, r16
    35a0:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	08 95       	ret

000035aa <Print::println(char)>:
    35aa:	ef 92       	push	r14
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	7c 01       	movw	r14, r24
    35b4:	dc 01       	movw	r26, r24
    35b6:	ed 91       	ld	r30, X+
    35b8:	fc 91       	ld	r31, X
    35ba:	01 90       	ld	r0, Z+
    35bc:	f0 81       	ld	r31, Z
    35be:	e0 2d       	mov	r30, r0
    35c0:	09 95       	icall
    35c2:	8c 01       	movw	r16, r24
    35c4:	c7 01       	movw	r24, r14
    35c6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    35ca:	08 0f       	add	r16, r24
    35cc:	19 1f       	adc	r17, r25
    35ce:	c8 01       	movw	r24, r16
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	08 95       	ret

000035da <Print::write(char const*)>:
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	db 01       	movw	r26, r22
    35e0:	0d 90       	ld	r0, X+
    35e2:	00 20       	and	r0, r0
    35e4:	e9 f7       	brne	.-6      	; 0x35e0 <Print::write(char const*)+0x6>
    35e6:	11 97       	sbiw	r26, 0x01	; 1
    35e8:	a6 1b       	sub	r26, r22
    35ea:	b7 0b       	sbc	r27, r23
    35ec:	ec 01       	movw	r28, r24
    35ee:	e8 81       	ld	r30, Y
    35f0:	f9 81       	ldd	r31, Y+1	; 0x01
    35f2:	02 80       	ldd	r0, Z+2	; 0x02
    35f4:	f3 81       	ldd	r31, Z+3	; 0x03
    35f6:	e0 2d       	mov	r30, r0
    35f8:	ad 01       	movw	r20, r26
    35fa:	09 95       	icall
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	08 95       	ret

00003602 <Print::printNumber(unsigned long, unsigned char)>:
    3602:	4f 92       	push	r4
    3604:	5f 92       	push	r5
    3606:	7f 92       	push	r7
    3608:	8f 92       	push	r8
    360a:	9f 92       	push	r9
    360c:	af 92       	push	r10
    360e:	bf 92       	push	r11
    3610:	cf 92       	push	r12
    3612:	df 92       	push	r13
    3614:	ef 92       	push	r14
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	df 93       	push	r29
    361e:	cf 93       	push	r28
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	a1 97       	sbiw	r28, 0x21	; 33
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	2c 01       	movw	r4, r24
    3632:	74 2e       	mov	r7, r20
    3634:	cb 01       	movw	r24, r22
    3636:	22 30       	cpi	r18, 0x02	; 2
    3638:	08 f4       	brcc	.+2      	; 0x363c <Print::printNumber(unsigned long, unsigned char)+0x3a>
    363a:	2a e0       	ldi	r18, 0x0A	; 10
    363c:	19 a2       	std	Y+33, r1	; 0x21
    363e:	31 e2       	ldi	r19, 0x21	; 33
    3640:	c3 2e       	mov	r12, r19
    3642:	d1 2c       	mov	r13, r1
    3644:	cc 0e       	add	r12, r28
    3646:	dd 1e       	adc	r13, r29
    3648:	82 2e       	mov	r8, r18
    364a:	99 24       	eor	r9, r9
    364c:	aa 24       	eor	r10, r10
    364e:	bb 24       	eor	r11, r11
    3650:	67 2d       	mov	r22, r7
    3652:	75 2f       	mov	r23, r21
    3654:	a5 01       	movw	r20, r10
    3656:	94 01       	movw	r18, r8
    3658:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
    365c:	79 01       	movw	r14, r18
    365e:	8a 01       	movw	r16, r20
    3660:	c8 01       	movw	r24, r16
    3662:	b7 01       	movw	r22, r14
    3664:	a5 01       	movw	r20, r10
    3666:	94 01       	movw	r18, r8
    3668:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    366c:	47 2d       	mov	r20, r7
    366e:	46 1b       	sub	r20, r22
    3670:	08 94       	sec
    3672:	c1 08       	sbc	r12, r1
    3674:	d1 08       	sbc	r13, r1
    3676:	4a 30       	cpi	r20, 0x0A	; 10
    3678:	10 f4       	brcc	.+4      	; 0x367e <Print::printNumber(unsigned long, unsigned char)+0x7c>
    367a:	40 5d       	subi	r20, 0xD0	; 208
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    367e:	49 5c       	subi	r20, 0xC9	; 201
    3680:	f6 01       	movw	r30, r12
    3682:	40 83       	st	Z, r20
    3684:	e1 14       	cp	r14, r1
    3686:	f1 04       	cpc	r15, r1
    3688:	01 05       	cpc	r16, r1
    368a:	11 05       	cpc	r17, r1
    368c:	21 f0       	breq	.+8      	; 0x3696 <Print::printNumber(unsigned long, unsigned char)+0x94>
    368e:	7e 2c       	mov	r7, r14
    3690:	5f 2d       	mov	r21, r15
    3692:	c8 01       	movw	r24, r16
    3694:	dd cf       	rjmp	.-70     	; 0x3650 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    3696:	c2 01       	movw	r24, r4
    3698:	b6 01       	movw	r22, r12
    369a:	0e 94 ed 1a 	call	0x35da	; 0x35da <Print::write(char const*)>
    369e:	a1 96       	adiw	r28, 0x21	; 33
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    36b2:	ff 90       	pop	r15
    36b4:	ef 90       	pop	r14
    36b6:	df 90       	pop	r13
    36b8:	cf 90       	pop	r12
    36ba:	bf 90       	pop	r11
    36bc:	af 90       	pop	r10
    36be:	9f 90       	pop	r9
    36c0:	8f 90       	pop	r8
    36c2:	7f 90       	pop	r7
    36c4:	5f 90       	pop	r5
    36c6:	4f 90       	pop	r4
    36c8:	08 95       	ret

000036ca <Print::print(unsigned long, int)>:
    36ca:	dc 01       	movw	r26, r24
    36cc:	21 15       	cp	r18, r1
    36ce:	31 05       	cpc	r19, r1
    36d0:	41 f4       	brne	.+16     	; 0x36e2 <Print::print(unsigned long, int)+0x18>
    36d2:	ed 91       	ld	r30, X+
    36d4:	fc 91       	ld	r31, X
    36d6:	01 90       	ld	r0, Z+
    36d8:	f0 81       	ld	r31, Z
    36da:	e0 2d       	mov	r30, r0
    36dc:	64 2f       	mov	r22, r20
    36de:	09 95       	icall
    36e0:	08 95       	ret
    36e2:	0e 94 01 1b 	call	0x3602	; 0x3602 <Print::printNumber(unsigned long, unsigned char)>
    36e6:	08 95       	ret

000036e8 <Print::println(unsigned long, int)>:
    36e8:	ef 92       	push	r14
    36ea:	ff 92       	push	r15
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	7c 01       	movw	r14, r24
    36f2:	0e 94 65 1b 	call	0x36ca	; 0x36ca <Print::print(unsigned long, int)>
    36f6:	8c 01       	movw	r16, r24
    36f8:	c7 01       	movw	r24, r14
    36fa:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    36fe:	9c 01       	movw	r18, r24
    3700:	20 0f       	add	r18, r16
    3702:	31 1f       	adc	r19, r17
    3704:	c9 01       	movw	r24, r18
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	08 95       	ret

00003710 <Print::println(unsigned int, int)>:
    3710:	cf 92       	push	r12
    3712:	df 92       	push	r13
    3714:	ef 92       	push	r14
    3716:	ff 92       	push	r15
    3718:	0f 93       	push	r16
    371a:	1f 93       	push	r17
    371c:	6c 01       	movw	r12, r24
    371e:	7b 01       	movw	r14, r22
    3720:	9a 01       	movw	r18, r20
    3722:	00 e0       	ldi	r16, 0x00	; 0
    3724:	10 e0       	ldi	r17, 0x00	; 0
    3726:	b8 01       	movw	r22, r16
    3728:	a7 01       	movw	r20, r14
    372a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <Print::print(unsigned long, int)>
    372e:	8c 01       	movw	r16, r24
    3730:	c6 01       	movw	r24, r12
    3732:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    3736:	08 0f       	add	r16, r24
    3738:	19 1f       	adc	r17, r25
    373a:	c8 01       	movw	r24, r16
    373c:	1f 91       	pop	r17
    373e:	0f 91       	pop	r16
    3740:	ff 90       	pop	r15
    3742:	ef 90       	pop	r14
    3744:	df 90       	pop	r13
    3746:	cf 90       	pop	r12
    3748:	08 95       	ret

0000374a <Print::print(long, int)>:
    374a:	cf 92       	push	r12
    374c:	df 92       	push	r13
    374e:	ef 92       	push	r14
    3750:	ff 92       	push	r15
    3752:	0f 93       	push	r16
    3754:	1f 93       	push	r17
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	ec 01       	movw	r28, r24
    375c:	6a 01       	movw	r12, r20
    375e:	7b 01       	movw	r14, r22
    3760:	21 15       	cp	r18, r1
    3762:	31 05       	cpc	r19, r1
    3764:	41 f4       	brne	.+16     	; 0x3776 <Print::print(long, int)+0x2c>
    3766:	e8 81       	ld	r30, Y
    3768:	f9 81       	ldd	r31, Y+1	; 0x01
    376a:	01 90       	ld	r0, Z+
    376c:	f0 81       	ld	r31, Z
    376e:	e0 2d       	mov	r30, r0
    3770:	64 2f       	mov	r22, r20
    3772:	09 95       	icall
    3774:	1f c0       	rjmp	.+62     	; 0x37b4 <Print::print(long, int)+0x6a>
    3776:	2a 30       	cpi	r18, 0x0A	; 10
    3778:	31 05       	cpc	r19, r1
    377a:	d1 f4       	brne	.+52     	; 0x37b0 <Print::print(long, int)+0x66>
    377c:	77 ff       	sbrs	r23, 7
    377e:	17 c0       	rjmp	.+46     	; 0x37ae <Print::print(long, int)+0x64>
    3780:	e8 81       	ld	r30, Y
    3782:	f9 81       	ldd	r31, Y+1	; 0x01
    3784:	01 90       	ld	r0, Z+
    3786:	f0 81       	ld	r31, Z
    3788:	e0 2d       	mov	r30, r0
    378a:	6d e2       	ldi	r22, 0x2D	; 45
    378c:	09 95       	icall
    378e:	8c 01       	movw	r16, r24
    3790:	44 27       	eor	r20, r20
    3792:	55 27       	eor	r21, r21
    3794:	ba 01       	movw	r22, r20
    3796:	4c 19       	sub	r20, r12
    3798:	5d 09       	sbc	r21, r13
    379a:	6e 09       	sbc	r22, r14
    379c:	7f 09       	sbc	r23, r15
    379e:	ce 01       	movw	r24, r28
    37a0:	2a e0       	ldi	r18, 0x0A	; 10
    37a2:	0e 94 01 1b 	call	0x3602	; 0x3602 <Print::printNumber(unsigned long, unsigned char)>
    37a6:	98 01       	movw	r18, r16
    37a8:	28 0f       	add	r18, r24
    37aa:	39 1f       	adc	r19, r25
    37ac:	04 c0       	rjmp	.+8      	; 0x37b6 <Print::print(long, int)+0x6c>
    37ae:	2a e0       	ldi	r18, 0x0A	; 10
    37b0:	0e 94 01 1b 	call	0x3602	; 0x3602 <Print::printNumber(unsigned long, unsigned char)>
    37b4:	9c 01       	movw	r18, r24
    37b6:	c9 01       	movw	r24, r18
    37b8:	df 91       	pop	r29
    37ba:	cf 91       	pop	r28
    37bc:	1f 91       	pop	r17
    37be:	0f 91       	pop	r16
    37c0:	ff 90       	pop	r15
    37c2:	ef 90       	pop	r14
    37c4:	df 90       	pop	r13
    37c6:	cf 90       	pop	r12
    37c8:	08 95       	ret

000037ca <Print::println(long, int)>:
    37ca:	ef 92       	push	r14
    37cc:	ff 92       	push	r15
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	7c 01       	movw	r14, r24
    37d4:	0e 94 a5 1b 	call	0x374a	; 0x374a <Print::print(long, int)>
    37d8:	8c 01       	movw	r16, r24
    37da:	c7 01       	movw	r24, r14
    37dc:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    37e0:	9c 01       	movw	r18, r24
    37e2:	20 0f       	add	r18, r16
    37e4:	31 1f       	adc	r19, r17
    37e6:	c9 01       	movw	r24, r18
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	ff 90       	pop	r15
    37ee:	ef 90       	pop	r14
    37f0:	08 95       	ret

000037f2 <Print::print(int, int)>:
    37f2:	ef 92       	push	r14
    37f4:	ff 92       	push	r15
    37f6:	0f 93       	push	r16
    37f8:	1f 93       	push	r17
    37fa:	7b 01       	movw	r14, r22
    37fc:	9a 01       	movw	r18, r20
    37fe:	00 27       	eor	r16, r16
    3800:	f7 fc       	sbrc	r15, 7
    3802:	00 95       	com	r16
    3804:	10 2f       	mov	r17, r16
    3806:	b8 01       	movw	r22, r16
    3808:	a7 01       	movw	r20, r14
    380a:	0e 94 a5 1b 	call	0x374a	; 0x374a <Print::print(long, int)>
    380e:	1f 91       	pop	r17
    3810:	0f 91       	pop	r16
    3812:	ff 90       	pop	r15
    3814:	ef 90       	pop	r14
    3816:	08 95       	ret

00003818 <Print::println(int, int)>:
    3818:	cf 92       	push	r12
    381a:	df 92       	push	r13
    381c:	ef 92       	push	r14
    381e:	ff 92       	push	r15
    3820:	0f 93       	push	r16
    3822:	1f 93       	push	r17
    3824:	6c 01       	movw	r12, r24
    3826:	7b 01       	movw	r14, r22
    3828:	9a 01       	movw	r18, r20
    382a:	00 27       	eor	r16, r16
    382c:	f7 fc       	sbrc	r15, 7
    382e:	00 95       	com	r16
    3830:	10 2f       	mov	r17, r16
    3832:	b8 01       	movw	r22, r16
    3834:	a7 01       	movw	r20, r14
    3836:	0e 94 a5 1b 	call	0x374a	; 0x374a <Print::print(long, int)>
    383a:	8c 01       	movw	r16, r24
    383c:	c6 01       	movw	r24, r12
    383e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    3842:	08 0f       	add	r16, r24
    3844:	19 1f       	adc	r17, r25
    3846:	c8 01       	movw	r24, r16
    3848:	1f 91       	pop	r17
    384a:	0f 91       	pop	r16
    384c:	ff 90       	pop	r15
    384e:	ef 90       	pop	r14
    3850:	df 90       	pop	r13
    3852:	cf 90       	pop	r12
    3854:	08 95       	ret

00003856 <Print::print(char const*)>:
    3856:	0e 94 ed 1a 	call	0x35da	; 0x35da <Print::write(char const*)>
    385a:	08 95       	ret

0000385c <Print::println(char const*)>:
    385c:	ef 92       	push	r14
    385e:	ff 92       	push	r15
    3860:	0f 93       	push	r16
    3862:	1f 93       	push	r17
    3864:	7c 01       	movw	r14, r24
    3866:	0e 94 ed 1a 	call	0x35da	; 0x35da <Print::write(char const*)>
    386a:	8c 01       	movw	r16, r24
    386c:	c7 01       	movw	r24, r14
    386e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <Print::println()>
    3872:	08 0f       	add	r16, r24
    3874:	19 1f       	adc	r17, r25
    3876:	c8 01       	movw	r24, r16
    3878:	1f 91       	pop	r17
    387a:	0f 91       	pop	r16
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
    3880:	08 95       	ret

00003882 <attachInterrupt>:
    3882:	82 30       	cpi	r24, 0x02	; 2
    3884:	00 f5       	brcc	.+64     	; 0x38c6 <attachInterrupt+0x44>
    3886:	e8 2f       	mov	r30, r24
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	ee 0f       	add	r30, r30
    388c:	ff 1f       	adc	r31, r31
    388e:	eb 59       	subi	r30, 0x9B	; 155
    3890:	fb 4f       	sbci	r31, 0xFB	; 251
    3892:	71 83       	std	Z+1, r23	; 0x01
    3894:	60 83       	st	Z, r22
    3896:	88 23       	and	r24, r24
    3898:	19 f0       	breq	.+6      	; 0x38a0 <attachInterrupt+0x1e>
    389a:	81 30       	cpi	r24, 0x01	; 1
    389c:	a1 f4       	brne	.+40     	; 0x38c6 <attachInterrupt+0x44>
    389e:	08 c0       	rjmp	.+16     	; 0x38b0 <attachInterrupt+0x2e>
    38a0:	80 91 69 00 	lds	r24, 0x0069
    38a4:	8c 7f       	andi	r24, 0xFC	; 252
    38a6:	84 2b       	or	r24, r20
    38a8:	80 93 69 00 	sts	0x0069, r24
    38ac:	e8 9a       	sbi	0x1d, 0	; 29
    38ae:	08 95       	ret
    38b0:	80 91 69 00 	lds	r24, 0x0069
    38b4:	44 0f       	add	r20, r20
    38b6:	55 1f       	adc	r21, r21
    38b8:	44 0f       	add	r20, r20
    38ba:	55 1f       	adc	r21, r21
    38bc:	83 7f       	andi	r24, 0xF3	; 243
    38be:	84 2b       	or	r24, r20
    38c0:	80 93 69 00 	sts	0x0069, r24
    38c4:	e9 9a       	sbi	0x1d, 1	; 29
    38c6:	08 95       	ret

000038c8 <__vector_1>:
    38c8:	1f 92       	push	r1
    38ca:	0f 92       	push	r0
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	0f 92       	push	r0
    38d0:	11 24       	eor	r1, r1
    38d2:	2f 93       	push	r18
    38d4:	3f 93       	push	r19
    38d6:	4f 93       	push	r20
    38d8:	5f 93       	push	r21
    38da:	6f 93       	push	r22
    38dc:	7f 93       	push	r23
    38de:	8f 93       	push	r24
    38e0:	9f 93       	push	r25
    38e2:	af 93       	push	r26
    38e4:	bf 93       	push	r27
    38e6:	ef 93       	push	r30
    38e8:	ff 93       	push	r31
    38ea:	80 91 65 04 	lds	r24, 0x0465
    38ee:	90 91 66 04 	lds	r25, 0x0466
    38f2:	89 2b       	or	r24, r25
    38f4:	29 f0       	breq	.+10     	; 0x3900 <__vector_1+0x38>
    38f6:	e0 91 65 04 	lds	r30, 0x0465
    38fa:	f0 91 66 04 	lds	r31, 0x0466
    38fe:	09 95       	icall
    3900:	ff 91       	pop	r31
    3902:	ef 91       	pop	r30
    3904:	bf 91       	pop	r27
    3906:	af 91       	pop	r26
    3908:	9f 91       	pop	r25
    390a:	8f 91       	pop	r24
    390c:	7f 91       	pop	r23
    390e:	6f 91       	pop	r22
    3910:	5f 91       	pop	r21
    3912:	4f 91       	pop	r20
    3914:	3f 91       	pop	r19
    3916:	2f 91       	pop	r18
    3918:	0f 90       	pop	r0
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	0f 90       	pop	r0
    391e:	1f 90       	pop	r1
    3920:	18 95       	reti

00003922 <__vector_2>:
    3922:	1f 92       	push	r1
    3924:	0f 92       	push	r0
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	0f 92       	push	r0
    392a:	11 24       	eor	r1, r1
    392c:	2f 93       	push	r18
    392e:	3f 93       	push	r19
    3930:	4f 93       	push	r20
    3932:	5f 93       	push	r21
    3934:	6f 93       	push	r22
    3936:	7f 93       	push	r23
    3938:	8f 93       	push	r24
    393a:	9f 93       	push	r25
    393c:	af 93       	push	r26
    393e:	bf 93       	push	r27
    3940:	ef 93       	push	r30
    3942:	ff 93       	push	r31
    3944:	80 91 67 04 	lds	r24, 0x0467
    3948:	90 91 68 04 	lds	r25, 0x0468
    394c:	89 2b       	or	r24, r25
    394e:	29 f0       	breq	.+10     	; 0x395a <__vector_2+0x38>
    3950:	e0 91 67 04 	lds	r30, 0x0467
    3954:	f0 91 68 04 	lds	r31, 0x0468
    3958:	09 95       	icall
    395a:	ff 91       	pop	r31
    395c:	ef 91       	pop	r30
    395e:	bf 91       	pop	r27
    3960:	af 91       	pop	r26
    3962:	9f 91       	pop	r25
    3964:	8f 91       	pop	r24
    3966:	7f 91       	pop	r23
    3968:	6f 91       	pop	r22
    396a:	5f 91       	pop	r21
    396c:	4f 91       	pop	r20
    396e:	3f 91       	pop	r19
    3970:	2f 91       	pop	r18
    3972:	0f 90       	pop	r0
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	0f 90       	pop	r0
    3978:	1f 90       	pop	r1
    397a:	18 95       	reti

0000397c <pinMode>:
    397c:	48 2f       	mov	r20, r24
    397e:	50 e0       	ldi	r21, 0x00	; 0
    3980:	ca 01       	movw	r24, r20
    3982:	86 5e       	subi	r24, 0xE6	; 230
    3984:	99 4f       	sbci	r25, 0xF9	; 249
    3986:	fc 01       	movw	r30, r24
    3988:	24 91       	lpm	r18, Z+
    398a:	4a 5f       	subi	r20, 0xFA	; 250
    398c:	59 4f       	sbci	r21, 0xF9	; 249
    398e:	fa 01       	movw	r30, r20
    3990:	84 91       	lpm	r24, Z+
    3992:	88 23       	and	r24, r24
    3994:	c1 f0       	breq	.+48     	; 0x39c6 <pinMode+0x4a>
    3996:	e8 2f       	mov	r30, r24
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	ee 0f       	add	r30, r30
    399c:	ff 1f       	adc	r31, r31
    399e:	e8 51       	subi	r30, 0x18	; 24
    39a0:	fa 4f       	sbci	r31, 0xFA	; 250
    39a2:	a5 91       	lpm	r26, Z+
    39a4:	b4 91       	lpm	r27, Z+
    39a6:	66 23       	and	r22, r22
    39a8:	41 f4       	brne	.+16     	; 0x39ba <pinMode+0x3e>
    39aa:	9f b7       	in	r25, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	8c 91       	ld	r24, X
    39b0:	20 95       	com	r18
    39b2:	82 23       	and	r24, r18
    39b4:	8c 93       	st	X, r24
    39b6:	9f bf       	out	0x3f, r25	; 63
    39b8:	08 95       	ret
    39ba:	9f b7       	in	r25, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	8c 91       	ld	r24, X
    39c0:	82 2b       	or	r24, r18
    39c2:	8c 93       	st	X, r24
    39c4:	9f bf       	out	0x3f, r25	; 63
    39c6:	08 95       	ret

000039c8 <RepRapPCB::doInitializePositionXY()>:
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	ec 01       	movw	r28, r24
    39ce:	8c a1       	ldd	r24, Y+36	; 0x24
    39d0:	88 23       	and	r24, r24
    39d2:	19 f0       	breq	.+6      	; 0x39da <RepRapPCB::doInitializePositionXY()+0x12>
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	59 f5       	brne	.+86     	; 0x3a2e <RepRapPCB::doInitializePositionXY()+0x66>
    39d8:	0d c0       	rjmp	.+26     	; 0x39f4 <RepRapPCB::doInitializePositionXY()+0x2c>
    39da:	ce 01       	movw	r24, r28
    39dc:	85 51       	subi	r24, 0x15	; 21
    39de:	9f 4f       	sbci	r25, 0xFF	; 255
    39e0:	0e 94 11 14 	call	0x2822	; 0x2822 <StepperMotorAxis::initializePosition()>
    39e4:	ce 01       	movw	r24, r28
    39e6:	86 5f       	subi	r24, 0xF6	; 246
    39e8:	9e 4f       	sbci	r25, 0xFE	; 254
    39ea:	0e 94 11 14 	call	0x2822	; 0x2822 <StepperMotorAxis::initializePosition()>
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	8c a3       	std	Y+36, r24	; 0x24
    39f2:	1d c0       	rjmp	.+58     	; 0x3a2e <RepRapPCB::doInitializePositionXY()+0x66>
    39f4:	c5 51       	subi	r28, 0x15	; 21
    39f6:	df 4f       	sbci	r29, 0xFF	; 255
    39f8:	88 81       	ld	r24, Y
    39fa:	cb 5e       	subi	r28, 0xEB	; 235
    39fc:	d0 40       	sbci	r29, 0x00	; 0
    39fe:	88 23       	and	r24, r24
    3a00:	b1 f4       	brne	.+44     	; 0x3a2e <RepRapPCB::doInitializePositionXY()+0x66>
    3a02:	c1 50       	subi	r28, 0x01	; 1
    3a04:	df 4f       	sbci	r29, 0xFF	; 255
    3a06:	88 81       	ld	r24, Y
    3a08:	cf 5f       	subi	r28, 0xFF	; 255
    3a0a:	d0 40       	sbci	r29, 0x00	; 0
    3a0c:	88 23       	and	r24, r24
    3a0e:	79 f4       	brne	.+30     	; 0x3a2e <RepRapPCB::doInitializePositionXY()+0x66>
    3a10:	c6 5f       	subi	r28, 0xF6	; 246
    3a12:	de 4f       	sbci	r29, 0xFE	; 254
    3a14:	88 81       	ld	r24, Y
    3a16:	ca 50       	subi	r28, 0x0A	; 10
    3a18:	d1 40       	sbci	r29, 0x01	; 1
    3a1a:	88 23       	and	r24, r24
    3a1c:	41 f4       	brne	.+16     	; 0x3a2e <RepRapPCB::doInitializePositionXY()+0x66>
    3a1e:	c2 5e       	subi	r28, 0xE2	; 226
    3a20:	de 4f       	sbci	r29, 0xFE	; 254
    3a22:	88 81       	ld	r24, Y
    3a24:	ce 51       	subi	r28, 0x1E	; 30
    3a26:	d1 40       	sbci	r29, 0x01	; 1
    3a28:	88 23       	and	r24, r24
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <RepRapPCB::doInitializePositionXY()+0x66>
    3a2c:	1b a2       	std	Y+35, r1	; 0x23
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	08 95       	ret

00003a34 <RepRapPCB::doInitializePosition()>:
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	ec 01       	movw	r28, r24
    3a3e:	8c a1       	ldd	r24, Y+36	; 0x24
    3a40:	81 30       	cpi	r24, 0x01	; 1
    3a42:	c9 f0       	breq	.+50     	; 0x3a76 <RepRapPCB::doInitializePosition()+0x42>
    3a44:	81 30       	cpi	r24, 0x01	; 1
    3a46:	30 f0       	brcs	.+12     	; 0x3a54 <RepRapPCB::doInitializePosition()+0x20>
    3a48:	82 30       	cpi	r24, 0x02	; 2
    3a4a:	91 f1       	breq	.+100    	; 0x3ab0 <RepRapPCB::doInitializePosition()+0x7c>
    3a4c:	83 30       	cpi	r24, 0x03	; 3
    3a4e:	09 f0       	breq	.+2      	; 0x3a52 <RepRapPCB::doInitializePosition()+0x1e>
    3a50:	61 c0       	rjmp	.+194    	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3a52:	51 c0       	rjmp	.+162    	; 0x3af6 <RepRapPCB::doInitializePosition()+0xc2>
    3a54:	8e 01       	movw	r16, r28
    3a56:	07 5d       	subi	r16, 0xD7	; 215
    3a58:	1e 4f       	sbci	r17, 0xFE	; 254
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	0e 94 16 14 	call	0x282c	; 0x282c <StepperMotorAxis::getAbsolutePositionMicroM()>
    3a60:	ab 01       	movw	r20, r22
    3a62:	bc 01       	movw	r22, r24
    3a64:	48 57       	subi	r20, 0x78	; 120
    3a66:	5c 4e       	sbci	r21, 0xEC	; 236
    3a68:	6f 4f       	sbci	r22, 0xFF	; 255
    3a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6c:	c8 01       	movw	r24, r16
    3a6e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <StepperMotorAxis::moveToPositionMicroMFast(long)>
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	1b c0       	rjmp	.+54     	; 0x3aac <RepRapPCB::doInitializePosition()+0x78>
    3a76:	c7 5d       	subi	r28, 0xD7	; 215
    3a78:	de 4f       	sbci	r29, 0xFE	; 254
    3a7a:	88 81       	ld	r24, Y
    3a7c:	c9 52       	subi	r28, 0x29	; 41
    3a7e:	d1 40       	sbci	r29, 0x01	; 1
    3a80:	88 23       	and	r24, r24
    3a82:	09 f0       	breq	.+2      	; 0x3a86 <RepRapPCB::doInitializePosition()+0x52>
    3a84:	47 c0       	rjmp	.+142    	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3a86:	c3 5c       	subi	r28, 0xC3	; 195
    3a88:	de 4f       	sbci	r29, 0xFE	; 254
    3a8a:	88 81       	ld	r24, Y
    3a8c:	cd 53       	subi	r28, 0x3D	; 61
    3a8e:	d1 40       	sbci	r29, 0x01	; 1
    3a90:	88 23       	and	r24, r24
    3a92:	09 f0       	breq	.+2      	; 0x3a96 <RepRapPCB::doInitializePosition()+0x62>
    3a94:	3f c0       	rjmp	.+126    	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3a96:	ce 01       	movw	r24, r28
    3a98:	85 51       	subi	r24, 0x15	; 21
    3a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9c:	0e 94 11 14 	call	0x2822	; 0x2822 <StepperMotorAxis::initializePosition()>
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	86 5f       	subi	r24, 0xF6	; 246
    3aa4:	9e 4f       	sbci	r25, 0xFE	; 254
    3aa6:	0e 94 11 14 	call	0x2822	; 0x2822 <StepperMotorAxis::initializePosition()>
    3aaa:	82 e0       	ldi	r24, 0x02	; 2
    3aac:	8c a3       	std	Y+36, r24	; 0x24
    3aae:	32 c0       	rjmp	.+100    	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3ab0:	c5 51       	subi	r28, 0x15	; 21
    3ab2:	df 4f       	sbci	r29, 0xFF	; 255
    3ab4:	88 81       	ld	r24, Y
    3ab6:	cb 5e       	subi	r28, 0xEB	; 235
    3ab8:	d0 40       	sbci	r29, 0x00	; 0
    3aba:	88 23       	and	r24, r24
    3abc:	59 f5       	brne	.+86     	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3abe:	c1 50       	subi	r28, 0x01	; 1
    3ac0:	df 4f       	sbci	r29, 0xFF	; 255
    3ac2:	88 81       	ld	r24, Y
    3ac4:	cf 5f       	subi	r28, 0xFF	; 255
    3ac6:	d0 40       	sbci	r29, 0x00	; 0
    3ac8:	88 23       	and	r24, r24
    3aca:	21 f5       	brne	.+72     	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3acc:	c6 5f       	subi	r28, 0xF6	; 246
    3ace:	de 4f       	sbci	r29, 0xFE	; 254
    3ad0:	88 81       	ld	r24, Y
    3ad2:	ca 50       	subi	r28, 0x0A	; 10
    3ad4:	d1 40       	sbci	r29, 0x01	; 1
    3ad6:	88 23       	and	r24, r24
    3ad8:	e9 f4       	brne	.+58     	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3ada:	c2 5e       	subi	r28, 0xE2	; 226
    3adc:	de 4f       	sbci	r29, 0xFE	; 254
    3ade:	88 81       	ld	r24, Y
    3ae0:	ce 51       	subi	r28, 0x1E	; 30
    3ae2:	d1 40       	sbci	r29, 0x01	; 1
    3ae4:	88 23       	and	r24, r24
    3ae6:	b1 f4       	brne	.+44     	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3ae8:	ce 01       	movw	r24, r28
    3aea:	87 5d       	subi	r24, 0xD7	; 215
    3aec:	9e 4f       	sbci	r25, 0xFE	; 254
    3aee:	0e 94 11 14 	call	0x2822	; 0x2822 <StepperMotorAxis::initializePosition()>
    3af2:	83 e0       	ldi	r24, 0x03	; 3
    3af4:	db cf       	rjmp	.-74     	; 0x3aac <RepRapPCB::doInitializePosition()+0x78>
    3af6:	c7 5d       	subi	r28, 0xD7	; 215
    3af8:	de 4f       	sbci	r29, 0xFE	; 254
    3afa:	88 81       	ld	r24, Y
    3afc:	c9 52       	subi	r28, 0x29	; 41
    3afe:	d1 40       	sbci	r29, 0x01	; 1
    3b00:	88 23       	and	r24, r24
    3b02:	41 f4       	brne	.+16     	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3b04:	c3 5c       	subi	r28, 0xC3	; 195
    3b06:	de 4f       	sbci	r29, 0xFE	; 254
    3b08:	88 81       	ld	r24, Y
    3b0a:	cd 53       	subi	r28, 0x3D	; 61
    3b0c:	d1 40       	sbci	r29, 0x01	; 1
    3b0e:	88 23       	and	r24, r24
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <RepRapPCB::doInitializePosition()+0xe0>
    3b12:	1b a2       	std	Y+35, r1	; 0x23
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	1f 91       	pop	r17
    3b1a:	0f 91       	pop	r16
    3b1c:	08 95       	ret

00003b1e <RepRapPCB::update()>:
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	ec 01       	movw	r28, r24
    3b24:	87 57       	subi	r24, 0x77	; 119
    3b26:	9f 4f       	sbci	r25, 0xFF	; 255
    3b28:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DigitalInputShiftRegister_74HC166::update()>
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	85 51       	subi	r24, 0x15	; 21
    3b30:	9f 4f       	sbci	r25, 0xFF	; 255
    3b32:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <StepperMotorAxis::update()>
    3b36:	ce 01       	movw	r24, r28
    3b38:	86 5f       	subi	r24, 0xF6	; 246
    3b3a:	9e 4f       	sbci	r25, 0xFE	; 254
    3b3c:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <StepperMotorAxis::update()>
    3b40:	ce 01       	movw	r24, r28
    3b42:	87 5d       	subi	r24, 0xD7	; 215
    3b44:	9e 4f       	sbci	r25, 0xFE	; 254
    3b46:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <StepperMotorAxis::update()>
    3b4a:	ce 01       	movw	r24, r28
    3b4c:	88 5b       	subi	r24, 0xB8	; 184
    3b4e:	9e 4f       	sbci	r25, 0xFE	; 254
    3b50:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <StepperMotorAxis::update()>
    3b54:	ce 01       	movw	r24, r28
    3b56:	85 96       	adiw	r24, 0x25	; 37
    3b58:	0e 94 76 0e 	call	0x1cec	; 0x1cec <DigitalOutputShiftRegister_74HC595::update()>
    3b5c:	8b a1       	ldd	r24, Y+35	; 0x23
    3b5e:	82 30       	cpi	r24, 0x02	; 2
    3b60:	19 f0       	breq	.+6      	; 0x3b68 <RepRapPCB::update()+0x4a>
    3b62:	83 30       	cpi	r24, 0x03	; 3
    3b64:	41 f4       	brne	.+16     	; 0x3b76 <RepRapPCB::update()+0x58>
    3b66:	04 c0       	rjmp	.+8      	; 0x3b70 <RepRapPCB::update()+0x52>
    3b68:	ce 01       	movw	r24, r28
    3b6a:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <RepRapPCB::doInitializePosition()>
    3b6e:	03 c0       	rjmp	.+6      	; 0x3b76 <RepRapPCB::update()+0x58>
    3b70:	ce 01       	movw	r24, r28
    3b72:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <RepRapPCB::doInitializePositionXY()>
    3b76:	df 91       	pop	r29
    3b78:	cf 91       	pop	r28
    3b7a:	08 95       	ret

00003b7c <RepRapPCB::initialize()>:
    3b7c:	2f 92       	push	r2
    3b7e:	3f 92       	push	r3
    3b80:	4f 92       	push	r4
    3b82:	5f 92       	push	r5
    3b84:	6f 92       	push	r6
    3b86:	7f 92       	push	r7
    3b88:	8f 92       	push	r8
    3b8a:	9f 92       	push	r9
    3b8c:	af 92       	push	r10
    3b8e:	bf 92       	push	r11
    3b90:	cf 92       	push	r12
    3b92:	df 92       	push	r13
    3b94:	ef 92       	push	r14
    3b96:	ff 92       	push	r15
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	df 93       	push	r29
    3b9e:	cf 93       	push	r28
    3ba0:	00 d0       	rcall	.+0      	; 0x3ba2 <RepRapPCB::initialize()+0x26>
    3ba2:	00 d0       	rcall	.+0      	; 0x3ba4 <RepRapPCB::initialize()+0x28>
    3ba4:	00 d0       	rcall	.+0      	; 0x3ba6 <RepRapPCB::initialize()+0x2a>
    3ba6:	cd b7       	in	r28, 0x3d	; 61
    3ba8:	de b7       	in	r29, 0x3e	; 62
    3baa:	6c 01       	movw	r12, r24
    3bac:	fc 01       	movw	r30, r24
    3bae:	13 a2       	std	Z+35, r1	; 0x23
    3bb0:	14 a2       	std	Z+36, r1	; 0x24
    3bb2:	6c e0       	ldi	r22, 0x0C	; 12
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	0e 94 9d 10 	call	0x213a	; 0x213a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3bba:	86 01       	movw	r16, r12
    3bbc:	0a 5f       	subi	r16, 0xFA	; 250
    3bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc0:	c8 01       	movw	r24, r16
    3bc2:	6d e0       	ldi	r22, 0x0D	; 13
    3bc4:	40 e0       	ldi	r20, 0x00	; 0
    3bc6:	0e 94 9d 10 	call	0x213a	; 0x213a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3bca:	ac e0       	ldi	r26, 0x0C	; 12
    3bcc:	ea 2e       	mov	r14, r26
    3bce:	f1 2c       	mov	r15, r1
    3bd0:	ec 0c       	add	r14, r12
    3bd2:	fd 1c       	adc	r15, r13
    3bd4:	c7 01       	movw	r24, r14
    3bd6:	6b e0       	ldi	r22, 0x0B	; 11
    3bd8:	40 e0       	ldi	r20, 0x00	; 0
    3bda:	0e 94 9d 10 	call	0x213a	; 0x213a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3bde:	f5 e2       	ldi	r31, 0x25	; 37
    3be0:	af 2e       	mov	r10, r31
    3be2:	b1 2c       	mov	r11, r1
    3be4:	ac 0c       	add	r10, r12
    3be6:	bd 1c       	adc	r11, r13
    3be8:	c5 01       	movw	r24, r10
    3bea:	61 e1       	ldi	r22, 0x11	; 17
    3bec:	43 e0       	ldi	r20, 0x03	; 3
    3bee:	96 01       	movw	r18, r12
    3bf0:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3bf4:	e2 e1       	ldi	r30, 0x12	; 18
    3bf6:	6e 2e       	mov	r6, r30
    3bf8:	71 2c       	mov	r7, r1
    3bfa:	6c 0c       	add	r6, r12
    3bfc:	7d 1c       	adc	r7, r13
    3bfe:	c3 01       	movw	r24, r6
    3c00:	69 e0       	ldi	r22, 0x09	; 9
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	0e 94 9d 10 	call	0x213a	; 0x213a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3c08:	78 e1       	ldi	r23, 0x18	; 24
    3c0a:	e7 2e       	mov	r14, r23
    3c0c:	f1 2c       	mov	r15, r1
    3c0e:	ec 0c       	add	r14, r12
    3c10:	fd 1c       	adc	r15, r13
    3c12:	c7 01       	movw	r24, r14
    3c14:	68 e0       	ldi	r22, 0x08	; 8
    3c16:	40 e0       	ldi	r20, 0x00	; 0
    3c18:	0e 94 9d 10 	call	0x213a	; 0x213a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3c1c:	86 01       	movw	r16, r12
    3c1e:	02 5e       	subi	r16, 0xE2	; 226
    3c20:	1f 4f       	sbci	r17, 0xFF	; 255
    3c22:	c8 01       	movw	r24, r16
    3c24:	6a e0       	ldi	r22, 0x0A	; 10
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	0e 94 cd 10 	call	0x219a	; 0x219a <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    3c2c:	69 e8       	ldi	r22, 0x89	; 137
    3c2e:	86 2e       	mov	r8, r22
    3c30:	91 2c       	mov	r9, r1
    3c32:	8c 0c       	add	r8, r12
    3c34:	9d 1c       	adc	r9, r13
    3c36:	c4 01       	movw	r24, r8
    3c38:	69 e0       	ldi	r22, 0x09	; 9
    3c3a:	a3 01       	movw	r20, r6
    3c3c:	97 01       	movw	r18, r14
    3c3e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)>
    3c42:	c5 01       	movw	r24, r10
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3c4a:	2c 01       	movw	r4, r24
    3c4c:	c5 01       	movw	r24, r10
    3c4e:	61 e0       	ldi	r22, 0x01	; 1
    3c50:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3c54:	3c 01       	movw	r6, r24
    3c56:	c5 01       	movw	r24, r10
    3c58:	62 e0       	ldi	r22, 0x02	; 2
    3c5a:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3c5e:	8c 01       	movw	r16, r24
    3c60:	c5 01       	movw	r24, r10
    3c62:	63 e0       	ldi	r22, 0x03	; 3
    3c64:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3c68:	7c 01       	movw	r14, r24
    3c6a:	96 01       	movw	r18, r12
    3c6c:	21 54       	subi	r18, 0x41	; 65
    3c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c70:	3a 83       	std	Y+2, r19	; 0x02
    3c72:	29 83       	std	Y+1, r18	; 0x01
    3c74:	c9 01       	movw	r24, r18
    3c76:	60 e0       	ldi	r22, 0x00	; 0
    3c78:	a2 01       	movw	r20, r4
    3c7a:	93 01       	movw	r18, r6
    3c7c:	0e 94 46 13 	call	0x268c	; 0x268c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3c80:	c5 01       	movw	r24, r10
    3c82:	64 e0       	ldi	r22, 0x04	; 4
    3c84:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3c88:	2c 01       	movw	r4, r24
    3c8a:	c5 01       	movw	r24, r10
    3c8c:	65 e0       	ldi	r22, 0x05	; 5
    3c8e:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3c92:	3c 01       	movw	r6, r24
    3c94:	c5 01       	movw	r24, r10
    3c96:	66 e0       	ldi	r22, 0x06	; 6
    3c98:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3c9c:	8c 01       	movw	r16, r24
    3c9e:	c5 01       	movw	r24, r10
    3ca0:	67 e0       	ldi	r22, 0x07	; 7
    3ca2:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3ca6:	7c 01       	movw	r14, r24
    3ca8:	b6 01       	movw	r22, r12
    3caa:	66 53       	subi	r22, 0x36	; 54
    3cac:	7f 4f       	sbci	r23, 0xFF	; 255
    3cae:	7c 83       	std	Y+4, r23	; 0x04
    3cb0:	6b 83       	std	Y+3, r22	; 0x03
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	60 e0       	ldi	r22, 0x00	; 0
    3cb6:	a2 01       	movw	r20, r4
    3cb8:	93 01       	movw	r18, r6
    3cba:	0e 94 46 13 	call	0x268c	; 0x268c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3cbe:	c5 01       	movw	r24, r10
    3cc0:	68 e0       	ldi	r22, 0x08	; 8
    3cc2:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3cc6:	2c 01       	movw	r4, r24
    3cc8:	c5 01       	movw	r24, r10
    3cca:	69 e0       	ldi	r22, 0x09	; 9
    3ccc:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3cd0:	3c 01       	movw	r6, r24
    3cd2:	c5 01       	movw	r24, r10
    3cd4:	6a e0       	ldi	r22, 0x0A	; 10
    3cd6:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3cda:	8c 01       	movw	r16, r24
    3cdc:	c5 01       	movw	r24, r10
    3cde:	6b e0       	ldi	r22, 0x0B	; 11
    3ce0:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3ce4:	7c 01       	movw	r14, r24
    3ce6:	c6 01       	movw	r24, r12
    3ce8:	8b 52       	subi	r24, 0x2B	; 43
    3cea:	9f 4f       	sbci	r25, 0xFF	; 255
    3cec:	9e 83       	std	Y+6, r25	; 0x06
    3cee:	8d 83       	std	Y+5, r24	; 0x05
    3cf0:	60 e0       	ldi	r22, 0x00	; 0
    3cf2:	a2 01       	movw	r20, r4
    3cf4:	93 01       	movw	r18, r6
    3cf6:	0e 94 46 13 	call	0x268c	; 0x268c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3cfa:	c5 01       	movw	r24, r10
    3cfc:	6c e0       	ldi	r22, 0x0C	; 12
    3cfe:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3d02:	2c 01       	movw	r4, r24
    3d04:	c5 01       	movw	r24, r10
    3d06:	6d e0       	ldi	r22, 0x0D	; 13
    3d08:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3d0c:	3c 01       	movw	r6, r24
    3d0e:	c5 01       	movw	r24, r10
    3d10:	6e e0       	ldi	r22, 0x0E	; 14
    3d12:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3d16:	8c 01       	movw	r16, r24
    3d18:	c5 01       	movw	r24, r10
    3d1a:	6f e0       	ldi	r22, 0x0F	; 15
    3d1c:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3d20:	7c 01       	movw	r14, r24
    3d22:	50 ee       	ldi	r21, 0xE0	; 224
    3d24:	25 2e       	mov	r2, r21
    3d26:	31 2c       	mov	r3, r1
    3d28:	2c 0c       	add	r2, r12
    3d2a:	3d 1c       	adc	r3, r13
    3d2c:	c1 01       	movw	r24, r2
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	a2 01       	movw	r20, r4
    3d32:	93 01       	movw	r18, r6
    3d34:	0e 94 46 13 	call	0x268c	; 0x268c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3d38:	c5 01       	movw	r24, r10
    3d3a:	60 e1       	ldi	r22, 0x10	; 16
    3d3c:	0e 94 8d 10 	call	0x211a	; 0x211a <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3d40:	e7 e6       	ldi	r30, 0x67	; 103
    3d42:	f1 e0       	ldi	r31, 0x01	; 1
    3d44:	ce 0e       	add	r12, r30
    3d46:	df 1e       	adc	r13, r31
    3d48:	f6 01       	movw	r30, r12
    3d4a:	91 83       	std	Z+1, r25	; 0x01
    3d4c:	80 83       	st	Z, r24
    3d4e:	29 e9       	ldi	r18, 0x99	; 153
    3d50:	3e ef       	ldi	r19, 0xFE	; 254
    3d52:	c2 0e       	add	r12, r18
    3d54:	d3 1e       	adc	r13, r19
    3d56:	c4 01       	movw	r24, r8
    3d58:	68 e0       	ldi	r22, 0x08	; 8
    3d5a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3d5e:	8c 01       	movw	r16, r24
    3d60:	c4 01       	movw	r24, r8
    3d62:	60 e0       	ldi	r22, 0x00	; 0
    3d64:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3d68:	9c 01       	movw	r18, r24
    3d6a:	c6 01       	movw	r24, r12
    3d6c:	85 51       	subi	r24, 0x15	; 21
    3d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d70:	69 81       	ldd	r22, Y+1	; 0x01
    3d72:	7a 81       	ldd	r23, Y+2	; 0x02
    3d74:	a8 01       	movw	r20, r16
    3d76:	0e 94 ef 13 	call	0x27de	; 0x27de <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    3d7a:	c4 01       	movw	r24, r8
    3d7c:	61 e0       	ldi	r22, 0x01	; 1
    3d7e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3d82:	8c 01       	movw	r16, r24
    3d84:	c4 01       	movw	r24, r8
    3d86:	62 e0       	ldi	r22, 0x02	; 2
    3d88:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3d8c:	9c 01       	movw	r18, r24
    3d8e:	c6 01       	movw	r24, r12
    3d90:	86 5f       	subi	r24, 0xF6	; 246
    3d92:	9e 4f       	sbci	r25, 0xFE	; 254
    3d94:	6b 81       	ldd	r22, Y+3	; 0x03
    3d96:	7c 81       	ldd	r23, Y+4	; 0x04
    3d98:	a8 01       	movw	r20, r16
    3d9a:	0e 94 ef 13 	call	0x27de	; 0x27de <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    3d9e:	c4 01       	movw	r24, r8
    3da0:	64 e0       	ldi	r22, 0x04	; 4
    3da2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3da6:	8c 01       	movw	r16, r24
    3da8:	c4 01       	movw	r24, r8
    3daa:	63 e0       	ldi	r22, 0x03	; 3
    3dac:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3db0:	9c 01       	movw	r18, r24
    3db2:	c6 01       	movw	r24, r12
    3db4:	87 5d       	subi	r24, 0xD7	; 215
    3db6:	9e 4f       	sbci	r25, 0xFE	; 254
    3db8:	6d 81       	ldd	r22, Y+5	; 0x05
    3dba:	7e 81       	ldd	r23, Y+6	; 0x06
    3dbc:	a8 01       	movw	r20, r16
    3dbe:	0e 94 ef 13 	call	0x27de	; 0x27de <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    3dc2:	c4 01       	movw	r24, r8
    3dc4:	65 e0       	ldi	r22, 0x05	; 5
    3dc6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3dca:	8c 01       	movw	r16, r24
    3dcc:	c4 01       	movw	r24, r8
    3dce:	66 e0       	ldi	r22, 0x06	; 6
    3dd0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3dd4:	9c 01       	movw	r18, r24
    3dd6:	c6 01       	movw	r24, r12
    3dd8:	88 5b       	subi	r24, 0xB8	; 184
    3dda:	9e 4f       	sbci	r25, 0xFE	; 254
    3ddc:	b1 01       	movw	r22, r2
    3dde:	a8 01       	movw	r20, r16
    3de0:	0e 94 ef 13 	call	0x27de	; 0x27de <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    3de4:	61 ef       	ldi	r22, 0xF1	; 241
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	c6 0e       	add	r12, r22
    3dea:	d7 1e       	adc	r13, r23
    3dec:	8c ed       	ldi	r24, 0xDC	; 220
    3dee:	95 e0       	ldi	r25, 0x05	; 5
    3df0:	a0 e0       	ldi	r26, 0x00	; 0
    3df2:	b0 e0       	ldi	r27, 0x00	; 0
    3df4:	f6 01       	movw	r30, r12
    3df6:	80 83       	st	Z, r24
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	a2 83       	std	Z+2, r26	; 0x02
    3dfc:	b3 83       	std	Z+3, r27	; 0x03
    3dfe:	2f e1       	ldi	r18, 0x1F	; 31
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	c2 0e       	add	r12, r18
    3e04:	d3 1e       	adc	r13, r19
    3e06:	f6 01       	movw	r30, r12
    3e08:	80 83       	st	Z, r24
    3e0a:	91 83       	std	Z+1, r25	; 0x01
    3e0c:	a2 83       	std	Z+2, r26	; 0x02
    3e0e:	b3 83       	std	Z+3, r27	; 0x03
    3e10:	c2 0e       	add	r12, r18
    3e12:	d3 1e       	adc	r13, r19
    3e14:	44 ec       	ldi	r20, 0xC4	; 196
    3e16:	e4 2e       	mov	r14, r20
    3e18:	49 e0       	ldi	r20, 0x09	; 9
    3e1a:	f4 2e       	mov	r15, r20
    3e1c:	01 2d       	mov	r16, r1
    3e1e:	11 2d       	mov	r17, r1
    3e20:	f6 01       	movw	r30, r12
    3e22:	e0 82       	st	Z, r14
    3e24:	f1 82       	std	Z+1, r15	; 0x01
    3e26:	02 83       	std	Z+2, r16	; 0x02
    3e28:	13 83       	std	Z+3, r17	; 0x03
    3e2a:	c2 0e       	add	r12, r18
    3e2c:	d3 1e       	adc	r13, r19
    3e2e:	20 ed       	ldi	r18, 0xD0	; 208
    3e30:	37 e0       	ldi	r19, 0x07	; 7
    3e32:	40 e0       	ldi	r20, 0x00	; 0
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	f6 01       	movw	r30, r12
    3e38:	20 83       	st	Z, r18
    3e3a:	31 83       	std	Z+1, r19	; 0x01
    3e3c:	42 83       	std	Z+2, r20	; 0x02
    3e3e:	53 83       	std	Z+3, r21	; 0x03
    3e40:	62 eb       	ldi	r22, 0xB2	; 178
    3e42:	7f ef       	ldi	r23, 0xFF	; 255
    3e44:	c6 0e       	add	r12, r22
    3e46:	d7 1e       	adc	r13, r23
    3e48:	f6 01       	movw	r30, r12
    3e4a:	80 83       	st	Z, r24
    3e4c:	91 83       	std	Z+1, r25	; 0x01
    3e4e:	a2 83       	std	Z+2, r26	; 0x02
    3e50:	b3 83       	std	Z+3, r27	; 0x03
    3e52:	6f e1       	ldi	r22, 0x1F	; 31
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	c6 0e       	add	r12, r22
    3e58:	d7 1e       	adc	r13, r23
    3e5a:	f6 01       	movw	r30, r12
    3e5c:	80 83       	st	Z, r24
    3e5e:	91 83       	std	Z+1, r25	; 0x01
    3e60:	a2 83       	std	Z+2, r26	; 0x02
    3e62:	b3 83       	std	Z+3, r27	; 0x03
    3e64:	c6 0e       	add	r12, r22
    3e66:	d7 1e       	adc	r13, r23
    3e68:	f6 01       	movw	r30, r12
    3e6a:	e0 82       	st	Z, r14
    3e6c:	f1 82       	std	Z+1, r15	; 0x01
    3e6e:	02 83       	std	Z+2, r16	; 0x02
    3e70:	13 83       	std	Z+3, r17	; 0x03
    3e72:	c6 0e       	add	r12, r22
    3e74:	d7 1e       	adc	r13, r23
    3e76:	f6 01       	movw	r30, r12
    3e78:	20 83       	st	Z, r18
    3e7a:	31 83       	std	Z+1, r19	; 0x01
    3e7c:	42 83       	std	Z+2, r20	; 0x02
    3e7e:	53 83       	std	Z+3, r21	; 0x03
    3e80:	20 e9       	ldi	r18, 0x90	; 144
    3e82:	3f ef       	ldi	r19, 0xFF	; 255
    3e84:	c2 0e       	add	r12, r18
    3e86:	d3 1e       	adc	r13, r19
    3e88:	27 e7       	ldi	r18, 0x77	; 119
    3e8a:	3e e3       	ldi	r19, 0x3E	; 62
    3e8c:	f6 01       	movw	r30, r12
    3e8e:	31 83       	std	Z+1, r19	; 0x01
    3e90:	20 83       	st	Z, r18
    3e92:	c6 0e       	add	r12, r22
    3e94:	d7 1e       	adc	r13, r23
    3e96:	8d e9       	ldi	r24, 0x9D	; 157
    3e98:	9e e3       	ldi	r25, 0x3E	; 62
    3e9a:	f6 01       	movw	r30, r12
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	80 83       	st	Z, r24
    3ea0:	c6 0e       	add	r12, r22
    3ea2:	d7 1e       	adc	r13, r23
    3ea4:	8d e1       	ldi	r24, 0x1D	; 29
    3ea6:	9f e0       	ldi	r25, 0x0F	; 15
    3ea8:	f6 01       	movw	r30, r12
    3eaa:	91 83       	std	Z+1, r25	; 0x01
    3eac:	80 83       	st	Z, r24
    3eae:	c6 0e       	add	r12, r22
    3eb0:	d7 1e       	adc	r13, r23
    3eb2:	f6 01       	movw	r30, r12
    3eb4:	31 83       	std	Z+1, r19	; 0x01
    3eb6:	20 83       	st	Z, r18
    3eb8:	25 ea       	ldi	r18, 0xA5	; 165
    3eba:	3f ef       	ldi	r19, 0xFF	; 255
    3ebc:	c2 0e       	add	r12, r18
    3ebe:	d3 1e       	adc	r13, r19
    3ec0:	24 eb       	ldi	r18, 0xB4	; 180
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	f6 01       	movw	r30, r12
    3ec6:	31 83       	std	Z+1, r19	; 0x01
    3ec8:	20 83       	st	Z, r18
    3eca:	c6 0e       	add	r12, r22
    3ecc:	d7 1e       	adc	r13, r23
    3ece:	89 e9       	ldi	r24, 0x99	; 153
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	f6 01       	movw	r30, r12
    3ed4:	91 83       	std	Z+1, r25	; 0x01
    3ed6:	80 83       	st	Z, r24
    3ed8:	c6 0e       	add	r12, r22
    3eda:	d7 1e       	adc	r13, r23
    3edc:	88 ea       	ldi	r24, 0xA8	; 168
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	f6 01       	movw	r30, r12
    3ee2:	91 83       	std	Z+1, r25	; 0x01
    3ee4:	80 83       	st	Z, r24
    3ee6:	c6 0e       	add	r12, r22
    3ee8:	d7 1e       	adc	r13, r23
    3eea:	f6 01       	movw	r30, r12
    3eec:	31 83       	std	Z+1, r19	; 0x01
    3eee:	20 83       	st	Z, r18
    3ef0:	26 96       	adiw	r28, 0x06	; 6
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	cf 91       	pop	r28
    3efe:	df 91       	pop	r29
    3f00:	1f 91       	pop	r17
    3f02:	0f 91       	pop	r16
    3f04:	ff 90       	pop	r15
    3f06:	ef 90       	pop	r14
    3f08:	df 90       	pop	r13
    3f0a:	cf 90       	pop	r12
    3f0c:	bf 90       	pop	r11
    3f0e:	af 90       	pop	r10
    3f10:	9f 90       	pop	r9
    3f12:	8f 90       	pop	r8
    3f14:	7f 90       	pop	r7
    3f16:	6f 90       	pop	r6
    3f18:	5f 90       	pop	r5
    3f1a:	4f 90       	pop	r4
    3f1c:	3f 90       	pop	r3
    3f1e:	2f 90       	pop	r2
    3f20:	08 95       	ret

00003f22 <atof>:
    3f22:	66 27       	eor	r22, r22
    3f24:	77 27       	eor	r23, r23
    3f26:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <strtod>

00003f2a <atoi>:
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	88 27       	eor	r24, r24
    3f2e:	99 27       	eor	r25, r25
    3f30:	e8 94       	clt
    3f32:	21 91       	ld	r18, Z+
    3f34:	20 32       	cpi	r18, 0x20	; 32
    3f36:	e9 f3       	breq	.-6      	; 0x3f32 <atoi+0x8>
    3f38:	29 30       	cpi	r18, 0x09	; 9
    3f3a:	10 f0       	brcs	.+4      	; 0x3f40 <atoi+0x16>
    3f3c:	2e 30       	cpi	r18, 0x0E	; 14
    3f3e:	c8 f3       	brcs	.-14     	; 0x3f32 <atoi+0x8>
    3f40:	2b 32       	cpi	r18, 0x2B	; 43
    3f42:	41 f0       	breq	.+16     	; 0x3f54 <atoi+0x2a>
    3f44:	2d 32       	cpi	r18, 0x2D	; 45
    3f46:	39 f4       	brne	.+14     	; 0x3f56 <atoi+0x2c>
    3f48:	68 94       	set
    3f4a:	04 c0       	rjmp	.+8      	; 0x3f54 <atoi+0x2a>
    3f4c:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <__mulhi_const_10>
    3f50:	82 0f       	add	r24, r18
    3f52:	91 1d       	adc	r25, r1
    3f54:	21 91       	ld	r18, Z+
    3f56:	20 53       	subi	r18, 0x30	; 48
    3f58:	2a 30       	cpi	r18, 0x0A	; 10
    3f5a:	c0 f3       	brcs	.-16     	; 0x3f4c <atoi+0x22>
    3f5c:	1e f4       	brtc	.+6      	; 0x3f64 <atoi+0x3a>
    3f5e:	90 95       	com	r25
    3f60:	81 95       	neg	r24
    3f62:	9f 4f       	sbci	r25, 0xFF	; 255
    3f64:	08 95       	ret

00003f66 <atol>:
    3f66:	1f 93       	push	r17
    3f68:	fc 01       	movw	r30, r24
    3f6a:	99 27       	eor	r25, r25
    3f6c:	88 27       	eor	r24, r24
    3f6e:	bc 01       	movw	r22, r24
    3f70:	e8 94       	clt
    3f72:	11 91       	ld	r17, Z+
    3f74:	10 32       	cpi	r17, 0x20	; 32
    3f76:	e9 f3       	breq	.-6      	; 0x3f72 <atol+0xc>
    3f78:	19 30       	cpi	r17, 0x09	; 9
    3f7a:	10 f0       	brcs	.+4      	; 0x3f80 <atol+0x1a>
    3f7c:	1e 30       	cpi	r17, 0x0E	; 14
    3f7e:	c8 f3       	brcs	.-14     	; 0x3f72 <atol+0xc>
    3f80:	1b 32       	cpi	r17, 0x2B	; 43
    3f82:	51 f0       	breq	.+20     	; 0x3f98 <atol+0x32>
    3f84:	1d 32       	cpi	r17, 0x2D	; 45
    3f86:	49 f4       	brne	.+18     	; 0x3f9a <atol+0x34>
    3f88:	68 94       	set
    3f8a:	06 c0       	rjmp	.+12     	; 0x3f98 <atol+0x32>
    3f8c:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__mulsi_const_10>
    3f90:	61 0f       	add	r22, r17
    3f92:	71 1d       	adc	r23, r1
    3f94:	81 1d       	adc	r24, r1
    3f96:	91 1d       	adc	r25, r1
    3f98:	11 91       	ld	r17, Z+
    3f9a:	10 53       	subi	r17, 0x30	; 48
    3f9c:	1a 30       	cpi	r17, 0x0A	; 10
    3f9e:	b0 f3       	brcs	.-20     	; 0x3f8c <atol+0x26>
    3fa0:	3e f4       	brtc	.+14     	; 0x3fb0 <atol+0x4a>
    3fa2:	90 95       	com	r25
    3fa4:	80 95       	com	r24
    3fa6:	70 95       	com	r23
    3fa8:	61 95       	neg	r22
    3faa:	7f 4f       	sbci	r23, 0xFF	; 255
    3fac:	8f 4f       	sbci	r24, 0xFF	; 255
    3fae:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb0:	1f 91       	pop	r17
    3fb2:	08 95       	ret

00003fb4 <exit>:
    3fb4:	f8 94       	cli
    3fb6:	0c 94 87 23 	jmp	0x470e	; 0x470e <_exit>

00003fba <isspace>:
    3fba:	91 11       	cpse	r25, r1
    3fbc:	cd c2       	rjmp	.+1434   	; 0x4558 <__ctype_isfalse>
    3fbe:	80 32       	cpi	r24, 0x20	; 32
    3fc0:	19 f0       	breq	.+6      	; 0x3fc8 <isspace+0xe>
    3fc2:	89 50       	subi	r24, 0x09	; 9
    3fc4:	85 50       	subi	r24, 0x05	; 5
    3fc6:	d0 f7       	brcc	.-12     	; 0x3fbc <isspace+0x2>
    3fc8:	08 95       	ret

00003fca <__mulsi_const_10>:
    3fca:	59 2f       	mov	r21, r25
    3fcc:	48 2f       	mov	r20, r24
    3fce:	37 2f       	mov	r19, r23
    3fd0:	26 2f       	mov	r18, r22
    3fd2:	66 0f       	add	r22, r22
    3fd4:	77 1f       	adc	r23, r23
    3fd6:	88 1f       	adc	r24, r24
    3fd8:	99 1f       	adc	r25, r25
    3fda:	66 0f       	add	r22, r22
    3fdc:	77 1f       	adc	r23, r23
    3fde:	88 1f       	adc	r24, r24
    3fe0:	99 1f       	adc	r25, r25
    3fe2:	62 0f       	add	r22, r18
    3fe4:	73 1f       	adc	r23, r19
    3fe6:	84 1f       	adc	r24, r20
    3fe8:	95 1f       	adc	r25, r21
    3fea:	66 0f       	add	r22, r22
    3fec:	77 1f       	adc	r23, r23
    3fee:	88 1f       	adc	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	08 95       	ret

00003ff4 <__mulhi_const_10>:
    3ff4:	7a e0       	ldi	r23, 0x0A	; 10
    3ff6:	97 9f       	mul	r25, r23
    3ff8:	90 2d       	mov	r25, r0
    3ffa:	87 9f       	mul	r24, r23
    3ffc:	80 2d       	mov	r24, r0
    3ffe:	91 0d       	add	r25, r1
    4000:	11 24       	eor	r1, r1
    4002:	08 95       	ret

00004004 <__cmpsf2>:
    4004:	71 d0       	rcall	.+226    	; 0x40e8 <__fp_cmp>
    4006:	08 f4       	brcc	.+2      	; 0x400a <__cmpsf2+0x6>
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	08 95       	ret

0000400c <__fixsfsi>:
    400c:	04 d0       	rcall	.+8      	; 0x4016 <__fixunssfsi>
    400e:	68 94       	set
    4010:	b1 11       	cpse	r27, r1
    4012:	d9 c0       	rjmp	.+434    	; 0x41c6 <__fp_szero>
    4014:	08 95       	ret

00004016 <__fixunssfsi>:
    4016:	bc d0       	rcall	.+376    	; 0x4190 <__fp_splitA>
    4018:	88 f0       	brcs	.+34     	; 0x403c <__fixunssfsi+0x26>
    401a:	9f 57       	subi	r25, 0x7F	; 127
    401c:	90 f0       	brcs	.+36     	; 0x4042 <__fixunssfsi+0x2c>
    401e:	b9 2f       	mov	r27, r25
    4020:	99 27       	eor	r25, r25
    4022:	b7 51       	subi	r27, 0x17	; 23
    4024:	a0 f0       	brcs	.+40     	; 0x404e <__fixunssfsi+0x38>
    4026:	d1 f0       	breq	.+52     	; 0x405c <__fixunssfsi+0x46>
    4028:	66 0f       	add	r22, r22
    402a:	77 1f       	adc	r23, r23
    402c:	88 1f       	adc	r24, r24
    402e:	99 1f       	adc	r25, r25
    4030:	1a f0       	brmi	.+6      	; 0x4038 <__fixunssfsi+0x22>
    4032:	ba 95       	dec	r27
    4034:	c9 f7       	brne	.-14     	; 0x4028 <__fixunssfsi+0x12>
    4036:	12 c0       	rjmp	.+36     	; 0x405c <__fixunssfsi+0x46>
    4038:	b1 30       	cpi	r27, 0x01	; 1
    403a:	81 f0       	breq	.+32     	; 0x405c <__fixunssfsi+0x46>
    403c:	c3 d0       	rcall	.+390    	; 0x41c4 <__fp_zero>
    403e:	b1 e0       	ldi	r27, 0x01	; 1
    4040:	08 95       	ret
    4042:	c0 c0       	rjmp	.+384    	; 0x41c4 <__fp_zero>
    4044:	67 2f       	mov	r22, r23
    4046:	78 2f       	mov	r23, r24
    4048:	88 27       	eor	r24, r24
    404a:	b8 5f       	subi	r27, 0xF8	; 248
    404c:	39 f0       	breq	.+14     	; 0x405c <__fixunssfsi+0x46>
    404e:	b9 3f       	cpi	r27, 0xF9	; 249
    4050:	cc f3       	brlt	.-14     	; 0x4044 <__fixunssfsi+0x2e>
    4052:	86 95       	lsr	r24
    4054:	77 95       	ror	r23
    4056:	67 95       	ror	r22
    4058:	b3 95       	inc	r27
    405a:	d9 f7       	brne	.-10     	; 0x4052 <__fixunssfsi+0x3c>
    405c:	3e f4       	brtc	.+14     	; 0x406c <__fixunssfsi+0x56>
    405e:	90 95       	com	r25
    4060:	80 95       	com	r24
    4062:	70 95       	com	r23
    4064:	61 95       	neg	r22
    4066:	7f 4f       	sbci	r23, 0xFF	; 255
    4068:	8f 4f       	sbci	r24, 0xFF	; 255
    406a:	9f 4f       	sbci	r25, 0xFF	; 255
    406c:	08 95       	ret

0000406e <__floatunsisf>:
    406e:	e8 94       	clt
    4070:	09 c0       	rjmp	.+18     	; 0x4084 <__floatsisf+0x12>

00004072 <__floatsisf>:
    4072:	97 fb       	bst	r25, 7
    4074:	3e f4       	brtc	.+14     	; 0x4084 <__floatsisf+0x12>
    4076:	90 95       	com	r25
    4078:	80 95       	com	r24
    407a:	70 95       	com	r23
    407c:	61 95       	neg	r22
    407e:	7f 4f       	sbci	r23, 0xFF	; 255
    4080:	8f 4f       	sbci	r24, 0xFF	; 255
    4082:	9f 4f       	sbci	r25, 0xFF	; 255
    4084:	99 23       	and	r25, r25
    4086:	a9 f0       	breq	.+42     	; 0x40b2 <__floatsisf+0x40>
    4088:	f9 2f       	mov	r31, r25
    408a:	96 e9       	ldi	r25, 0x96	; 150
    408c:	bb 27       	eor	r27, r27
    408e:	93 95       	inc	r25
    4090:	f6 95       	lsr	r31
    4092:	87 95       	ror	r24
    4094:	77 95       	ror	r23
    4096:	67 95       	ror	r22
    4098:	b7 95       	ror	r27
    409a:	f1 11       	cpse	r31, r1
    409c:	f8 cf       	rjmp	.-16     	; 0x408e <__floatsisf+0x1c>
    409e:	fa f4       	brpl	.+62     	; 0x40de <__floatsisf+0x6c>
    40a0:	bb 0f       	add	r27, r27
    40a2:	11 f4       	brne	.+4      	; 0x40a8 <__floatsisf+0x36>
    40a4:	60 ff       	sbrs	r22, 0
    40a6:	1b c0       	rjmp	.+54     	; 0x40de <__floatsisf+0x6c>
    40a8:	6f 5f       	subi	r22, 0xFF	; 255
    40aa:	7f 4f       	sbci	r23, 0xFF	; 255
    40ac:	8f 4f       	sbci	r24, 0xFF	; 255
    40ae:	9f 4f       	sbci	r25, 0xFF	; 255
    40b0:	16 c0       	rjmp	.+44     	; 0x40de <__floatsisf+0x6c>
    40b2:	88 23       	and	r24, r24
    40b4:	11 f0       	breq	.+4      	; 0x40ba <__floatsisf+0x48>
    40b6:	96 e9       	ldi	r25, 0x96	; 150
    40b8:	11 c0       	rjmp	.+34     	; 0x40dc <__floatsisf+0x6a>
    40ba:	77 23       	and	r23, r23
    40bc:	21 f0       	breq	.+8      	; 0x40c6 <__floatsisf+0x54>
    40be:	9e e8       	ldi	r25, 0x8E	; 142
    40c0:	87 2f       	mov	r24, r23
    40c2:	76 2f       	mov	r23, r22
    40c4:	05 c0       	rjmp	.+10     	; 0x40d0 <__floatsisf+0x5e>
    40c6:	66 23       	and	r22, r22
    40c8:	71 f0       	breq	.+28     	; 0x40e6 <__floatsisf+0x74>
    40ca:	96 e8       	ldi	r25, 0x86	; 134
    40cc:	86 2f       	mov	r24, r22
    40ce:	70 e0       	ldi	r23, 0x00	; 0
    40d0:	60 e0       	ldi	r22, 0x00	; 0
    40d2:	2a f0       	brmi	.+10     	; 0x40de <__floatsisf+0x6c>
    40d4:	9a 95       	dec	r25
    40d6:	66 0f       	add	r22, r22
    40d8:	77 1f       	adc	r23, r23
    40da:	88 1f       	adc	r24, r24
    40dc:	da f7       	brpl	.-10     	; 0x40d4 <__floatsisf+0x62>
    40de:	88 0f       	add	r24, r24
    40e0:	96 95       	lsr	r25
    40e2:	87 95       	ror	r24
    40e4:	97 f9       	bld	r25, 7
    40e6:	08 95       	ret

000040e8 <__fp_cmp>:
    40e8:	99 0f       	add	r25, r25
    40ea:	00 08       	sbc	r0, r0
    40ec:	55 0f       	add	r21, r21
    40ee:	aa 0b       	sbc	r26, r26
    40f0:	e0 e8       	ldi	r30, 0x80	; 128
    40f2:	fe ef       	ldi	r31, 0xFE	; 254
    40f4:	16 16       	cp	r1, r22
    40f6:	17 06       	cpc	r1, r23
    40f8:	e8 07       	cpc	r30, r24
    40fa:	f9 07       	cpc	r31, r25
    40fc:	c0 f0       	brcs	.+48     	; 0x412e <__fp_cmp+0x46>
    40fe:	12 16       	cp	r1, r18
    4100:	13 06       	cpc	r1, r19
    4102:	e4 07       	cpc	r30, r20
    4104:	f5 07       	cpc	r31, r21
    4106:	98 f0       	brcs	.+38     	; 0x412e <__fp_cmp+0x46>
    4108:	62 1b       	sub	r22, r18
    410a:	73 0b       	sbc	r23, r19
    410c:	84 0b       	sbc	r24, r20
    410e:	95 0b       	sbc	r25, r21
    4110:	39 f4       	brne	.+14     	; 0x4120 <__fp_cmp+0x38>
    4112:	0a 26       	eor	r0, r26
    4114:	61 f0       	breq	.+24     	; 0x412e <__fp_cmp+0x46>
    4116:	23 2b       	or	r18, r19
    4118:	24 2b       	or	r18, r20
    411a:	25 2b       	or	r18, r21
    411c:	21 f4       	brne	.+8      	; 0x4126 <__fp_cmp+0x3e>
    411e:	08 95       	ret
    4120:	0a 26       	eor	r0, r26
    4122:	09 f4       	brne	.+2      	; 0x4126 <__fp_cmp+0x3e>
    4124:	a1 40       	sbci	r26, 0x01	; 1
    4126:	a6 95       	lsr	r26
    4128:	8f ef       	ldi	r24, 0xFF	; 255
    412a:	81 1d       	adc	r24, r1
    412c:	81 1d       	adc	r24, r1
    412e:	08 95       	ret

00004130 <__fp_inf>:
    4130:	97 f9       	bld	r25, 7
    4132:	9f 67       	ori	r25, 0x7F	; 127
    4134:	80 e8       	ldi	r24, 0x80	; 128
    4136:	70 e0       	ldi	r23, 0x00	; 0
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	08 95       	ret

0000413c <__fp_nan>:
    413c:	9f ef       	ldi	r25, 0xFF	; 255
    413e:	80 ec       	ldi	r24, 0xC0	; 192
    4140:	08 95       	ret

00004142 <__fp_pscA>:
    4142:	00 24       	eor	r0, r0
    4144:	0a 94       	dec	r0
    4146:	16 16       	cp	r1, r22
    4148:	17 06       	cpc	r1, r23
    414a:	18 06       	cpc	r1, r24
    414c:	09 06       	cpc	r0, r25
    414e:	08 95       	ret

00004150 <__fp_pscB>:
    4150:	00 24       	eor	r0, r0
    4152:	0a 94       	dec	r0
    4154:	12 16       	cp	r1, r18
    4156:	13 06       	cpc	r1, r19
    4158:	14 06       	cpc	r1, r20
    415a:	05 06       	cpc	r0, r21
    415c:	08 95       	ret

0000415e <__fp_round>:
    415e:	09 2e       	mov	r0, r25
    4160:	03 94       	inc	r0
    4162:	00 0c       	add	r0, r0
    4164:	11 f4       	brne	.+4      	; 0x416a <__fp_round+0xc>
    4166:	88 23       	and	r24, r24
    4168:	52 f0       	brmi	.+20     	; 0x417e <__fp_round+0x20>
    416a:	bb 0f       	add	r27, r27
    416c:	40 f4       	brcc	.+16     	; 0x417e <__fp_round+0x20>
    416e:	bf 2b       	or	r27, r31
    4170:	11 f4       	brne	.+4      	; 0x4176 <__fp_round+0x18>
    4172:	60 ff       	sbrs	r22, 0
    4174:	04 c0       	rjmp	.+8      	; 0x417e <__fp_round+0x20>
    4176:	6f 5f       	subi	r22, 0xFF	; 255
    4178:	7f 4f       	sbci	r23, 0xFF	; 255
    417a:	8f 4f       	sbci	r24, 0xFF	; 255
    417c:	9f 4f       	sbci	r25, 0xFF	; 255
    417e:	08 95       	ret

00004180 <__fp_split3>:
    4180:	57 fd       	sbrc	r21, 7
    4182:	90 58       	subi	r25, 0x80	; 128
    4184:	44 0f       	add	r20, r20
    4186:	55 1f       	adc	r21, r21
    4188:	59 f0       	breq	.+22     	; 0x41a0 <__fp_splitA+0x10>
    418a:	5f 3f       	cpi	r21, 0xFF	; 255
    418c:	71 f0       	breq	.+28     	; 0x41aa <__fp_splitA+0x1a>
    418e:	47 95       	ror	r20

00004190 <__fp_splitA>:
    4190:	88 0f       	add	r24, r24
    4192:	97 fb       	bst	r25, 7
    4194:	99 1f       	adc	r25, r25
    4196:	61 f0       	breq	.+24     	; 0x41b0 <__fp_splitA+0x20>
    4198:	9f 3f       	cpi	r25, 0xFF	; 255
    419a:	79 f0       	breq	.+30     	; 0x41ba <__fp_splitA+0x2a>
    419c:	87 95       	ror	r24
    419e:	08 95       	ret
    41a0:	12 16       	cp	r1, r18
    41a2:	13 06       	cpc	r1, r19
    41a4:	14 06       	cpc	r1, r20
    41a6:	55 1f       	adc	r21, r21
    41a8:	f2 cf       	rjmp	.-28     	; 0x418e <__fp_split3+0xe>
    41aa:	46 95       	lsr	r20
    41ac:	f1 df       	rcall	.-30     	; 0x4190 <__fp_splitA>
    41ae:	08 c0       	rjmp	.+16     	; 0x41c0 <__fp_splitA+0x30>
    41b0:	16 16       	cp	r1, r22
    41b2:	17 06       	cpc	r1, r23
    41b4:	18 06       	cpc	r1, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	f1 cf       	rjmp	.-30     	; 0x419c <__fp_splitA+0xc>
    41ba:	86 95       	lsr	r24
    41bc:	71 05       	cpc	r23, r1
    41be:	61 05       	cpc	r22, r1
    41c0:	08 94       	sec
    41c2:	08 95       	ret

000041c4 <__fp_zero>:
    41c4:	e8 94       	clt

000041c6 <__fp_szero>:
    41c6:	bb 27       	eor	r27, r27
    41c8:	66 27       	eor	r22, r22
    41ca:	77 27       	eor	r23, r23
    41cc:	cb 01       	movw	r24, r22
    41ce:	97 f9       	bld	r25, 7
    41d0:	08 95       	ret

000041d2 <__mulsf3>:
    41d2:	0b d0       	rcall	.+22     	; 0x41ea <__mulsf3x>
    41d4:	c4 cf       	rjmp	.-120    	; 0x415e <__fp_round>
    41d6:	b5 df       	rcall	.-150    	; 0x4142 <__fp_pscA>
    41d8:	28 f0       	brcs	.+10     	; 0x41e4 <__mulsf3+0x12>
    41da:	ba df       	rcall	.-140    	; 0x4150 <__fp_pscB>
    41dc:	18 f0       	brcs	.+6      	; 0x41e4 <__mulsf3+0x12>
    41de:	95 23       	and	r25, r21
    41e0:	09 f0       	breq	.+2      	; 0x41e4 <__mulsf3+0x12>
    41e2:	a6 cf       	rjmp	.-180    	; 0x4130 <__fp_inf>
    41e4:	ab cf       	rjmp	.-170    	; 0x413c <__fp_nan>
    41e6:	11 24       	eor	r1, r1
    41e8:	ee cf       	rjmp	.-36     	; 0x41c6 <__fp_szero>

000041ea <__mulsf3x>:
    41ea:	ca df       	rcall	.-108    	; 0x4180 <__fp_split3>
    41ec:	a0 f3       	brcs	.-24     	; 0x41d6 <__mulsf3+0x4>

000041ee <__mulsf3_pse>:
    41ee:	95 9f       	mul	r25, r21
    41f0:	d1 f3       	breq	.-12     	; 0x41e6 <__mulsf3+0x14>
    41f2:	95 0f       	add	r25, r21
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	55 1f       	adc	r21, r21
    41f8:	62 9f       	mul	r22, r18
    41fa:	f0 01       	movw	r30, r0
    41fc:	72 9f       	mul	r23, r18
    41fe:	bb 27       	eor	r27, r27
    4200:	f0 0d       	add	r31, r0
    4202:	b1 1d       	adc	r27, r1
    4204:	63 9f       	mul	r22, r19
    4206:	aa 27       	eor	r26, r26
    4208:	f0 0d       	add	r31, r0
    420a:	b1 1d       	adc	r27, r1
    420c:	aa 1f       	adc	r26, r26
    420e:	64 9f       	mul	r22, r20
    4210:	66 27       	eor	r22, r22
    4212:	b0 0d       	add	r27, r0
    4214:	a1 1d       	adc	r26, r1
    4216:	66 1f       	adc	r22, r22
    4218:	82 9f       	mul	r24, r18
    421a:	22 27       	eor	r18, r18
    421c:	b0 0d       	add	r27, r0
    421e:	a1 1d       	adc	r26, r1
    4220:	62 1f       	adc	r22, r18
    4222:	73 9f       	mul	r23, r19
    4224:	b0 0d       	add	r27, r0
    4226:	a1 1d       	adc	r26, r1
    4228:	62 1f       	adc	r22, r18
    422a:	83 9f       	mul	r24, r19
    422c:	a0 0d       	add	r26, r0
    422e:	61 1d       	adc	r22, r1
    4230:	22 1f       	adc	r18, r18
    4232:	74 9f       	mul	r23, r20
    4234:	33 27       	eor	r19, r19
    4236:	a0 0d       	add	r26, r0
    4238:	61 1d       	adc	r22, r1
    423a:	23 1f       	adc	r18, r19
    423c:	84 9f       	mul	r24, r20
    423e:	60 0d       	add	r22, r0
    4240:	21 1d       	adc	r18, r1
    4242:	82 2f       	mov	r24, r18
    4244:	76 2f       	mov	r23, r22
    4246:	6a 2f       	mov	r22, r26
    4248:	11 24       	eor	r1, r1
    424a:	9f 57       	subi	r25, 0x7F	; 127
    424c:	50 40       	sbci	r21, 0x00	; 0
    424e:	8a f0       	brmi	.+34     	; 0x4272 <__mulsf3_pse+0x84>
    4250:	e1 f0       	breq	.+56     	; 0x428a <__mulsf3_pse+0x9c>
    4252:	88 23       	and	r24, r24
    4254:	4a f0       	brmi	.+18     	; 0x4268 <__mulsf3_pse+0x7a>
    4256:	ee 0f       	add	r30, r30
    4258:	ff 1f       	adc	r31, r31
    425a:	bb 1f       	adc	r27, r27
    425c:	66 1f       	adc	r22, r22
    425e:	77 1f       	adc	r23, r23
    4260:	88 1f       	adc	r24, r24
    4262:	91 50       	subi	r25, 0x01	; 1
    4264:	50 40       	sbci	r21, 0x00	; 0
    4266:	a9 f7       	brne	.-22     	; 0x4252 <__mulsf3_pse+0x64>
    4268:	9e 3f       	cpi	r25, 0xFE	; 254
    426a:	51 05       	cpc	r21, r1
    426c:	70 f0       	brcs	.+28     	; 0x428a <__mulsf3_pse+0x9c>
    426e:	60 cf       	rjmp	.-320    	; 0x4130 <__fp_inf>
    4270:	aa cf       	rjmp	.-172    	; 0x41c6 <__fp_szero>
    4272:	5f 3f       	cpi	r21, 0xFF	; 255
    4274:	ec f3       	brlt	.-6      	; 0x4270 <__mulsf3_pse+0x82>
    4276:	98 3e       	cpi	r25, 0xE8	; 232
    4278:	dc f3       	brlt	.-10     	; 0x4270 <__mulsf3_pse+0x82>
    427a:	86 95       	lsr	r24
    427c:	77 95       	ror	r23
    427e:	67 95       	ror	r22
    4280:	b7 95       	ror	r27
    4282:	f7 95       	ror	r31
    4284:	e7 95       	ror	r30
    4286:	9f 5f       	subi	r25, 0xFF	; 255
    4288:	c1 f7       	brne	.-16     	; 0x427a <__mulsf3_pse+0x8c>
    428a:	fe 2b       	or	r31, r30
    428c:	88 0f       	add	r24, r24
    428e:	91 1d       	adc	r25, r1
    4290:	96 95       	lsr	r25
    4292:	87 95       	ror	r24
    4294:	97 f9       	bld	r25, 7
    4296:	08 95       	ret

00004298 <strtod>:
    4298:	a0 e0       	ldi	r26, 0x00	; 0
    429a:	b0 e0       	ldi	r27, 0x00	; 0
    429c:	e2 e5       	ldi	r30, 0x52	; 82
    429e:	f1 e2       	ldi	r31, 0x21	; 33
    42a0:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <__prologue_saves__+0xc>
    42a4:	ec 01       	movw	r28, r24
    42a6:	5b 01       	movw	r10, r22
    42a8:	61 15       	cp	r22, r1
    42aa:	71 05       	cpc	r23, r1
    42ac:	19 f0       	breq	.+6      	; 0x42b4 <strtod+0x1c>
    42ae:	fb 01       	movw	r30, r22
    42b0:	91 83       	std	Z+1, r25	; 0x01
    42b2:	80 83       	st	Z, r24
    42b4:	f9 90       	ld	r15, Y+
    42b6:	8f 2d       	mov	r24, r15
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <isspace>
    42be:	89 2b       	or	r24, r25
    42c0:	c9 f7       	brne	.-14     	; 0x42b4 <strtod+0x1c>
    42c2:	fd e2       	ldi	r31, 0x2D	; 45
    42c4:	ff 16       	cp	r15, r31
    42c6:	21 f4       	brne	.+8      	; 0x42d0 <strtod+0x38>
    42c8:	f9 90       	ld	r15, Y+
    42ca:	ee 24       	eor	r14, r14
    42cc:	e3 94       	inc	r14
    42ce:	05 c0       	rjmp	.+10     	; 0x42da <strtod+0x42>
    42d0:	2b e2       	ldi	r18, 0x2B	; 43
    42d2:	f2 16       	cp	r15, r18
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <strtod+0x40>
    42d6:	f9 90       	ld	r15, Y+
    42d8:	ee 24       	eor	r14, r14
    42da:	8e 01       	movw	r16, r28
    42dc:	01 50       	subi	r16, 0x01	; 1
    42de:	10 40       	sbci	r17, 0x00	; 0
    42e0:	c8 01       	movw	r24, r16
    42e2:	62 e4       	ldi	r22, 0x42	; 66
    42e4:	76 e0       	ldi	r23, 0x06	; 6
    42e6:	43 e0       	ldi	r20, 0x03	; 3
    42e8:	50 e0       	ldi	r21, 0x00	; 0
    42ea:	0e 94 af 22 	call	0x455e	; 0x455e <strncasecmp_P>
    42ee:	89 2b       	or	r24, r25
    42f0:	01 f5       	brne	.+64     	; 0x4332 <strtod+0x9a>
    42f2:	8e 01       	movw	r16, r28
    42f4:	0e 5f       	subi	r16, 0xFE	; 254
    42f6:	1f 4f       	sbci	r17, 0xFF	; 255
    42f8:	c8 01       	movw	r24, r16
    42fa:	65 e4       	ldi	r22, 0x45	; 69
    42fc:	76 e0       	ldi	r23, 0x06	; 6
    42fe:	45 e0       	ldi	r20, 0x05	; 5
    4300:	50 e0       	ldi	r21, 0x00	; 0
    4302:	0e 94 af 22 	call	0x455e	; 0x455e <strncasecmp_P>
    4306:	89 2b       	or	r24, r25
    4308:	19 f4       	brne	.+6      	; 0x4310 <strtod+0x78>
    430a:	8e 01       	movw	r16, r28
    430c:	09 5f       	subi	r16, 0xF9	; 249
    430e:	1f 4f       	sbci	r17, 0xFF	; 255
    4310:	a1 14       	cp	r10, r1
    4312:	b1 04       	cpc	r11, r1
    4314:	19 f0       	breq	.+6      	; 0x431c <strtod+0x84>
    4316:	f5 01       	movw	r30, r10
    4318:	11 83       	std	Z+1, r17	; 0x01
    431a:	00 83       	st	Z, r16
    431c:	e0 fc       	sbrc	r14, 0
    431e:	04 c0       	rjmp	.+8      	; 0x4328 <strtod+0x90>
    4320:	70 e0       	ldi	r23, 0x00	; 0
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	80 e8       	ldi	r24, 0x80	; 128
    4326:	14 c0       	rjmp	.+40     	; 0x4350 <strtod+0xb8>
    4328:	70 e0       	ldi	r23, 0x00	; 0
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	80 e8       	ldi	r24, 0x80	; 128
    432e:	6f ef       	ldi	r22, 0xFF	; 255
    4330:	08 c1       	rjmp	.+528    	; 0x4542 <strtod+0x2aa>
    4332:	c8 01       	movw	r24, r16
    4334:	6a e4       	ldi	r22, 0x4A	; 74
    4336:	76 e0       	ldi	r23, 0x06	; 6
    4338:	43 e0       	ldi	r20, 0x03	; 3
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	0e 94 af 22 	call	0x455e	; 0x455e <strncasecmp_P>
    4340:	89 2b       	or	r24, r25
    4342:	69 f4       	brne	.+26     	; 0x435e <strtod+0xc6>
    4344:	a1 14       	cp	r10, r1
    4346:	b1 04       	cpc	r11, r1
    4348:	29 f4       	brne	.+10     	; 0x4354 <strtod+0xbc>
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	80 ec       	ldi	r24, 0xC0	; 192
    4350:	6f e7       	ldi	r22, 0x7F	; 127
    4352:	f7 c0       	rjmp	.+494    	; 0x4542 <strtod+0x2aa>
    4354:	22 96       	adiw	r28, 0x02	; 2
    4356:	f5 01       	movw	r30, r10
    4358:	d1 83       	std	Z+1, r29	; 0x01
    435a:	c0 83       	st	Z, r28
    435c:	f6 cf       	rjmp	.-20     	; 0x434a <strtod+0xb2>
    435e:	88 24       	eor	r8, r8
    4360:	99 24       	eor	r9, r9
    4362:	40 e0       	ldi	r20, 0x00	; 0
    4364:	50 e0       	ldi	r21, 0x00	; 0
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	70 e0       	ldi	r23, 0x00	; 0
    436a:	ef 2d       	mov	r30, r15
    436c:	e0 53       	subi	r30, 0x30	; 48
    436e:	ea 30       	cpi	r30, 0x0A	; 10
    4370:	a0 f5       	brcc	.+104    	; 0x43da <strtod+0x142>
    4372:	f2 e0       	ldi	r31, 0x02	; 2
    4374:	ef 2a       	or	r14, r31
    4376:	8e 2d       	mov	r24, r14
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	9c 01       	movw	r18, r24
    437c:	28 70       	andi	r18, 0x08	; 8
    437e:	30 70       	andi	r19, 0x00	; 0
    4380:	e2 fe       	sbrs	r14, 2
    4382:	06 c0       	rjmp	.+12     	; 0x4390 <strtod+0xf8>
    4384:	23 2b       	or	r18, r19
    4386:	79 f5       	brne	.+94     	; 0x43e6 <strtod+0x14e>
    4388:	08 94       	sec
    438a:	81 1c       	adc	r8, r1
    438c:	91 1c       	adc	r9, r1
    438e:	2b c0       	rjmp	.+86     	; 0x43e6 <strtod+0x14e>
    4390:	23 2b       	or	r18, r19
    4392:	19 f0       	breq	.+6      	; 0x439a <strtod+0x102>
    4394:	08 94       	sec
    4396:	81 08       	sbc	r8, r1
    4398:	91 08       	sbc	r9, r1
    439a:	db 01       	movw	r26, r22
    439c:	ca 01       	movw	r24, r20
    439e:	12 e0       	ldi	r17, 0x02	; 2
    43a0:	88 0f       	add	r24, r24
    43a2:	99 1f       	adc	r25, r25
    43a4:	aa 1f       	adc	r26, r26
    43a6:	bb 1f       	adc	r27, r27
    43a8:	1a 95       	dec	r17
    43aa:	d1 f7       	brne	.-12     	; 0x43a0 <strtod+0x108>
    43ac:	48 0f       	add	r20, r24
    43ae:	59 1f       	adc	r21, r25
    43b0:	6a 1f       	adc	r22, r26
    43b2:	7b 1f       	adc	r23, r27
    43b4:	44 0f       	add	r20, r20
    43b6:	55 1f       	adc	r21, r21
    43b8:	66 1f       	adc	r22, r22
    43ba:	77 1f       	adc	r23, r23
    43bc:	4e 0f       	add	r20, r30
    43be:	51 1d       	adc	r21, r1
    43c0:	61 1d       	adc	r22, r1
    43c2:	71 1d       	adc	r23, r1
    43c4:	48 39       	cpi	r20, 0x98	; 152
    43c6:	29 e9       	ldi	r18, 0x99	; 153
    43c8:	52 07       	cpc	r21, r18
    43ca:	29 e9       	ldi	r18, 0x99	; 153
    43cc:	62 07       	cpc	r22, r18
    43ce:	29 e1       	ldi	r18, 0x19	; 25
    43d0:	72 07       	cpc	r23, r18
    43d2:	48 f0       	brcs	.+18     	; 0x43e6 <strtod+0x14e>
    43d4:	84 e0       	ldi	r24, 0x04	; 4
    43d6:	e8 2a       	or	r14, r24
    43d8:	06 c0       	rjmp	.+12     	; 0x43e6 <strtod+0x14e>
    43da:	ee 3f       	cpi	r30, 0xFE	; 254
    43dc:	31 f4       	brne	.+12     	; 0x43ea <strtod+0x152>
    43de:	e3 fc       	sbrc	r14, 3
    43e0:	39 c0       	rjmp	.+114    	; 0x4454 <strtod+0x1bc>
    43e2:	98 e0       	ldi	r25, 0x08	; 8
    43e4:	e9 2a       	or	r14, r25
    43e6:	f9 90       	ld	r15, Y+
    43e8:	c0 cf       	rjmp	.-128    	; 0x436a <strtod+0xd2>
    43ea:	e5 33       	cpi	r30, 0x35	; 53
    43ec:	11 f0       	breq	.+4      	; 0x43f2 <strtod+0x15a>
    43ee:	e5 31       	cpi	r30, 0x15	; 21
    43f0:	89 f5       	brne	.+98     	; 0x4454 <strtod+0x1bc>
    43f2:	29 91       	ld	r18, Y+
    43f4:	2d 32       	cpi	r18, 0x2D	; 45
    43f6:	19 f4       	brne	.+6      	; 0x43fe <strtod+0x166>
    43f8:	e0 e1       	ldi	r30, 0x10	; 16
    43fa:	ee 2a       	or	r14, r30
    43fc:	05 c0       	rjmp	.+10     	; 0x4408 <strtod+0x170>
    43fe:	2b 32       	cpi	r18, 0x2B	; 43
    4400:	19 f0       	breq	.+6      	; 0x4408 <strtod+0x170>
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	03 c0       	rjmp	.+6      	; 0x440e <strtod+0x176>
    4408:	29 91       	ld	r18, Y+
    440a:	82 e0       	ldi	r24, 0x02	; 2
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	e2 2f       	mov	r30, r18
    4410:	e0 53       	subi	r30, 0x30	; 48
    4412:	ea 30       	cpi	r30, 0x0A	; 10
    4414:	18 f0       	brcs	.+6      	; 0x441c <strtod+0x184>
    4416:	c8 1b       	sub	r28, r24
    4418:	d9 0b       	sbc	r29, r25
    441a:	1c c0       	rjmp	.+56     	; 0x4454 <strtod+0x1bc>
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	fc e0       	ldi	r31, 0x0C	; 12
    4422:	20 38       	cpi	r18, 0x80	; 128
    4424:	3f 07       	cpc	r19, r31
    4426:	5c f4       	brge	.+22     	; 0x443e <strtod+0x1a6>
    4428:	c9 01       	movw	r24, r18
    442a:	88 0f       	add	r24, r24
    442c:	99 1f       	adc	r25, r25
    442e:	88 0f       	add	r24, r24
    4430:	99 1f       	adc	r25, r25
    4432:	28 0f       	add	r18, r24
    4434:	39 1f       	adc	r19, r25
    4436:	22 0f       	add	r18, r18
    4438:	33 1f       	adc	r19, r19
    443a:	2e 0f       	add	r18, r30
    443c:	31 1d       	adc	r19, r1
    443e:	e9 91       	ld	r30, Y+
    4440:	e0 53       	subi	r30, 0x30	; 48
    4442:	ea 30       	cpi	r30, 0x0A	; 10
    4444:	68 f3       	brcs	.-38     	; 0x4420 <strtod+0x188>
    4446:	e4 fe       	sbrs	r14, 4
    4448:	03 c0       	rjmp	.+6      	; 0x4450 <strtod+0x1b8>
    444a:	30 95       	com	r19
    444c:	21 95       	neg	r18
    444e:	3f 4f       	sbci	r19, 0xFF	; 255
    4450:	82 0e       	add	r8, r18
    4452:	93 1e       	adc	r9, r19
    4454:	ce 2c       	mov	r12, r14
    4456:	dd 24       	eor	r13, r13
    4458:	e1 fe       	sbrs	r14, 1
    445a:	07 c0       	rjmp	.+14     	; 0x446a <strtod+0x1d2>
    445c:	a1 14       	cp	r10, r1
    445e:	b1 04       	cpc	r11, r1
    4460:	21 f0       	breq	.+8      	; 0x446a <strtod+0x1d2>
    4462:	21 97       	sbiw	r28, 0x01	; 1
    4464:	f5 01       	movw	r30, r10
    4466:	d1 83       	std	Z+1, r29	; 0x01
    4468:	c0 83       	st	Z, r28
    446a:	cb 01       	movw	r24, r22
    446c:	ba 01       	movw	r22, r20
    446e:	0e 94 37 20 	call	0x406e	; 0x406e <__floatunsisf>
    4472:	7b 01       	movw	r14, r22
    4474:	8c 01       	movw	r16, r24
    4476:	f3 e0       	ldi	r31, 0x03	; 3
    4478:	cf 22       	and	r12, r31
    447a:	dd 24       	eor	r13, r13
    447c:	23 e0       	ldi	r18, 0x03	; 3
    447e:	c2 16       	cp	r12, r18
    4480:	d1 04       	cpc	r13, r1
    4482:	21 f4       	brne	.+8      	; 0x448c <strtod+0x1f4>
    4484:	17 fb       	bst	r17, 7
    4486:	10 95       	com	r17
    4488:	17 f9       	bld	r17, 7
    448a:	10 95       	com	r17
    448c:	57 01       	movw	r10, r14
    448e:	68 01       	movw	r12, r16
    4490:	c8 01       	movw	r24, r16
    4492:	b7 01       	movw	r22, r14
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	40 e0       	ldi	r20, 0x00	; 0
    449a:	50 e0       	ldi	r21, 0x00	; 0
    449c:	0e 94 02 20 	call	0x4004	; 0x4004 <__cmpsf2>
    44a0:	88 23       	and	r24, r24
    44a2:	09 f4       	brne	.+2      	; 0x44a6 <strtod+0x20e>
    44a4:	4a c0       	rjmp	.+148    	; 0x453a <strtod+0x2a2>
    44a6:	97 fe       	sbrs	r9, 7
    44a8:	0d c0       	rjmp	.+26     	; 0x44c4 <strtod+0x22c>
    44aa:	21 e6       	ldi	r18, 0x61	; 97
    44ac:	e2 2e       	mov	r14, r18
    44ae:	26 e0       	ldi	r18, 0x06	; 6
    44b0:	f2 2e       	mov	r15, r18
    44b2:	90 94       	com	r9
    44b4:	81 94       	neg	r8
    44b6:	91 08       	sbc	r9, r1
    44b8:	93 94       	inc	r9
    44ba:	c0 e2       	ldi	r28, 0x20	; 32
    44bc:	d0 e0       	ldi	r29, 0x00	; 0
    44be:	00 e0       	ldi	r16, 0x00	; 0
    44c0:	10 e0       	ldi	r17, 0x00	; 0
    44c2:	12 c0       	rjmp	.+36     	; 0x44e8 <strtod+0x250>
    44c4:	99 e7       	ldi	r25, 0x79	; 121
    44c6:	e9 2e       	mov	r14, r25
    44c8:	96 e0       	ldi	r25, 0x06	; 6
    44ca:	f9 2e       	mov	r15, r25
    44cc:	f6 cf       	rjmp	.-20     	; 0x44ba <strtod+0x222>
    44ce:	f7 01       	movw	r30, r14
    44d0:	25 91       	lpm	r18, Z+
    44d2:	35 91       	lpm	r19, Z+
    44d4:	45 91       	lpm	r20, Z+
    44d6:	54 91       	lpm	r21, Z+
    44d8:	c6 01       	movw	r24, r12
    44da:	b5 01       	movw	r22, r10
    44dc:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__mulsf3>
    44e0:	5b 01       	movw	r10, r22
    44e2:	6c 01       	movw	r12, r24
    44e4:	8c 1a       	sub	r8, r28
    44e6:	9d 0a       	sbc	r9, r29
    44e8:	8c 16       	cp	r8, r28
    44ea:	9d 06       	cpc	r9, r29
    44ec:	84 f7       	brge	.-32     	; 0x44ce <strtod+0x236>
    44ee:	d5 95       	asr	r29
    44f0:	c7 95       	ror	r28
    44f2:	0f 5f       	subi	r16, 0xFF	; 255
    44f4:	1f 4f       	sbci	r17, 0xFF	; 255
    44f6:	06 30       	cpi	r16, 0x06	; 6
    44f8:	11 05       	cpc	r17, r1
    44fa:	29 f0       	breq	.+10     	; 0x4506 <strtod+0x26e>
    44fc:	8c ef       	ldi	r24, 0xFC	; 252
    44fe:	9f ef       	ldi	r25, 0xFF	; 255
    4500:	e8 0e       	add	r14, r24
    4502:	f9 1e       	adc	r15, r25
    4504:	f1 cf       	rjmp	.-30     	; 0x44e8 <strtod+0x250>
    4506:	c5 01       	movw	r24, r10
    4508:	d6 01       	movw	r26, r12
    450a:	7c 01       	movw	r14, r24
    450c:	8d 01       	movw	r16, r26
    450e:	8c 2d       	mov	r24, r12
    4510:	88 0f       	add	r24, r24
    4512:	8d 2d       	mov	r24, r13
    4514:	88 1f       	adc	r24, r24
    4516:	8f 3f       	cpi	r24, 0xFF	; 255
    4518:	51 f0       	breq	.+20     	; 0x452e <strtod+0x296>
    451a:	c6 01       	movw	r24, r12
    451c:	b5 01       	movw	r22, r10
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	40 e0       	ldi	r20, 0x00	; 0
    4524:	50 e0       	ldi	r21, 0x00	; 0
    4526:	0e 94 02 20 	call	0x4004	; 0x4004 <__cmpsf2>
    452a:	88 23       	and	r24, r24
    452c:	31 f4       	brne	.+12     	; 0x453a <strtod+0x2a2>
    452e:	82 e2       	ldi	r24, 0x22	; 34
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	90 93 6a 04 	sts	0x046A, r25
    4536:	80 93 69 04 	sts	0x0469, r24
    453a:	7e 2d       	mov	r23, r14
    453c:	9f 2d       	mov	r25, r15
    453e:	80 2f       	mov	r24, r16
    4540:	61 2f       	mov	r22, r17
    4542:	27 2f       	mov	r18, r23
    4544:	39 2f       	mov	r19, r25
    4546:	48 2f       	mov	r20, r24
    4548:	56 2f       	mov	r21, r22
    454a:	b9 01       	movw	r22, r18
    454c:	ca 01       	movw	r24, r20
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
    4552:	ec e0       	ldi	r30, 0x0C	; 12
    4554:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__epilogue_restores__+0xc>

00004558 <__ctype_isfalse>:
    4558:	99 27       	eor	r25, r25
    455a:	88 27       	eor	r24, r24

0000455c <__ctype_istrue>:
    455c:	08 95       	ret

0000455e <strncasecmp_P>:
    455e:	fb 01       	movw	r30, r22
    4560:	dc 01       	movw	r26, r24
    4562:	41 50       	subi	r20, 0x01	; 1
    4564:	50 40       	sbci	r21, 0x00	; 0
    4566:	88 f0       	brcs	.+34     	; 0x458a <strncasecmp_P+0x2c>
    4568:	8d 91       	ld	r24, X+
    456a:	81 34       	cpi	r24, 0x41	; 65
    456c:	1c f0       	brlt	.+6      	; 0x4574 <strncasecmp_P+0x16>
    456e:	8b 35       	cpi	r24, 0x5B	; 91
    4570:	0c f4       	brge	.+2      	; 0x4574 <strncasecmp_P+0x16>
    4572:	80 5e       	subi	r24, 0xE0	; 224
    4574:	65 91       	lpm	r22, Z+
    4576:	61 34       	cpi	r22, 0x41	; 65
    4578:	1c f0       	brlt	.+6      	; 0x4580 <strncasecmp_P+0x22>
    457a:	6b 35       	cpi	r22, 0x5B	; 91
    457c:	0c f4       	brge	.+2      	; 0x4580 <strncasecmp_P+0x22>
    457e:	60 5e       	subi	r22, 0xE0	; 224
    4580:	86 1b       	sub	r24, r22
    4582:	61 11       	cpse	r22, r1
    4584:	71 f3       	breq	.-36     	; 0x4562 <strncasecmp_P+0x4>
    4586:	99 0b       	sbc	r25, r25
    4588:	08 95       	ret
    458a:	88 1b       	sub	r24, r24
    458c:	fc cf       	rjmp	.-8      	; 0x4586 <strncasecmp_P+0x28>

0000458e <__mulsi3>:
    458e:	62 9f       	mul	r22, r18
    4590:	d0 01       	movw	r26, r0
    4592:	73 9f       	mul	r23, r19
    4594:	f0 01       	movw	r30, r0
    4596:	82 9f       	mul	r24, r18
    4598:	e0 0d       	add	r30, r0
    459a:	f1 1d       	adc	r31, r1
    459c:	64 9f       	mul	r22, r20
    459e:	e0 0d       	add	r30, r0
    45a0:	f1 1d       	adc	r31, r1
    45a2:	92 9f       	mul	r25, r18
    45a4:	f0 0d       	add	r31, r0
    45a6:	83 9f       	mul	r24, r19
    45a8:	f0 0d       	add	r31, r0
    45aa:	74 9f       	mul	r23, r20
    45ac:	f0 0d       	add	r31, r0
    45ae:	65 9f       	mul	r22, r21
    45b0:	f0 0d       	add	r31, r0
    45b2:	99 27       	eor	r25, r25
    45b4:	72 9f       	mul	r23, r18
    45b6:	b0 0d       	add	r27, r0
    45b8:	e1 1d       	adc	r30, r1
    45ba:	f9 1f       	adc	r31, r25
    45bc:	63 9f       	mul	r22, r19
    45be:	b0 0d       	add	r27, r0
    45c0:	e1 1d       	adc	r30, r1
    45c2:	f9 1f       	adc	r31, r25
    45c4:	bd 01       	movw	r22, r26
    45c6:	cf 01       	movw	r24, r30
    45c8:	11 24       	eor	r1, r1
    45ca:	08 95       	ret

000045cc <__udivmodhi4>:
    45cc:	aa 1b       	sub	r26, r26
    45ce:	bb 1b       	sub	r27, r27
    45d0:	51 e1       	ldi	r21, 0x11	; 17
    45d2:	07 c0       	rjmp	.+14     	; 0x45e2 <__udivmodhi4_ep>

000045d4 <__udivmodhi4_loop>:
    45d4:	aa 1f       	adc	r26, r26
    45d6:	bb 1f       	adc	r27, r27
    45d8:	a6 17       	cp	r26, r22
    45da:	b7 07       	cpc	r27, r23
    45dc:	10 f0       	brcs	.+4      	; 0x45e2 <__udivmodhi4_ep>
    45de:	a6 1b       	sub	r26, r22
    45e0:	b7 0b       	sbc	r27, r23

000045e2 <__udivmodhi4_ep>:
    45e2:	88 1f       	adc	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	5a 95       	dec	r21
    45e8:	a9 f7       	brne	.-22     	; 0x45d4 <__udivmodhi4_loop>
    45ea:	80 95       	com	r24
    45ec:	90 95       	com	r25
    45ee:	bc 01       	movw	r22, r24
    45f0:	cd 01       	movw	r24, r26
    45f2:	08 95       	ret

000045f4 <__divmodhi4>:
    45f4:	97 fb       	bst	r25, 7
    45f6:	09 2e       	mov	r0, r25
    45f8:	07 26       	eor	r0, r23
    45fa:	0a d0       	rcall	.+20     	; 0x4610 <__divmodhi4_neg1>
    45fc:	77 fd       	sbrc	r23, 7
    45fe:	04 d0       	rcall	.+8      	; 0x4608 <__divmodhi4_neg2>
    4600:	e5 df       	rcall	.-54     	; 0x45cc <__udivmodhi4>
    4602:	06 d0       	rcall	.+12     	; 0x4610 <__divmodhi4_neg1>
    4604:	00 20       	and	r0, r0
    4606:	1a f4       	brpl	.+6      	; 0x460e <__divmodhi4_exit>

00004608 <__divmodhi4_neg2>:
    4608:	70 95       	com	r23
    460a:	61 95       	neg	r22
    460c:	7f 4f       	sbci	r23, 0xFF	; 255

0000460e <__divmodhi4_exit>:
    460e:	08 95       	ret

00004610 <__divmodhi4_neg1>:
    4610:	f6 f7       	brtc	.-4      	; 0x460e <__divmodhi4_exit>
    4612:	90 95       	com	r25
    4614:	81 95       	neg	r24
    4616:	9f 4f       	sbci	r25, 0xFF	; 255
    4618:	08 95       	ret

0000461a <__udivmodsi4>:
    461a:	a1 e2       	ldi	r26, 0x21	; 33
    461c:	1a 2e       	mov	r1, r26
    461e:	aa 1b       	sub	r26, r26
    4620:	bb 1b       	sub	r27, r27
    4622:	fd 01       	movw	r30, r26
    4624:	0d c0       	rjmp	.+26     	; 0x4640 <__udivmodsi4_ep>

00004626 <__udivmodsi4_loop>:
    4626:	aa 1f       	adc	r26, r26
    4628:	bb 1f       	adc	r27, r27
    462a:	ee 1f       	adc	r30, r30
    462c:	ff 1f       	adc	r31, r31
    462e:	a2 17       	cp	r26, r18
    4630:	b3 07       	cpc	r27, r19
    4632:	e4 07       	cpc	r30, r20
    4634:	f5 07       	cpc	r31, r21
    4636:	20 f0       	brcs	.+8      	; 0x4640 <__udivmodsi4_ep>
    4638:	a2 1b       	sub	r26, r18
    463a:	b3 0b       	sbc	r27, r19
    463c:	e4 0b       	sbc	r30, r20
    463e:	f5 0b       	sbc	r31, r21

00004640 <__udivmodsi4_ep>:
    4640:	66 1f       	adc	r22, r22
    4642:	77 1f       	adc	r23, r23
    4644:	88 1f       	adc	r24, r24
    4646:	99 1f       	adc	r25, r25
    4648:	1a 94       	dec	r1
    464a:	69 f7       	brne	.-38     	; 0x4626 <__udivmodsi4_loop>
    464c:	60 95       	com	r22
    464e:	70 95       	com	r23
    4650:	80 95       	com	r24
    4652:	90 95       	com	r25
    4654:	9b 01       	movw	r18, r22
    4656:	ac 01       	movw	r20, r24
    4658:	bd 01       	movw	r22, r26
    465a:	cf 01       	movw	r24, r30
    465c:	08 95       	ret

0000465e <__divmodsi4>:
    465e:	97 fb       	bst	r25, 7
    4660:	09 2e       	mov	r0, r25
    4662:	05 26       	eor	r0, r21
    4664:	0e d0       	rcall	.+28     	; 0x4682 <__divmodsi4_neg1>
    4666:	57 fd       	sbrc	r21, 7
    4668:	04 d0       	rcall	.+8      	; 0x4672 <__divmodsi4_neg2>
    466a:	d7 df       	rcall	.-82     	; 0x461a <__udivmodsi4>
    466c:	0a d0       	rcall	.+20     	; 0x4682 <__divmodsi4_neg1>
    466e:	00 1c       	adc	r0, r0
    4670:	38 f4       	brcc	.+14     	; 0x4680 <__divmodsi4_exit>

00004672 <__divmodsi4_neg2>:
    4672:	50 95       	com	r21
    4674:	40 95       	com	r20
    4676:	30 95       	com	r19
    4678:	21 95       	neg	r18
    467a:	3f 4f       	sbci	r19, 0xFF	; 255
    467c:	4f 4f       	sbci	r20, 0xFF	; 255
    467e:	5f 4f       	sbci	r21, 0xFF	; 255

00004680 <__divmodsi4_exit>:
    4680:	08 95       	ret

00004682 <__divmodsi4_neg1>:
    4682:	f6 f7       	brtc	.-4      	; 0x4680 <__divmodsi4_exit>
    4684:	90 95       	com	r25
    4686:	80 95       	com	r24
    4688:	70 95       	com	r23
    468a:	61 95       	neg	r22
    468c:	7f 4f       	sbci	r23, 0xFF	; 255
    468e:	8f 4f       	sbci	r24, 0xFF	; 255
    4690:	9f 4f       	sbci	r25, 0xFF	; 255
    4692:	08 95       	ret

00004694 <__prologue_saves__>:
    4694:	2f 92       	push	r2
    4696:	3f 92       	push	r3
    4698:	4f 92       	push	r4
    469a:	5f 92       	push	r5
    469c:	6f 92       	push	r6
    469e:	7f 92       	push	r7
    46a0:	8f 92       	push	r8
    46a2:	9f 92       	push	r9
    46a4:	af 92       	push	r10
    46a6:	bf 92       	push	r11
    46a8:	cf 92       	push	r12
    46aa:	df 92       	push	r13
    46ac:	ef 92       	push	r14
    46ae:	ff 92       	push	r15
    46b0:	0f 93       	push	r16
    46b2:	1f 93       	push	r17
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	cd b7       	in	r28, 0x3d	; 61
    46ba:	de b7       	in	r29, 0x3e	; 62
    46bc:	ca 1b       	sub	r28, r26
    46be:	db 0b       	sbc	r29, r27
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	f8 94       	cli
    46c4:	de bf       	out	0x3e, r29	; 62
    46c6:	0f be       	out	0x3f, r0	; 63
    46c8:	cd bf       	out	0x3d, r28	; 61
    46ca:	09 94       	ijmp

000046cc <__epilogue_restores__>:
    46cc:	2a 88       	ldd	r2, Y+18	; 0x12
    46ce:	39 88       	ldd	r3, Y+17	; 0x11
    46d0:	48 88       	ldd	r4, Y+16	; 0x10
    46d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    46d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    46d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    46d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    46da:	9b 84       	ldd	r9, Y+11	; 0x0b
    46dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    46de:	b9 84       	ldd	r11, Y+9	; 0x09
    46e0:	c8 84       	ldd	r12, Y+8	; 0x08
    46e2:	df 80       	ldd	r13, Y+7	; 0x07
    46e4:	ee 80       	ldd	r14, Y+6	; 0x06
    46e6:	fd 80       	ldd	r15, Y+5	; 0x05
    46e8:	0c 81       	ldd	r16, Y+4	; 0x04
    46ea:	1b 81       	ldd	r17, Y+3	; 0x03
    46ec:	aa 81       	ldd	r26, Y+2	; 0x02
    46ee:	b9 81       	ldd	r27, Y+1	; 0x01
    46f0:	ce 0f       	add	r28, r30
    46f2:	d1 1d       	adc	r29, r1
    46f4:	0f b6       	in	r0, 0x3f	; 63
    46f6:	f8 94       	cli
    46f8:	de bf       	out	0x3e, r29	; 62
    46fa:	0f be       	out	0x3f, r0	; 63
    46fc:	cd bf       	out	0x3d, r28	; 61
    46fe:	ed 01       	movw	r28, r26
    4700:	08 95       	ret

00004702 <__tablejump2__>:
    4702:	ee 0f       	add	r30, r30
    4704:	ff 1f       	adc	r31, r31

00004706 <__tablejump__>:
    4706:	05 90       	lpm	r0, Z+
    4708:	f4 91       	lpm	r31, Z+
    470a:	e0 2d       	mov	r30, r0
    470c:	09 94       	ijmp

0000470e <_exit>:
    470e:	f8 94       	cli

00004710 <__stop_program>:
    4710:	ff cf       	rjmp	.-2      	; 0x4710 <__stop_program>
