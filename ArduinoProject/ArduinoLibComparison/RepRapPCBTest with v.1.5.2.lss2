...
AVR Memory Usage
----------------
Device: atmega328p

Program:   18322 bytes (55.9% Full)
(.text + .data + .bootloader)

Data:        874 bytes (42.7% Full)
(.data + .bss + .noinit)


...
...
   text	   data	    bss	    dec	    hex	filename
  18252	     70	    804	  19126	   4ab6	ArduinoProject.elf
...
...

ArduinoProject.elf:     file format elf32-avr

Contents of section .data:
 800100 20000000 00004310 75120000 00005a0f   .....C.u.....Z.
 800110 00000000 420f450f 00000000 300f0000  ....B.E.....0...
 800120 0000a515 db15080a 02060405 01090a06  ................
 800130 05090802 04010000 0000ac1b 3c1c511b  ............<.Q.
 800140 7d1b621b 9c1b                        }.b...          
...
...
Print final symbols sizes (b - .bss; d - .data; t - .text; v/w - weak)
...
...
00000001 B modeState
00000001 B repRapMode
00000001 b timer0_fract
00000002 B errno
00000002 B selectedAxis
00000002 B selectedAxisName
00000004 b intFunc
00000004 B maxStep
00000004 B timer0_millis
00000004 B timer0_overflow_count
00000004 B timeStamp
00000004 B timeToMoveToEndMillis
00000005 b diButtonPin
00000005 b diRotorPinA
00000005 b diRotorPinB
00000006 b diLedPin
00000007 b reader
00000019 b led
00000025 b btn
00000034 B Serial
00000066 B rx_buffer
00000066 B tx_buffer
00000072 b rotor
00000100 b readerBuffer
00000361 b pcb
00000004 d motorStatesMosfetHBridge_FullPower
00000004 d motorStatesMosfetHBridge_HalfPower
00000008 d motorStatesMosfetHBridge_DoublePrecision
00000002 T BLINK_OFF
00000003 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000003 t pgm_Up
00000003 t pstr_inf
00000003 t pstr_nan
00000004 T BLINK_ON
00000004 T __mulsf3
00000005 t pgm_Down
00000005 t pstr_inity
00000006 T BLINK3
00000006 T BLINK_FAST
00000006 T BLINK_MEDIUM
00000006 T BLINK_SLOW
00000006 T DigitalOutputArduinoPin::getState()
00000006 T exit
00000006 T __fp_nan
00000006 T Print::print(char const*)
00000007 t pgmAxisNameX
00000007 t pgmAxisNameY
00000007 t pgmAxisNameZ
00000007 t showError(char const*)::__c
00000008 T atof
00000008 T __cmpsf2
00000008 T StepperMotorMosfetHBridge::stop()
00000010 T BLINK1
00000010 t doStepTicking()::__c
00000010 T __fixsfsi
00000010 T port_to_input_PGM
00000010 T port_to_mode_PGM
00000010 T port_to_output_PGM
00000010 t states
00000010 T StepperMotorAxis::initializePosition()
00000010 t UpdateRotor()
00000011 t StepperMotorAxis::debugPrint()::__c
00000012 T __fp_inf
00000012 t RepRapPCBTest::setup()::__c
00000013 t doGotoStep()::__c
00000013 t doStepTicking()::__c
00000014 T BLINK2
00000014 T __fp_pscA
00000014 T __fp_pscB
00000014 T __fp_zero
00000014 T main
00000016 T DigitalOutputShiftRegister_74HC595_Pin::setState(bool)
00000016 t doMoveForthAndBackAtSpeed()::__c
00000016 T Print::print(char)
00000016 t RepRapPCBTest::loop()::__c
00000016 T StepperMotorAxis::stop()
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000020 T digital_pin_to_bit_mask_PGM
00000020 T digital_pin_to_port_PGM
00000020 T digital_pin_to_timer_PGM
00000021 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000022 T Print::pgm_println(char const*)
00000024 t pwr_m10
00000024 t pwr_p10
00000025 t doAlterDelayBetweenSteps()::__c
00000025 t RepRapPCBTest::setup()::__c
00000027 t StepperMotorAxis::debugPrint()::__c
00000028 T BlinkingLed::initialize(DigitalOutputPin*)
00000028 T millis
00000028 T SerialReader::readln()
00000030 T Print::print(unsigned long, int)
00000032 T DigitalInputShiftRegister::createPinHandler(unsigned char)
00000032 T DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)
00000032 T HardwareSerial::flush()
00000034 T __fp_round
00000034 T HardwareSerial::available()
00000036 T DigitalInputArduinoPin::getState()
00000038 T Print::print(int, int)
00000038 T Print::println(char const*)
00000040 T Print::println(long, int)
00000040 T Print::println(unsigned long, int)
00000042 T DigitalOutputArduinoPin::setState(bool)
00000042 T StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)
00000048 T Print::println(char)
00000048 T StepperMotorAxis::update()
00000048 t stop()
00000048 T strncasecmp_P
00000050 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000050 T Print::pgm_print(char const*)
00000050 T RotaryEncoderState::setMinMax(long, long)
00000052 T AdvButton::reset()
00000052 T StepperMotorControlWithButtons::rotate(bool)
00000054 T HardwareSerial::peek()
00000056 T AdvButton::initialize(DigitalInputPin*, bool, unsigned int)
00000056 T Button::reset()
00000058 T Print::println(unsigned int, int)
00000058 t showError(char const*)
00000060 T atoi
00000060 T SerialReader::initialize(long, int, char*)
00000062 T Button::initialize(DigitalInputPin*, unsigned int)
00000062 T HardwareSerial::read()
00000062 T Print::println(int, int)
00000064 T DigitalInputShiftRegisterPin::getState()
00000064 T Print::println()
00000064 T StepperMotorAxis::getAbsolutePositionMicroM()
00000068 T __fp_split3
00000068 T StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)
00000068 T TicksPerSecond::getIntTPS_unsafe()
00000070 T attachInterrupt
00000070 T DigitalOutputShiftRegister_74HC595_Pin::getState()
00000070 T StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)
00000070 T TicksPerSecond::tick()
00000072 T __fp_cmp
00000072 T StepperMotorAxis::doInitializePosition()
00000074 T BlinkingLed::playBlink(unsigned int const*, short)
00000076 T micros
00000078 T atol
00000084 T Print::write(unsigned char const*, unsigned int)
00000086 T StepperMotorControlWithButtons::gotoStep(long)
00000088 T __fixunssfsi
00000088 T StepperMotorAxis::doDetermineAvailableSteps()
00000088 T StepperMotorAxis::moveToPositionMicroMFast(long)
00000090 T __vector_1
00000090 T __vector_2
00000092 T DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)
00000094 T RepRapPCB::update()
00000094 T StepperMotorAxis::moveToPositionMicroM(long, unsigned long)
00000094 T __vector_18
00000096 T DigitalOutputArduinoPin::initialize(unsigned char, bool)
00000096 T __vector_19
00000106 T RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)
00000108 T RepRapPCB::doInitializePositionXY()
00000108 T StepperMotorMosfetHBridge::step(bool)
00000114 T StateLed::setState(short)
00000116 t doAlterDelayBetweenSteps()
00000116 T HardwareSerial::write(unsigned char)
00000116 T TicksPerSecond::initialize(unsigned int)
00000118 T init
00000120 t doGotoStep()
00000122 T __floatunsisf
00000126 T pinMode
00000128 T DigitalInputArduinoPin::initialize(unsigned char, bool)
00000128 T Print::print(long, int)
00000138 T DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)
00000140 T SerialReader::update()
00000144 T __vector_16
00000152 T StepperMotorMosfetHBridge::setState(unsigned char)
00000154 T DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)
00000160 t global constructors keyed to repRapMode
00000164 T BlinkingLed::update()
00000168 T StepperMotorControlWithButtons::moveTo(long, unsigned long)
00000172 t global constructors keyed to rx_buffer
00000176 T BlinkingLed::getNextDelay()
00000190 T Button::update()
00000194 T __mulsf3x
00000200 T Print::printNumber(unsigned long, unsigned char)
00000216 T TicksPerSecond::update()
00000226 T RotaryEncoderState::setValue_unsafe(long)
00000234 T RepRapPCB::doInitializePosition()
00000234 T RepRapPCBTest::setup()
00000252 T AdvButton::update()
00000270 T HardwareSerial::begin(unsigned long)
00000278 T DigitalInputShiftRegister_74HC166::update()
00000318 T StepperMotorControlWithButtons::debugPrint()
00000322 t doStepTicking()
00000336 T StepperMotorAxis::debugPrint()
00000350 T StepperMotorControlWithButtons::update()
00000372 T RotaryEncoderAcceleration::update()
00000700 t doAxis(char const*, char*, StepperMotorAxis&)
00000704 T strtod
00000706 t doMoveForthAndBackAtSpeed()
00000762 T DigitalOutputShiftRegister_74HC595::update()
00000845 t helpMessage
00000934 T RepRapPCB::initialize()
00001100 T RepRapPCBTest::loop()
00000006 V vtable for DigitalInputArduinoPin
00000006 V vtable for DigitalInputShiftRegisterPin
00000008 V vtable for DigitalOutputArduinoPin
00000008 V vtable for DigitalOutputShiftRegister_74HC595_Pin
00000008 V vtable for StepperMotorMosfetHBridge
00000016 V vtable for HardwareSerial
00000056 W Print::write(char const*)
...
...

ArduinoProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  0000474c  000047c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000474c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000324  00800146  00004792  00004806  2**0
                  ALLOC
  3 .stab         00004a04  00000000  00000000  00004808  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000137d  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000a589  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 03 	jmp	0x682	; 0x682 <__ctors_end>
       4:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <__vector_1>
       8:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__vector_2>
       c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      10:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      14:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      18:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      1c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      20:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      24:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      28:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      2c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      30:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      34:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      38:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      3c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      40:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_16>
      44:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      48:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__vector_18>
      4c:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__vector_19>
      50:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      54:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      58:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      5c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      60:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>
      64:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__bad_interrupt>

00000068 <pgmAxisNameX>:
      68:	58 20 61 78 69 73 00                                X axis.

0000006f <pgmAxisNameY>:
      6f:	59 20 61 78 69 73 00                                Y axis.

00000076 <pgmAxisNameZ>:
      76:	5a 20 61 78 69 73 00                                Z axis.

0000007d <RepRapPCBTest::loop()::__c>:
      7d:	69 6e 76 61 6c 69 64 20 63 6f 6d 6d 61 6e 64 00     invalid command.

0000008d <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      8d:	6f 6b 00                                            ok.

00000090 <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      90:	69 6e 76 61 6c 69 64 20 61 78 69 73 20 63 6f 6d     invalid axis com
      a0:	6d 61 6e 64 00                                      mand.

000000a5 <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      a5:	6d 61 78 53 74 65 70 09 6d 69 6e 53 74 65 70 09     maxStep.minStep.
      b5:	74 69 6d 65 54 6f 45 6e 64 4d 69 6c 6c 69 73 09     timeToEndMillis.
      c5:	74 69 6d 65 54 6f 53 74 61 72 74 4d 69 6c 6c 69     timeToStartMilli
      d5:	73 00                                               s.

000000d7 <showError(char const*)::__c>:
      d7:	45 72 72 6f 72 20 00                                Error .

000000de <doAlterDelayBetweenSteps()::__c>:
      de:	3a 20 64 65 6c 61 79 20 62 65 74 77 65 65 6e 20     : delay between 
      ee:	73 74 65 70 73 20 3d 20 00                          steps = .

000000f7 <doGotoStep()::__c>:
      f7:	3a 20 67 6f 74 6f 20 73 74 65 70 20 00              : goto step .

00000104 <doMoveForthAndBackAtSpeed()::__c>:
     104:	3a 20 73 70 65 65 64 20 6d 6d 2f 6d 69 6e 20 00     : speed mm/min .

00000114 <doStepTicking()::__c>:
     114:	54 69 63 6b 20 64 65 6c 61 79 3a 20 00              Tick delay: .

00000121 <doStepTicking()::__c>:
     121:	44 65 6c 61 79 20 69 73 20 00                       Delay is .

0000012b <helpMessage>:
     12b:	43 6f 6d 6d 61 6e 64 20 66 6f 72 6d 61 74 3a 20     Command format: 
     13b:	3c 63 6f 6d 6d 61 6e 64 3e 3c 73 75 62 2d 63 6f     <command><sub-co
     14b:	6d 6d 61 6e 64 3e 5b 70 61 72 61 6d 65 74 65 72     mmand>[parameter
     15b:	5d 3c 70 72 65 73 73 20 65 6e 74 65 72 3e 0a 57     ]<press enter>.W
     16b:	68 65 72 65 3a 0a 3c 63 6f 6d 6d 61 6e 64 3e 0a     here:.<command>.
     17b:	20 20 78 2c 20 79 2c 20 7a 20 2d 20 75 73 65 20       x, y, z - use 
     18b:	61 78 69 73 20 78 2c 79 20 6f 72 20 7a 2e 20 53     axis x,y or z. S
     19b:	65 65 20 61 78 69 73 20 63 6f 6d 6d 61 6e 64 73     ee axis commands
     1ab:	0a 20 20 61 20 2d 20 41 6c 6c 20 28 78 2c 79 2c     .  a - All (x,y,
     1bb:	7a 29 20 61 78 69 73 0a 20 20 73 20 2d 20 53 74     z) axis.  s - St
     1cb:	6f 70 20 61 6c 6c 20 6d 6f 74 6f 72 73 0a 20 20     op all motors.  
     1db:	69 20 2d 20 49 6e 69 74 69 61 6c 69 7a 65 20 61     i - Initialize a
     1eb:	6c 6c 20 6d 6f 74 6f 72 73 0a 20 20 68 20 2d 20     ll motors.  h - 
     1fb:	70 72 69 6e 74 20 74 68 69 73 20 48 65 6c 70 0a     print this Help.
     20b:	3c 61 78 69 73 20 63 6f 6d 6d 61 6e 64 73 3e 0a     <axis commands>.
     21b:	20 20 73 20 2d 20 67 6f 74 6f 20 53 74 61 72 74       s - goto Start
     22b:	20 70 6f 73 69 74 69 6f 6e 0a 20 20 65 20 2d 20      position.  e - 
     23b:	67 6f 74 6f 20 45 6e 64 20 70 6f 73 69 74 69 6f     goto End positio
     24b:	6e 0a 20 20 64 20 2d 20 64 6f 20 44 65 74 65 72     n.  d - do Deter
     25b:	6d 69 6e 65 20 61 76 61 69 6c 61 62 6c 65 20 73     mine available s
     26b:	74 65 70 73 0a 20 20 68 20 2d 20 67 6f 74 6f 20     teps.  h - goto 
     27b:	48 6f 6d 65 20 70 6f 73 69 74 69 6f 6e 0a 20 20     Home position.  
     28b:	70 20 2d 20 50 72 69 6e 74 20 61 78 69 73 20 73     p - Print axis s
     29b:	74 61 74 75 73 0a 20 20 67 20 2d 20 47 6f 74 6f     tatus.  g - Goto
     2ab:	20 73 74 65 70 20 28 70 61 72 61 6d 65 74 65 72      step (parameter
     2bb:	20 6c 6f 6e 67 20 69 6e 74 29 0a 20 20 6d 20 2d      long int).  m -
     2cb:	20 4d 6f 76 65 20 74 6f 20 70 6f 73 69 74 69 6f      Move to positio
     2db:	6e 20 28 70 61 72 61 6d 65 74 65 72 20 66 6c 6f     n (parameter flo
     2eb:	61 74 20 2d 20 61 62 73 6f 6c 75 74 65 20 70 6f     at - absolute po
     2fb:	73 69 74 69 6f 6e 20 69 6e 20 6d 69 6c 6c 69 6d     sition in millim
     30b:	65 74 65 72 73 29 0a 20 20 79 20 2d 20 73 65 74     eters).  y - set
     31b:	20 64 65 6c 61 59 20 62 65 74 77 65 65 6e 20 73      delaY between s
     32b:	74 65 70 73 20 61 74 20 6d 61 78 69 6d 75 6d 20     teps at maximum 
     33b:	73 70 65 65 64 20 28 70 61 72 61 6d 65 74 65 72     speed (parameter
     34b:	20 69 6e 74 20 2d 20 64 65 6c 61 79 20 6d 69 63      int - delay mic
     35b:	72 6f 73 65 63 6f 6e 64 73 29 0a 20 20 71 20 2d     roseconds).  q -
     36b:	20 73 65 74 20 73 70 65 65 64 20 74 6f 20 6d 6f      set speed to mo
     37b:	76 65 20 74 68 65 20 61 78 69 73 20 66 72 6f 6d     ve the axis from
     38b:	20 73 74 61 72 74 20 74 6f 20 65 6e 64 20 28 70      start to end (p
     39b:	61 72 61 6d 65 74 65 72 20 6c 6f 6e 67 20 2d 20     arameter long - 
     3ab:	73 70 65 65 64 20 69 6e 20 6d 6d 2f 6d 69 6e 29     speed in mm/min)
     3bb:	0a 2d 2d 20 73 65 74 20 74 68 65 20 72 6f 74 61     .-- set the rota
     3cb:	72 79 20 65 6e 63 6f 64 65 72 20 74 6f 20 63 6f     ry encoder to co
     3db:	6e 74 72 6f 6c 20 61 20 76 61 6c 75 65 2c 20 6f     ntrol a value, o
     3eb:	6e 6c 79 20 6f 6e 65 20 61 78 69 73 20 61 74 20     nly one axis at 
     3fb:	61 20 74 69 6d 65 2c 20 6c 6f 6e 67 20 63 6c 69     a time, long cli
     40b:	63 6b 20 74 6f 20 74 75 72 6e 20 6f 66 66 0a 20     ck to turn off. 
     41b:	20 47 20 2d 20 47 6f 74 6f 20 73 74 65 70 0a 20      G - Goto step. 
     42b:	20 59 20 2d 20 64 65 6c 61 59 20 62 65 74 77 65      Y - delaY betwe
     43b:	65 6e 20 73 74 65 70 73 0a 20 20 51 20 2d 20 73     en steps.  Q - s
     44b:	65 74 20 73 70 65 65 64 20 74 6f 20 6d 6f 76 65     et speed to move
     45b:	20 74 68 65 20 61 78 69 73 20 66 72 6f 6d 20 73      the axis from s
     46b:	74 61 72 74 20 74 6f 20 65 6e 64 0a 00              tart to end..

00000478 <states>:
     478:	a7 04 ad 04 b9 04 b3 04 ad 04                       ..........

00000482 <RepRapPCBTest::setup()::__c>:
     482:	50 72 65 73 73 20 74 68 65 20 62 75 74 74 6f 6e     Press the button
     492:	20 74 6f 20 73 74 6f 70 00                           to stop.

0000049b <RepRapPCBTest::setup()::__c>:
     49b:	49 6e 69 74 69 61 6c 69 7a 65 64 00                 Initialized.

000004a7 <BLINK_SLOW>:
     4a7:	f4 01 f4 01 00 00                                   ......

000004ad <BLINK_MEDIUM>:
     4ad:	fa 00 fa 00 00 00                                   ......

000004b3 <BLINK_FAST>:
     4b3:	32 00 32 00 00 00                                   2.2...

000004b9 <BLINK_OFF>:
	...

000004bb <BLINK_ON>:
     4bb:	32 00 00 00                                         2...

000004bf <BLINK1>:
     4bf:	32 00 32 00 fa 00 fa 00 00 00                       2.2.......

000004c9 <BLINK2>:
     4c9:	32 00 fa 00 32 00 fa 00 fa 00 fa 00 00 00           2...2.........

000004d7 <BLINK3>:
     4d7:	32 00 f4 01 00 00                                   2.....

000004dd <StepperMotorAxis::debugPrint()::__c>:
     4dd:	68 6f 6d 65 20 70 6f 73 69 74 69 6f 6e 3a 20 20     home position:  
	...

000004ee <StepperMotorAxis::debugPrint()::__c>:
     4ee:	61 78 69 73 20 72 65 73 6f 6c 75 74 69 6f 6e 3a     axis resolution:
	...

000004ff <StepperMotorAxis::debugPrint()::__c>:
     4ff:	64 65 6c 61 79 20 62 2f 6e 20 73 74 65 70 73 40     delay b/n steps@
     50f:	6d 61 78 20 73 70 65 65 64 3a 00                    max speed:.

0000051a <StepperMotorAxis::debugPrint()::__c>:
     51a:	73 70 65 65 64 20 28 51 29 3a 20 20 20 20 20 20     speed (Q):      
	...

0000052b <StepperMotorAxis::debugPrint()::__c>:
     52b:	61 62 73 20 70 6f 73 69 74 69 6f 6e 3a 20 20 20     abs position:   
	...

0000053c <StepperMotorAxis::debugPrint()::__c>:
     53c:	41 58 49 53 20 6d 6f 64 65 3a 20 20 20 20 20 20     AXIS mode:      
	...

0000054d <StepperMotorAxis::debugPrint()::__c>:
     54d:	41 58 49 53 20 73 74 61 74 65 00                    AXIS state.

00000558 <pgm_Up>:
     558:	55 70 00                                            Up.

0000055b <pgm_Down>:
     55b:	44 6f 77 6e 00                                      Down.

00000560 <StepperMotorControlWithButtons::debugPrint()::__c>:
     560:	64 65 6c 61 79 20 62 2f 6e 20 73 74 65 70 73 3a     delay b/n steps:
	...

00000571 <StepperMotorControlWithButtons::debugPrint()::__c>:
     571:	6c 61 73 74 54 69 6d 65 73 74 4d 69 63 72 6f 3a     lastTimestMicro:
	...

00000582 <StepperMotorControlWithButtons::debugPrint()::__c>:
     582:	6d 6f 76 65 6d 65 6e 74 20 6d 6f 64 65 3a 20 20     movement mode:  
	...

00000593 <StepperMotorControlWithButtons::debugPrint()::__c>:
     593:	65 6e 64 20 62 75 74 74 6f 6e 3a 20 20 20 20 20     end button:     
	...

000005a4 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5a4:	73 74 61 72 74 20 62 75 74 74 6f 6e 3a 20 20 20     start button:   
	...

000005b5 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5b5:	63 75 72 20 73 74 65 70 3a 20 20 20 20 20 20 20     cur step:       
	...

000005c6 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5c6:	72 65 6d 61 69 6e 69 6e 67 20 73 74 65 70 73 3a     remaining steps:
	...

000005d7 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5d7:	69 73 4d 6f 76 69 6e 67 3a 20 20 20 20 20 20 20     isMoving:       
	...

000005e8 <port_to_mode_PGM>:
     5e8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005f2 <port_to_output_PGM>:
     5f2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005fc <port_to_input_PGM>:
     5fc:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000606 <digital_pin_to_port_PGM>:
     606:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     616:	03 03 03 03                                         ....

0000061a <digital_pin_to_bit_mask_PGM>:
     61a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     62a:	04 08 10 20                                         ... 

0000062e <digital_pin_to_timer_PGM>:
     62e:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     63e:	00 00 00 00                                         ....

00000642 <pstr_inf>:
     642:	49 4e 46                                            INF

00000645 <pstr_inity>:
     645:	49 4e 49 54 59                                      INITY

0000064a <pstr_nan>:
     64a:	4e 41 4e                                            NAN

0000064d <pwr_m10>:
     64d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     65d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000665 <pwr_p10>:
     665:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     675:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000067e <__ctors_start>:
     67e:	0a 06       	cpc	r0, r26
     680:	e6 1b       	sub	r30, r22

00000682 <__ctors_end>:
     682:	11 24       	eor	r1, r1
     684:	1f be       	out	0x3f, r1	; 63
     686:	cf ef       	ldi	r28, 0xFF	; 255
     688:	d8 e0       	ldi	r29, 0x08	; 8
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	cd bf       	out	0x3d, r28	; 61

0000068e <__do_copy_data>:
     68e:	11 e0       	ldi	r17, 0x01	; 1
     690:	a0 e0       	ldi	r26, 0x00	; 0
     692:	b1 e0       	ldi	r27, 0x01	; 1
     694:	ec e4       	ldi	r30, 0x4C	; 76
     696:	f7 e4       	ldi	r31, 0x47	; 71
     698:	02 c0       	rjmp	.+4      	; 0x69e <.do_copy_data_start>

0000069a <.do_copy_data_loop>:
     69a:	05 90       	lpm	r0, Z+
     69c:	0d 92       	st	X+, r0

0000069e <.do_copy_data_start>:
     69e:	a6 34       	cpi	r26, 0x46	; 70
     6a0:	b1 07       	cpc	r27, r17
     6a2:	d9 f7       	brne	.-10     	; 0x69a <.do_copy_data_loop>

000006a4 <__do_clear_bss>:
     6a4:	14 e0       	ldi	r17, 0x04	; 4
     6a6:	a6 e4       	ldi	r26, 0x46	; 70
     6a8:	b1 e0       	ldi	r27, 0x01	; 1
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <.do_clear_bss_start>

000006ac <.do_clear_bss_loop>:
     6ac:	1d 92       	st	X+, r1

000006ae <.do_clear_bss_start>:
     6ae:	aa 36       	cpi	r26, 0x6A	; 106
     6b0:	b1 07       	cpc	r27, r17
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <.do_clear_bss_loop>

000006b4 <__do_global_ctors>:
     6b4:	16 e0       	ldi	r17, 0x06	; 6
     6b6:	c2 e8       	ldi	r28, 0x82	; 130
     6b8:	d6 e0       	ldi	r29, 0x06	; 6
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <.do_global_ctors_start>

000006bc <.do_global_ctors_loop>:
     6bc:	22 97       	sbiw	r28, 0x02	; 2
     6be:	fe 01       	movw	r30, r28
     6c0:	0e 94 a0 23 	call	0x4740	; 0x4740 <__tablejump__>

000006c4 <.do_global_ctors_start>:
     6c4:	ce 37       	cpi	r28, 0x7E	; 126
     6c6:	d1 07       	cpc	r29, r17
     6c8:	c9 f7       	brne	.-14     	; 0x6bc <.do_global_ctors_loop>
     6ca:	0e 94 4c 05 	call	0xa98	; 0xa98 <main>
     6ce:	0c 94 b4 03 	jmp	0x768	; 0x768 <exit>

000006d2 <__bad_interrupt>:
     6d2:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000006d6 <atof>:
     6d6:	66 27       	eor	r22, r22
     6d8:	77 27       	eor	r23, r23
     6da:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <strtod>

000006de <atoi>:
     6de:	fc 01       	movw	r30, r24
     6e0:	88 27       	eor	r24, r24
     6e2:	99 27       	eor	r25, r25
     6e4:	e8 94       	clt
     6e6:	21 91       	ld	r18, Z+
     6e8:	20 32       	cpi	r18, 0x20	; 32
     6ea:	e9 f3       	breq	.-6      	; 0x6e6 <atoi+0x8>
     6ec:	29 30       	cpi	r18, 0x09	; 9
     6ee:	10 f0       	brcs	.+4      	; 0x6f4 <atoi+0x16>
     6f0:	2e 30       	cpi	r18, 0x0E	; 14
     6f2:	c8 f3       	brcs	.-14     	; 0x6e6 <atoi+0x8>
     6f4:	2b 32       	cpi	r18, 0x2B	; 43
     6f6:	41 f0       	breq	.+16     	; 0x708 <atoi+0x2a>
     6f8:	2d 32       	cpi	r18, 0x2D	; 45
     6fa:	39 f4       	brne	.+14     	; 0x70a <atoi+0x2c>
     6fc:	68 94       	set
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <atoi+0x2a>
     700:	0e 94 cc 03 	call	0x798	; 0x798 <__mulhi_const_10>
     704:	82 0f       	add	r24, r18
     706:	91 1d       	adc	r25, r1
     708:	21 91       	ld	r18, Z+
     70a:	20 53       	subi	r18, 0x30	; 48
     70c:	2a 30       	cpi	r18, 0x0A	; 10
     70e:	c0 f3       	brcs	.-16     	; 0x700 <atoi+0x22>
     710:	1e f4       	brtc	.+6      	; 0x718 <atoi+0x3a>
     712:	90 95       	com	r25
     714:	81 95       	neg	r24
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	08 95       	ret

0000071a <atol>:
     71a:	1f 93       	push	r17
     71c:	fc 01       	movw	r30, r24
     71e:	99 27       	eor	r25, r25
     720:	88 27       	eor	r24, r24
     722:	bc 01       	movw	r22, r24
     724:	e8 94       	clt
     726:	11 91       	ld	r17, Z+
     728:	10 32       	cpi	r17, 0x20	; 32
     72a:	e9 f3       	breq	.-6      	; 0x726 <atol+0xc>
     72c:	19 30       	cpi	r17, 0x09	; 9
     72e:	10 f0       	brcs	.+4      	; 0x734 <atol+0x1a>
     730:	1e 30       	cpi	r17, 0x0E	; 14
     732:	c8 f3       	brcs	.-14     	; 0x726 <atol+0xc>
     734:	1b 32       	cpi	r17, 0x2B	; 43
     736:	51 f0       	breq	.+20     	; 0x74c <atol+0x32>
     738:	1d 32       	cpi	r17, 0x2D	; 45
     73a:	49 f4       	brne	.+18     	; 0x74e <atol+0x34>
     73c:	68 94       	set
     73e:	06 c0       	rjmp	.+12     	; 0x74c <atol+0x32>
     740:	0e 94 b7 03 	call	0x76e	; 0x76e <__mulsi_const_10>
     744:	61 0f       	add	r22, r17
     746:	71 1d       	adc	r23, r1
     748:	81 1d       	adc	r24, r1
     74a:	91 1d       	adc	r25, r1
     74c:	11 91       	ld	r17, Z+
     74e:	10 53       	subi	r17, 0x30	; 48
     750:	1a 30       	cpi	r17, 0x0A	; 10
     752:	b0 f3       	brcs	.-20     	; 0x740 <atol+0x26>
     754:	3e f4       	brtc	.+14     	; 0x764 <atol+0x4a>
     756:	90 95       	com	r25
     758:	80 95       	com	r24
     75a:	70 95       	com	r23
     75c:	61 95       	neg	r22
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	8f 4f       	sbci	r24, 0xFF	; 255
     762:	9f 4f       	sbci	r25, 0xFF	; 255
     764:	1f 91       	pop	r17
     766:	08 95       	ret

00000768 <exit>:
     768:	f8 94       	cli
     76a:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <_exit>

0000076e <__mulsi_const_10>:
     76e:	59 2f       	mov	r21, r25
     770:	48 2f       	mov	r20, r24
     772:	37 2f       	mov	r19, r23
     774:	26 2f       	mov	r18, r22
     776:	66 0f       	add	r22, r22
     778:	77 1f       	adc	r23, r23
     77a:	88 1f       	adc	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	66 0f       	add	r22, r22
     780:	77 1f       	adc	r23, r23
     782:	88 1f       	adc	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	62 0f       	add	r22, r18
     788:	73 1f       	adc	r23, r19
     78a:	84 1f       	adc	r24, r20
     78c:	95 1f       	adc	r25, r21
     78e:	66 0f       	add	r22, r22
     790:	77 1f       	adc	r23, r23
     792:	88 1f       	adc	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	08 95       	ret

00000798 <__mulhi_const_10>:
     798:	7a e0       	ldi	r23, 0x0A	; 10
     79a:	97 9f       	mul	r25, r23
     79c:	90 2d       	mov	r25, r0
     79e:	87 9f       	mul	r24, r23
     7a0:	80 2d       	mov	r24, r0
     7a2:	91 0d       	add	r25, r1
     7a4:	11 24       	eor	r1, r1
     7a6:	08 95       	ret

000007a8 <strtod>:
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	ea ed       	ldi	r30, 0xDA	; 218
     7ae:	f3 e0       	ldi	r31, 0x03	; 3
     7b0:	0c 94 6d 23 	jmp	0x46da	; 0x46da <__prologue_saves__+0xc>
     7b4:	ec 01       	movw	r28, r24
     7b6:	5b 01       	movw	r10, r22
     7b8:	61 15       	cp	r22, r1
     7ba:	71 05       	cpc	r23, r1
     7bc:	19 f0       	breq	.+6      	; 0x7c4 <strtod+0x1c>
     7be:	fb 01       	movw	r30, r22
     7c0:	91 83       	std	Z+1, r25	; 0x01
     7c2:	80 83       	st	Z, r24
     7c4:	f9 90       	ld	r15, Y+
     7c6:	8f 2d       	mov	r24, r15
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 8f 21 	call	0x431e	; 0x431e <isspace>
     7ce:	89 2b       	or	r24, r25
     7d0:	c9 f7       	brne	.-14     	; 0x7c4 <strtod+0x1c>
     7d2:	fd e2       	ldi	r31, 0x2D	; 45
     7d4:	ff 16       	cp	r15, r31
     7d6:	21 f4       	brne	.+8      	; 0x7e0 <strtod+0x38>
     7d8:	f9 90       	ld	r15, Y+
     7da:	ee 24       	eor	r14, r14
     7dc:	e3 94       	inc	r14
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <strtod+0x42>
     7e0:	2b e2       	ldi	r18, 0x2B	; 43
     7e2:	f2 16       	cp	r15, r18
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <strtod+0x40>
     7e6:	f9 90       	ld	r15, Y+
     7e8:	ee 24       	eor	r14, r14
     7ea:	8e 01       	movw	r16, r28
     7ec:	01 50       	subi	r16, 0x01	; 1
     7ee:	10 40       	sbci	r17, 0x00	; 0
     7f0:	c8 01       	movw	r24, r16
     7f2:	62 e4       	ldi	r22, 0x42	; 66
     7f4:	76 e0       	ldi	r23, 0x06	; 6
     7f6:	43 e0       	ldi	r20, 0x03	; 3
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	0e 94 34 05 	call	0xa68	; 0xa68 <strncasecmp_P>
     7fe:	89 2b       	or	r24, r25
     800:	01 f5       	brne	.+64     	; 0x842 <strtod+0x9a>
     802:	8e 01       	movw	r16, r28
     804:	0e 5f       	subi	r16, 0xFE	; 254
     806:	1f 4f       	sbci	r17, 0xFF	; 255
     808:	c8 01       	movw	r24, r16
     80a:	65 e4       	ldi	r22, 0x45	; 69
     80c:	76 e0       	ldi	r23, 0x06	; 6
     80e:	45 e0       	ldi	r20, 0x05	; 5
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	0e 94 34 05 	call	0xa68	; 0xa68 <strncasecmp_P>
     816:	89 2b       	or	r24, r25
     818:	19 f4       	brne	.+6      	; 0x820 <strtod+0x78>
     81a:	8e 01       	movw	r16, r28
     81c:	09 5f       	subi	r16, 0xF9	; 249
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	a1 14       	cp	r10, r1
     822:	b1 04       	cpc	r11, r1
     824:	19 f0       	breq	.+6      	; 0x82c <strtod+0x84>
     826:	f5 01       	movw	r30, r10
     828:	11 83       	std	Z+1, r17	; 0x01
     82a:	00 83       	st	Z, r16
     82c:	e0 fc       	sbrc	r14, 0
     82e:	04 c0       	rjmp	.+8      	; 0x838 <strtod+0x90>
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	80 e8       	ldi	r24, 0x80	; 128
     836:	14 c0       	rjmp	.+40     	; 0x860 <strtod+0xb8>
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	80 e8       	ldi	r24, 0x80	; 128
     83e:	6f ef       	ldi	r22, 0xFF	; 255
     840:	08 c1       	rjmp	.+528    	; 0xa52 <__stack+0x153>
     842:	c8 01       	movw	r24, r16
     844:	6a e4       	ldi	r22, 0x4A	; 74
     846:	76 e0       	ldi	r23, 0x06	; 6
     848:	43 e0       	ldi	r20, 0x03	; 3
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	0e 94 34 05 	call	0xa68	; 0xa68 <strncasecmp_P>
     850:	89 2b       	or	r24, r25
     852:	69 f4       	brne	.+26     	; 0x86e <strtod+0xc6>
     854:	a1 14       	cp	r10, r1
     856:	b1 04       	cpc	r11, r1
     858:	29 f4       	brne	.+10     	; 0x864 <strtod+0xbc>
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	80 ec       	ldi	r24, 0xC0	; 192
     860:	6f e7       	ldi	r22, 0x7F	; 127
     862:	f7 c0       	rjmp	.+494    	; 0xa52 <__stack+0x153>
     864:	22 96       	adiw	r28, 0x02	; 2
     866:	f5 01       	movw	r30, r10
     868:	d1 83       	std	Z+1, r29	; 0x01
     86a:	c0 83       	st	Z, r28
     86c:	f6 cf       	rjmp	.-20     	; 0x85a <strtod+0xb2>
     86e:	88 24       	eor	r8, r8
     870:	99 24       	eor	r9, r9
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	ef 2d       	mov	r30, r15
     87c:	e0 53       	subi	r30, 0x30	; 48
     87e:	ea 30       	cpi	r30, 0x0A	; 10
     880:	a0 f5       	brcc	.+104    	; 0x8ea <strtod+0x142>
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	ef 2a       	or	r14, r31
     886:	8e 2d       	mov	r24, r14
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	9c 01       	movw	r18, r24
     88c:	28 70       	andi	r18, 0x08	; 8
     88e:	30 70       	andi	r19, 0x00	; 0
     890:	e2 fe       	sbrs	r14, 2
     892:	06 c0       	rjmp	.+12     	; 0x8a0 <strtod+0xf8>
     894:	23 2b       	or	r18, r19
     896:	79 f5       	brne	.+94     	; 0x8f6 <strtod+0x14e>
     898:	08 94       	sec
     89a:	81 1c       	adc	r8, r1
     89c:	91 1c       	adc	r9, r1
     89e:	2b c0       	rjmp	.+86     	; 0x8f6 <strtod+0x14e>
     8a0:	23 2b       	or	r18, r19
     8a2:	19 f0       	breq	.+6      	; 0x8aa <strtod+0x102>
     8a4:	08 94       	sec
     8a6:	81 08       	sbc	r8, r1
     8a8:	91 08       	sbc	r9, r1
     8aa:	db 01       	movw	r26, r22
     8ac:	ca 01       	movw	r24, r20
     8ae:	12 e0       	ldi	r17, 0x02	; 2
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	aa 1f       	adc	r26, r26
     8b6:	bb 1f       	adc	r27, r27
     8b8:	1a 95       	dec	r17
     8ba:	d1 f7       	brne	.-12     	; 0x8b0 <strtod+0x108>
     8bc:	48 0f       	add	r20, r24
     8be:	59 1f       	adc	r21, r25
     8c0:	6a 1f       	adc	r22, r26
     8c2:	7b 1f       	adc	r23, r27
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	66 1f       	adc	r22, r22
     8ca:	77 1f       	adc	r23, r23
     8cc:	4e 0f       	add	r20, r30
     8ce:	51 1d       	adc	r21, r1
     8d0:	61 1d       	adc	r22, r1
     8d2:	71 1d       	adc	r23, r1
     8d4:	48 39       	cpi	r20, 0x98	; 152
     8d6:	29 e9       	ldi	r18, 0x99	; 153
     8d8:	52 07       	cpc	r21, r18
     8da:	29 e9       	ldi	r18, 0x99	; 153
     8dc:	62 07       	cpc	r22, r18
     8de:	29 e1       	ldi	r18, 0x19	; 25
     8e0:	72 07       	cpc	r23, r18
     8e2:	48 f0       	brcs	.+18     	; 0x8f6 <strtod+0x14e>
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	e8 2a       	or	r14, r24
     8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <strtod+0x14e>
     8ea:	ee 3f       	cpi	r30, 0xFE	; 254
     8ec:	31 f4       	brne	.+12     	; 0x8fa <strtod+0x152>
     8ee:	e3 fc       	sbrc	r14, 3
     8f0:	39 c0       	rjmp	.+114    	; 0x964 <__stack+0x65>
     8f2:	98 e0       	ldi	r25, 0x08	; 8
     8f4:	e9 2a       	or	r14, r25
     8f6:	f9 90       	ld	r15, Y+
     8f8:	c0 cf       	rjmp	.-128    	; 0x87a <strtod+0xd2>
     8fa:	e5 33       	cpi	r30, 0x35	; 53
     8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
     8fe:	e5 31       	cpi	r30, 0x15	; 21
     900:	89 f5       	brne	.+98     	; 0x964 <__stack+0x65>
     902:	29 91       	ld	r18, Y+
     904:	2d 32       	cpi	r18, 0x2D	; 45
     906:	19 f4       	brne	.+6      	; 0x90e <__stack+0xf>
     908:	e0 e1       	ldi	r30, 0x10	; 16
     90a:	ee 2a       	or	r14, r30
     90c:	05 c0       	rjmp	.+10     	; 0x918 <__stack+0x19>
     90e:	2b 32       	cpi	r18, 0x2B	; 43
     910:	19 f0       	breq	.+6      	; 0x918 <__stack+0x19>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	03 c0       	rjmp	.+6      	; 0x91e <__stack+0x1f>
     918:	29 91       	ld	r18, Y+
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	e2 2f       	mov	r30, r18
     920:	e0 53       	subi	r30, 0x30	; 48
     922:	ea 30       	cpi	r30, 0x0A	; 10
     924:	18 f0       	brcs	.+6      	; 0x92c <__stack+0x2d>
     926:	c8 1b       	sub	r28, r24
     928:	d9 0b       	sbc	r29, r25
     92a:	1c c0       	rjmp	.+56     	; 0x964 <__stack+0x65>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	fc e0       	ldi	r31, 0x0C	; 12
     932:	20 38       	cpi	r18, 0x80	; 128
     934:	3f 07       	cpc	r19, r31
     936:	5c f4       	brge	.+22     	; 0x94e <__stack+0x4f>
     938:	c9 01       	movw	r24, r18
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	28 0f       	add	r18, r24
     944:	39 1f       	adc	r19, r25
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	2e 0f       	add	r18, r30
     94c:	31 1d       	adc	r19, r1
     94e:	e9 91       	ld	r30, Y+
     950:	e0 53       	subi	r30, 0x30	; 48
     952:	ea 30       	cpi	r30, 0x0A	; 10
     954:	68 f3       	brcs	.-38     	; 0x930 <__stack+0x31>
     956:	e4 fe       	sbrs	r14, 4
     958:	03 c0       	rjmp	.+6      	; 0x960 <__stack+0x61>
     95a:	30 95       	com	r19
     95c:	21 95       	neg	r18
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	82 0e       	add	r8, r18
     962:	93 1e       	adc	r9, r19
     964:	ce 2c       	mov	r12, r14
     966:	dd 24       	eor	r13, r13
     968:	e1 fe       	sbrs	r14, 1
     96a:	07 c0       	rjmp	.+14     	; 0x97a <__stack+0x7b>
     96c:	a1 14       	cp	r10, r1
     96e:	b1 04       	cpc	r11, r1
     970:	21 f0       	breq	.+8      	; 0x97a <__stack+0x7b>
     972:	21 97       	sbiw	r28, 0x01	; 1
     974:	f5 01       	movw	r30, r10
     976:	d1 83       	std	Z+1, r29	; 0x01
     978:	c0 83       	st	Z, r28
     97a:	cb 01       	movw	r24, r22
     97c:	ba 01       	movw	r22, r20
     97e:	0e 94 cc 21 	call	0x4398	; 0x4398 <__floatunsisf>
     982:	7b 01       	movw	r14, r22
     984:	8c 01       	movw	r16, r24
     986:	f3 e0       	ldi	r31, 0x03	; 3
     988:	cf 22       	and	r12, r31
     98a:	dd 24       	eor	r13, r13
     98c:	23 e0       	ldi	r18, 0x03	; 3
     98e:	c2 16       	cp	r12, r18
     990:	d1 04       	cpc	r13, r1
     992:	21 f4       	brne	.+8      	; 0x99c <__stack+0x9d>
     994:	17 fb       	bst	r17, 7
     996:	10 95       	com	r17
     998:	17 f9       	bld	r17, 7
     99a:	10 95       	com	r17
     99c:	57 01       	movw	r10, r14
     99e:	68 01       	movw	r12, r16
     9a0:	c8 01       	movw	r24, r16
     9a2:	b7 01       	movw	r22, r14
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	0e 94 97 21 	call	0x432e	; 0x432e <__cmpsf2>
     9b0:	88 23       	and	r24, r24
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	4a c0       	rjmp	.+148    	; 0xa4a <__stack+0x14b>
     9b6:	97 fe       	sbrs	r9, 7
     9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <__stack+0xd5>
     9ba:	21 e6       	ldi	r18, 0x61	; 97
     9bc:	e2 2e       	mov	r14, r18
     9be:	26 e0       	ldi	r18, 0x06	; 6
     9c0:	f2 2e       	mov	r15, r18
     9c2:	90 94       	com	r9
     9c4:	81 94       	neg	r8
     9c6:	91 08       	sbc	r9, r1
     9c8:	93 94       	inc	r9
     9ca:	c0 e2       	ldi	r28, 0x20	; 32
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	00 e0       	ldi	r16, 0x00	; 0
     9d0:	10 e0       	ldi	r17, 0x00	; 0
     9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <__stack+0xf9>
     9d4:	99 e7       	ldi	r25, 0x79	; 121
     9d6:	e9 2e       	mov	r14, r25
     9d8:	96 e0       	ldi	r25, 0x06	; 6
     9da:	f9 2e       	mov	r15, r25
     9dc:	f6 cf       	rjmp	.-20     	; 0x9ca <__stack+0xcb>
     9de:	f7 01       	movw	r30, r14
     9e0:	25 91       	lpm	r18, Z+
     9e2:	35 91       	lpm	r19, Z+
     9e4:	45 91       	lpm	r20, Z+
     9e6:	54 91       	lpm	r21, Z+
     9e8:	c6 01       	movw	r24, r12
     9ea:	b5 01       	movw	r22, r10
     9ec:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__mulsf3>
     9f0:	5b 01       	movw	r10, r22
     9f2:	6c 01       	movw	r12, r24
     9f4:	8c 1a       	sub	r8, r28
     9f6:	9d 0a       	sbc	r9, r29
     9f8:	8c 16       	cp	r8, r28
     9fa:	9d 06       	cpc	r9, r29
     9fc:	84 f7       	brge	.-32     	; 0x9de <__stack+0xdf>
     9fe:	d5 95       	asr	r29
     a00:	c7 95       	ror	r28
     a02:	0f 5f       	subi	r16, 0xFF	; 255
     a04:	1f 4f       	sbci	r17, 0xFF	; 255
     a06:	06 30       	cpi	r16, 0x06	; 6
     a08:	11 05       	cpc	r17, r1
     a0a:	29 f0       	breq	.+10     	; 0xa16 <__stack+0x117>
     a0c:	8c ef       	ldi	r24, 0xFC	; 252
     a0e:	9f ef       	ldi	r25, 0xFF	; 255
     a10:	e8 0e       	add	r14, r24
     a12:	f9 1e       	adc	r15, r25
     a14:	f1 cf       	rjmp	.-30     	; 0x9f8 <__stack+0xf9>
     a16:	c5 01       	movw	r24, r10
     a18:	d6 01       	movw	r26, r12
     a1a:	7c 01       	movw	r14, r24
     a1c:	8d 01       	movw	r16, r26
     a1e:	8c 2d       	mov	r24, r12
     a20:	88 0f       	add	r24, r24
     a22:	8d 2d       	mov	r24, r13
     a24:	88 1f       	adc	r24, r24
     a26:	8f 3f       	cpi	r24, 0xFF	; 255
     a28:	51 f0       	breq	.+20     	; 0xa3e <__stack+0x13f>
     a2a:	c6 01       	movw	r24, r12
     a2c:	b5 01       	movw	r22, r10
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	0e 94 97 21 	call	0x432e	; 0x432e <__cmpsf2>
     a3a:	88 23       	and	r24, r24
     a3c:	31 f4       	brne	.+12     	; 0xa4a <__stack+0x14b>
     a3e:	82 e2       	ldi	r24, 0x22	; 34
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 69 04 	sts	0x0469, r25
     a46:	80 93 68 04 	sts	0x0468, r24
     a4a:	7e 2d       	mov	r23, r14
     a4c:	9f 2d       	mov	r25, r15
     a4e:	80 2f       	mov	r24, r16
     a50:	61 2f       	mov	r22, r17
     a52:	27 2f       	mov	r18, r23
     a54:	39 2f       	mov	r19, r25
     a56:	48 2f       	mov	r20, r24
     a58:	56 2f       	mov	r21, r22
     a5a:	b9 01       	movw	r22, r18
     a5c:	ca 01       	movw	r24, r20
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	ec e0       	ldi	r30, 0x0C	; 12
     a64:	0c 94 89 23 	jmp	0x4712	; 0x4712 <__epilogue_restores__+0xc>

00000a68 <strncasecmp_P>:
     a68:	fb 01       	movw	r30, r22
     a6a:	dc 01       	movw	r26, r24
     a6c:	41 50       	subi	r20, 0x01	; 1
     a6e:	50 40       	sbci	r21, 0x00	; 0
     a70:	88 f0       	brcs	.+34     	; 0xa94 <strncasecmp_P+0x2c>
     a72:	8d 91       	ld	r24, X+
     a74:	81 34       	cpi	r24, 0x41	; 65
     a76:	1c f0       	brlt	.+6      	; 0xa7e <strncasecmp_P+0x16>
     a78:	8b 35       	cpi	r24, 0x5B	; 91
     a7a:	0c f4       	brge	.+2      	; 0xa7e <strncasecmp_P+0x16>
     a7c:	80 5e       	subi	r24, 0xE0	; 224
     a7e:	65 91       	lpm	r22, Z+
     a80:	61 34       	cpi	r22, 0x41	; 65
     a82:	1c f0       	brlt	.+6      	; 0xa8a <strncasecmp_P+0x22>
     a84:	6b 35       	cpi	r22, 0x5B	; 91
     a86:	0c f4       	brge	.+2      	; 0xa8a <strncasecmp_P+0x22>
     a88:	60 5e       	subi	r22, 0xE0	; 224
     a8a:	86 1b       	sub	r24, r22
     a8c:	61 11       	cpse	r22, r1
     a8e:	71 f3       	breq	.-36     	; 0xa6c <strncasecmp_P+0x4>
     a90:	99 0b       	sbc	r25, r25
     a92:	08 95       	ret
     a94:	88 1b       	sub	r24, r24
     a96:	fc cf       	rjmp	.-8      	; 0xa90 <strncasecmp_P+0x28>

00000a98 <main>:
     a98:	0e 94 cf 05 	call	0xb9e	; 0xb9e <init>
     a9c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <RepRapPCBTest::setup()>
     aa0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <RepRapPCBTest::loop()>
     aa4:	fd cf       	rjmp	.-6      	; 0xaa0 <main+0x8>

00000aa6 <__vector_16>:
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	80 91 4a 01 	lds	r24, 0x014A
     ac0:	90 91 4b 01 	lds	r25, 0x014B
     ac4:	a0 91 4c 01 	lds	r26, 0x014C
     ac8:	b0 91 4d 01 	lds	r27, 0x014D
     acc:	30 91 4e 01 	lds	r19, 0x014E
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	a1 1d       	adc	r26, r1
     ad4:	b1 1d       	adc	r27, r1
     ad6:	23 2f       	mov	r18, r19
     ad8:	2d 5f       	subi	r18, 0xFD	; 253
     ada:	2d 37       	cpi	r18, 0x7D	; 125
     adc:	20 f0       	brcs	.+8      	; 0xae6 <__vector_16+0x40>
     ade:	2d 57       	subi	r18, 0x7D	; 125
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	a1 1d       	adc	r26, r1
     ae4:	b1 1d       	adc	r27, r1
     ae6:	20 93 4e 01 	sts	0x014E, r18
     aea:	80 93 4a 01 	sts	0x014A, r24
     aee:	90 93 4b 01 	sts	0x014B, r25
     af2:	a0 93 4c 01 	sts	0x014C, r26
     af6:	b0 93 4d 01 	sts	0x014D, r27
     afa:	80 91 46 01 	lds	r24, 0x0146
     afe:	90 91 47 01 	lds	r25, 0x0147
     b02:	a0 91 48 01 	lds	r26, 0x0148
     b06:	b0 91 49 01 	lds	r27, 0x0149
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	a1 1d       	adc	r26, r1
     b0e:	b1 1d       	adc	r27, r1
     b10:	80 93 46 01 	sts	0x0146, r24
     b14:	90 93 47 01 	sts	0x0147, r25
     b18:	a0 93 48 01 	sts	0x0148, r26
     b1c:	b0 93 49 01 	sts	0x0149, r27
     b20:	bf 91       	pop	r27
     b22:	af 91       	pop	r26
     b24:	9f 91       	pop	r25
     b26:	8f 91       	pop	r24
     b28:	3f 91       	pop	r19
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <millis>:
     b36:	8f b7       	in	r24, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	20 91 4a 01 	lds	r18, 0x014A
     b3e:	30 91 4b 01 	lds	r19, 0x014B
     b42:	40 91 4c 01 	lds	r20, 0x014C
     b46:	50 91 4d 01 	lds	r21, 0x014D
     b4a:	8f bf       	out	0x3f, r24	; 63
     b4c:	b9 01       	movw	r22, r18
     b4e:	ca 01       	movw	r24, r20
     b50:	08 95       	ret

00000b52 <micros>:
     b52:	9f b7       	in	r25, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	20 91 46 01 	lds	r18, 0x0146
     b5a:	30 91 47 01 	lds	r19, 0x0147
     b5e:	40 91 48 01 	lds	r20, 0x0148
     b62:	50 91 49 01 	lds	r21, 0x0149
     b66:	86 b5       	in	r24, 0x26	; 38
     b68:	a8 9b       	sbis	0x15, 0	; 21
     b6a:	06 c0       	rjmp	.+12     	; 0xb78 <micros+0x26>
     b6c:	8f 3f       	cpi	r24, 0xFF	; 255
     b6e:	21 f0       	breq	.+8      	; 0xb78 <micros+0x26>
     b70:	2f 5f       	subi	r18, 0xFF	; 255
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	9f bf       	out	0x3f, r25	; 63
     b7a:	54 2f       	mov	r21, r20
     b7c:	43 2f       	mov	r20, r19
     b7e:	32 2f       	mov	r19, r18
     b80:	22 27       	eor	r18, r18
     b82:	28 0f       	add	r18, r24
     b84:	31 1d       	adc	r19, r1
     b86:	41 1d       	adc	r20, r1
     b88:	51 1d       	adc	r21, r1
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	22 0f       	add	r18, r18
     b8e:	33 1f       	adc	r19, r19
     b90:	44 1f       	adc	r20, r20
     b92:	55 1f       	adc	r21, r21
     b94:	8a 95       	dec	r24
     b96:	d1 f7       	brne	.-12     	; 0xb8c <micros+0x3a>
     b98:	b9 01       	movw	r22, r18
     b9a:	ca 01       	movw	r24, r20
     b9c:	08 95       	ret

00000b9e <init>:
     b9e:	78 94       	sei
     ba0:	84 b5       	in	r24, 0x24	; 36
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	84 bd       	out	0x24, r24	; 36
     ba6:	84 b5       	in	r24, 0x24	; 36
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	84 bd       	out	0x24, r24	; 36
     bac:	85 b5       	in	r24, 0x25	; 37
     bae:	82 60       	ori	r24, 0x02	; 2
     bb0:	85 bd       	out	0x25, r24	; 37
     bb2:	85 b5       	in	r24, 0x25	; 37
     bb4:	81 60       	ori	r24, 0x01	; 1
     bb6:	85 bd       	out	0x25, r24	; 37
     bb8:	ee e6       	ldi	r30, 0x6E	; 110
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	81 60       	ori	r24, 0x01	; 1
     bc0:	80 83       	st	Z, r24
     bc2:	e1 e8       	ldi	r30, 0x81	; 129
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	10 82       	st	Z, r1
     bc8:	80 81       	ld	r24, Z
     bca:	82 60       	ori	r24, 0x02	; 2
     bcc:	80 83       	st	Z, r24
     bce:	80 81       	ld	r24, Z
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	80 83       	st	Z, r24
     bd4:	e0 e8       	ldi	r30, 0x80	; 128
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	81 60       	ori	r24, 0x01	; 1
     bdc:	80 83       	st	Z, r24
     bde:	e1 eb       	ldi	r30, 0xB1	; 177
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	84 60       	ori	r24, 0x04	; 4
     be6:	80 83       	st	Z, r24
     be8:	e0 eb       	ldi	r30, 0xB0	; 176
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 83       	st	Z, r24
     bf2:	ea e7       	ldi	r30, 0x7A	; 122
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	84 60       	ori	r24, 0x04	; 4
     bfa:	80 83       	st	Z, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	82 60       	ori	r24, 0x02	; 2
     c00:	80 83       	st	Z, r24
     c02:	80 81       	ld	r24, Z
     c04:	81 60       	ori	r24, 0x01	; 1
     c06:	80 83       	st	Z, r24
     c08:	80 81       	ld	r24, Z
     c0a:	80 68       	ori	r24, 0x80	; 128
     c0c:	80 83       	st	Z, r24
     c0e:	10 92 c1 00 	sts	0x00C1, r1
     c12:	08 95       	ret

00000c14 <global constructors keyed to repRapMode>:
     c14:	84 e1       	ldi	r24, 0x14	; 20
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	90 93 62 01 	sts	0x0162, r25
     c1c:	80 93 61 01 	sts	0x0161, r24
     c20:	90 93 68 01 	sts	0x0168, r25
     c24:	80 93 67 01 	sts	0x0167, r24
     c28:	90 93 6e 01 	sts	0x016E, r25
     c2c:	80 93 6d 01 	sts	0x016D, r24
     c30:	90 93 74 01 	sts	0x0174, r25
     c34:	80 93 73 01 	sts	0x0173, r24
     c38:	90 93 7a 01 	sts	0x017A, r25
     c3c:	80 93 79 01 	sts	0x0179, r24
     c40:	8c e1       	ldi	r24, 0x1C	; 28
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	90 93 80 01 	sts	0x0180, r25
     c48:	80 93 7f 01 	sts	0x017F, r24
     c4c:	e6 e8       	ldi	r30, 0x86	; 134
     c4e:	f1 e0       	ldi	r31, 0x01	; 1
     c50:	86 e0       	ldi	r24, 0x06	; 6
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
     c58:	35 96       	adiw	r30, 0x05	; 5
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	eb 3d       	cpi	r30, 0xDB	; 219
     c5e:	f2 07       	cpc	r31, r18
     c60:	c9 f7       	brne	.-14     	; 0xc54 <global constructors keyed to repRapMode+0x40>
     c62:	3f 96       	adiw	r30, 0x0f	; 15
     c64:	8e e0       	ldi	r24, 0x0E	; 14
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	80 83       	st	Z, r24
     c6c:	35 96       	adiw	r30, 0x05	; 5
     c6e:	22 e0       	ldi	r18, 0x02	; 2
     c70:	e7 31       	cpi	r30, 0x17	; 23
     c72:	f2 07       	cpc	r31, r18
     c74:	c9 f7       	brne	.-14     	; 0xc68 <global constructors keyed to repRapMode+0x54>
     c76:	82 e2       	ldi	r24, 0x22	; 34
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	92 87       	std	Z+10, r25	; 0x0a
     c7c:	81 87       	std	Z+9, r24	; 0x09
     c7e:	95 8b       	std	Z+21, r25	; 0x15
     c80:	84 8b       	std	Z+20, r24	; 0x14
     c82:	90 a3       	std	Z+32, r25	; 0x20
     c84:	87 8f       	std	Z+31, r24	; 0x1f
     c86:	93 a7       	std	Z+43, r25	; 0x2b
     c88:	82 a7       	std	Z+42, r24	; 0x2a
     c8a:	2c e1       	ldi	r18, 0x1C	; 28
     c8c:	31 e0       	ldi	r19, 0x01	; 1
     c8e:	30 93 cb 02 	sts	0x02CB, r19
     c92:	20 93 ca 02 	sts	0x02CA, r18
     c96:	84 e1       	ldi	r24, 0x14	; 20
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	90 93 d0 02 	sts	0x02D0, r25
     c9e:	80 93 cf 02 	sts	0x02CF, r24
     ca2:	30 93 d6 02 	sts	0x02D6, r19
     ca6:	20 93 d5 02 	sts	0x02D5, r18
     caa:	30 93 db 02 	sts	0x02DB, r19
     cae:	20 93 da 02 	sts	0x02DA, r18
     cb2:	08 95       	ret

00000cb4 <showError(char const*)>:
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	7c 01       	movw	r14, r24
     cbe:	02 e4       	ldi	r16, 0x42	; 66
     cc0:	14 e0       	ldi	r17, 0x04	; 4
     cc2:	c8 01       	movw	r24, r16
     cc4:	67 ed       	ldi	r22, 0xD7	; 215
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
     ccc:	c8 01       	movw	r24, r16
     cce:	b7 01       	movw	r22, r14
     cd0:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
     cd4:	c8 01       	movw	r24, r16
     cd6:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
     cda:	c8 01       	movw	r24, r16
     cdc:	6b e2       	ldi	r22, 0x2B	; 43
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	08 95       	ret

00000cee <doAxis(char const*, char*, StepperMotorAxis&)>:
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	8c 01       	movw	r16, r24
     cfc:	7b 01       	movw	r14, r22
     cfe:	ea 01       	movw	r28, r20
     d00:	82 e4       	ldi	r24, 0x42	; 66
     d02:	94 e0       	ldi	r25, 0x04	; 4
     d04:	b8 01       	movw	r22, r16
     d06:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
     d0a:	10 93 52 01 	sts	0x0152, r17
     d0e:	00 93 51 01 	sts	0x0151, r16
     d12:	d0 93 54 01 	sts	0x0154, r29
     d16:	c0 93 53 01 	sts	0x0153, r28
     d1a:	c7 01       	movw	r24, r14
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	f7 01       	movw	r30, r14
     d20:	20 81       	ld	r18, Z
     d22:	27 36       	cpi	r18, 0x67	; 103
     d24:	09 f4       	brne	.+2      	; 0xd28 <doAxis(char const*, char*, StepperMotorAxis&)+0x3a>
     d26:	4a c0       	rjmp	.+148    	; 0xdbc <doAxis(char const*, char*, StepperMotorAxis&)+0xce>
     d28:	28 36       	cpi	r18, 0x68	; 104
     d2a:	a0 f4       	brcc	.+40     	; 0xd54 <doAxis(char const*, char*, StepperMotorAxis&)+0x66>
     d2c:	24 35       	cpi	r18, 0x54	; 84
     d2e:	09 f4       	brne	.+2      	; 0xd32 <doAxis(char const*, char*, StepperMotorAxis&)+0x44>
     d30:	fc c0       	rjmp	.+504    	; 0xf2a <doAxis(char const*, char*, StepperMotorAxis&)+0x23c>
     d32:	25 35       	cpi	r18, 0x55	; 85
     d34:	38 f4       	brcc	.+14     	; 0xd44 <doAxis(char const*, char*, StepperMotorAxis&)+0x56>
     d36:	27 34       	cpi	r18, 0x47	; 71
     d38:	09 f4       	brne	.+2      	; 0xd3c <doAxis(char const*, char*, StepperMotorAxis&)+0x4e>
     d3a:	d6 c0       	rjmp	.+428    	; 0xee8 <doAxis(char const*, char*, StepperMotorAxis&)+0x1fa>
     d3c:	21 35       	cpi	r18, 0x51	; 81
     d3e:	09 f0       	breq	.+2      	; 0xd42 <doAxis(char const*, char*, StepperMotorAxis&)+0x54>
     d40:	22 c1       	rjmp	.+580    	; 0xf86 <doAxis(char const*, char*, StepperMotorAxis&)+0x298>
     d42:	9d c0       	rjmp	.+314    	; 0xe7e <doAxis(char const*, char*, StepperMotorAxis&)+0x190>
     d44:	24 36       	cpi	r18, 0x64	; 100
     d46:	19 f1       	breq	.+70     	; 0xd8e <doAxis(char const*, char*, StepperMotorAxis&)+0xa0>
     d48:	25 36       	cpi	r18, 0x65	; 101
     d4a:	d9 f0       	breq	.+54     	; 0xd82 <doAxis(char const*, char*, StepperMotorAxis&)+0x94>
     d4c:	29 35       	cpi	r18, 0x59	; 89
     d4e:	09 f0       	breq	.+2      	; 0xd52 <doAxis(char const*, char*, StepperMotorAxis&)+0x64>
     d50:	1a c1       	rjmp	.+564    	; 0xf86 <doAxis(char const*, char*, StepperMotorAxis&)+0x298>
     d52:	58 c0       	rjmp	.+176    	; 0xe04 <doAxis(char const*, char*, StepperMotorAxis&)+0x116>
     d54:	20 37       	cpi	r18, 0x70	; 112
     d56:	09 f4       	brne	.+2      	; 0xd5a <doAxis(char const*, char*, StepperMotorAxis&)+0x6c>
     d58:	12 c1       	rjmp	.+548    	; 0xf7e <doAxis(char const*, char*, StepperMotorAxis&)+0x290>
     d5a:	21 37       	cpi	r18, 0x71	; 113
     d5c:	30 f4       	brcc	.+12     	; 0xd6a <doAxis(char const*, char*, StepperMotorAxis&)+0x7c>
     d5e:	28 36       	cpi	r18, 0x68	; 104
     d60:	01 f1       	breq	.+64     	; 0xda2 <doAxis(char const*, char*, StepperMotorAxis&)+0xb4>
     d62:	2d 36       	cpi	r18, 0x6D	; 109
     d64:	09 f0       	breq	.+2      	; 0xd68 <doAxis(char const*, char*, StepperMotorAxis&)+0x7a>
     d66:	0f c1       	rjmp	.+542    	; 0xf86 <doAxis(char const*, char*, StepperMotorAxis&)+0x298>
     d68:	32 c0       	rjmp	.+100    	; 0xdce <doAxis(char const*, char*, StepperMotorAxis&)+0xe0>
     d6a:	23 37       	cpi	r18, 0x73	; 115
     d6c:	31 f0       	breq	.+12     	; 0xd7a <doAxis(char const*, char*, StepperMotorAxis&)+0x8c>
     d6e:	29 37       	cpi	r18, 0x79	; 121
     d70:	f1 f1       	breq	.+124    	; 0xdee <doAxis(char const*, char*, StepperMotorAxis&)+0x100>
     d72:	21 37       	cpi	r18, 0x71	; 113
     d74:	09 f0       	breq	.+2      	; 0xd78 <doAxis(char const*, char*, StepperMotorAxis&)+0x8a>
     d76:	07 c1       	rjmp	.+526    	; 0xf86 <doAxis(char const*, char*, StepperMotorAxis&)+0x298>
     d78:	62 c0       	rjmp	.+196    	; 0xe3e <doAxis(char const*, char*, StepperMotorAxis&)+0x150>
     d7a:	ce 01       	movw	r24, r28
     d7c:	0a 96       	adiw	r24, 0x0a	; 10
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <doAxis(char const*, char*, StepperMotorAxis&)+0x9a>
     d82:	ce 01       	movw	r24, r28
     d84:	0a 96       	adiw	r24, 0x0a	; 10
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
     d8c:	01 c1       	rjmp	.+514    	; 0xf90 <doAxis(char const*, char*, StepperMotorAxis&)+0x2a2>
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	80 93 4f 01 	sts	0x014F, r24
     d94:	82 e4       	ldi	r24, 0x42	; 66
     d96:	94 e0       	ldi	r25, 0x04	; 4
     d98:	65 ea       	ldi	r22, 0xA5	; 165
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
     da0:	c1 c0       	rjmp	.+386    	; 0xf24 <doAxis(char const*, char*, StepperMotorAxis&)+0x236>
     da2:	6c 81       	ldd	r22, Y+4	; 0x04
     da4:	7d 81       	ldd	r23, Y+5	; 0x05
     da6:	88 27       	eor	r24, r24
     da8:	77 fd       	sbrc	r23, 7
     daa:	80 95       	com	r24
     dac:	98 2f       	mov	r25, r24
     dae:	28 ee       	ldi	r18, 0xE8	; 232
     db0:	33 e0       	ldi	r19, 0x03	; 3
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
     dba:	13 c0       	rjmp	.+38     	; 0xde2 <doAxis(char const*, char*, StepperMotorAxis&)+0xf4>
     dbc:	0e 94 8d 03 	call	0x71a	; 0x71a <atol>
     dc0:	ab 01       	movw	r20, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	ce 01       	movw	r24, r28
     dc6:	0a 96       	adiw	r24, 0x0a	; 10
     dc8:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <StepperMotorControlWithButtons::gotoStep(long)>
     dcc:	e1 c0       	rjmp	.+450    	; 0xf90 <doAxis(char const*, char*, StepperMotorAxis&)+0x2a2>
     dce:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <atof>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a e7       	ldi	r20, 0x7A	; 122
     dd8:	54 e4       	ldi	r21, 0x44	; 68
     dda:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__mulsf3>
     dde:	0e 94 9b 21 	call	0x4336	; 0x4336 <__fixsfsi>
     de2:	ab 01       	movw	r20, r22
     de4:	bc 01       	movw	r22, r24
     de6:	ce 01       	movw	r24, r28
     de8:	0e 94 0a 18 	call	0x3014	; 0x3014 <StepperMotorAxis::moveToPositionMicroMFast(long)>
     dec:	d1 c0       	rjmp	.+418    	; 0xf90 <doAxis(char const*, char*, StepperMotorAxis&)+0x2a2>
     dee:	0e 94 8d 03 	call	0x71a	; 0x71a <atol>
     df2:	6e 83       	std	Y+6, r22	; 0x06
     df4:	7f 83       	std	Y+7, r23	; 0x07
     df6:	88 87       	std	Y+8, r24	; 0x08
     df8:	99 87       	std	Y+9, r25	; 0x09
     dfa:	6d 8b       	std	Y+21, r22	; 0x15
     dfc:	7e 8b       	std	Y+22, r23	; 0x16
     dfe:	8f 8b       	std	Y+23, r24	; 0x17
     e00:	98 8f       	std	Y+24, r25	; 0x18
     e02:	c6 c0       	rjmp	.+396    	; 0xf90 <doAxis(char const*, char*, StepperMotorAxis&)+0x2a2>
     e04:	80 91 21 03 	lds	r24, 0x0321
     e08:	90 91 22 03 	lds	r25, 0x0322
     e0c:	44 e6       	ldi	r20, 0x64	; 100
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	00 e1       	ldi	r16, 0x10	; 16
     e16:	17 e2       	ldi	r17, 0x27	; 39
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	0e 94 6e 13 	call	0x26dc	; 0x26dc <RotaryEncoderState::setMinMax(long, long)>
     e20:	1f b7       	in	r17, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	4e 81       	ldd	r20, Y+6	; 0x06
     e26:	5f 81       	ldd	r21, Y+7	; 0x07
     e28:	68 85       	ldd	r22, Y+8	; 0x08
     e2a:	79 85       	ldd	r23, Y+9	; 0x09
     e2c:	80 91 21 03 	lds	r24, 0x0321
     e30:	90 91 22 03 	lds	r25, 0x0322
     e34:	0e 94 fd 12 	call	0x25fa	; 0x25fa <RotaryEncoderState::setValue_unsafe(long)>
     e38:	1f bf       	out	0x3f, r17	; 63
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	71 c0       	rjmp	.+226    	; 0xf20 <doAxis(char const*, char*, StepperMotorAxis&)+0x232>
     e3e:	0e 94 6f 03 	call	0x6de	; 0x6de <atoi>
     e42:	7c 01       	movw	r14, r24
     e44:	2a 81       	ldd	r18, Y+2	; 0x02
     e46:	3b 81       	ldd	r19, Y+3	; 0x03
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	77 e8       	ldi	r23, 0x87	; 135
     e50:	83 e9       	ldi	r24, 0x93	; 147
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
     e58:	ca 01       	movw	r24, r20
     e5a:	b9 01       	movw	r22, r18
     e5c:	24 e6       	ldi	r18, 0x64	; 100
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
     e68:	00 e0       	ldi	r16, 0x00	; 0
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	a8 01       	movw	r20, r16
     e6e:	97 01       	movw	r18, r14
     e70:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
     e74:	2d 8b       	std	Y+21, r18	; 0x15
     e76:	3e 8b       	std	Y+22, r19	; 0x16
     e78:	4f 8b       	std	Y+23, r20	; 0x17
     e7a:	58 8f       	std	Y+24, r21	; 0x18
     e7c:	33 c0       	rjmp	.+102    	; 0xee4 <doAxis(char const*, char*, StepperMotorAxis&)+0x1f6>
     e7e:	80 91 21 03 	lds	r24, 0x0321
     e82:	90 91 22 03 	lds	r25, 0x0322
     e86:	4e e1       	ldi	r20, 0x1E	; 30
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	00 e7       	ldi	r16, 0x70	; 112
     e90:	17 e1       	ldi	r17, 0x17	; 23
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	0e 94 6e 13 	call	0x26dc	; 0x26dc <RotaryEncoderState::setMinMax(long, long)>
     e9a:	1f b7       	in	r17, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	2a 81       	ldd	r18, Y+2	; 0x02
     ea0:	3b 81       	ldd	r19, Y+3	; 0x03
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	77 e8       	ldi	r23, 0x87	; 135
     eaa:	83 e9       	ldi	r24, 0x93	; 147
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
     eb2:	ca 01       	movw	r24, r20
     eb4:	b9 01       	movw	r22, r18
     eb6:	24 e6       	ldi	r18, 0x64	; 100
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
     ec2:	2d 89       	ldd	r18, Y+21	; 0x15
     ec4:	3e 89       	ldd	r19, Y+22	; 0x16
     ec6:	4f 89       	ldd	r20, Y+23	; 0x17
     ec8:	58 8d       	ldd	r21, Y+24	; 0x18
     eca:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	80 91 21 03 	lds	r24, 0x0321
     ed6:	90 91 22 03 	lds	r25, 0x0322
     eda:	ba 01       	movw	r22, r20
     edc:	a9 01       	movw	r20, r18
     ede:	0e 94 fd 12 	call	0x25fa	; 0x25fa <RotaryEncoderState::setValue_unsafe(long)>
     ee2:	1f bf       	out	0x3f, r17	; 63
     ee4:	84 e0       	ldi	r24, 0x04	; 4
     ee6:	1c c0       	rjmp	.+56     	; 0xf20 <doAxis(char const*, char*, StepperMotorAxis&)+0x232>
     ee8:	80 91 21 03 	lds	r24, 0x0321
     eec:	90 91 22 03 	lds	r25, 0x0322
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	00 e1       	ldi	r16, 0x10	; 16
     efa:	17 e2       	ldi	r17, 0x27	; 39
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	0e 94 6e 13 	call	0x26dc	; 0x26dc <RotaryEncoderState::setMinMax(long, long)>
     f04:	1f b7       	in	r17, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	4c 85       	ldd	r20, Y+12	; 0x0c
     f0a:	5d 85       	ldd	r21, Y+13	; 0x0d
     f0c:	6e 85       	ldd	r22, Y+14	; 0x0e
     f0e:	7f 85       	ldd	r23, Y+15	; 0x0f
     f10:	80 91 21 03 	lds	r24, 0x0321
     f14:	90 91 22 03 	lds	r25, 0x0322
     f18:	0e 94 fd 12 	call	0x25fa	; 0x25fa <RotaryEncoderState::setValue_unsafe(long)>
     f1c:	1f bf       	out	0x3f, r17	; 63
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	80 93 4f 01 	sts	0x014F, r24
     f24:	10 92 50 01 	sts	0x0150, r1
     f28:	33 c0       	rjmp	.+102    	; 0xf90 <doAxis(char const*, char*, StepperMotorAxis&)+0x2a2>
     f2a:	80 91 21 03 	lds	r24, 0x0321
     f2e:	90 91 22 03 	lds	r25, 0x0322
     f32:	48 e0       	ldi	r20, 0x08	; 8
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	00 ed       	ldi	r16, 0xD0	; 208
     f3c:	17 e0       	ldi	r17, 0x07	; 7
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	0e 94 6e 13 	call	0x26dc	; 0x26dc <RotaryEncoderState::setMinMax(long, long)>
     f46:	1f b7       	in	r17, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	80 91 21 03 	lds	r24, 0x0321
     f4e:	90 91 22 03 	lds	r25, 0x0322
     f52:	48 ee       	ldi	r20, 0xE8	; 232
     f54:	53 e0       	ldi	r21, 0x03	; 3
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <RotaryEncoderState::setValue_unsafe(long)>
     f5e:	1f bf       	out	0x3f, r17	; 63
     f60:	86 e0       	ldi	r24, 0x06	; 6
     f62:	80 93 4f 01 	sts	0x014F, r24
     f66:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
     f6a:	60 93 59 01 	sts	0x0159, r22
     f6e:	70 93 5a 01 	sts	0x015A, r23
     f72:	80 93 5b 01 	sts	0x015B, r24
     f76:	90 93 5c 01 	sts	0x015C, r25
     f7a:	10 92 50 01 	sts	0x0150, r1
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <StepperMotorAxis::debugPrint()>
     f84:	0b c0       	rjmp	.+22     	; 0xf9c <doAxis(char const*, char*, StepperMotorAxis&)+0x2ae>
     f86:	80 e9       	ldi	r24, 0x90	; 144
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <showError(char const*)>
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <doAxis(char const*, char*, StepperMotorAxis&)+0x2ae>
     f90:	82 e4       	ldi	r24, 0x42	; 66
     f92:	94 e0       	ldi	r25, 0x04	; 4
     f94:	6d e8       	ldi	r22, 0x8D	; 141
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	08 95       	ret

00000faa <doAlterDelayBetweenSteps()>:
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	e0 91 21 03 	lds	r30, 0x0321
     fb6:	f0 91 22 03 	lds	r31, 0x0322
     fba:	86 85       	ldd	r24, Z+14	; 0x0e
     fbc:	88 23       	and	r24, r24
     fbe:	51 f1       	breq	.+84     	; 0x1014 <doAlterDelayBetweenSteps()+0x6a>
     fc0:	8f b7       	in	r24, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	16 86       	std	Z+14, r1	; 0x0e
     fc6:	e0 84       	ldd	r14, Z+8	; 0x08
     fc8:	f1 84       	ldd	r15, Z+9	; 0x09
     fca:	02 85       	ldd	r16, Z+10	; 0x0a
     fcc:	13 85       	ldd	r17, Z+11	; 0x0b
     fce:	8f bf       	out	0x3f, r24	; 63
     fd0:	60 91 51 01 	lds	r22, 0x0151
     fd4:	70 91 52 01 	lds	r23, 0x0152
     fd8:	82 e4       	ldi	r24, 0x42	; 66
     fda:	94 e0       	ldi	r25, 0x04	; 4
     fdc:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
     fe0:	82 e4       	ldi	r24, 0x42	; 66
     fe2:	94 e0       	ldi	r25, 0x04	; 4
     fe4:	6e ed       	ldi	r22, 0xDE	; 222
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
     fec:	82 e4       	ldi	r24, 0x42	; 66
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	b8 01       	movw	r22, r16
     ff2:	a7 01       	movw	r20, r14
     ff4:	2a e0       	ldi	r18, 0x0A	; 10
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Print::println(long, int)>
     ffc:	e0 91 53 01 	lds	r30, 0x0153
    1000:	f0 91 54 01 	lds	r31, 0x0154
    1004:	e6 82       	std	Z+6, r14	; 0x06
    1006:	f7 82       	std	Z+7, r15	; 0x07
    1008:	00 87       	std	Z+8, r16	; 0x08
    100a:	11 87       	std	Z+9, r17	; 0x09
    100c:	e5 8a       	std	Z+21, r14	; 0x15
    100e:	f6 8a       	std	Z+22, r15	; 0x16
    1010:	07 8b       	std	Z+23, r16	; 0x17
    1012:	10 8f       	std	Z+24, r17	; 0x18
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	08 95       	ret

0000101e <doGotoStep()>:
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	e0 91 21 03 	lds	r30, 0x0321
    102a:	f0 91 22 03 	lds	r31, 0x0322
    102e:	86 85       	ldd	r24, Z+14	; 0x0e
    1030:	88 23       	and	r24, r24
    1032:	61 f1       	breq	.+88     	; 0x108c <doGotoStep()+0x6e>
    1034:	8f b7       	in	r24, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	16 86       	std	Z+14, r1	; 0x0e
    103a:	e0 84       	ldd	r14, Z+8	; 0x08
    103c:	f1 84       	ldd	r15, Z+9	; 0x09
    103e:	02 85       	ldd	r16, Z+10	; 0x0a
    1040:	13 85       	ldd	r17, Z+11	; 0x0b
    1042:	8f bf       	out	0x3f, r24	; 63
    1044:	60 91 51 01 	lds	r22, 0x0151
    1048:	70 91 52 01 	lds	r23, 0x0152
    104c:	82 e4       	ldi	r24, 0x42	; 66
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    1054:	82 e4       	ldi	r24, 0x42	; 66
    1056:	94 e0       	ldi	r25, 0x04	; 4
    1058:	67 ef       	ldi	r22, 0xF7	; 247
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    1060:	82 e4       	ldi	r24, 0x42	; 66
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	b8 01       	movw	r22, r16
    1066:	a7 01       	movw	r20, r14
    1068:	2a e0       	ldi	r18, 0x0A	; 10
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Print::println(long, int)>
    1070:	e0 91 53 01 	lds	r30, 0x0153
    1074:	f0 91 54 01 	lds	r31, 0x0154
    1078:	e6 82       	std	Z+6, r14	; 0x06
    107a:	f7 82       	std	Z+7, r15	; 0x07
    107c:	00 87       	std	Z+8, r16	; 0x08
    107e:	11 87       	std	Z+9, r17	; 0x09
    1080:	cf 01       	movw	r24, r30
    1082:	0a 96       	adiw	r24, 0x0a	; 10
    1084:	b8 01       	movw	r22, r16
    1086:	a7 01       	movw	r20, r14
    1088:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <StepperMotorControlWithButtons::gotoStep(long)>
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	08 95       	ret

00001096 <doMoveForthAndBackAtSpeed()>:
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	e0 91 21 03 	lds	r30, 0x0321
    10aa:	f0 91 22 03 	lds	r31, 0x0322
    10ae:	86 85       	ldd	r24, Z+14	; 0x0e
    10b0:	88 23       	and	r24, r24
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <doMoveForthAndBackAtSpeed()+0x20>
    10b4:	42 c0       	rjmp	.+132    	; 0x113a <doMoveForthAndBackAtSpeed()+0xa4>
    10b6:	8f b7       	in	r24, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	16 86       	std	Z+14, r1	; 0x0e
    10bc:	a0 84       	ldd	r10, Z+8	; 0x08
    10be:	b1 84       	ldd	r11, Z+9	; 0x09
    10c0:	c2 84       	ldd	r12, Z+10	; 0x0a
    10c2:	d3 84       	ldd	r13, Z+11	; 0x0b
    10c4:	8f bf       	out	0x3f, r24	; 63
    10c6:	75 01       	movw	r14, r10
    10c8:	60 91 51 01 	lds	r22, 0x0151
    10cc:	70 91 52 01 	lds	r23, 0x0152
    10d0:	82 e4       	ldi	r24, 0x42	; 66
    10d2:	94 e0       	ldi	r25, 0x04	; 4
    10d4:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    10d8:	82 e4       	ldi	r24, 0x42	; 66
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	64 e0       	ldi	r22, 0x04	; 4
    10de:	71 e0       	ldi	r23, 0x01	; 1
    10e0:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    10e4:	82 e4       	ldi	r24, 0x42	; 66
    10e6:	94 e0       	ldi	r25, 0x04	; 4
    10e8:	b5 01       	movw	r22, r10
    10ea:	4a e0       	ldi	r20, 0x0A	; 10
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <Print::println(unsigned int, int)>
    10f2:	c0 90 53 01 	lds	r12, 0x0153
    10f6:	d0 90 54 01 	lds	r13, 0x0154
    10fa:	d6 01       	movw	r26, r12
    10fc:	12 96       	adiw	r26, 0x02	; 2
    10fe:	2d 91       	ld	r18, X+
    1100:	3c 91       	ld	r19, X
    1102:	13 97       	sbiw	r26, 0x03	; 3
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	77 e8       	ldi	r23, 0x87	; 135
    110c:	83 e9       	ldi	r24, 0x93	; 147
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1114:	ca 01       	movw	r24, r20
    1116:	b9 01       	movw	r22, r18
    1118:	24 e6       	ldi	r18, 0x64	; 100
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    1124:	00 e0       	ldi	r16, 0x00	; 0
    1126:	10 e0       	ldi	r17, 0x00	; 0
    1128:	a8 01       	movw	r20, r16
    112a:	97 01       	movw	r18, r14
    112c:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1130:	f6 01       	movw	r30, r12
    1132:	25 8b       	std	Z+21, r18	; 0x15
    1134:	36 8b       	std	Z+22, r19	; 0x16
    1136:	47 8b       	std	Z+23, r20	; 0x17
    1138:	50 8f       	std	Z+24, r21	; 0x18
    113a:	80 91 50 01 	lds	r24, 0x0150
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	09 f4       	brne	.+2      	; 0x1144 <doMoveForthAndBackAtSpeed()+0xae>
    1142:	48 c0       	rjmp	.+144    	; 0x11d4 <doMoveForthAndBackAtSpeed()+0x13e>
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	38 f0       	brcs	.+14     	; 0x1156 <doMoveForthAndBackAtSpeed()+0xc0>
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	09 f4       	brne	.+2      	; 0x114e <doMoveForthAndBackAtSpeed()+0xb8>
    114c:	6c c0       	rjmp	.+216    	; 0x1226 <doMoveForthAndBackAtSpeed()+0x190>
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	09 f0       	breq	.+2      	; 0x1154 <doMoveForthAndBackAtSpeed()+0xbe>
    1152:	f9 c0       	rjmp	.+498    	; 0x1346 <doMoveForthAndBackAtSpeed()+0x2b0>
    1154:	b0 c0       	rjmp	.+352    	; 0x12b6 <doMoveForthAndBackAtSpeed()+0x220>
    1156:	80 91 53 01 	lds	r24, 0x0153
    115a:	90 91 54 01 	lds	r25, 0x0154
    115e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <StepperMotorAxis::getAbsolutePositionMicroM()>
    1162:	6b 01       	movw	r12, r22
    1164:	7c 01       	movw	r14, r24
    1166:	a0 90 53 01 	lds	r10, 0x0153
    116a:	b0 90 54 01 	lds	r11, 0x0154
    116e:	80 e6       	ldi	r24, 0x60	; 96
    1170:	99 e7       	ldi	r25, 0x79	; 121
    1172:	ae ef       	ldi	r26, 0xFE	; 254
    1174:	bf ef       	ldi	r27, 0xFF	; 255
    1176:	c8 0e       	add	r12, r24
    1178:	d9 1e       	adc	r13, r25
    117a:	ea 1e       	adc	r14, r26
    117c:	fb 1e       	adc	r15, r27
    117e:	d5 01       	movw	r26, r10
    1180:	55 96       	adiw	r26, 0x15	; 21
    1182:	6d 91       	ld	r22, X+
    1184:	7d 91       	ld	r23, X+
    1186:	8d 91       	ld	r24, X+
    1188:	9c 91       	ld	r25, X
    118a:	58 97       	sbiw	r26, 0x18	; 24
    118c:	20 ea       	ldi	r18, 0xA0	; 160
    118e:	36 e8       	ldi	r19, 0x86	; 134
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    1198:	28 ee       	ldi	r18, 0xE8	; 232
    119a:	33 e0       	ldi	r19, 0x03	; 3
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    11a4:	ca 01       	movw	r24, r20
    11a6:	b9 01       	movw	r22, r18
    11a8:	f5 01       	movw	r30, r10
    11aa:	22 81       	ldd	r18, Z+2	; 0x02
    11ac:	33 81       	ldd	r19, Z+3	; 0x03
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    11b6:	24 e6       	ldi	r18, 0x64	; 100
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    11c2:	89 01       	movw	r16, r18
    11c4:	9a 01       	movw	r18, r20
    11c6:	c5 01       	movw	r24, r10
    11c8:	b7 01       	movw	r22, r14
    11ca:	a6 01       	movw	r20, r12
    11cc:	0e 94 8a 18 	call	0x3114	; 0x3114 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	b7 c0       	rjmp	.+366    	; 0x1342 <doMoveForthAndBackAtSpeed()+0x2ac>
    11d4:	e0 91 53 01 	lds	r30, 0x0153
    11d8:	f0 91 54 01 	lds	r31, 0x0154
    11dc:	80 81       	ld	r24, Z
    11de:	88 23       	and	r24, r24
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <doMoveForthAndBackAtSpeed()+0x14e>
    11e2:	b1 c0       	rjmp	.+354    	; 0x1346 <doMoveForthAndBackAtSpeed()+0x2b0>
    11e4:	84 89       	ldd	r24, Z+20	; 0x14
    11e6:	88 23       	and	r24, r24
    11e8:	09 f0       	breq	.+2      	; 0x11ec <doMoveForthAndBackAtSpeed()+0x156>
    11ea:	ad c0       	rjmp	.+346    	; 0x1346 <doMoveForthAndBackAtSpeed()+0x2b0>
    11ec:	cf 01       	movw	r24, r30
    11ee:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <StepperMotorAxis::getAbsolutePositionMicroM()>
    11f2:	6b 01       	movw	r12, r22
    11f4:	7c 01       	movw	r14, r24
    11f6:	a0 90 53 01 	lds	r10, 0x0153
    11fa:	b0 90 54 01 	lds	r11, 0x0154
    11fe:	80 ea       	ldi	r24, 0xA0	; 160
    1200:	96 e8       	ldi	r25, 0x86	; 134
    1202:	a1 e0       	ldi	r26, 0x01	; 1
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	c8 0e       	add	r12, r24
    1208:	d9 1e       	adc	r13, r25
    120a:	ea 1e       	adc	r14, r26
    120c:	fb 1e       	adc	r15, r27
    120e:	d5 01       	movw	r26, r10
    1210:	55 96       	adiw	r26, 0x15	; 21
    1212:	6d 91       	ld	r22, X+
    1214:	7d 91       	ld	r23, X+
    1216:	8d 91       	ld	r24, X+
    1218:	9c 91       	ld	r25, X
    121a:	58 97       	sbiw	r26, 0x18	; 24
    121c:	20 ea       	ldi	r18, 0xA0	; 160
    121e:	36 e8       	ldi	r19, 0x86	; 134
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	6f c0       	rjmp	.+222    	; 0x1304 <doMoveForthAndBackAtSpeed()+0x26e>
    1226:	e0 91 53 01 	lds	r30, 0x0153
    122a:	f0 91 54 01 	lds	r31, 0x0154
    122e:	80 81       	ld	r24, Z
    1230:	88 23       	and	r24, r24
    1232:	09 f0       	breq	.+2      	; 0x1236 <doMoveForthAndBackAtSpeed()+0x1a0>
    1234:	88 c0       	rjmp	.+272    	; 0x1346 <doMoveForthAndBackAtSpeed()+0x2b0>
    1236:	84 89       	ldd	r24, Z+20	; 0x14
    1238:	88 23       	and	r24, r24
    123a:	09 f0       	breq	.+2      	; 0x123e <doMoveForthAndBackAtSpeed()+0x1a8>
    123c:	84 c0       	rjmp	.+264    	; 0x1346 <doMoveForthAndBackAtSpeed()+0x2b0>
    123e:	cf 01       	movw	r24, r30
    1240:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <StepperMotorAxis::getAbsolutePositionMicroM()>
    1244:	6b 01       	movw	r12, r22
    1246:	7c 01       	movw	r14, r24
    1248:	a0 90 53 01 	lds	r10, 0x0153
    124c:	b0 90 54 01 	lds	r11, 0x0154
    1250:	80 e5       	ldi	r24, 0x50	; 80
    1252:	93 ec       	ldi	r25, 0xC3	; 195
    1254:	a0 e0       	ldi	r26, 0x00	; 0
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	c8 0e       	add	r12, r24
    125a:	d9 1e       	adc	r13, r25
    125c:	ea 1e       	adc	r14, r26
    125e:	fb 1e       	adc	r15, r27
    1260:	d5 01       	movw	r26, r10
    1262:	55 96       	adiw	r26, 0x15	; 21
    1264:	6d 91       	ld	r22, X+
    1266:	7d 91       	ld	r23, X+
    1268:	8d 91       	ld	r24, X+
    126a:	9c 91       	ld	r25, X
    126c:	58 97       	sbiw	r26, 0x18	; 24
    126e:	20 e5       	ldi	r18, 0x50	; 80
    1270:	33 ec       	ldi	r19, 0xC3	; 195
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    127a:	28 ee       	ldi	r18, 0xE8	; 232
    127c:	33 e0       	ldi	r19, 0x03	; 3
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1286:	ca 01       	movw	r24, r20
    1288:	b9 01       	movw	r22, r18
    128a:	f5 01       	movw	r30, r10
    128c:	22 81       	ldd	r18, Z+2	; 0x02
    128e:	33 81       	ldd	r19, Z+3	; 0x03
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    1298:	24 e6       	ldi	r18, 0x64	; 100
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    12a4:	89 01       	movw	r16, r18
    12a6:	9a 01       	movw	r18, r20
    12a8:	c5 01       	movw	r24, r10
    12aa:	b7 01       	movw	r22, r14
    12ac:	a6 01       	movw	r20, r12
    12ae:	0e 94 8a 18 	call	0x3114	; 0x3114 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	46 c0       	rjmp	.+140    	; 0x1342 <doMoveForthAndBackAtSpeed()+0x2ac>
    12b6:	e0 91 53 01 	lds	r30, 0x0153
    12ba:	f0 91 54 01 	lds	r31, 0x0154
    12be:	80 81       	ld	r24, Z
    12c0:	88 23       	and	r24, r24
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <doMoveForthAndBackAtSpeed()+0x230>
    12c4:	40 c0       	rjmp	.+128    	; 0x1346 <doMoveForthAndBackAtSpeed()+0x2b0>
    12c6:	84 89       	ldd	r24, Z+20	; 0x14
    12c8:	88 23       	and	r24, r24
    12ca:	e9 f5       	brne	.+122    	; 0x1346 <doMoveForthAndBackAtSpeed()+0x2b0>
    12cc:	cf 01       	movw	r24, r30
    12ce:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <StepperMotorAxis::getAbsolutePositionMicroM()>
    12d2:	6b 01       	movw	r12, r22
    12d4:	7c 01       	movw	r14, r24
    12d6:	a0 90 53 01 	lds	r10, 0x0153
    12da:	b0 90 54 01 	lds	r11, 0x0154
    12de:	80 eb       	ldi	r24, 0xB0	; 176
    12e0:	9c e3       	ldi	r25, 0x3C	; 60
    12e2:	af ef       	ldi	r26, 0xFF	; 255
    12e4:	bf ef       	ldi	r27, 0xFF	; 255
    12e6:	c8 0e       	add	r12, r24
    12e8:	d9 1e       	adc	r13, r25
    12ea:	ea 1e       	adc	r14, r26
    12ec:	fb 1e       	adc	r15, r27
    12ee:	d5 01       	movw	r26, r10
    12f0:	55 96       	adiw	r26, 0x15	; 21
    12f2:	6d 91       	ld	r22, X+
    12f4:	7d 91       	ld	r23, X+
    12f6:	8d 91       	ld	r24, X+
    12f8:	9c 91       	ld	r25, X
    12fa:	58 97       	sbiw	r26, 0x18	; 24
    12fc:	20 e5       	ldi	r18, 0x50	; 80
    12fe:	33 ec       	ldi	r19, 0xC3	; 195
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    1308:	28 ee       	ldi	r18, 0xE8	; 232
    130a:	33 e0       	ldi	r19, 0x03	; 3
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	f5 01       	movw	r30, r10
    131a:	22 81       	ldd	r18, Z+2	; 0x02
    131c:	33 81       	ldd	r19, Z+3	; 0x03
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    1326:	24 e6       	ldi	r18, 0x64	; 100
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    1332:	89 01       	movw	r16, r18
    1334:	9a 01       	movw	r18, r20
    1336:	c5 01       	movw	r24, r10
    1338:	b7 01       	movw	r22, r14
    133a:	a6 01       	movw	r20, r12
    133c:	0e 94 8a 18 	call	0x3114	; 0x3114 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	80 93 50 01 	sts	0x0150, r24
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	af 90       	pop	r10
    1356:	08 95       	ret

00001358 <doStepTicking()>:
    1358:	6f 92       	push	r6
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1374:	7b 01       	movw	r14, r22
    1376:	8c 01       	movw	r16, r24
    1378:	60 90 59 01 	lds	r6, 0x0159
    137c:	70 90 5a 01 	lds	r7, 0x015A
    1380:	80 90 5b 01 	lds	r8, 0x015B
    1384:	90 90 5c 01 	lds	r9, 0x015C
    1388:	e0 91 21 03 	lds	r30, 0x0321
    138c:	f0 91 22 03 	lds	r31, 0x0322
    1390:	86 85       	ldd	r24, Z+14	; 0x0e
    1392:	88 23       	and	r24, r24
    1394:	c1 f0       	breq	.+48     	; 0x13c6 <doStepTicking()+0x6e>
    1396:	82 e4       	ldi	r24, 0x42	; 66
    1398:	94 e0       	ldi	r25, 0x04	; 4
    139a:	61 e2       	ldi	r22, 0x21	; 33
    139c:	71 e0       	ldi	r23, 0x01	; 1
    139e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    13a2:	e0 91 21 03 	lds	r30, 0x0321
    13a6:	f0 91 22 03 	lds	r31, 0x0322
    13aa:	8f b7       	in	r24, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	16 86       	std	Z+14, r1	; 0x0e
    13b0:	40 85       	ldd	r20, Z+8	; 0x08
    13b2:	51 85       	ldd	r21, Z+9	; 0x09
    13b4:	62 85       	ldd	r22, Z+10	; 0x0a
    13b6:	73 85       	ldd	r23, Z+11	; 0x0b
    13b8:	8f bf       	out	0x3f, r24	; 63
    13ba:	82 e4       	ldi	r24, 0x42	; 66
    13bc:	94 e0       	ldi	r25, 0x04	; 4
    13be:	2a e0       	ldi	r18, 0x0A	; 10
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Print::println(long, int)>
    13c6:	e0 91 21 03 	lds	r30, 0x0321
    13ca:	f0 91 22 03 	lds	r31, 0x0322
    13ce:	8f b7       	in	r24, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	16 86       	std	Z+14, r1	; 0x0e
    13d4:	a0 84       	ldd	r10, Z+8	; 0x08
    13d6:	b1 84       	ldd	r11, Z+9	; 0x09
    13d8:	c2 84       	ldd	r12, Z+10	; 0x0a
    13da:	d3 84       	ldd	r13, Z+11	; 0x0b
    13dc:	8f bf       	out	0x3f, r24	; 63
    13de:	e6 18       	sub	r14, r6
    13e0:	f7 08       	sbc	r15, r7
    13e2:	08 09       	sbc	r16, r8
    13e4:	19 09       	sbc	r17, r9
    13e6:	ea 14       	cp	r14, r10
    13e8:	fb 04       	cpc	r15, r11
    13ea:	0c 05       	cpc	r16, r12
    13ec:	1d 05       	cpc	r17, r13
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <doStepTicking()+0x9a>
    13f0:	47 c0       	rjmp	.+142    	; 0x1480 <doStepTicking()+0x128>
    13f2:	e0 91 53 01 	lds	r30, 0x0153
    13f6:	f0 91 54 01 	lds	r31, 0x0154
    13fa:	44 85       	ldd	r20, Z+12	; 0x0c
    13fc:	55 85       	ldd	r21, Z+13	; 0x0d
    13fe:	66 85       	ldd	r22, Z+14	; 0x0e
    1400:	77 85       	ldd	r23, Z+15	; 0x0f
    1402:	80 91 50 01 	lds	r24, 0x0150
    1406:	88 23       	and	r24, r24
    1408:	41 f0       	breq	.+16     	; 0x141a <doStepTicking()+0xc2>
    140a:	7a 01       	movw	r14, r20
    140c:	8b 01       	movw	r16, r22
    140e:	08 94       	sec
    1410:	e1 1c       	adc	r14, r1
    1412:	f1 1c       	adc	r15, r1
    1414:	01 1d       	adc	r16, r1
    1416:	11 1d       	adc	r17, r1
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <doStepTicking()+0xd0>
    141a:	7a 01       	movw	r14, r20
    141c:	8b 01       	movw	r16, r22
    141e:	08 94       	sec
    1420:	e1 08       	sbc	r14, r1
    1422:	f1 08       	sbc	r15, r1
    1424:	01 09       	sbc	r16, r1
    1426:	11 09       	sbc	r17, r1
    1428:	cf 01       	movw	r24, r30
    142a:	0a 96       	adiw	r24, 0x0a	; 10
    142c:	b8 01       	movw	r22, r16
    142e:	a7 01       	movw	r20, r14
    1430:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <StepperMotorControlWithButtons::gotoStep(long)>
    1434:	82 e4       	ldi	r24, 0x42	; 66
    1436:	94 e0       	ldi	r25, 0x04	; 4
    1438:	64 e1       	ldi	r22, 0x14	; 20
    143a:	71 e0       	ldi	r23, 0x01	; 1
    143c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    1440:	82 e4       	ldi	r24, 0x42	; 66
    1442:	94 e0       	ldi	r25, 0x04	; 4
    1444:	b6 01       	movw	r22, r12
    1446:	a5 01       	movw	r20, r10
    1448:	2a e0       	ldi	r18, 0x0A	; 10
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <Print::print(unsigned long, int)>
    1450:	82 e4       	ldi	r24, 0x42	; 66
    1452:	94 e0       	ldi	r25, 0x04	; 4
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	71 e0       	ldi	r23, 0x01	; 1
    1458:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <Print::print(char const*)>
    145c:	82 e4       	ldi	r24, 0x42	; 66
    145e:	94 e0       	ldi	r25, 0x04	; 4
    1460:	b8 01       	movw	r22, r16
    1462:	a7 01       	movw	r20, r14
    1464:	2a e0       	ldi	r18, 0x0A	; 10
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Print::println(long, int)>
    146c:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1470:	60 93 59 01 	sts	0x0159, r22
    1474:	70 93 5a 01 	sts	0x015A, r23
    1478:	80 93 5b 01 	sts	0x015B, r24
    147c:	90 93 5c 01 	sts	0x015C, r25
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	9f 90       	pop	r9
    1492:	8f 90       	pop	r8
    1494:	7f 90       	pop	r7
    1496:	6f 90       	pop	r6
    1498:	08 95       	ret

0000149a <stop()>:
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	0c e4       	ldi	r16, 0x4C	; 76
    14a0:	12 e0       	ldi	r17, 0x02	; 2
    14a2:	c8 01       	movw	r24, r16
    14a4:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <StepperMotorAxis::stop()>
    14a8:	c8 01       	movw	r24, r16
    14aa:	4f 96       	adiw	r24, 0x1f	; 31
    14ac:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <StepperMotorAxis::stop()>
    14b0:	c8 01       	movw	r24, r16
    14b2:	ce 96       	adiw	r24, 0x3e	; 62
    14b4:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <StepperMotorAxis::stop()>
    14b8:	89 ea       	ldi	r24, 0xA9	; 169
    14ba:	92 e0       	ldi	r25, 0x02	; 2
    14bc:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <StepperMotorAxis::stop()>
    14c0:	10 92 4f 01 	sts	0x014F, r1
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <RepRapPCBTest::loop()>:
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	81 e6       	ldi	r24, 0x61	; 97
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <RepRapPCB::update()>
    14da:	8f ed       	ldi	r24, 0xDF	; 223
    14dc:	92 e0       	ldi	r25, 0x02	; 2
    14de:	0e 94 84 14 	call	0x2908	; 0x2908 <SerialReader::update()>
    14e2:	86 ee       	ldi	r24, 0xE6	; 230
    14e4:	92 e0       	ldi	r25, 0x02	; 2
    14e6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <AdvButton::update()>
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <BlinkingLed::update()>
    14f2:	80 91 e5 02 	lds	r24, 0x02E5
    14f6:	88 23       	and	r24, r24
    14f8:	09 f4       	brne	.+2      	; 0x14fc <RepRapPCBTest::loop()+0x32>
    14fa:	59 c0       	rjmp	.+178    	; 0x15ae <RepRapPCBTest::loop()+0xe4>
    14fc:	8f ed       	ldi	r24, 0xDF	; 223
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	0e 94 76 14 	call	0x28ec	; 0x28ec <SerialReader::readln()>
    1504:	8c 01       	movw	r16, r24
    1506:	82 e4       	ldi	r24, 0x42	; 66
    1508:	94 e0       	ldi	r25, 0x04	; 4
    150a:	b8 01       	movw	r22, r16
    150c:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <Print::println(char const*)>
    1510:	e8 01       	movw	r28, r16
    1512:	21 96       	adiw	r28, 0x01	; 1
    1514:	f8 01       	movw	r30, r16
    1516:	00 81       	ld	r16, Z
    1518:	03 37       	cpi	r16, 0x73	; 115
    151a:	09 f4       	brne	.+2      	; 0x151e <RepRapPCBTest::loop()+0x54>
    151c:	41 c0       	rjmp	.+130    	; 0x15a0 <RepRapPCBTest::loop()+0xd6>
    151e:	04 37       	cpi	r16, 0x74	; 116
    1520:	38 f4       	brcc	.+14     	; 0x1530 <RepRapPCBTest::loop()+0x66>
    1522:	08 36       	cpi	r16, 0x68	; 104
    1524:	b1 f1       	breq	.+108    	; 0x1592 <RepRapPCBTest::loop()+0xc8>
    1526:	09 36       	cpi	r16, 0x69	; 105
    1528:	51 f0       	breq	.+20     	; 0x153e <RepRapPCBTest::loop()+0x74>
    152a:	01 36       	cpi	r16, 0x61	; 97
    152c:	e1 f5       	brne	.+120    	; 0x15a6 <RepRapPCBTest::loop()+0xdc>
    152e:	0e c0       	rjmp	.+28     	; 0x154c <RepRapPCBTest::loop()+0x82>
    1530:	09 37       	cpi	r16, 0x79	; 121
    1532:	19 f1       	breq	.+70     	; 0x157a <RepRapPCBTest::loop()+0xb0>
    1534:	0a 37       	cpi	r16, 0x7A	; 122
    1536:	39 f1       	breq	.+78     	; 0x1586 <RepRapPCBTest::loop()+0xbc>
    1538:	08 37       	cpi	r16, 0x78	; 120
    153a:	a9 f5       	brne	.+106    	; 0x15a6 <RepRapPCBTest::loop()+0xdc>
    153c:	16 c0       	rjmp	.+44     	; 0x156a <RepRapPCBTest::loop()+0xa0>
    153e:	0e 94 4d 0a 	call	0x149a	; 0x149a <stop()>
    1542:	85 e0       	ldi	r24, 0x05	; 5
    1544:	80 93 4f 01 	sts	0x014F, r24
    1548:	10 92 50 01 	sts	0x0150, r1
    154c:	88 e6       	ldi	r24, 0x68	; 104
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	be 01       	movw	r22, r28
    1552:	4c e4       	ldi	r20, 0x4C	; 76
    1554:	52 e0       	ldi	r21, 0x02	; 2
    1556:	0e 94 77 06 	call	0xcee	; 0xcee <doAxis(char const*, char*, StepperMotorAxis&)>
    155a:	8f e6       	ldi	r24, 0x6F	; 111
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	be 01       	movw	r22, r28
    1560:	4b e6       	ldi	r20, 0x6B	; 107
    1562:	52 e0       	ldi	r21, 0x02	; 2
    1564:	0e 94 77 06 	call	0xcee	; 0xcee <doAxis(char const*, char*, StepperMotorAxis&)>
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <RepRapPCBTest::loop()+0xbc>
    156a:	88 e6       	ldi	r24, 0x68	; 104
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	be 01       	movw	r22, r28
    1570:	4c e4       	ldi	r20, 0x4C	; 76
    1572:	52 e0       	ldi	r21, 0x02	; 2
    1574:	0e 94 77 06 	call	0xcee	; 0xcee <doAxis(char const*, char*, StepperMotorAxis&)>
    1578:	1a c0       	rjmp	.+52     	; 0x15ae <RepRapPCBTest::loop()+0xe4>
    157a:	8f e6       	ldi	r24, 0x6F	; 111
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	be 01       	movw	r22, r28
    1580:	4b e6       	ldi	r20, 0x6B	; 107
    1582:	52 e0       	ldi	r21, 0x02	; 2
    1584:	f7 cf       	rjmp	.-18     	; 0x1574 <RepRapPCBTest::loop()+0xaa>
    1586:	86 e7       	ldi	r24, 0x76	; 118
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	be 01       	movw	r22, r28
    158c:	4a e8       	ldi	r20, 0x8A	; 138
    158e:	52 e0       	ldi	r21, 0x02	; 2
    1590:	f1 cf       	rjmp	.-30     	; 0x1574 <RepRapPCBTest::loop()+0xaa>
    1592:	82 e4       	ldi	r24, 0x42	; 66
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	6b e2       	ldi	r22, 0x2B	; 43
    1598:	71 e0       	ldi	r23, 0x01	; 1
    159a:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
    159e:	07 c0       	rjmp	.+14     	; 0x15ae <RepRapPCBTest::loop()+0xe4>
    15a0:	0e 94 4d 0a 	call	0x149a	; 0x149a <stop()>
    15a4:	04 c0       	rjmp	.+8      	; 0x15ae <RepRapPCBTest::loop()+0xe4>
    15a6:	8d e7       	ldi	r24, 0x7D	; 125
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <showError(char const*)>
    15ae:	00 91 4f 01 	lds	r16, 0x014F
    15b2:	03 30       	cpi	r16, 0x03	; 3
    15b4:	c1 f0       	breq	.+48     	; 0x15e6 <RepRapPCBTest::loop()+0x11c>
    15b6:	04 30       	cpi	r16, 0x04	; 4
    15b8:	30 f4       	brcc	.+12     	; 0x15c6 <RepRapPCBTest::loop()+0xfc>
    15ba:	01 30       	cpi	r16, 0x01	; 1
    15bc:	71 f0       	breq	.+28     	; 0x15da <RepRapPCBTest::loop()+0x110>
    15be:	02 30       	cpi	r16, 0x02	; 2
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <RepRapPCBTest::loop()+0xfa>
    15c2:	93 c1       	rjmp	.+806    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    15c4:	0d c0       	rjmp	.+26     	; 0x15e0 <RepRapPCBTest::loop()+0x116>
    15c6:	05 30       	cpi	r16, 0x05	; 5
    15c8:	09 f4       	brne	.+2      	; 0x15cc <RepRapPCBTest::loop()+0x102>
    15ca:	fe c0       	rjmp	.+508    	; 0x17c8 <RepRapPCBTest::loop()+0x2fe>
    15cc:	05 30       	cpi	r16, 0x05	; 5
    15ce:	08 f4       	brcc	.+2      	; 0x15d2 <RepRapPCBTest::loop()+0x108>
    15d0:	f8 c0       	rjmp	.+496    	; 0x17c2 <RepRapPCBTest::loop()+0x2f8>
    15d2:	06 30       	cpi	r16, 0x06	; 6
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <RepRapPCBTest::loop()+0x10e>
    15d6:	89 c1       	rjmp	.+786    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    15d8:	76 c1       	rjmp	.+748    	; 0x18c6 <RepRapPCBTest::loop()+0x3fc>
    15da:	0e 94 d5 07 	call	0xfaa	; 0xfaa <doAlterDelayBetweenSteps()>
    15de:	85 c1       	rjmp	.+778    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    15e0:	0e 94 0f 08 	call	0x101e	; 0x101e <doGotoStep()>
    15e4:	82 c1       	rjmp	.+772    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    15e6:	80 91 50 01 	lds	r24, 0x0150
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	b9 f0       	breq	.+46     	; 0x161c <RepRapPCBTest::loop()+0x152>
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	30 f0       	brcs	.+12     	; 0x15fe <RepRapPCBTest::loop()+0x134>
    15f2:	82 30       	cpi	r24, 0x02	; 2
    15f4:	81 f1       	breq	.+96     	; 0x1656 <RepRapPCBTest::loop()+0x18c>
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	09 f0       	breq	.+2      	; 0x15fc <RepRapPCBTest::loop()+0x132>
    15fa:	e0 c0       	rjmp	.+448    	; 0x17bc <RepRapPCBTest::loop()+0x2f2>
    15fc:	6b c0       	rjmp	.+214    	; 0x16d4 <RepRapPCBTest::loop()+0x20a>
    15fe:	e0 91 53 01 	lds	r30, 0x0153
    1602:	f0 91 54 01 	lds	r31, 0x0154
    1606:	86 81       	ldd	r24, Z+6	; 0x06
    1608:	97 81       	ldd	r25, Z+7	; 0x07
    160a:	a0 85       	ldd	r26, Z+8	; 0x08
    160c:	b1 85       	ldd	r27, Z+9	; 0x09
    160e:	85 8b       	std	Z+21, r24	; 0x15
    1610:	96 8b       	std	Z+22, r25	; 0x16
    1612:	a7 8b       	std	Z+23, r26	; 0x17
    1614:	b0 8f       	std	Z+24, r27	; 0x18
    1616:	cf 01       	movw	r24, r30
    1618:	0a 96       	adiw	r24, 0x0a	; 10
    161a:	1a c1       	rjmp	.+564    	; 0x1850 <RepRapPCBTest::loop()+0x386>
    161c:	e0 91 53 01 	lds	r30, 0x0153
    1620:	f0 91 54 01 	lds	r31, 0x0154
    1624:	84 89       	ldd	r24, Z+20	; 0x14
    1626:	88 23       	and	r24, r24
    1628:	09 f0       	breq	.+2      	; 0x162c <RepRapPCBTest::loop()+0x162>
    162a:	5f c1       	rjmp	.+702    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    162c:	14 86       	std	Z+12, r1	; 0x0c
    162e:	15 86       	std	Z+13, r1	; 0x0d
    1630:	16 86       	std	Z+14, r1	; 0x0e
    1632:	17 86       	std	Z+15, r1	; 0x0f
    1634:	cf 01       	movw	r24, r30
    1636:	0a 96       	adiw	r24, 0x0a	; 10
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
    163e:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1642:	60 93 59 01 	sts	0x0159, r22
    1646:	70 93 5a 01 	sts	0x015A, r23
    164a:	80 93 5b 01 	sts	0x015B, r24
    164e:	90 93 5c 01 	sts	0x015C, r25
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	01 c1       	rjmp	.+514    	; 0x1858 <RepRapPCBTest::loop()+0x38e>
    1656:	e0 91 53 01 	lds	r30, 0x0153
    165a:	f0 91 54 01 	lds	r31, 0x0154
    165e:	84 89       	ldd	r24, Z+20	; 0x14
    1660:	88 23       	and	r24, r24
    1662:	09 f0       	breq	.+2      	; 0x1666 <RepRapPCBTest::loop()+0x19c>
    1664:	42 c1       	rjmp	.+644    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    1666:	84 85       	ldd	r24, Z+12	; 0x0c
    1668:	95 85       	ldd	r25, Z+13	; 0x0d
    166a:	a6 85       	ldd	r26, Z+14	; 0x0e
    166c:	b7 85       	ldd	r27, Z+15	; 0x0f
    166e:	80 93 55 01 	sts	0x0155, r24
    1672:	90 93 56 01 	sts	0x0156, r25
    1676:	a0 93 57 01 	sts	0x0157, r26
    167a:	b0 93 58 01 	sts	0x0158, r27
    167e:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1682:	20 91 59 01 	lds	r18, 0x0159
    1686:	30 91 5a 01 	lds	r19, 0x015A
    168a:	40 91 5b 01 	lds	r20, 0x015B
    168e:	50 91 5c 01 	lds	r21, 0x015C
    1692:	62 1b       	sub	r22, r18
    1694:	73 0b       	sbc	r23, r19
    1696:	84 0b       	sbc	r24, r20
    1698:	95 0b       	sbc	r25, r21
    169a:	60 93 5d 01 	sts	0x015D, r22
    169e:	70 93 5e 01 	sts	0x015E, r23
    16a2:	80 93 5f 01 	sts	0x015F, r24
    16a6:	90 93 60 01 	sts	0x0160, r25
    16aa:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    16ae:	60 93 59 01 	sts	0x0159, r22
    16b2:	70 93 5a 01 	sts	0x015A, r23
    16b6:	80 93 5b 01 	sts	0x015B, r24
    16ba:	90 93 5c 01 	sts	0x015C, r25
    16be:	80 91 53 01 	lds	r24, 0x0153
    16c2:	90 91 54 01 	lds	r25, 0x0154
    16c6:	0a 96       	adiw	r24, 0x0a	; 10
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
    16ce:	00 93 50 01 	sts	0x0150, r16
    16d2:	0b c1       	rjmp	.+534    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    16d4:	e0 91 53 01 	lds	r30, 0x0153
    16d8:	f0 91 54 01 	lds	r31, 0x0154
    16dc:	84 89       	ldd	r24, Z+20	; 0x14
    16de:	88 23       	and	r24, r24
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <RepRapPCBTest::loop()+0x21a>
    16e2:	03 c1       	rjmp	.+518    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    16e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    16e8:	20 91 59 01 	lds	r18, 0x0159
    16ec:	30 91 5a 01 	lds	r19, 0x015A
    16f0:	40 91 5b 01 	lds	r20, 0x015B
    16f4:	50 91 5c 01 	lds	r21, 0x015C
    16f8:	62 1b       	sub	r22, r18
    16fa:	73 0b       	sbc	r23, r19
    16fc:	84 0b       	sbc	r24, r20
    16fe:	95 0b       	sbc	r25, r21
    1700:	60 93 59 01 	sts	0x0159, r22
    1704:	70 93 5a 01 	sts	0x015A, r23
    1708:	80 93 5b 01 	sts	0x015B, r24
    170c:	90 93 5c 01 	sts	0x015C, r25
    1710:	40 91 55 01 	lds	r20, 0x0155
    1714:	50 91 56 01 	lds	r21, 0x0156
    1718:	60 91 57 01 	lds	r22, 0x0157
    171c:	70 91 58 01 	lds	r23, 0x0158
    1720:	82 e4       	ldi	r24, 0x42	; 66
    1722:	94 e0       	ldi	r25, 0x04	; 4
    1724:	2a e0       	ldi	r18, 0x0A	; 10
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <Print::print(long, int)>
    172c:	82 e4       	ldi	r24, 0x42	; 66
    172e:	94 e0       	ldi	r25, 0x04	; 4
    1730:	69 e0       	ldi	r22, 0x09	; 9
    1732:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print::print(char)>
    1736:	e0 91 53 01 	lds	r30, 0x0153
    173a:	f0 91 54 01 	lds	r31, 0x0154
    173e:	44 85       	ldd	r20, Z+12	; 0x0c
    1740:	55 85       	ldd	r21, Z+13	; 0x0d
    1742:	66 85       	ldd	r22, Z+14	; 0x0e
    1744:	77 85       	ldd	r23, Z+15	; 0x0f
    1746:	82 e4       	ldi	r24, 0x42	; 66
    1748:	94 e0       	ldi	r25, 0x04	; 4
    174a:	2a e0       	ldi	r18, 0x0A	; 10
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <Print::print(long, int)>
    1752:	82 e4       	ldi	r24, 0x42	; 66
    1754:	94 e0       	ldi	r25, 0x04	; 4
    1756:	69 e0       	ldi	r22, 0x09	; 9
    1758:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print::print(char)>
    175c:	40 91 5d 01 	lds	r20, 0x015D
    1760:	50 91 5e 01 	lds	r21, 0x015E
    1764:	60 91 5f 01 	lds	r22, 0x015F
    1768:	70 91 60 01 	lds	r23, 0x0160
    176c:	82 e4       	ldi	r24, 0x42	; 66
    176e:	94 e0       	ldi	r25, 0x04	; 4
    1770:	2a e0       	ldi	r18, 0x0A	; 10
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <Print::print(unsigned long, int)>
    1778:	82 e4       	ldi	r24, 0x42	; 66
    177a:	94 e0       	ldi	r25, 0x04	; 4
    177c:	69 e0       	ldi	r22, 0x09	; 9
    177e:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print::print(char)>
    1782:	40 91 59 01 	lds	r20, 0x0159
    1786:	50 91 5a 01 	lds	r21, 0x015A
    178a:	60 91 5b 01 	lds	r22, 0x015B
    178e:	70 91 5c 01 	lds	r23, 0x015C
    1792:	82 e4       	ldi	r24, 0x42	; 66
    1794:	94 e0       	ldi	r25, 0x04	; 4
    1796:	2a e0       	ldi	r18, 0x0A	; 10
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <Print::print(unsigned long, int)>
    179e:	82 e4       	ldi	r24, 0x42	; 66
    17a0:	94 e0       	ldi	r25, 0x04	; 4
    17a2:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    17a6:	e0 91 53 01 	lds	r30, 0x0153
    17aa:	f0 91 54 01 	lds	r31, 0x0154
    17ae:	14 86       	std	Z+12, r1	; 0x0c
    17b0:	15 86       	std	Z+13, r1	; 0x0d
    17b2:	16 86       	std	Z+14, r1	; 0x0e
    17b4:	17 86       	std	Z+15, r1	; 0x0f
    17b6:	10 92 50 01 	sts	0x0150, r1
    17ba:	97 c0       	rjmp	.+302    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    17bc:	0e 94 4d 0a 	call	0x149a	; 0x149a <stop()>
    17c0:	94 c0       	rjmp	.+296    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    17c2:	0e 94 4b 08 	call	0x1096	; 0x1096 <doMoveForthAndBackAtSpeed()>
    17c6:	91 c0       	rjmp	.+290    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    17c8:	80 91 50 01 	lds	r24, 0x0150
    17cc:	88 23       	and	r24, r24
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <RepRapPCBTest::loop()+0x30e>
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <RepRapPCBTest::loop()+0x30c>
    17d4:	8a c0       	rjmp	.+276    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    17d6:	43 c0       	rjmp	.+134    	; 0x185e <RepRapPCBTest::loop()+0x394>
    17d8:	80 91 52 02 	lds	r24, 0x0252
    17dc:	90 91 53 02 	lds	r25, 0x0253
    17e0:	a0 91 54 02 	lds	r26, 0x0254
    17e4:	b0 91 55 02 	lds	r27, 0x0255
    17e8:	80 93 61 02 	sts	0x0261, r24
    17ec:	90 93 62 02 	sts	0x0262, r25
    17f0:	a0 93 63 02 	sts	0x0263, r26
    17f4:	b0 93 64 02 	sts	0x0264, r27
    17f8:	80 91 71 02 	lds	r24, 0x0271
    17fc:	90 91 72 02 	lds	r25, 0x0272
    1800:	a0 91 73 02 	lds	r26, 0x0273
    1804:	b0 91 74 02 	lds	r27, 0x0274
    1808:	80 93 80 02 	sts	0x0280, r24
    180c:	90 93 81 02 	sts	0x0281, r25
    1810:	a0 93 82 02 	sts	0x0282, r26
    1814:	b0 93 83 02 	sts	0x0283, r27
    1818:	80 91 90 02 	lds	r24, 0x0290
    181c:	90 91 91 02 	lds	r25, 0x0291
    1820:	a0 91 92 02 	lds	r26, 0x0292
    1824:	b0 91 93 02 	lds	r27, 0x0293
    1828:	80 93 9f 02 	sts	0x029F, r24
    182c:	90 93 a0 02 	sts	0x02A0, r25
    1830:	a0 93 a1 02 	sts	0x02A1, r26
    1834:	b0 93 a2 02 	sts	0x02A2, r27
    1838:	86 e5       	ldi	r24, 0x56	; 86
    183a:	92 e0       	ldi	r25, 0x02	; 2
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
    1842:	85 e7       	ldi	r24, 0x75	; 117
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
    184c:	84 e9       	ldi	r24, 0x94	; 148
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	80 93 50 01 	sts	0x0150, r24
    185c:	46 c0       	rjmp	.+140    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    185e:	80 91 4c 02 	lds	r24, 0x024C
    1862:	88 23       	and	r24, r24
    1864:	09 f0       	breq	.+2      	; 0x1868 <RepRapPCBTest::loop()+0x39e>
    1866:	41 c0       	rjmp	.+130    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    1868:	80 91 60 02 	lds	r24, 0x0260
    186c:	88 23       	and	r24, r24
    186e:	e9 f5       	brne	.+122    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    1870:	80 91 6b 02 	lds	r24, 0x026B
    1874:	88 23       	and	r24, r24
    1876:	c9 f5       	brne	.+114    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    1878:	80 91 7f 02 	lds	r24, 0x027F
    187c:	88 23       	and	r24, r24
    187e:	a9 f5       	brne	.+106    	; 0x18ea <RepRapPCBTest::loop()+0x420>
    1880:	80 91 8a 02 	lds	r24, 0x028A
    1884:	88 23       	and	r24, r24
    1886:	89 f5       	brne	.+98     	; 0x18ea <RepRapPCBTest::loop()+0x420>
    1888:	80 91 9e 02 	lds	r24, 0x029E
    188c:	88 23       	and	r24, r24
    188e:	69 f5       	brne	.+90     	; 0x18ea <RepRapPCBTest::loop()+0x420>
    1890:	10 92 58 02 	sts	0x0258, r1
    1894:	10 92 59 02 	sts	0x0259, r1
    1898:	10 92 5a 02 	sts	0x025A, r1
    189c:	10 92 5b 02 	sts	0x025B, r1
    18a0:	10 92 77 02 	sts	0x0277, r1
    18a4:	10 92 78 02 	sts	0x0278, r1
    18a8:	10 92 79 02 	sts	0x0279, r1
    18ac:	10 92 7a 02 	sts	0x027A, r1
    18b0:	10 92 96 02 	sts	0x0296, r1
    18b4:	10 92 97 02 	sts	0x0297, r1
    18b8:	10 92 98 02 	sts	0x0298, r1
    18bc:	10 92 99 02 	sts	0x0299, r1
    18c0:	10 92 4f 01 	sts	0x014F, r1
    18c4:	12 c0       	rjmp	.+36     	; 0x18ea <RepRapPCBTest::loop()+0x420>
    18c6:	0e 94 ac 09 	call	0x1358	; 0x1358 <doStepTicking()>
    18ca:	80 91 fe 02 	lds	r24, 0x02FE
    18ce:	88 23       	and	r24, r24
    18d0:	61 f0       	breq	.+24     	; 0x18ea <RepRapPCBTest::loop()+0x420>
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	80 91 50 01 	lds	r24, 0x0150
    18d8:	88 23       	and	r24, r24
    18da:	09 f4       	brne	.+2      	; 0x18de <RepRapPCBTest::loop()+0x414>
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	90 93 50 01 	sts	0x0150, r25
    18e2:	86 ee       	ldi	r24, 0xE6	; 230
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <AdvButton::reset()>
    18ea:	80 91 fe 02 	lds	r24, 0x02FE
    18ee:	82 30       	cpi	r24, 0x02	; 2
    18f0:	49 f4       	brne	.+18     	; 0x1904 <RepRapPCBTest::loop()+0x43a>
    18f2:	0e 94 4d 0a 	call	0x149a	; 0x149a <stop()>
    18f6:	82 e4       	ldi	r24, 0x42	; 66
    18f8:	94 e0       	ldi	r25, 0x04	; 4
    18fa:	6b e2       	ldi	r22, 0x2B	; 43
    18fc:	71 e0       	ldi	r23, 0x01	; 1
    18fe:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
    1902:	04 c0       	rjmp	.+8      	; 0x190c <RepRapPCBTest::loop()+0x442>
    1904:	88 23       	and	r24, r24
    1906:	11 f0       	breq	.+4      	; 0x190c <RepRapPCBTest::loop()+0x442>
    1908:	0e 94 4d 0a 	call	0x149a	; 0x149a <stop()>
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <RepRapPCBTest::setup()>:
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	0a ec       	ldi	r16, 0xCA	; 202
    1920:	12 e0       	ldi	r17, 0x02	; 2
    1922:	c8 01       	movw	r24, r16
    1924:	64 e0       	ldi	r22, 0x04	; 4
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	0e 94 bd 12 	call	0x257a	; 0x257a <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    192c:	86 ee       	ldi	r24, 0xE6	; 230
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	b8 01       	movw	r22, r16
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	2a e0       	ldi	r18, 0x0A	; 10
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <AdvButton::initialize(DigitalInputPin*, bool, unsigned int)>
    193c:	0f ec       	ldi	r16, 0xCF	; 207
    193e:	12 e0       	ldi	r17, 0x02	; 2
    1940:	c8 01       	movw	r24, r16
    1942:	66 e0       	ldi	r22, 0x06	; 6
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	0e 94 8d 12 	call	0x251a	; 0x251a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	92 e0       	ldi	r25, 0x02	; 2
    194e:	b8 01       	movw	r22, r16
    1950:	48 e7       	ldi	r20, 0x78	; 120
    1952:	54 e0       	ldi	r21, 0x04	; 4
    1954:	25 e0       	ldi	r18, 0x05	; 5
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	01 e0       	ldi	r16, 0x01	; 1
    195a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)>
    195e:	8f ed       	ldi	r24, 0xDF	; 223
    1960:	92 e0       	ldi	r25, 0x02	; 2
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	52 ec       	ldi	r21, 0xC2	; 194
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	24 e6       	ldi	r18, 0x64	; 100
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	0a e5       	ldi	r16, 0x5A	; 90
    1970:	13 e0       	ldi	r17, 0x03	; 3
    1972:	0e 94 ca 14 	call	0x2994	; 0x2994 <SerialReader::initialize(long, int, char*)>
    1976:	85 ed       	ldi	r24, 0xD5	; 213
    1978:	e8 2e       	mov	r14, r24
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	f8 2e       	mov	r15, r24
    197e:	c7 01       	movw	r24, r14
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 bd 12 	call	0x257a	; 0x257a <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    1988:	0a ed       	ldi	r16, 0xDA	; 218
    198a:	12 e0       	ldi	r17, 0x02	; 2
    198c:	c8 01       	movw	r24, r16
    198e:	63 e0       	ldi	r22, 0x03	; 3
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 bd 12 	call	0x257a	; 0x257a <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    1996:	82 e1       	ldi	r24, 0x12	; 18
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	b7 01       	movw	r22, r14
    199c:	a8 01       	movw	r20, r16
    199e:	0e 94 41 14 	call	0x2882	; 0x2882 <RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	7d e0       	ldi	r23, 0x0D	; 13
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <attachInterrupt>
    19b0:	81 e6       	ldi	r24, 0x61	; 97
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <RepRapPCB::initialize()>
    19b8:	10 92 4f 01 	sts	0x014F, r1
    19bc:	88 e6       	ldi	r24, 0x68	; 104
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	90 93 52 01 	sts	0x0152, r25
    19c4:	80 93 51 01 	sts	0x0151, r24
    19c8:	8c e4       	ldi	r24, 0x4C	; 76
    19ca:	92 e0       	ldi	r25, 0x02	; 2
    19cc:	90 93 54 01 	sts	0x0154, r25
    19d0:	80 93 53 01 	sts	0x0153, r24
    19d4:	02 e4       	ldi	r16, 0x42	; 66
    19d6:	14 e0       	ldi	r17, 0x04	; 4
    19d8:	c8 01       	movw	r24, r16
    19da:	6b e9       	ldi	r22, 0x9B	; 155
    19dc:	74 e0       	ldi	r23, 0x04	; 4
    19de:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
    19e2:	c8 01       	movw	r24, r16
    19e4:	62 e8       	ldi	r22, 0x82	; 130
    19e6:	74 e0       	ldi	r23, 0x04	; 4
    19e8:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
    19ec:	c8 01       	movw	r24, r16
    19ee:	6b e2       	ldi	r22, 0x2B	; 43
    19f0:	71 e0       	ldi	r23, 0x01	; 1
    19f2:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	ff 90       	pop	r15
    19fc:	ef 90       	pop	r14
    19fe:	08 95       	ret

00001a00 <UpdateRotor()>:
    1a00:	82 e1       	ldi	r24, 0x12	; 18
    1a02:	93 e0       	ldi	r25, 0x03	; 3
    1a04:	0e 94 87 13 	call	0x270e	; 0x270e <RotaryEncoderAcceleration::update()>
    1a08:	08 95       	ret

00001a0a <AdvButton::reset()>:
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	8c 01       	movw	r16, r24
    1a10:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <Button::reset()>
    1a14:	f8 01       	movw	r30, r16
    1a16:	17 8a       	std	Z+23, r1	; 0x17
    1a18:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	66 87       	std	Z+14, r22	; 0x0e
    1a20:	77 87       	std	Z+15, r23	; 0x0f
    1a22:	80 8b       	std	Z+16, r24	; 0x10
    1a24:	91 8b       	std	Z+17, r25	; 0x11
    1a26:	68 51       	subi	r22, 0x18	; 24
    1a28:	7c 4f       	sbci	r23, 0xFC	; 252
    1a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	62 8b       	std	Z+18, r22	; 0x12
    1a30:	73 8b       	std	Z+19, r23	; 0x13
    1a32:	84 8b       	std	Z+20, r24	; 0x14
    1a34:	95 8b       	std	Z+21, r25	; 0x15
    1a36:	10 8e       	std	Z+24, r1	; 0x18
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	08 95       	ret

00001a3e <AdvButton::update()>:
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	ec 01       	movw	r28, r24
    1a4c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <Button::update()>
    1a50:	18 8e       	std	Y+24, r1	; 0x18
    1a52:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1a56:	9b 01       	movw	r18, r22
    1a58:	ac 01       	movw	r20, r24
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	98 17       	cp	r25, r24
    1a60:	b9 f1       	breq	.+110    	; 0x1ad0 <AdvButton::update()+0x92>
    1a62:	99 23       	and	r25, r25
    1a64:	71 f4       	brne	.+28     	; 0x1a82 <AdvButton::update()+0x44>
    1a66:	2e 87       	std	Y+14, r18	; 0x0e
    1a68:	3f 87       	std	Y+15, r19	; 0x0f
    1a6a:	48 8b       	std	Y+16, r20	; 0x10
    1a6c:	59 8b       	std	Y+17, r21	; 0x11
    1a6e:	28 51       	subi	r18, 0x18	; 24
    1a70:	3c 4f       	sbci	r19, 0xFC	; 252
    1a72:	4f 4f       	sbci	r20, 0xFF	; 255
    1a74:	5f 4f       	sbci	r21, 0xFF	; 255
    1a76:	2a 8b       	std	Y+18, r18	; 0x12
    1a78:	3b 8b       	std	Y+19, r19	; 0x13
    1a7a:	4c 8b       	std	Y+20, r20	; 0x14
    1a7c:	5d 8b       	std	Y+21, r21	; 0x15
    1a7e:	1f 8a       	std	Y+23, r1	; 0x17
    1a80:	55 c0       	rjmp	.+170    	; 0x1b2c <AdvButton::update()+0xee>
    1a82:	8f 89       	ldd	r24, Y+23	; 0x17
    1a84:	88 23       	and	r24, r24
    1a86:	a9 f4       	brne	.+42     	; 0x1ab2 <AdvButton::update()+0x74>
    1a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a8e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a90:	79 01       	movw	r14, r18
    1a92:	8a 01       	movw	r16, r20
    1a94:	e8 1a       	sub	r14, r24
    1a96:	f9 0a       	sbc	r15, r25
    1a98:	0a 0b       	sbc	r16, r26
    1a9a:	1b 0b       	sbc	r17, r27
    1a9c:	d8 01       	movw	r26, r16
    1a9e:	c7 01       	movw	r24, r14
    1aa0:	81 59       	subi	r24, 0x91	; 145
    1aa2:	91 40       	sbci	r25, 0x01	; 1
    1aa4:	a0 40       	sbci	r26, 0x00	; 0
    1aa6:	b0 40       	sbci	r27, 0x00	; 0
    1aa8:	10 f4       	brcc	.+4      	; 0x1aae <AdvButton::update()+0x70>
    1aaa:	83 e0       	ldi	r24, 0x03	; 3
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <AdvButton::update()+0x72>
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	88 8f       	std	Y+24, r24	; 0x18
    1ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab4:	88 23       	and	r24, r24
    1ab6:	39 f0       	breq	.+14     	; 0x1ac6 <AdvButton::update()+0x88>
    1ab8:	8e 89       	ldd	r24, Y+22	; 0x16
    1aba:	88 23       	and	r24, r24
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <AdvButton::update()+0x88>
    1abe:	20 52       	subi	r18, 0x20	; 32
    1ac0:	33 40       	sbci	r19, 0x03	; 3
    1ac2:	40 40       	sbci	r20, 0x00	; 0
    1ac4:	50 40       	sbci	r21, 0x00	; 0
    1ac6:	2a 87       	std	Y+10, r18	; 0x0a
    1ac8:	3b 87       	std	Y+11, r19	; 0x0b
    1aca:	4c 87       	std	Y+12, r20	; 0x0c
    1acc:	5d 87       	std	Y+13, r21	; 0x0d
    1ace:	2e c0       	rjmp	.+92     	; 0x1b2c <AdvButton::update()+0xee>
    1ad0:	99 23       	and	r25, r25
    1ad2:	61 f5       	brne	.+88     	; 0x1b2c <AdvButton::update()+0xee>
    1ad4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ad6:	88 23       	and	r24, r24
    1ad8:	a9 f0       	breq	.+42     	; 0x1b04 <AdvButton::update()+0xc6>
    1ada:	8a 89       	ldd	r24, Y+18	; 0x12
    1adc:	9b 89       	ldd	r25, Y+19	; 0x13
    1ade:	ac 89       	ldd	r26, Y+20	; 0x14
    1ae0:	bd 89       	ldd	r27, Y+21	; 0x15
    1ae2:	28 17       	cp	r18, r24
    1ae4:	39 07       	cpc	r19, r25
    1ae6:	4a 07       	cpc	r20, r26
    1ae8:	5b 07       	cpc	r21, r27
    1aea:	00 f1       	brcs	.+64     	; 0x1b2c <AdvButton::update()+0xee>
    1aec:	2e 5c       	subi	r18, 0xCE	; 206
    1aee:	3f 4f       	sbci	r19, 0xFF	; 255
    1af0:	4f 4f       	sbci	r20, 0xFF	; 255
    1af2:	5f 4f       	sbci	r21, 0xFF	; 255
    1af4:	2a 8b       	std	Y+18, r18	; 0x12
    1af6:	3b 8b       	std	Y+19, r19	; 0x13
    1af8:	4c 8b       	std	Y+20, r20	; 0x14
    1afa:	5d 8b       	std	Y+21, r21	; 0x15
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	8f 8b       	std	Y+23, r24	; 0x17
    1b00:	84 e0       	ldi	r24, 0x04	; 4
    1b02:	13 c0       	rjmp	.+38     	; 0x1b2a <AdvButton::update()+0xec>
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	88 23       	and	r24, r24
    1b08:	89 f4       	brne	.+34     	; 0x1b2c <AdvButton::update()+0xee>
    1b0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b0e:	a8 89       	ldd	r26, Y+16	; 0x10
    1b10:	b9 89       	ldd	r27, Y+17	; 0x11
    1b12:	28 1b       	sub	r18, r24
    1b14:	39 0b       	sbc	r19, r25
    1b16:	4a 0b       	sbc	r20, r26
    1b18:	5b 0b       	sbc	r21, r27
    1b1a:	28 55       	subi	r18, 0x58	; 88
    1b1c:	32 40       	sbci	r19, 0x02	; 2
    1b1e:	40 40       	sbci	r20, 0x00	; 0
    1b20:	50 40       	sbci	r21, 0x00	; 0
    1b22:	20 f0       	brcs	.+8      	; 0x1b2c <AdvButton::update()+0xee>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	8f 8b       	std	Y+23, r24	; 0x17
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	88 8f       	std	Y+24, r24	; 0x18
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	08 95       	ret

00001b3a <AdvButton::initialize(DigitalInputPin*, bool, unsigned int)>:
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	8c 01       	movw	r16, r24
    1b42:	f4 2e       	mov	r15, r20
    1b44:	a9 01       	movw	r20, r18
    1b46:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <Button::initialize(DigitalInputPin*, unsigned int)>
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	f6 8a       	std	Z+22, r15	; 0x16
    1b4e:	16 86       	std	Z+14, r1	; 0x0e
    1b50:	17 86       	std	Z+15, r1	; 0x0f
    1b52:	10 8a       	std	Z+16, r1	; 0x10
    1b54:	11 8a       	std	Z+17, r1	; 0x11
    1b56:	12 86       	std	Z+10, r1	; 0x0a
    1b58:	13 86       	std	Z+11, r1	; 0x0b
    1b5a:	14 86       	std	Z+12, r1	; 0x0c
    1b5c:	15 86       	std	Z+13, r1	; 0x0d
    1b5e:	12 8a       	std	Z+18, r1	; 0x12
    1b60:	13 8a       	std	Z+19, r1	; 0x13
    1b62:	14 8a       	std	Z+20, r1	; 0x14
    1b64:	15 8a       	std	Z+21, r1	; 0x15
    1b66:	17 8a       	std	Z+23, r1	; 0x17
    1b68:	10 8e       	std	Z+24, r1	; 0x18
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	ff 90       	pop	r15
    1b70:	08 95       	ret

00001b72 <BlinkingLed::initialize(DigitalOutputPin*)>:
    1b72:	fc 01       	movw	r30, r24
    1b74:	71 83       	std	Z+1, r23	; 0x01
    1b76:	60 83       	st	Z, r22
    1b78:	13 82       	std	Z+3, r1	; 0x03
    1b7a:	12 82       	std	Z+2, r1	; 0x02
    1b7c:	14 82       	std	Z+4, r1	; 0x04
    1b7e:	13 86       	std	Z+11, r1	; 0x0b
    1b80:	12 86       	std	Z+10, r1	; 0x0a
    1b82:	11 86       	std	Z+9, r1	; 0x09
    1b84:	15 82       	std	Z+5, r1	; 0x05
    1b86:	16 82       	std	Z+6, r1	; 0x06
    1b88:	17 82       	std	Z+7, r1	; 0x07
    1b8a:	10 86       	std	Z+8, r1	; 0x08
    1b8c:	08 95       	ret

00001b8e <BlinkingLed::getNextDelay()>:
    1b8e:	dc 01       	movw	r26, r24
    1b90:	6f b7       	in	r22, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	19 96       	adiw	r26, 0x09	; 9
    1b96:	4d 91       	ld	r20, X+
    1b98:	5c 91       	ld	r21, X
    1b9a:	1a 97       	sbiw	r26, 0x0a	; 10
    1b9c:	41 15       	cp	r20, r1
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <BlinkingLed::getNextDelay()+0x16>
    1ba2:	48 c0       	rjmp	.+144    	; 0x1c34 <BlinkingLed::getNextDelay()+0xa6>
    1ba4:	14 96       	adiw	r26, 0x04	; 4
    1ba6:	2c 91       	ld	r18, X
    1ba8:	14 97       	sbiw	r26, 0x04	; 4
    1baa:	82 2f       	mov	r24, r18
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	ed 91       	ld	r30, X+
    1bb6:	fc 91       	ld	r31, X
    1bb8:	13 97       	sbiw	r26, 0x03	; 3
    1bba:	e8 0f       	add	r30, r24
    1bbc:	f9 1f       	adc	r31, r25
    1bbe:	2f 5f       	subi	r18, 0xFF	; 255
    1bc0:	14 96       	adiw	r26, 0x04	; 4
    1bc2:	2c 93       	st	X, r18
    1bc4:	14 97       	sbiw	r26, 0x04	; 4
    1bc6:	85 91       	lpm	r24, Z+
    1bc8:	94 91       	lpm	r25, Z+
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	51 f5       	brne	.+84     	; 0x1c22 <BlinkingLed::getNextDelay()+0x94>
    1bce:	1b 96       	adiw	r26, 0x0b	; 11
    1bd0:	1c 92       	st	X, r1
    1bd2:	1b 97       	sbiw	r26, 0x0b	; 11
    1bd4:	14 96       	adiw	r26, 0x04	; 4
    1bd6:	1c 92       	st	X, r1
    1bd8:	14 97       	sbiw	r26, 0x04	; 4
    1bda:	14 16       	cp	r1, r20
    1bdc:	15 06       	cpc	r1, r21
    1bde:	34 f4       	brge	.+12     	; 0x1bec <BlinkingLed::getNextDelay()+0x5e>
    1be0:	41 50       	subi	r20, 0x01	; 1
    1be2:	50 40       	sbci	r21, 0x00	; 0
    1be4:	1a 96       	adiw	r26, 0x0a	; 10
    1be6:	5c 93       	st	X, r21
    1be8:	4e 93       	st	-X, r20
    1bea:	19 97       	sbiw	r26, 0x09	; 9
    1bec:	19 96       	adiw	r26, 0x09	; 9
    1bee:	8d 91       	ld	r24, X+
    1bf0:	9c 91       	ld	r25, X
    1bf2:	1a 97       	sbiw	r26, 0x0a	; 10
    1bf4:	89 2b       	or	r24, r25
    1bf6:	f1 f0       	breq	.+60     	; 0x1c34 <BlinkingLed::getNextDelay()+0xa6>
    1bf8:	14 96       	adiw	r26, 0x04	; 4
    1bfa:	2c 91       	ld	r18, X
    1bfc:	14 97       	sbiw	r26, 0x04	; 4
    1bfe:	82 2f       	mov	r24, r18
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	12 96       	adiw	r26, 0x02	; 2
    1c08:	ed 91       	ld	r30, X+
    1c0a:	fc 91       	ld	r31, X
    1c0c:	13 97       	sbiw	r26, 0x03	; 3
    1c0e:	e8 0f       	add	r30, r24
    1c10:	f9 1f       	adc	r31, r25
    1c12:	2f 5f       	subi	r18, 0xFF	; 255
    1c14:	14 96       	adiw	r26, 0x04	; 4
    1c16:	2c 93       	st	X, r18
    1c18:	14 97       	sbiw	r26, 0x04	; 4
    1c1a:	85 91       	lpm	r24, Z+
    1c1c:	94 91       	lpm	r25, Z+
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	11 f0       	breq	.+4      	; 0x1c26 <BlinkingLed::getNextDelay()+0x98>
    1c22:	9c 01       	movw	r18, r24
    1c24:	09 c0       	rjmp	.+18     	; 0x1c38 <BlinkingLed::getNextDelay()+0xaa>
    1c26:	14 96       	adiw	r26, 0x04	; 4
    1c28:	1c 92       	st	X, r1
    1c2a:	14 97       	sbiw	r26, 0x04	; 4
    1c2c:	1a 96       	adiw	r26, 0x0a	; 10
    1c2e:	1c 92       	st	X, r1
    1c30:	1e 92       	st	-X, r1
    1c32:	19 97       	sbiw	r26, 0x09	; 9
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	6f bf       	out	0x3f, r22	; 63
    1c3a:	c9 01       	movw	r24, r18
    1c3c:	08 95       	ret

00001c3e <BlinkingLed::update()>:
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	89 2b       	or	r24, r25
    1c52:	99 f1       	breq	.+102    	; 0x1cba <BlinkingLed::update()+0x7c>
    1c54:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1c58:	7b 01       	movw	r14, r22
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	af 81       	ldd	r26, Y+7	; 0x07
    1c62:	b8 85       	ldd	r27, Y+8	; 0x08
    1c64:	a8 01       	movw	r20, r16
    1c66:	97 01       	movw	r18, r14
    1c68:	28 1b       	sub	r18, r24
    1c6a:	39 0b       	sbc	r19, r25
    1c6c:	4a 0b       	sbc	r20, r26
    1c6e:	5b 0b       	sbc	r21, r27
    1c70:	57 fd       	sbrc	r21, 7
    1c72:	30 c0       	rjmp	.+96     	; 0x1cd4 <BlinkingLed::update()+0x96>
    1c74:	ce 01       	movw	r24, r28
    1c76:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <BlinkingLed::getNextDelay()>
    1c7a:	9c 01       	movw	r18, r24
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	11 f4       	brne	.+4      	; 0x1c84 <BlinkingLed::update()+0x46>
    1c80:	1b 86       	std	Y+11, r1	; 0x0b
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <BlinkingLed::update()+0x4e>
    1c84:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	89 27       	eor	r24, r25
    1c8a:	8b 87       	std	Y+11, r24	; 0x0b
    1c8c:	c9 01       	movw	r24, r18
    1c8e:	a0 e0       	ldi	r26, 0x00	; 0
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	8e 0d       	add	r24, r14
    1c94:	9f 1d       	adc	r25, r15
    1c96:	a0 1f       	adc	r26, r16
    1c98:	b1 1f       	adc	r27, r17
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	af 83       	std	Y+7, r26	; 0x07
    1ca0:	b8 87       	std	Y+8, r27	; 0x08
    1ca2:	a8 81       	ld	r26, Y
    1ca4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ca6:	ed 91       	ld	r30, X+
    1ca8:	fc 91       	ld	r31, X
    1caa:	11 97       	sbiw	r26, 0x01	; 1
    1cac:	02 80       	ldd	r0, Z+2	; 0x02
    1cae:	f3 81       	ldd	r31, Z+3	; 0x03
    1cb0:	e0 2d       	mov	r30, r0
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb6:	09 95       	icall
    1cb8:	0d c0       	rjmp	.+26     	; 0x1cd4 <BlinkingLed::update()+0x96>
    1cba:	1b 86       	std	Y+11, r1	; 0x0b
    1cbc:	e8 81       	ld	r30, Y
    1cbe:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc0:	a0 81       	ld	r26, Z
    1cc2:	b1 81       	ldd	r27, Z+1	; 0x01
    1cc4:	12 96       	adiw	r26, 0x02	; 2
    1cc6:	2d 91       	ld	r18, X+
    1cc8:	3c 91       	ld	r19, X
    1cca:	13 97       	sbiw	r26, 0x03	; 3
    1ccc:	cf 01       	movw	r24, r30
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	09 95       	icall
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	08 95       	ret

00001ce2 <BlinkingLed::playBlink(unsigned int const*, short)>:
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	ec 01       	movw	r28, r24
    1ce8:	61 15       	cp	r22, r1
    1cea:	71 05       	cpc	r23, r1
    1cec:	11 f4       	brne	.+4      	; 0x1cf2 <BlinkingLed::playBlink(unsigned int const*, short)+0x10>
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	68 17       	cp	r22, r24
    1cf8:	79 07       	cpc	r23, r25
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <BlinkingLed::playBlink(unsigned int const*, short)+0x20>
    1cfc:	5a 87       	std	Y+10, r21	; 0x0a
    1cfe:	49 87       	std	Y+9, r20	; 0x09
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <BlinkingLed::playBlink(unsigned int const*, short)+0x3e>
    1d02:	8f b7       	in	r24, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	1c 82       	std	Y+4, r1	; 0x04
    1d08:	7b 83       	std	Y+3, r23	; 0x03
    1d0a:	6a 83       	std	Y+2, r22	; 0x02
    1d0c:	5a 87       	std	Y+10, r21	; 0x0a
    1d0e:	49 87       	std	Y+9, r20	; 0x09
    1d10:	1b 86       	std	Y+11, r1	; 0x0b
    1d12:	8f bf       	out	0x3f, r24	; 63
    1d14:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1d18:	6d 83       	std	Y+5, r22	; 0x05
    1d1a:	7e 83       	std	Y+6, r23	; 0x06
    1d1c:	8f 83       	std	Y+7, r24	; 0x07
    1d1e:	98 87       	std	Y+8, r25	; 0x08
    1d20:	ce 01       	movw	r24, r28
    1d22:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <BlinkingLed::update()>
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	08 95       	ret

00001d2c <Button::reset()>:
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	8c 01       	movw	r16, r24
    1d32:	fc 01       	movw	r30, r24
    1d34:	83 81       	ldd	r24, Z+3	; 0x03
    1d36:	82 83       	std	Z+2, r24	; 0x02
    1d38:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	20 85       	ldd	r18, Z+8	; 0x08
    1d40:	31 85       	ldd	r19, Z+9	; 0x09
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	20 95       	com	r18
    1d48:	30 95       	com	r19
    1d4a:	40 95       	com	r20
    1d4c:	50 95       	com	r21
    1d4e:	26 0f       	add	r18, r22
    1d50:	37 1f       	adc	r19, r23
    1d52:	48 1f       	adc	r20, r24
    1d54:	59 1f       	adc	r21, r25
    1d56:	24 83       	std	Z+4, r18	; 0x04
    1d58:	35 83       	std	Z+5, r19	; 0x05
    1d5a:	46 83       	std	Z+6, r20	; 0x06
    1d5c:	57 83       	std	Z+7, r21	; 0x07
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	08 95       	ret

00001d64 <Button::update()>:
    1d64:	9f 92       	push	r9
    1d66:	af 92       	push	r10
    1d68:	bf 92       	push	r11
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	ec 01       	movw	r28, r24
    1d7c:	a8 81       	ld	r26, Y
    1d7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d80:	ed 91       	ld	r30, X+
    1d82:	fc 91       	ld	r31, X
    1d84:	11 97       	sbiw	r26, 0x01	; 1
    1d86:	01 90       	ld	r0, Z+
    1d88:	f0 81       	ld	r31, Z
    1d8a:	e0 2d       	mov	r30, r0
    1d8c:	cd 01       	movw	r24, r26
    1d8e:	09 95       	icall
    1d90:	98 2e       	mov	r9, r24
    1d92:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1d96:	7b 01       	movw	r14, r22
    1d98:	8c 01       	movw	r16, r24
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	ac 80       	ldd	r10, Y+4	; 0x04
    1da0:	bd 80       	ldd	r11, Y+5	; 0x05
    1da2:	ce 80       	ldd	r12, Y+6	; 0x06
    1da4:	df 80       	ldd	r13, Y+7	; 0x07
    1da6:	68 85       	ldd	r22, Y+8	; 0x08
    1da8:	79 85       	ldd	r23, Y+9	; 0x09
    1daa:	98 16       	cp	r9, r24
    1dac:	a1 f0       	breq	.+40     	; 0x1dd6 <Button::update()+0x72>
    1dae:	a8 01       	movw	r20, r16
    1db0:	97 01       	movw	r18, r14
    1db2:	2a 19       	sub	r18, r10
    1db4:	3b 09       	sbc	r19, r11
    1db6:	4c 09       	sbc	r20, r12
    1db8:	5d 09       	sbc	r21, r13
    1dba:	cb 01       	movw	r24, r22
    1dbc:	a0 e0       	ldi	r26, 0x00	; 0
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	28 17       	cp	r18, r24
    1dc2:	39 07       	cpc	r19, r25
    1dc4:	4a 07       	cpc	r20, r26
    1dc6:	5b 07       	cpc	r21, r27
    1dc8:	08 f0       	brcs	.+2      	; 0x1dcc <Button::update()+0x68>
    1dca:	9b 82       	std	Y+3, r9	; 0x03
    1dcc:	ec 82       	std	Y+4, r14	; 0x04
    1dce:	fd 82       	std	Y+5, r15	; 0x05
    1dd0:	0e 83       	std	Y+6, r16	; 0x06
    1dd2:	1f 83       	std	Y+7, r17	; 0x07
    1dd4:	1a c0       	rjmp	.+52     	; 0x1e0a <Button::update()+0xa6>
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	d8 01       	movw	r26, r16
    1dde:	c7 01       	movw	r24, r14
    1de0:	8a 19       	sub	r24, r10
    1de2:	9b 09       	sbc	r25, r11
    1de4:	ac 09       	sbc	r26, r12
    1de6:	bd 09       	sbc	r27, r13
    1de8:	82 17       	cp	r24, r18
    1dea:	93 07       	cpc	r25, r19
    1dec:	a4 07       	cpc	r26, r20
    1dee:	b5 07       	cpc	r27, r21
    1df0:	60 f0       	brcs	.+24     	; 0x1e0a <Button::update()+0xa6>
    1df2:	20 95       	com	r18
    1df4:	30 95       	com	r19
    1df6:	40 95       	com	r20
    1df8:	50 95       	com	r21
    1dfa:	2e 0d       	add	r18, r14
    1dfc:	3f 1d       	adc	r19, r15
    1dfe:	40 1f       	adc	r20, r16
    1e00:	51 1f       	adc	r21, r17
    1e02:	2c 83       	std	Y+4, r18	; 0x04
    1e04:	3d 83       	std	Y+5, r19	; 0x05
    1e06:	4e 83       	std	Y+6, r20	; 0x06
    1e08:	5f 83       	std	Y+7, r21	; 0x07
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	df 90       	pop	r13
    1e18:	cf 90       	pop	r12
    1e1a:	bf 90       	pop	r11
    1e1c:	af 90       	pop	r10
    1e1e:	9f 90       	pop	r9
    1e20:	08 95       	ret

00001e22 <Button::initialize(DigitalInputPin*, unsigned int)>:
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	8c 01       	movw	r16, r24
    1e28:	fc 01       	movw	r30, r24
    1e2a:	71 83       	std	Z+1, r23	; 0x01
    1e2c:	60 83       	st	Z, r22
    1e2e:	51 87       	std	Z+9, r21	; 0x09
    1e30:	40 87       	std	Z+8, r20	; 0x08
    1e32:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    1e36:	f8 01       	movw	r30, r16
    1e38:	64 83       	std	Z+4, r22	; 0x04
    1e3a:	75 83       	std	Z+5, r23	; 0x05
    1e3c:	86 83       	std	Z+6, r24	; 0x06
    1e3e:	97 83       	std	Z+7, r25	; 0x07
    1e40:	a0 81       	ld	r26, Z
    1e42:	b1 81       	ldd	r27, Z+1	; 0x01
    1e44:	ed 91       	ld	r30, X+
    1e46:	fc 91       	ld	r31, X
    1e48:	11 97       	sbiw	r26, 0x01	; 1
    1e4a:	01 90       	ld	r0, Z+
    1e4c:	f0 81       	ld	r31, Z
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	cd 01       	movw	r24, r26
    1e52:	09 95       	icall
    1e54:	f8 01       	movw	r30, r16
    1e56:	83 83       	std	Z+3, r24	; 0x03
    1e58:	82 83       	std	Z+2, r24	; 0x02
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	08 95       	ret

00001e60 <DigitalInputArduinoPin::getState()>:
    1e60:	dc 01       	movw	r26, r24
    1e62:	13 96       	adiw	r26, 0x03	; 3
    1e64:	ed 91       	ld	r30, X+
    1e66:	fc 91       	ld	r31, X
    1e68:	14 97       	sbiw	r26, 0x04	; 4
    1e6a:	20 81       	ld	r18, Z
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	12 96       	adiw	r26, 0x02	; 2
    1e72:	8c 91       	ld	r24, X
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	28 23       	and	r18, r24
    1e78:	39 23       	and	r19, r25
    1e7a:	23 2b       	or	r18, r19
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <DigitalInputArduinoPin::getState()+0x20>
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	84 2f       	mov	r24, r20
    1e82:	08 95       	ret

00001e84 <DigitalOutputArduinoPin::getState()>:
    1e84:	fc 01       	movw	r30, r24
    1e86:	85 81       	ldd	r24, Z+5	; 0x05
    1e88:	08 95       	ret

00001e8a <DigitalOutputArduinoPin::setState(bool)>:
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	65 83       	std	Z+5, r22	; 0x05
    1e8e:	a3 81       	ldd	r26, Z+3	; 0x03
    1e90:	b4 81       	ldd	r27, Z+4	; 0x04
    1e92:	22 81       	ldd	r18, Z+2	; 0x02
    1e94:	66 23       	and	r22, r22
    1e96:	31 f0       	breq	.+12     	; 0x1ea4 <DigitalOutputArduinoPin::setState(bool)+0x1a>
    1e98:	9f b7       	in	r25, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	8c 91       	ld	r24, X
    1e9e:	82 2b       	or	r24, r18
    1ea0:	8c 93       	st	X, r24
    1ea2:	06 c0       	rjmp	.+12     	; 0x1eb0 <DigitalOutputArduinoPin::setState(bool)+0x26>
    1ea4:	9f b7       	in	r25, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	8c 91       	ld	r24, X
    1eaa:	20 95       	com	r18
    1eac:	28 23       	and	r18, r24
    1eae:	2c 93       	st	X, r18
    1eb0:	9f bf       	out	0x3f, r25	; 63
    1eb2:	08 95       	ret

00001eb4 <DigitalInputShiftRegisterPin::getState()>:
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	a2 81       	ldd	r26, Z+2	; 0x02
    1eb8:	b3 81       	ldd	r27, Z+3	; 0x03
    1eba:	24 81       	ldd	r18, Z+4	; 0x04
    1ebc:	9f 96       	adiw	r26, 0x2f	; 47
    1ebe:	8c 91       	ld	r24, X
    1ec0:	9f 97       	sbiw	r26, 0x2f	; 47
    1ec2:	28 17       	cp	r18, r24
    1ec4:	10 f0       	brcs	.+4      	; 0x1eca <DigitalInputShiftRegisterPin::getState()+0x16>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	08 95       	ret
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	c9 01       	movw	r24, r18
    1ece:	43 e0       	ldi	r20, 0x03	; 3
    1ed0:	95 95       	asr	r25
    1ed2:	87 95       	ror	r24
    1ed4:	4a 95       	dec	r20
    1ed6:	e1 f7       	brne	.-8      	; 0x1ed0 <DigitalInputShiftRegisterPin::getState()+0x1c>
    1ed8:	a8 0f       	add	r26, r24
    1eda:	b9 1f       	adc	r27, r25
    1edc:	9d 96       	adiw	r26, 0x2d	; 45
    1ede:	8c 91       	ld	r24, X
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	27 70       	andi	r18, 0x07	; 7
    1ee4:	30 70       	andi	r19, 0x00	; 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DigitalInputShiftRegisterPin::getState()+0x38>
    1ee8:	95 95       	asr	r25
    1eea:	87 95       	ror	r24
    1eec:	2a 95       	dec	r18
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DigitalInputShiftRegisterPin::getState()+0x34>
    1ef0:	81 70       	andi	r24, 0x01	; 1
    1ef2:	08 95       	ret

00001ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>:
    1ef4:	26 2f       	mov	r18, r22
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	f9 01       	movw	r30, r18
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	e2 0f       	add	r30, r18
    1f04:	f3 1f       	adc	r31, r19
    1f06:	e8 0f       	add	r30, r24
    1f08:	f9 1f       	adc	r31, r25
    1f0a:	93 83       	std	Z+3, r25	; 0x03
    1f0c:	82 83       	std	Z+2, r24	; 0x02
    1f0e:	64 83       	std	Z+4, r22	; 0x04
    1f10:	cf 01       	movw	r24, r30
    1f12:	08 95       	ret

00001f14 <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)>:
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	ec 01       	movw	r28, r24
    1f22:	da 01       	movw	r26, r20
    1f24:	79 01       	movw	r14, r18
    1f26:	69 30       	cpi	r22, 0x09	; 9
    1f28:	08 f4       	brcc	.+2      	; 0x1f2c <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)+0x18>
    1f2a:	69 e0       	ldi	r22, 0x09	; 9
    1f2c:	6f a7       	std	Y+47, r22	; 0x2f
    1f2e:	b9 ab       	std	Y+49, r27	; 0x31
    1f30:	a8 ab       	std	Y+48, r26	; 0x30
    1f32:	fb aa       	std	Y+51, r15	; 0x33
    1f34:	ea aa       	std	Y+50, r14	; 0x32
    1f36:	1d ab       	std	Y+53, r17	; 0x35
    1f38:	0c ab       	std	Y+52, r16	; 0x34
    1f3a:	ed 91       	ld	r30, X+
    1f3c:	fc 91       	ld	r31, X
    1f3e:	11 97       	sbiw	r26, 0x01	; 1
    1f40:	02 80       	ldd	r0, Z+2	; 0x02
    1f42:	f3 81       	ldd	r31, Z+3	; 0x03
    1f44:	e0 2d       	mov	r30, r0
    1f46:	cd 01       	movw	r24, r26
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	09 95       	icall
    1f4c:	d7 01       	movw	r26, r14
    1f4e:	ed 91       	ld	r30, X+
    1f50:	fc 91       	ld	r31, X
    1f52:	02 80       	ldd	r0, Z+2	; 0x02
    1f54:	f3 81       	ldd	r31, Z+3	; 0x03
    1f56:	e0 2d       	mov	r30, r0
    1f58:	c7 01       	movw	r24, r14
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	09 95       	icall
    1f5e:	1e a6       	std	Y+46, r1	; 0x2e
    1f60:	1d a6       	std	Y+45, r1	; 0x2d
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	08 95       	ret

00001f70 <DigitalInputShiftRegister_74HC166::update()>:
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	ec 01       	movw	r28, r24
    1f7e:	aa a9       	ldd	r26, Y+50	; 0x32
    1f80:	bb a9       	ldd	r27, Y+51	; 0x33
    1f82:	ed 91       	ld	r30, X+
    1f84:	fc 91       	ld	r31, X
    1f86:	11 97       	sbiw	r26, 0x01	; 1
    1f88:	02 80       	ldd	r0, Z+2	; 0x02
    1f8a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f8c:	e0 2d       	mov	r30, r0
    1f8e:	cd 01       	movw	r24, r26
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	09 95       	icall
    1f94:	a8 a9       	ldd	r26, Y+48	; 0x30
    1f96:	b9 a9       	ldd	r27, Y+49	; 0x31
    1f98:	ed 91       	ld	r30, X+
    1f9a:	fc 91       	ld	r31, X
    1f9c:	11 97       	sbiw	r26, 0x01	; 1
    1f9e:	02 80       	ldd	r0, Z+2	; 0x02
    1fa0:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	09 95       	icall
    1faa:	aa a9       	ldd	r26, Y+50	; 0x32
    1fac:	bb a9       	ldd	r27, Y+51	; 0x33
    1fae:	ed 91       	ld	r30, X+
    1fb0:	fc 91       	ld	r31, X
    1fb2:	11 97       	sbiw	r26, 0x01	; 1
    1fb4:	02 80       	ldd	r0, Z+2	; 0x02
    1fb6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb8:	e0 2d       	mov	r30, r0
    1fba:	cd 01       	movw	r24, r26
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	09 95       	icall
    1fc0:	a8 a9       	ldd	r26, Y+48	; 0x30
    1fc2:	b9 a9       	ldd	r27, Y+49	; 0x31
    1fc4:	ed 91       	ld	r30, X+
    1fc6:	fc 91       	ld	r31, X
    1fc8:	11 97       	sbiw	r26, 0x01	; 1
    1fca:	02 80       	ldd	r0, Z+2	; 0x02
    1fcc:	f3 81       	ldd	r31, Z+3	; 0x03
    1fce:	e0 2d       	mov	r30, r0
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	09 95       	icall
    1fd6:	8e 01       	movw	r16, r28
    1fd8:	03 5d       	subi	r16, 0xD3	; 211
    1fda:	1f 4f       	sbci	r17, 0xFF	; 255
    1fdc:	ff 24       	eor	r15, r15
    1fde:	f3 94       	inc	r15
    1fe0:	ee 24       	eor	r14, r14
    1fe2:	31 c0       	rjmp	.+98     	; 0x2046 <DigitalInputShiftRegister_74HC166::update()+0xd6>
    1fe4:	ec a9       	ldd	r30, Y+52	; 0x34
    1fe6:	fd a9       	ldd	r31, Y+53	; 0x35
    1fe8:	a0 81       	ld	r26, Z
    1fea:	b1 81       	ldd	r27, Z+1	; 0x01
    1fec:	2d 91       	ld	r18, X+
    1fee:	3c 91       	ld	r19, X
    1ff0:	cf 01       	movw	r24, r30
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	09 95       	icall
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	90 81       	ld	r25, Z
    1ffa:	88 23       	and	r24, r24
    1ffc:	11 f0       	breq	.+4      	; 0x2002 <DigitalInputShiftRegister_74HC166::update()+0x92>
    1ffe:	9f 29       	or	r25, r15
    2000:	04 c0       	rjmp	.+8      	; 0x200a <DigitalInputShiftRegister_74HC166::update()+0x9a>
    2002:	8f 2d       	mov	r24, r15
    2004:	80 95       	com	r24
    2006:	98 23       	and	r25, r24
    2008:	f8 01       	movw	r30, r16
    200a:	90 83       	st	Z, r25
    200c:	aa a9       	ldd	r26, Y+50	; 0x32
    200e:	bb a9       	ldd	r27, Y+51	; 0x33
    2010:	ed 91       	ld	r30, X+
    2012:	fc 91       	ld	r31, X
    2014:	11 97       	sbiw	r26, 0x01	; 1
    2016:	02 80       	ldd	r0, Z+2	; 0x02
    2018:	f3 81       	ldd	r31, Z+3	; 0x03
    201a:	e0 2d       	mov	r30, r0
    201c:	cd 01       	movw	r24, r26
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	09 95       	icall
    2022:	aa a9       	ldd	r26, Y+50	; 0x32
    2024:	bb a9       	ldd	r27, Y+51	; 0x33
    2026:	ed 91       	ld	r30, X+
    2028:	fc 91       	ld	r31, X
    202a:	11 97       	sbiw	r26, 0x01	; 1
    202c:	02 80       	ldd	r0, Z+2	; 0x02
    202e:	f3 81       	ldd	r31, Z+3	; 0x03
    2030:	e0 2d       	mov	r30, r0
    2032:	cd 01       	movw	r24, r26
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	09 95       	icall
    2038:	ff 0c       	add	r15, r15
    203a:	21 f4       	brne	.+8      	; 0x2044 <DigitalInputShiftRegister_74HC166::update()+0xd4>
    203c:	0f 5f       	subi	r16, 0xFF	; 255
    203e:	1f 4f       	sbci	r17, 0xFF	; 255
    2040:	ff 24       	eor	r15, r15
    2042:	f3 94       	inc	r15
    2044:	e3 94       	inc	r14
    2046:	8f a5       	ldd	r24, Y+47	; 0x2f
    2048:	e8 16       	cp	r14, r24
    204a:	60 f2       	brcs	.-104    	; 0x1fe4 <DigitalInputShiftRegister_74HC166::update()+0x74>
    204c:	a8 a9       	ldd	r26, Y+48	; 0x30
    204e:	b9 a9       	ldd	r27, Y+49	; 0x31
    2050:	ed 91       	ld	r30, X+
    2052:	fc 91       	ld	r31, X
    2054:	11 97       	sbiw	r26, 0x01	; 1
    2056:	02 80       	ldd	r0, Z+2	; 0x02
    2058:	f3 81       	ldd	r31, Z+3	; 0x03
    205a:	e0 2d       	mov	r30, r0
    205c:	cd 01       	movw	r24, r26
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	09 95       	icall
    2062:	aa a9       	ldd	r26, Y+50	; 0x32
    2064:	bb a9       	ldd	r27, Y+51	; 0x33
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	11 97       	sbiw	r26, 0x01	; 1
    206c:	02 80       	ldd	r0, Z+2	; 0x02
    206e:	f3 81       	ldd	r31, Z+3	; 0x03
    2070:	e0 2d       	mov	r30, r0
    2072:	cd 01       	movw	r24, r26
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	09 95       	icall
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	08 95       	ret

00002086 <DigitalOutputShiftRegister_74HC595_Pin::getState()>:
    2086:	fc 01       	movw	r30, r24
    2088:	a2 81       	ldd	r26, Z+2	; 0x02
    208a:	b3 81       	ldd	r27, Z+3	; 0x03
    208c:	24 81       	ldd	r18, Z+4	; 0x04
    208e:	a4 5a       	subi	r26, 0xA4	; 164
    2090:	bf 4f       	sbci	r27, 0xFF	; 255
    2092:	8c 91       	ld	r24, X
    2094:	ac 55       	subi	r26, 0x5C	; 92
    2096:	b0 40       	sbci	r27, 0x00	; 0
    2098:	28 17       	cp	r18, r24
    209a:	10 f0       	brcs	.+4      	; 0x20a0 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x1a>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	08 95       	ret
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	c9 01       	movw	r24, r18
    20a4:	e3 e0       	ldi	r30, 0x03	; 3
    20a6:	95 95       	asr	r25
    20a8:	87 95       	ror	r24
    20aa:	ea 95       	dec	r30
    20ac:	e1 f7       	brne	.-8      	; 0x20a6 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x20>
    20ae:	a8 0f       	add	r26, r24
    20b0:	b9 1f       	adc	r27, r25
    20b2:	aa 5a       	subi	r26, 0xAA	; 170
    20b4:	bf 4f       	sbci	r27, 0xFF	; 255
    20b6:	8c 91       	ld	r24, X
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	27 70       	andi	r18, 0x07	; 7
    20bc:	30 70       	andi	r19, 0x00	; 0
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x3e>
    20c0:	95 95       	asr	r25
    20c2:	87 95       	ror	r24
    20c4:	2a 95       	dec	r18
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x3a>
    20c8:	81 70       	andi	r24, 0x01	; 1
    20ca:	08 95       	ret

000020cc <DigitalOutputShiftRegister_74HC595::update()>:
    20cc:	6f 92       	push	r6
    20ce:	7f 92       	push	r7
    20d0:	8f 92       	push	r8
    20d2:	9f 92       	push	r9
    20d4:	af 92       	push	r10
    20d6:	bf 92       	push	r11
    20d8:	cf 92       	push	r12
    20da:	df 92       	push	r13
    20dc:	ef 92       	push	r14
    20de:	ff 92       	push	r15
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	ec 01       	movw	r28, r24
    20ea:	c3 5a       	subi	r28, 0xA3	; 163
    20ec:	df 4f       	sbci	r29, 0xFF	; 255
    20ee:	88 81       	ld	r24, Y
    20f0:	cd 55       	subi	r28, 0x5D	; 93
    20f2:	d0 40       	sbci	r29, 0x00	; 0
    20f4:	88 23       	and	r24, r24
    20f6:	41 f4       	brne	.+16     	; 0x2108 <DigitalOutputShiftRegister_74HC595::update()+0x3c>
    20f8:	cb 5a       	subi	r28, 0xAB	; 171
    20fa:	df 4f       	sbci	r29, 0xFF	; 255
    20fc:	88 81       	ld	r24, Y
    20fe:	c5 55       	subi	r28, 0x55	; 85
    2100:	d0 40       	sbci	r29, 0x00	; 0
    2102:	88 23       	and	r24, r24
    2104:	09 f0       	breq	.+2      	; 0x2108 <DigitalOutputShiftRegister_74HC595::update()+0x3c>
    2106:	50 c1       	rjmp	.+672    	; 0x23a8 <DigitalOutputShiftRegister_74HC595::update()+0x2dc>
    2108:	c0 5a       	subi	r28, 0xA0	; 160
    210a:	df 4f       	sbci	r29, 0xFF	; 255
    210c:	a8 81       	ld	r26, Y
    210e:	b9 81       	ldd	r27, Y+1	; 0x01
    2110:	c0 56       	subi	r28, 0x60	; 96
    2112:	d0 40       	sbci	r29, 0x00	; 0
    2114:	ed 91       	ld	r30, X+
    2116:	fc 91       	ld	r31, X
    2118:	11 97       	sbiw	r26, 0x01	; 1
    211a:	02 80       	ldd	r0, Z+2	; 0x02
    211c:	f3 81       	ldd	r31, Z+3	; 0x03
    211e:	e0 2d       	mov	r30, r0
    2120:	cd 01       	movw	r24, r26
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	09 95       	icall
    2126:	65 e5       	ldi	r22, 0x55	; 85
    2128:	c6 2e       	mov	r12, r22
    212a:	d1 2c       	mov	r13, r1
    212c:	cc 0e       	add	r12, r28
    212e:	dd 1e       	adc	r13, r29
    2130:	d6 01       	movw	r26, r12
    2132:	8c 91       	ld	r24, X
    2134:	82 50       	subi	r24, 0x02	; 2
    2136:	82 30       	cpi	r24, 0x02	; 2
    2138:	08 f0       	brcs	.+2      	; 0x213c <DigitalOutputShiftRegister_74HC595::update()+0x70>
    213a:	96 c0       	rjmp	.+300    	; 0x2268 <DigitalOutputShiftRegister_74HC595::update()+0x19c>
    213c:	8e 01       	movw	r16, r28
    213e:	0e 59       	subi	r16, 0x9E	; 158
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	f8 01       	movw	r30, r16
    2144:	a0 81       	ld	r26, Z
    2146:	b1 81       	ldd	r27, Z+1	; 0x01
    2148:	ed 91       	ld	r30, X+
    214a:	fc 91       	ld	r31, X
    214c:	11 97       	sbiw	r26, 0x01	; 1
    214e:	02 80       	ldd	r0, Z+2	; 0x02
    2150:	f3 81       	ldd	r31, Z+3	; 0x03
    2152:	e0 2d       	mov	r30, r0
    2154:	cd 01       	movw	r24, r26
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	09 95       	icall
    215a:	fe 01       	movw	r30, r28
    215c:	e4 5a       	subi	r30, 0xA4	; 164
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	20 81       	ld	r18, Z
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	21 50       	subi	r18, 0x01	; 1
    2166:	30 40       	sbci	r19, 0x00	; 0
    2168:	a9 01       	movw	r20, r18
    216a:	47 70       	andi	r20, 0x07	; 7
    216c:	50 70       	andi	r21, 0x00	; 0
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <DigitalOutputShiftRegister_74HC595::update()+0xac>
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	4a 95       	dec	r20
    217a:	e2 f7       	brpl	.-8      	; 0x2174 <DigitalOutputShiftRegister_74HC595::update()+0xa8>
    217c:	b8 2e       	mov	r11, r24
    217e:	79 01       	movw	r14, r18
    2180:	53 e0       	ldi	r21, 0x03	; 3
    2182:	f5 94       	asr	r15
    2184:	e7 94       	ror	r14
    2186:	5a 95       	dec	r21
    2188:	e1 f7       	brne	.-8      	; 0x2182 <DigitalOutputShiftRegister_74HC595::update()+0xb6>
    218a:	86 e5       	ldi	r24, 0x56	; 86
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	e8 0e       	add	r14, r24
    2190:	f9 1e       	adc	r15, r25
    2192:	ec 0e       	add	r14, r28
    2194:	fd 1e       	adc	r15, r29
    2196:	aa 24       	eor	r10, r10
    2198:	3f 01       	movw	r6, r30
    219a:	4e e5       	ldi	r20, 0x5E	; 94
    219c:	84 2e       	mov	r8, r20
    219e:	91 2c       	mov	r9, r1
    21a0:	8c 0e       	add	r8, r28
    21a2:	9d 1e       	adc	r9, r29
    21a4:	41 c0       	rjmp	.+130    	; 0x2228 <DigitalOutputShiftRegister_74HC595::update()+0x15c>
    21a6:	f4 01       	movw	r30, r8
    21a8:	a0 81       	ld	r26, Z
    21aa:	b1 81       	ldd	r27, Z+1	; 0x01
    21ac:	ed 91       	ld	r30, X+
    21ae:	fc 91       	ld	r31, X
    21b0:	11 97       	sbiw	r26, 0x01	; 1
    21b2:	02 80       	ldd	r0, Z+2	; 0x02
    21b4:	f3 81       	ldd	r31, Z+3	; 0x03
    21b6:	e0 2d       	mov	r30, r0
    21b8:	cd 01       	movw	r24, r26
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	09 95       	icall
    21be:	d6 01       	movw	r26, r12
    21c0:	8c 91       	ld	r24, X
    21c2:	83 30       	cpi	r24, 0x03	; 3
    21c4:	19 f5       	brne	.+70     	; 0x220c <DigitalOutputShiftRegister_74HC595::update()+0x140>
    21c6:	f8 01       	movw	r30, r16
    21c8:	a0 81       	ld	r26, Z
    21ca:	b1 81       	ldd	r27, Z+1	; 0x01
    21cc:	4d 91       	ld	r20, X+
    21ce:	5c 91       	ld	r21, X
    21d0:	11 97       	sbiw	r26, 0x01	; 1
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	f7 01       	movw	r30, r14
    21d6:	80 81       	ld	r24, Z
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	2b 2d       	mov	r18, r11
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	82 23       	and	r24, r18
    21e0:	93 23       	and	r25, r19
    21e2:	89 2b       	or	r24, r25
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <DigitalOutputShiftRegister_74HC595::update()+0x11c>
    21e6:	61 e0       	ldi	r22, 0x01	; 1
    21e8:	fa 01       	movw	r30, r20
    21ea:	22 81       	ldd	r18, Z+2	; 0x02
    21ec:	33 81       	ldd	r19, Z+3	; 0x03
    21ee:	cd 01       	movw	r24, r26
    21f0:	f9 01       	movw	r30, r18
    21f2:	09 95       	icall
    21f4:	8b 2d       	mov	r24, r11
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	95 95       	asr	r25
    21fa:	87 95       	ror	r24
    21fc:	b8 2e       	mov	r11, r24
    21fe:	88 23       	and	r24, r24
    2200:	29 f4       	brne	.+10     	; 0x220c <DigitalOutputShiftRegister_74HC595::update()+0x140>
    2202:	08 94       	sec
    2204:	e1 08       	sbc	r14, r1
    2206:	f1 08       	sbc	r15, r1
    2208:	20 e8       	ldi	r18, 0x80	; 128
    220a:	b2 2e       	mov	r11, r18
    220c:	d4 01       	movw	r26, r8
    220e:	ed 91       	ld	r30, X+
    2210:	fc 91       	ld	r31, X
    2212:	a0 81       	ld	r26, Z
    2214:	b1 81       	ldd	r27, Z+1	; 0x01
    2216:	12 96       	adiw	r26, 0x02	; 2
    2218:	2d 91       	ld	r18, X+
    221a:	3c 91       	ld	r19, X
    221c:	13 97       	sbiw	r26, 0x03	; 3
    221e:	cf 01       	movw	r24, r30
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	f9 01       	movw	r30, r18
    2224:	09 95       	icall
    2226:	a3 94       	inc	r10
    2228:	f3 01       	movw	r30, r6
    222a:	80 81       	ld	r24, Z
    222c:	a8 16       	cp	r10, r24
    222e:	08 f4       	brcc	.+2      	; 0x2232 <DigitalOutputShiftRegister_74HC595::update()+0x166>
    2230:	ba cf       	rjmp	.-140    	; 0x21a6 <DigitalOutputShiftRegister_74HC595::update()+0xda>
    2232:	8e 01       	movw	r16, r28
    2234:	00 5a       	subi	r16, 0xA0	; 160
    2236:	1f 4f       	sbci	r17, 0xFF	; 255
    2238:	f8 01       	movw	r30, r16
    223a:	a0 81       	ld	r26, Z
    223c:	b1 81       	ldd	r27, Z+1	; 0x01
    223e:	ed 91       	ld	r30, X+
    2240:	fc 91       	ld	r31, X
    2242:	11 97       	sbiw	r26, 0x01	; 1
    2244:	02 80       	ldd	r0, Z+2	; 0x02
    2246:	f3 81       	ldd	r31, Z+3	; 0x03
    2248:	e0 2d       	mov	r30, r0
    224a:	cd 01       	movw	r24, r26
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	09 95       	icall
    2250:	f8 01       	movw	r30, r16
    2252:	a0 81       	ld	r26, Z
    2254:	b1 81       	ldd	r27, Z+1	; 0x01
    2256:	ed 91       	ld	r30, X+
    2258:	fc 91       	ld	r31, X
    225a:	11 97       	sbiw	r26, 0x01	; 1
    225c:	02 80       	ldd	r0, Z+2	; 0x02
    225e:	f3 81       	ldd	r31, Z+3	; 0x03
    2260:	e0 2d       	mov	r30, r0
    2262:	cd 01       	movw	r24, r26
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	09 95       	icall
    2268:	c3 5a       	subi	r28, 0xA3	; 163
    226a:	df 4f       	sbci	r29, 0xFF	; 255
    226c:	18 82       	st	Y, r1
    226e:	cd 55       	subi	r28, 0x5D	; 93
    2270:	d0 40       	sbci	r29, 0x00	; 0
    2272:	fe 01       	movw	r30, r28
    2274:	e4 5a       	subi	r30, 0xA4	; 164
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	20 81       	ld	r18, Z
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	21 50       	subi	r18, 0x01	; 1
    227e:	30 40       	sbci	r19, 0x00	; 0
    2280:	a9 01       	movw	r20, r18
    2282:	47 70       	andi	r20, 0x07	; 7
    2284:	50 70       	andi	r21, 0x00	; 0
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <DigitalOutputShiftRegister_74HC595::update()+0x1c4>
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	4a 95       	dec	r20
    2292:	e2 f7       	brpl	.-8      	; 0x228c <DigitalOutputShiftRegister_74HC595::update()+0x1c0>
    2294:	d8 2e       	mov	r13, r24
    2296:	89 01       	movw	r16, r18
    2298:	93 e0       	ldi	r25, 0x03	; 3
    229a:	15 95       	asr	r17
    229c:	07 95       	ror	r16
    229e:	9a 95       	dec	r25
    22a0:	e1 f7       	brne	.-8      	; 0x229a <DigitalOutputShiftRegister_74HC595::update()+0x1ce>
    22a2:	0a 5a       	subi	r16, 0xAA	; 170
    22a4:	1f 4f       	sbci	r17, 0xFF	; 255
    22a6:	0c 0f       	add	r16, r28
    22a8:	1d 1f       	adc	r17, r29
    22aa:	cc 24       	eor	r12, r12
    22ac:	4f 01       	movw	r8, r30
    22ae:	82 e6       	ldi	r24, 0x62	; 98
    22b0:	a8 2e       	mov	r10, r24
    22b2:	b1 2c       	mov	r11, r1
    22b4:	ac 0e       	add	r10, r28
    22b6:	bd 1e       	adc	r11, r29
    22b8:	be e5       	ldi	r27, 0x5E	; 94
    22ba:	eb 2e       	mov	r14, r27
    22bc:	f1 2c       	mov	r15, r1
    22be:	ec 0e       	add	r14, r28
    22c0:	fd 1e       	adc	r15, r29
    22c2:	3b c0       	rjmp	.+118    	; 0x233a <DigitalOutputShiftRegister_74HC595::update()+0x26e>
    22c4:	f7 01       	movw	r30, r14
    22c6:	a0 81       	ld	r26, Z
    22c8:	b1 81       	ldd	r27, Z+1	; 0x01
    22ca:	ed 91       	ld	r30, X+
    22cc:	fc 91       	ld	r31, X
    22ce:	11 97       	sbiw	r26, 0x01	; 1
    22d0:	02 80       	ldd	r0, Z+2	; 0x02
    22d2:	f3 81       	ldd	r31, Z+3	; 0x03
    22d4:	e0 2d       	mov	r30, r0
    22d6:	cd 01       	movw	r24, r26
    22d8:	60 e0       	ldi	r22, 0x00	; 0
    22da:	09 95       	icall
    22dc:	f5 01       	movw	r30, r10
    22de:	a0 81       	ld	r26, Z
    22e0:	b1 81       	ldd	r27, Z+1	; 0x01
    22e2:	4d 91       	ld	r20, X+
    22e4:	5c 91       	ld	r21, X
    22e6:	11 97       	sbiw	r26, 0x01	; 1
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	f8 01       	movw	r30, r16
    22ec:	80 81       	ld	r24, Z
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	2d 2d       	mov	r18, r13
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	82 23       	and	r24, r18
    22f6:	93 23       	and	r25, r19
    22f8:	89 2b       	or	r24, r25
    22fa:	09 f0       	breq	.+2      	; 0x22fe <DigitalOutputShiftRegister_74HC595::update()+0x232>
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	fa 01       	movw	r30, r20
    2300:	22 81       	ldd	r18, Z+2	; 0x02
    2302:	33 81       	ldd	r19, Z+3	; 0x03
    2304:	cd 01       	movw	r24, r26
    2306:	f9 01       	movw	r30, r18
    2308:	09 95       	icall
    230a:	f7 01       	movw	r30, r14
    230c:	a0 81       	ld	r26, Z
    230e:	b1 81       	ldd	r27, Z+1	; 0x01
    2310:	ed 91       	ld	r30, X+
    2312:	fc 91       	ld	r31, X
    2314:	11 97       	sbiw	r26, 0x01	; 1
    2316:	02 80       	ldd	r0, Z+2	; 0x02
    2318:	f3 81       	ldd	r31, Z+3	; 0x03
    231a:	e0 2d       	mov	r30, r0
    231c:	cd 01       	movw	r24, r26
    231e:	61 e0       	ldi	r22, 0x01	; 1
    2320:	09 95       	icall
    2322:	8d 2d       	mov	r24, r13
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	95 95       	asr	r25
    2328:	87 95       	ror	r24
    232a:	d8 2e       	mov	r13, r24
    232c:	88 23       	and	r24, r24
    232e:	21 f4       	brne	.+8      	; 0x2338 <DigitalOutputShiftRegister_74HC595::update()+0x26c>
    2330:	01 50       	subi	r16, 0x01	; 1
    2332:	10 40       	sbci	r17, 0x00	; 0
    2334:	f0 e8       	ldi	r31, 0x80	; 128
    2336:	df 2e       	mov	r13, r31
    2338:	c3 94       	inc	r12
    233a:	d4 01       	movw	r26, r8
    233c:	8c 91       	ld	r24, X
    233e:	c8 16       	cp	r12, r24
    2340:	08 f2       	brcs	.-126    	; 0x22c4 <DigitalOutputShiftRegister_74HC595::update()+0x1f8>
    2342:	f7 01       	movw	r30, r14
    2344:	a0 81       	ld	r26, Z
    2346:	b1 81       	ldd	r27, Z+1	; 0x01
    2348:	ed 91       	ld	r30, X+
    234a:	fc 91       	ld	r31, X
    234c:	11 97       	sbiw	r26, 0x01	; 1
    234e:	02 80       	ldd	r0, Z+2	; 0x02
    2350:	f3 81       	ldd	r31, Z+3	; 0x03
    2352:	e0 2d       	mov	r30, r0
    2354:	cd 01       	movw	r24, r26
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	09 95       	icall
    235a:	f5 01       	movw	r30, r10
    235c:	a0 81       	ld	r26, Z
    235e:	b1 81       	ldd	r27, Z+1	; 0x01
    2360:	ed 91       	ld	r30, X+
    2362:	fc 91       	ld	r31, X
    2364:	11 97       	sbiw	r26, 0x01	; 1
    2366:	02 80       	ldd	r0, Z+2	; 0x02
    2368:	f3 81       	ldd	r31, Z+3	; 0x03
    236a:	e0 2d       	mov	r30, r0
    236c:	cd 01       	movw	r24, r26
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	09 95       	icall
    2372:	8e 01       	movw	r16, r28
    2374:	00 5a       	subi	r16, 0xA0	; 160
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	f8 01       	movw	r30, r16
    237a:	a0 81       	ld	r26, Z
    237c:	b1 81       	ldd	r27, Z+1	; 0x01
    237e:	ed 91       	ld	r30, X+
    2380:	fc 91       	ld	r31, X
    2382:	11 97       	sbiw	r26, 0x01	; 1
    2384:	02 80       	ldd	r0, Z+2	; 0x02
    2386:	f3 81       	ldd	r31, Z+3	; 0x03
    2388:	e0 2d       	mov	r30, r0
    238a:	cd 01       	movw	r24, r26
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	09 95       	icall
    2390:	f8 01       	movw	r30, r16
    2392:	a0 81       	ld	r26, Z
    2394:	b1 81       	ldd	r27, Z+1	; 0x01
    2396:	ed 91       	ld	r30, X+
    2398:	fc 91       	ld	r31, X
    239a:	11 97       	sbiw	r26, 0x01	; 1
    239c:	02 80       	ldd	r0, Z+2	; 0x02
    239e:	f3 81       	ldd	r31, Z+3	; 0x03
    23a0:	e0 2d       	mov	r30, r0
    23a2:	cd 01       	movw	r24, r26
    23a4:	60 e0       	ldi	r22, 0x00	; 0
    23a6:	09 95       	icall
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	df 90       	pop	r13
    23b6:	cf 90       	pop	r12
    23b8:	bf 90       	pop	r11
    23ba:	af 90       	pop	r10
    23bc:	9f 90       	pop	r9
    23be:	8f 90       	pop	r8
    23c0:	7f 90       	pop	r7
    23c2:	6f 90       	pop	r6
    23c4:	08 95       	ret

000023c6 <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>:
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	ec 01       	movw	r28, r24
    23d4:	d9 01       	movw	r26, r18
    23d6:	61 31       	cpi	r22, 0x11	; 17
    23d8:	08 f4       	brcc	.+2      	; 0x23dc <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)+0x16>
    23da:	61 e1       	ldi	r22, 0x11	; 17
    23dc:	c4 5a       	subi	r28, 0xA4	; 164
    23de:	df 4f       	sbci	r29, 0xFF	; 255
    23e0:	68 83       	st	Y, r22
    23e2:	22 96       	adiw	r28, 0x02	; 2
    23e4:	a9 93       	st	Y+, r26
    23e6:	b9 93       	st	Y+, r27
    23e8:	09 93       	st	Y+, r16
    23ea:	19 93       	st	Y+, r17
    23ec:	f9 82       	std	Y+1, r15	; 0x01
    23ee:	e8 82       	st	Y, r14
    23f0:	2d 97       	sbiw	r28, 0x0d	; 13
    23f2:	48 83       	st	Y, r20
    23f4:	28 96       	adiw	r28, 0x08	; 8
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	88 83       	st	Y, r24
    23fa:	ed 91       	ld	r30, X+
    23fc:	fc 91       	ld	r31, X
    23fe:	11 97       	sbiw	r26, 0x01	; 1
    2400:	02 80       	ldd	r0, Z+2	; 0x02
    2402:	f3 81       	ldd	r31, Z+3	; 0x03
    2404:	e0 2d       	mov	r30, r0
    2406:	cd 01       	movw	r24, r26
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	09 95       	icall
    240c:	d8 01       	movw	r26, r16
    240e:	ed 91       	ld	r30, X+
    2410:	fc 91       	ld	r31, X
    2412:	02 80       	ldd	r0, Z+2	; 0x02
    2414:	f3 81       	ldd	r31, Z+3	; 0x03
    2416:	e0 2d       	mov	r30, r0
    2418:	c8 01       	movw	r24, r16
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	09 95       	icall
    241e:	d7 01       	movw	r26, r14
    2420:	ed 91       	ld	r30, X+
    2422:	fc 91       	ld	r31, X
    2424:	02 80       	ldd	r0, Z+2	; 0x02
    2426:	f3 81       	ldd	r31, Z+3	; 0x03
    2428:	e0 2d       	mov	r30, r0
    242a:	c7 01       	movw	r24, r14
    242c:	60 e0       	ldi	r22, 0x00	; 0
    242e:	09 95       	icall
    2430:	25 97       	sbiw	r28, 0x05	; 5
    2432:	18 82       	st	Y, r1
    2434:	23 96       	adiw	r28, 0x03	; 3
    2436:	18 82       	st	Y, r1
    2438:	24 97       	sbiw	r28, 0x04	; 4
    243a:	18 82       	st	Y, r1
    243c:	23 96       	adiw	r28, 0x03	; 3
    243e:	18 82       	st	Y, r1
    2440:	24 97       	sbiw	r28, 0x04	; 4
    2442:	18 82       	st	Y, r1
    2444:	23 96       	adiw	r28, 0x03	; 3
    2446:	18 82       	st	Y, r1
    2448:	c9 55       	subi	r28, 0x59	; 89
    244a:	d0 40       	sbci	r29, 0x00	; 0
    244c:	ce 01       	movw	r24, r28
    244e:	0e 94 66 10 	call	0x20cc	; 0x20cc <DigitalOutputShiftRegister_74HC595::update()>
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	ff 90       	pop	r15
    245c:	ef 90       	pop	r14
    245e:	08 95       	ret

00002460 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)>:
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	dc 01       	movw	r26, r24
    2468:	14 2f       	mov	r17, r20
    246a:	a4 5a       	subi	r26, 0xA4	; 164
    246c:	bf 4f       	sbci	r27, 0xFF	; 255
    246e:	8c 91       	ld	r24, X
    2470:	ac 55       	subi	r26, 0x5C	; 92
    2472:	b0 40       	sbci	r27, 0x00	; 0
    2474:	68 17       	cp	r22, r24
    2476:	a8 f5       	brcc	.+106    	; 0x24e2 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x82>
    2478:	46 2f       	mov	r20, r22
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	9a 01       	movw	r18, r20
    247e:	27 70       	andi	r18, 0x07	; 7
    2480:	30 70       	andi	r19, 0x00	; 0
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	02 c0       	rjmp	.+4      	; 0x248c <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x2c>
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	2a 95       	dec	r18
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x28>
    2490:	78 2f       	mov	r23, r24
    2492:	e3 e0       	ldi	r30, 0x03	; 3
    2494:	56 95       	lsr	r21
    2496:	47 95       	ror	r20
    2498:	ea 95       	dec	r30
    249a:	e1 f7       	brne	.-8      	; 0x2494 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x34>
    249c:	4a 0f       	add	r20, r26
    249e:	5b 1f       	adc	r21, r27
    24a0:	ea 01       	movw	r28, r20
    24a2:	ca 5a       	subi	r28, 0xAA	; 170
    24a4:	df 4f       	sbci	r29, 0xFF	; 255
    24a6:	68 81       	ld	r22, Y
    24a8:	86 2f       	mov	r24, r22
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	27 2f       	mov	r18, r23
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	82 23       	and	r24, r18
    24b2:	93 23       	and	r25, r19
    24b4:	21 2f       	mov	r18, r17
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	82 17       	cp	r24, r18
    24ba:	93 07       	cpc	r25, r19
    24bc:	91 f0       	breq	.+36     	; 0x24e2 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x82>
    24be:	a3 5a       	subi	r26, 0xA3	; 163
    24c0:	bf 4f       	sbci	r27, 0xFF	; 255
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	8c 93       	st	X, r24
    24c6:	97 2f       	mov	r25, r23
    24c8:	90 95       	com	r25
    24ca:	fa 01       	movw	r30, r20
    24cc:	e7 5a       	subi	r30, 0xA7	; 167
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	89 23       	and	r24, r25
    24d4:	80 83       	st	Z, r24
    24d6:	11 23       	and	r17, r17
    24d8:	11 f0       	breq	.+4      	; 0x24de <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x7e>
    24da:	67 2b       	or	r22, r23
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x80>
    24de:	69 23       	and	r22, r25
    24e0:	68 83       	st	Y, r22
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	08 95       	ret

000024ea <DigitalOutputShiftRegister_74HC595_Pin::setState(bool)>:
    24ea:	fc 01       	movw	r30, r24
    24ec:	46 2f       	mov	r20, r22
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	64 81       	ldd	r22, Z+4	; 0x04
    24f4:	0e 94 30 12 	call	0x2460	; 0x2460 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)>
    24f8:	08 95       	ret

000024fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>:
    24fa:	26 2f       	mov	r18, r22
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	f9 01       	movw	r30, r18
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	e2 0f       	add	r30, r18
    250a:	f3 1f       	adc	r31, r19
    250c:	e8 0f       	add	r30, r24
    250e:	f9 1f       	adc	r31, r25
    2510:	93 83       	std	Z+3, r25	; 0x03
    2512:	82 83       	std	Z+2, r24	; 0x02
    2514:	64 83       	std	Z+4, r22	; 0x04
    2516:	cf 01       	movw	r24, r30
    2518:	08 95       	ret

0000251a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>:
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	8c 01       	movw	r16, r24
    2522:	86 2f       	mov	r24, r22
    2524:	f4 2e       	mov	r15, r20
    2526:	26 2f       	mov	r18, r22
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	f9 01       	movw	r30, r18
    252c:	e6 5e       	subi	r30, 0xE6	; 230
    252e:	f9 4f       	sbci	r31, 0xF9	; 249
    2530:	e4 91       	lpm	r30, Z+
    2532:	d8 01       	movw	r26, r16
    2534:	12 96       	adiw	r26, 0x02	; 2
    2536:	ec 93       	st	X, r30
    2538:	12 97       	sbiw	r26, 0x02	; 2
    253a:	2a 5f       	subi	r18, 0xFA	; 250
    253c:	39 4f       	sbci	r19, 0xF9	; 249
    253e:	f9 01       	movw	r30, r18
    2540:	94 91       	lpm	r25, Z+
    2542:	e9 2f       	mov	r30, r25
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	ee 50       	subi	r30, 0x0E	; 14
    254c:	fa 4f       	sbci	r31, 0xFA	; 250
    254e:	25 91       	lpm	r18, Z+
    2550:	34 91       	lpm	r19, Z+
    2552:	14 96       	adiw	r26, 0x04	; 4
    2554:	3c 93       	st	X, r19
    2556:	2e 93       	st	-X, r18
    2558:	13 97       	sbiw	r26, 0x03	; 3
    255a:	61 e0       	ldi	r22, 0x01	; 1
    255c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <pinMode>
    2560:	d8 01       	movw	r26, r16
    2562:	ed 91       	ld	r30, X+
    2564:	fc 91       	ld	r31, X
    2566:	02 80       	ldd	r0, Z+2	; 0x02
    2568:	f3 81       	ldd	r31, Z+3	; 0x03
    256a:	e0 2d       	mov	r30, r0
    256c:	c8 01       	movw	r24, r16
    256e:	6f 2d       	mov	r22, r15
    2570:	09 95       	icall
    2572:	1f 91       	pop	r17
    2574:	0f 91       	pop	r16
    2576:	ff 90       	pop	r15
    2578:	08 95       	ret

0000257a <DigitalInputArduinoPin::initialize(unsigned char, bool)>:
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	7c 01       	movw	r14, r24
    2586:	86 2f       	mov	r24, r22
    2588:	d4 2e       	mov	r13, r20
    258a:	26 2f       	mov	r18, r22
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	f9 01       	movw	r30, r18
    2590:	e6 5e       	subi	r30, 0xE6	; 230
    2592:	f9 4f       	sbci	r31, 0xF9	; 249
    2594:	e4 91       	lpm	r30, Z+
    2596:	d7 01       	movw	r26, r14
    2598:	12 96       	adiw	r26, 0x02	; 2
    259a:	ec 93       	st	X, r30
    259c:	12 97       	sbiw	r26, 0x02	; 2
    259e:	2a 5f       	subi	r18, 0xFA	; 250
    25a0:	39 4f       	sbci	r19, 0xF9	; 249
    25a2:	f9 01       	movw	r30, r18
    25a4:	04 91       	lpm	r16, Z+
    25a6:	10 e0       	ldi	r17, 0x00	; 0
    25a8:	00 0f       	add	r16, r16
    25aa:	11 1f       	adc	r17, r17
    25ac:	f8 01       	movw	r30, r16
    25ae:	e4 50       	subi	r30, 0x04	; 4
    25b0:	fa 4f       	sbci	r31, 0xFA	; 250
    25b2:	25 91       	lpm	r18, Z+
    25b4:	34 91       	lpm	r19, Z+
    25b6:	14 96       	adiw	r26, 0x04	; 4
    25b8:	3c 93       	st	X, r19
    25ba:	2e 93       	st	-X, r18
    25bc:	13 97       	sbiw	r26, 0x03	; 3
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <pinMode>
    25c4:	f8 01       	movw	r30, r16
    25c6:	ee 50       	subi	r30, 0x0E	; 14
    25c8:	fa 4f       	sbci	r31, 0xFA	; 250
    25ca:	a5 91       	lpm	r26, Z+
    25cc:	b4 91       	lpm	r27, Z+
    25ce:	f7 01       	movw	r30, r14
    25d0:	22 81       	ldd	r18, Z+2	; 0x02
    25d2:	dd 20       	and	r13, r13
    25d4:	29 f0       	breq	.+10     	; 0x25e0 <DigitalInputArduinoPin::initialize(unsigned char, bool)+0x66>
    25d6:	9f b7       	in	r25, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	8c 91       	ld	r24, X
    25dc:	82 2b       	or	r24, r18
    25de:	05 c0       	rjmp	.+10     	; 0x25ea <DigitalInputArduinoPin::initialize(unsigned char, bool)+0x70>
    25e0:	9f b7       	in	r25, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	8c 91       	ld	r24, X
    25e6:	20 95       	com	r18
    25e8:	82 23       	and	r24, r18
    25ea:	8c 93       	st	X, r24
    25ec:	9f bf       	out	0x3f, r25	; 63
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	ff 90       	pop	r15
    25f4:	ef 90       	pop	r14
    25f6:	df 90       	pop	r13
    25f8:	08 95       	ret

000025fa <RotaryEncoderState::setValue_unsafe(long)>:
    25fa:	8f 92       	push	r8
    25fc:	9f 92       	push	r9
    25fe:	af 92       	push	r10
    2600:	bf 92       	push	r11
    2602:	cf 92       	push	r12
    2604:	df 92       	push	r13
    2606:	ef 92       	push	r14
    2608:	ff 92       	push	r15
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	fc 01       	movw	r30, r24
    2610:	85 85       	ldd	r24, Z+13	; 0x0d
    2612:	80 80       	ld	r8, Z
    2614:	91 80       	ldd	r9, Z+1	; 0x01
    2616:	a2 80       	ldd	r10, Z+2	; 0x02
    2618:	b3 80       	ldd	r11, Z+3	; 0x03
    261a:	88 23       	and	r24, r24
    261c:	d1 f1       	breq	.+116    	; 0x2692 <RotaryEncoderState::setValue_unsafe(long)+0x98>
    261e:	84 81       	ldd	r24, Z+4	; 0x04
    2620:	95 81       	ldd	r25, Z+5	; 0x05
    2622:	a6 81       	ldd	r26, Z+6	; 0x06
    2624:	b7 81       	ldd	r27, Z+7	; 0x07
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	a1 1d       	adc	r26, r1
    262a:	b1 1d       	adc	r27, r1
    262c:	8c 01       	movw	r16, r24
    262e:	9d 01       	movw	r18, r26
    2630:	08 19       	sub	r16, r8
    2632:	19 09       	sbc	r17, r9
    2634:	2a 09       	sbc	r18, r10
    2636:	3b 09       	sbc	r19, r11
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	a1 09       	sbc	r26, r1
    263c:	b1 09       	sbc	r27, r1
    263e:	10 16       	cp	r1, r16
    2640:	11 06       	cpc	r1, r17
    2642:	12 06       	cpc	r1, r18
    2644:	13 06       	cpc	r1, r19
    2646:	54 f0       	brlt	.+20     	; 0x265c <RotaryEncoderState::setValue_unsafe(long)+0x62>
    2648:	01 e0       	ldi	r16, 0x01	; 1
    264a:	10 e0       	ldi	r17, 0x00	; 0
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	05 c0       	rjmp	.+10     	; 0x265c <RotaryEncoderState::setValue_unsafe(long)+0x62>
    2652:	4c 0d       	add	r20, r12
    2654:	5d 1d       	adc	r21, r13
    2656:	6e 1d       	adc	r22, r14
    2658:	7f 1d       	adc	r23, r15
    265a:	07 c0       	rjmp	.+14     	; 0x266a <RotaryEncoderState::setValue_unsafe(long)+0x70>
    265c:	cc 24       	eor	r12, r12
    265e:	dd 24       	eor	r13, r13
    2660:	76 01       	movw	r14, r12
    2662:	c0 1a       	sub	r12, r16
    2664:	d1 0a       	sbc	r13, r17
    2666:	e2 0a       	sbc	r14, r18
    2668:	f3 0a       	sbc	r15, r19
    266a:	84 17       	cp	r24, r20
    266c:	95 07       	cpc	r25, r21
    266e:	a6 07       	cpc	r26, r22
    2670:	b7 07       	cpc	r27, r23
    2672:	7c f3       	brlt	.-34     	; 0x2652 <RotaryEncoderState::setValue_unsafe(long)+0x58>
    2674:	04 c0       	rjmp	.+8      	; 0x267e <RotaryEncoderState::setValue_unsafe(long)+0x84>
    2676:	40 0f       	add	r20, r16
    2678:	51 1f       	adc	r21, r17
    267a:	62 1f       	adc	r22, r18
    267c:	73 1f       	adc	r23, r19
    267e:	48 15       	cp	r20, r8
    2680:	59 05       	cpc	r21, r9
    2682:	6a 05       	cpc	r22, r10
    2684:	7b 05       	cpc	r23, r11
    2686:	bc f3       	brlt	.-18     	; 0x2676 <RotaryEncoderState::setValue_unsafe(long)+0x7c>
    2688:	40 87       	std	Z+8, r20	; 0x08
    268a:	51 87       	std	Z+9, r21	; 0x09
    268c:	62 87       	std	Z+10, r22	; 0x0a
    268e:	73 87       	std	Z+11, r23	; 0x0b
    2690:	18 c0       	rjmp	.+48     	; 0x26c2 <RotaryEncoderState::setValue_unsafe(long)+0xc8>
    2692:	d5 01       	movw	r26, r10
    2694:	c4 01       	movw	r24, r8
    2696:	48 15       	cp	r20, r8
    2698:	59 05       	cpc	r21, r9
    269a:	6a 05       	cpc	r22, r10
    269c:	7b 05       	cpc	r23, r11
    269e:	6c f0       	brlt	.+26     	; 0x26ba <RotaryEncoderState::setValue_unsafe(long)+0xc0>
    26a0:	04 81       	ldd	r16, Z+4	; 0x04
    26a2:	15 81       	ldd	r17, Z+5	; 0x05
    26a4:	26 81       	ldd	r18, Z+6	; 0x06
    26a6:	37 81       	ldd	r19, Z+7	; 0x07
    26a8:	db 01       	movw	r26, r22
    26aa:	ca 01       	movw	r24, r20
    26ac:	04 17       	cp	r16, r20
    26ae:	15 07       	cpc	r17, r21
    26b0:	26 07       	cpc	r18, r22
    26b2:	37 07       	cpc	r19, r23
    26b4:	14 f4       	brge	.+4      	; 0x26ba <RotaryEncoderState::setValue_unsafe(long)+0xc0>
    26b6:	d9 01       	movw	r26, r18
    26b8:	c8 01       	movw	r24, r16
    26ba:	80 87       	std	Z+8, r24	; 0x08
    26bc:	91 87       	std	Z+9, r25	; 0x09
    26be:	a2 87       	std	Z+10, r26	; 0x0a
    26c0:	b3 87       	std	Z+11, r27	; 0x0b
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	86 87       	std	Z+14, r24	; 0x0e
    26c6:	1f 91       	pop	r17
    26c8:	0f 91       	pop	r16
    26ca:	ff 90       	pop	r15
    26cc:	ef 90       	pop	r14
    26ce:	df 90       	pop	r13
    26d0:	cf 90       	pop	r12
    26d2:	bf 90       	pop	r11
    26d4:	af 90       	pop	r10
    26d6:	9f 90       	pop	r9
    26d8:	8f 90       	pop	r8
    26da:	08 95       	ret

000026dc <RotaryEncoderState::setMinMax(long, long)>:
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	fc 01       	movw	r30, r24
    26e4:	ff b6       	in	r15, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	40 83       	st	Z, r20
    26ea:	51 83       	std	Z+1, r21	; 0x01
    26ec:	62 83       	std	Z+2, r22	; 0x02
    26ee:	73 83       	std	Z+3, r23	; 0x03
    26f0:	04 83       	std	Z+4, r16	; 0x04
    26f2:	15 83       	std	Z+5, r17	; 0x05
    26f4:	26 83       	std	Z+6, r18	; 0x06
    26f6:	37 83       	std	Z+7, r19	; 0x07
    26f8:	40 85       	ldd	r20, Z+8	; 0x08
    26fa:	51 85       	ldd	r21, Z+9	; 0x09
    26fc:	62 85       	ldd	r22, Z+10	; 0x0a
    26fe:	73 85       	ldd	r23, Z+11	; 0x0b
    2700:	0e 94 fd 12 	call	0x25fa	; 0x25fa <RotaryEncoderState::setValue_unsafe(long)>
    2704:	ff be       	out	0x3f, r15	; 63
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	ff 90       	pop	r15
    270c:	08 95       	ret

0000270e <RotaryEncoderAcceleration::update()>:
    270e:	6f 92       	push	r6
    2710:	7f 92       	push	r7
    2712:	8f 92       	push	r8
    2714:	9f 92       	push	r9
    2716:	af 92       	push	r10
    2718:	bf 92       	push	r11
    271a:	cf 92       	push	r12
    271c:	df 92       	push	r13
    271e:	ef 92       	push	r14
    2720:	ff 92       	push	r15
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	4c 01       	movw	r8, r24
    272c:	41 96       	adiw	r24, 0x11	; 17
    272e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <Button::update()>
    2732:	c4 01       	movw	r24, r8
    2734:	4b 96       	adiw	r24, 0x1b	; 27
    2736:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <Button::update()>
    273a:	d4 01       	movw	r26, r8
    273c:	1f 96       	adiw	r26, 0x0f	; 15
    273e:	ed 91       	ld	r30, X+
    2740:	fc 91       	ld	r31, X
    2742:	50 97       	sbiw	r26, 0x10	; 16
    2744:	84 85       	ldd	r24, Z+12	; 0x0c
    2746:	88 23       	and	r24, r24
    2748:	09 f4       	brne	.+2      	; 0x274c <RotaryEncoderAcceleration::update()+0x3e>
    274a:	88 c0       	rjmp	.+272    	; 0x285c <RotaryEncoderAcceleration::update()+0x14e>
    274c:	54 96       	adiw	r26, 0x14	; 20
    274e:	8c 91       	ld	r24, X
    2750:	54 97       	sbiw	r26, 0x14	; 20
    2752:	88 23       	and	r24, r24
    2754:	09 f0       	breq	.+2      	; 0x2758 <RotaryEncoderAcceleration::update()+0x4a>
    2756:	82 c0       	rjmp	.+260    	; 0x285c <RotaryEncoderAcceleration::update()+0x14e>
    2758:	53 96       	adiw	r26, 0x13	; 19
    275a:	8c 91       	ld	r24, X
    275c:	88 23       	and	r24, r24
    275e:	09 f4       	brne	.+2      	; 0x2762 <RotaryEncoderAcceleration::update()+0x54>
    2760:	7d c0       	rjmp	.+250    	; 0x285c <RotaryEncoderAcceleration::update()+0x14e>
    2762:	e4 01       	movw	r28, r8
    2764:	a5 96       	adiw	r28, 0x25	; 37
    2766:	ce 01       	movw	r24, r28
    2768:	0e 94 80 19 	call	0x3300	; 0x3300 <TicksPerSecond::tick()>
    276c:	ce 01       	movw	r24, r28
    276e:	0e 94 c5 19 	call	0x338a	; 0x338a <TicksPerSecond::update()>
    2772:	ce 01       	movw	r24, r28
    2774:	0e 94 a3 19 	call	0x3346	; 0x3346 <TicksPerSecond::getIntTPS_unsafe()>
    2778:	05 97       	sbiw	r24, 0x05	; 5
    277a:	1c f4       	brge	.+6      	; 0x2782 <RotaryEncoderAcceleration::update()+0x74>
    277c:	c0 e0       	ldi	r28, 0x00	; 0
    277e:	d0 e0       	ldi	r29, 0x00	; 0
    2780:	0d c0       	rjmp	.+26     	; 0x279c <RotaryEncoderAcceleration::update()+0x8e>
    2782:	ce 01       	movw	r24, r28
    2784:	0e 94 a3 19 	call	0x3346	; 0x3346 <TicksPerSecond::getIntTPS_unsafe()>
    2788:	4f 97       	sbiw	r24, 0x1f	; 31
    278a:	1c f0       	brlt	.+6      	; 0x2792 <RotaryEncoderAcceleration::update()+0x84>
    278c:	c9 e1       	ldi	r28, 0x19	; 25
    278e:	d0 e0       	ldi	r29, 0x00	; 0
    2790:	05 c0       	rjmp	.+10     	; 0x279c <RotaryEncoderAcceleration::update()+0x8e>
    2792:	ce 01       	movw	r24, r28
    2794:	0e 94 a3 19 	call	0x3346	; 0x3346 <TicksPerSecond::getIntTPS_unsafe()>
    2798:	ec 01       	movw	r28, r24
    279a:	25 97       	sbiw	r28, 0x05	; 5
    279c:	f4 01       	movw	r30, r8
    279e:	67 84       	ldd	r6, Z+15	; 0x0f
    27a0:	70 88       	ldd	r7, Z+16	; 0x10
    27a2:	d3 01       	movw	r26, r6
    27a4:	14 96       	adiw	r26, 0x04	; 4
    27a6:	2d 91       	ld	r18, X+
    27a8:	3d 91       	ld	r19, X+
    27aa:	4d 91       	ld	r20, X+
    27ac:	5c 91       	ld	r21, X
    27ae:	17 97       	sbiw	r26, 0x07	; 7
    27b0:	8d 91       	ld	r24, X+
    27b2:	9d 91       	ld	r25, X+
    27b4:	0d 90       	ld	r0, X+
    27b6:	bc 91       	ld	r27, X
    27b8:	a0 2d       	mov	r26, r0
    27ba:	28 1b       	sub	r18, r24
    27bc:	39 0b       	sbc	r19, r25
    27be:	4a 0b       	sbc	r20, r26
    27c0:	5b 0b       	sbc	r21, r27
    27c2:	24 36       	cpi	r18, 0x64	; 100
    27c4:	31 05       	cpc	r19, r1
    27c6:	41 05       	cpc	r20, r1
    27c8:	51 05       	cpc	r21, r1
    27ca:	34 f4       	brge	.+12     	; 0x27d8 <RotaryEncoderAcceleration::update()+0xca>
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	a8 2e       	mov	r10, r24
    27d0:	b1 2c       	mov	r11, r1
    27d2:	c1 2c       	mov	r12, r1
    27d4:	d1 2c       	mov	r13, r1
    27d6:	0c c0       	rjmp	.+24     	; 0x27f0 <RotaryEncoderAcceleration::update()+0xe2>
    27d8:	ca 01       	movw	r24, r20
    27da:	b9 01       	movw	r22, r18
    27dc:	24 e6       	ldi	r18, 0x64	; 100
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
    27e8:	c9 01       	movw	r24, r18
    27ea:	da 01       	movw	r26, r20
    27ec:	5c 01       	movw	r10, r24
    27ee:	6d 01       	movw	r12, r26
    27f0:	7e 01       	movw	r14, r28
    27f2:	00 27       	eor	r16, r16
    27f4:	f7 fc       	sbrc	r15, 7
    27f6:	00 95       	com	r16
    27f8:	10 2f       	mov	r17, r16
    27fa:	c8 01       	movw	r24, r16
    27fc:	b7 01       	movw	r22, r14
    27fe:	a8 01       	movw	r20, r16
    2800:	97 01       	movw	r18, r14
    2802:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    2806:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    280a:	a6 01       	movw	r20, r12
    280c:	95 01       	movw	r18, r10
    280e:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    2812:	29 e0       	ldi	r18, 0x09	; 9
    2814:	3d e3       	ldi	r19, 0x3D	; 61
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
    281e:	2f 5f       	subi	r18, 0xFF	; 255
    2820:	3f 4f       	sbci	r19, 0xFF	; 255
    2822:	4f 4f       	sbci	r20, 0xFF	; 255
    2824:	5f 4f       	sbci	r21, 0xFF	; 255
    2826:	f3 01       	movw	r30, r6
    2828:	e0 84       	ldd	r14, Z+8	; 0x08
    282a:	f1 84       	ldd	r15, Z+9	; 0x09
    282c:	02 85       	ldd	r16, Z+10	; 0x0a
    282e:	13 85       	ldd	r17, Z+11	; 0x0b
    2830:	d4 01       	movw	r26, r8
    2832:	5e 96       	adiw	r26, 0x1e	; 30
    2834:	8c 91       	ld	r24, X
    2836:	88 23       	and	r24, r24
    2838:	39 f4       	brne	.+14     	; 0x2848 <RotaryEncoderAcceleration::update()+0x13a>
    283a:	50 95       	com	r21
    283c:	40 95       	com	r20
    283e:	30 95       	com	r19
    2840:	21 95       	neg	r18
    2842:	3f 4f       	sbci	r19, 0xFF	; 255
    2844:	4f 4f       	sbci	r20, 0xFF	; 255
    2846:	5f 4f       	sbci	r21, 0xFF	; 255
    2848:	2e 0d       	add	r18, r14
    284a:	3f 1d       	adc	r19, r15
    284c:	40 1f       	adc	r20, r16
    284e:	51 1f       	adc	r21, r17
    2850:	c3 01       	movw	r24, r6
    2852:	ba 01       	movw	r22, r20
    2854:	a9 01       	movw	r20, r18
    2856:	0e 94 fd 12 	call	0x25fa	; 0x25fa <RotaryEncoderState::setValue_unsafe(long)>
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <RotaryEncoderAcceleration::update()+0x156>
    285c:	c4 01       	movw	r24, r8
    285e:	85 96       	adiw	r24, 0x25	; 37
    2860:	0e 94 c5 19 	call	0x338a	; 0x338a <TicksPerSecond::update()>
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ff 90       	pop	r15
    286e:	ef 90       	pop	r14
    2870:	df 90       	pop	r13
    2872:	cf 90       	pop	r12
    2874:	bf 90       	pop	r11
    2876:	af 90       	pop	r10
    2878:	9f 90       	pop	r9
    287a:	8f 90       	pop	r8
    287c:	7f 90       	pop	r7
    287e:	6f 90       	pop	r6
    2880:	08 95       	ret

00002882 <RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)>:
    2882:	ef 92       	push	r14
    2884:	ff 92       	push	r15
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	8c 01       	movw	r16, r24
    288c:	7a 01       	movw	r14, r20
    288e:	fc 01       	movw	r30, r24
    2890:	15 86       	std	Z+13, r1	; 0x0d
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	86 87       	std	Z+14, r24	; 0x0e
    2896:	84 87       	std	Z+12, r24	; 0x0c
    2898:	10 86       	std	Z+8, r1	; 0x08
    289a:	11 86       	std	Z+9, r1	; 0x09
    289c:	12 86       	std	Z+10, r1	; 0x0a
    289e:	13 86       	std	Z+11, r1	; 0x0b
    28a0:	10 82       	st	Z, r1
    28a2:	11 82       	std	Z+1, r1	; 0x01
    28a4:	12 82       	std	Z+2, r1	; 0x02
    28a6:	13 82       	std	Z+3, r1	; 0x03
    28a8:	88 ee       	ldi	r24, 0xE8	; 232
    28aa:	93 e0       	ldi	r25, 0x03	; 3
    28ac:	a0 e0       	ldi	r26, 0x00	; 0
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	84 83       	std	Z+4, r24	; 0x04
    28b2:	95 83       	std	Z+5, r25	; 0x05
    28b4:	a6 83       	std	Z+6, r26	; 0x06
    28b6:	b7 83       	std	Z+7, r27	; 0x07
    28b8:	10 8b       	std	Z+16, r17	; 0x10
    28ba:	07 87       	std	Z+15, r16	; 0x0f
    28bc:	c8 01       	movw	r24, r16
    28be:	41 96       	adiw	r24, 0x11	; 17
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <Button::initialize(DigitalInputPin*, unsigned int)>
    28c8:	c8 01       	movw	r24, r16
    28ca:	4b 96       	adiw	r24, 0x1b	; 27
    28cc:	b7 01       	movw	r22, r14
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <Button::initialize(DigitalInputPin*, unsigned int)>
    28d6:	c8 01       	movw	r24, r16
    28d8:	85 96       	adiw	r24, 0x25	; 37
    28da:	64 ef       	ldi	r22, 0xF4	; 244
    28dc:	71 e0       	ldi	r23, 0x01	; 1
    28de:	0e 94 31 1a 	call	0x3462	; 0x3462 <TicksPerSecond::initialize(unsigned int)>
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	08 95       	ret

000028ec <SerialReader::readln()>:
    28ec:	fc 01       	movw	r30, r24
    28ee:	86 81       	ldd	r24, Z+6	; 0x06
    28f0:	88 23       	and	r24, r24
    28f2:	19 f4       	brne	.+6      	; 0x28fa <SerialReader::readln()+0xe>
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	05 c0       	rjmp	.+10     	; 0x2904 <SerialReader::readln()+0x18>
    28fa:	16 82       	std	Z+6, r1	; 0x06
    28fc:	13 82       	std	Z+3, r1	; 0x03
    28fe:	12 82       	std	Z+2, r1	; 0x02
    2900:	24 81       	ldd	r18, Z+4	; 0x04
    2902:	35 81       	ldd	r19, Z+5	; 0x05
    2904:	c9 01       	movw	r24, r18
    2906:	08 95       	ret

00002908 <SerialReader::update()>:
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	ec 01       	movw	r28, r24
    290e:	8e 81       	ldd	r24, Y+6	; 0x06
    2910:	88 23       	and	r24, r24
    2912:	e1 f0       	breq	.+56     	; 0x294c <SerialReader::update()+0x44>
    2914:	3c c0       	rjmp	.+120    	; 0x298e <SerialReader::update()+0x86>
    2916:	2d 30       	cpi	r18, 0x0D	; 13
    2918:	51 f4       	brne	.+20     	; 0x292e <SerialReader::update()+0x26>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	8e 83       	std	Y+6, r24	; 0x06
    291e:	ec 81       	ldd	r30, Y+4	; 0x04
    2920:	fd 81       	ldd	r31, Y+5	; 0x05
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	9b 81       	ldd	r25, Y+3	; 0x03
    2926:	e8 0f       	add	r30, r24
    2928:	f9 1f       	adc	r31, r25
    292a:	10 82       	st	Z, r1
    292c:	26 c0       	rjmp	.+76     	; 0x297a <SerialReader::update()+0x72>
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	9b 81       	ldd	r25, Y+3	; 0x03
    2932:	ec 81       	ldd	r30, Y+4	; 0x04
    2934:	fd 81       	ldd	r31, Y+5	; 0x05
    2936:	e8 0f       	add	r30, r24
    2938:	f9 1f       	adc	r31, r25
    293a:	20 83       	st	Z, r18
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	9b 83       	std	Y+3, r25	; 0x03
    2940:	8a 83       	std	Y+2, r24	; 0x02
    2942:	ec 81       	ldd	r30, Y+4	; 0x04
    2944:	fd 81       	ldd	r31, Y+5	; 0x05
    2946:	e8 0f       	add	r30, r24
    2948:	f9 1f       	adc	r31, r25
    294a:	10 82       	st	Z, r1
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	9b 81       	ldd	r25, Y+3	; 0x03
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	28 81       	ld	r18, Y
    2954:	39 81       	ldd	r19, Y+1	; 0x01
    2956:	82 17       	cp	r24, r18
    2958:	93 07       	cpc	r25, r19
    295a:	7c f4       	brge	.+30     	; 0x297a <SerialReader::update()+0x72>
    295c:	82 e4       	ldi	r24, 0x42	; 66
    295e:	94 e0       	ldi	r25, 0x04	; 4
    2960:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <HardwareSerial::available()>
    2964:	18 16       	cp	r1, r24
    2966:	19 06       	cpc	r1, r25
    2968:	44 f4       	brge	.+16     	; 0x297a <SerialReader::update()+0x72>
    296a:	82 e4       	ldi	r24, 0x42	; 66
    296c:	94 e0       	ldi	r25, 0x04	; 4
    296e:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <HardwareSerial::read()>
    2972:	28 2f       	mov	r18, r24
    2974:	8a 30       	cpi	r24, 0x0A	; 10
    2976:	79 f6       	brne	.-98     	; 0x2916 <SerialReader::update()+0xe>
    2978:	d0 cf       	rjmp	.-96     	; 0x291a <SerialReader::update()+0x12>
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	28 81       	ld	r18, Y
    2982:	39 81       	ldd	r19, Y+1	; 0x01
    2984:	82 17       	cp	r24, r18
    2986:	93 07       	cpc	r25, r19
    2988:	14 f0       	brlt	.+4      	; 0x298e <SerialReader::update()+0x86>
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	8e 83       	std	Y+6, r24	; 0x06
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	08 95       	ret

00002994 <SerialReader::initialize(long, int, char*)>:
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	7c 01       	movw	r14, r24
    29a2:	69 01       	movw	r12, r18
    29a4:	82 e4       	ldi	r24, 0x42	; 66
    29a6:	94 e0       	ldi	r25, 0x04	; 4
    29a8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <HardwareSerial::begin(unsigned long)>
    29ac:	f7 01       	movw	r30, r14
    29ae:	13 82       	std	Z+3, r1	; 0x03
    29b0:	12 82       	std	Z+2, r1	; 0x02
    29b2:	d1 82       	std	Z+1, r13	; 0x01
    29b4:	c0 82       	st	Z, r12
    29b6:	15 83       	std	Z+5, r17	; 0x05
    29b8:	04 83       	std	Z+4, r16	; 0x04
    29ba:	f8 01       	movw	r30, r16
    29bc:	10 82       	st	Z, r1
    29be:	f7 01       	movw	r30, r14
    29c0:	16 82       	std	Z+6, r1	; 0x06
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	df 90       	pop	r13
    29cc:	cf 90       	pop	r12
    29ce:	08 95       	ret

000029d0 <StateLed::setState(short)>:
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	ec 01       	movw	r28, r24
    29d6:	ef 85       	ldd	r30, Y+15	; 0x0f
    29d8:	f8 89       	ldd	r31, Y+16	; 0x10
    29da:	6e 17       	cp	r22, r30
    29dc:	7f 07       	cpc	r23, r31
    29de:	2c f0       	brlt	.+10     	; 0x29ea <StateLed::setState(short)+0x1a>
    29e0:	cb 01       	movw	r24, r22
    29e2:	bf 01       	movw	r22, r30
    29e4:	0e 94 17 23 	call	0x462e	; 0x462e <__divmodhi4>
    29e8:	bc 01       	movw	r22, r24
    29ea:	77 ff       	sbrs	r23, 7
    29ec:	09 c0       	rjmp	.+18     	; 0x2a00 <StateLed::setState(short)+0x30>
    29ee:	cb 01       	movw	r24, r22
    29f0:	bf 01       	movw	r22, r30
    29f2:	0e 94 17 23 	call	0x462e	; 0x462e <__divmodhi4>
    29f6:	bf 01       	movw	r22, r30
    29f8:	61 50       	subi	r22, 0x01	; 1
    29fa:	70 40       	sbci	r23, 0x00	; 0
    29fc:	68 0f       	add	r22, r24
    29fe:	79 1f       	adc	r23, r25
    2a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a04:	86 17       	cp	r24, r22
    2a06:	97 07       	cpc	r25, r23
    2a08:	21 f4       	brne	.+8      	; 0x2a12 <StateLed::setState(short)+0x42>
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	89 2b       	or	r24, r25
    2a10:	a9 f4       	brne	.+42     	; 0x2a3c <StateLed::setState(short)+0x6c>
    2a12:	7e 87       	std	Y+14, r23	; 0x0e
    2a14:	6d 87       	std	Y+13, r22	; 0x0d
    2a16:	66 0f       	add	r22, r22
    2a18:	77 1f       	adc	r23, r23
    2a1a:	e9 89       	ldd	r30, Y+17	; 0x11
    2a1c:	fa 89       	ldd	r31, Y+18	; 0x12
    2a1e:	e6 0f       	add	r30, r22
    2a20:	f7 1f       	adc	r31, r23
    2a22:	65 91       	lpm	r22, Z+
    2a24:	74 91       	lpm	r23, Z+
    2a26:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a28:	88 23       	and	r24, r24
    2a2a:	19 f4       	brne	.+6      	; 0x2a32 <StateLed::setState(short)+0x62>
    2a2c:	41 e0       	ldi	r20, 0x01	; 1
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <StateLed::setState(short)+0x66>
    2a32:	4f ef       	ldi	r20, 0xFF	; 255
    2a34:	5f ef       	ldi	r21, 0xFF	; 255
    2a36:	ce 01       	movw	r24, r28
    2a38:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <BlinkingLed::playBlink(unsigned int const*, short)>
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	08 95       	ret

00002a42 <StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)>:
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	7c 01       	movw	r14, r24
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	04 87       	std	Z+12, r16	; 0x0c
    2a4e:	30 8b       	std	Z+16, r19	; 0x10
    2a50:	27 87       	std	Z+15, r18	; 0x0f
    2a52:	52 8b       	std	Z+18, r21	; 0x12
    2a54:	41 8b       	std	Z+17, r20	; 0x11
    2a56:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <BlinkingLed::initialize(DigitalOutputPin*)>
    2a5a:	c7 01       	movw	r24, r14
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	70 e0       	ldi	r23, 0x00	; 0
    2a60:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <StateLed::setState(short)>
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	08 95       	ret

00002a6c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>:
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	dc 01       	movw	r26, r24
    2a76:	14 96       	adiw	r26, 0x04	; 4
    2a78:	5c 93       	st	X, r21
    2a7a:	4e 93       	st	-X, r20
    2a7c:	13 97       	sbiw	r26, 0x03	; 3
    2a7e:	16 96       	adiw	r26, 0x06	; 6
    2a80:	3c 93       	st	X, r19
    2a82:	2e 93       	st	-X, r18
    2a84:	15 97       	sbiw	r26, 0x05	; 5
    2a86:	18 96       	adiw	r26, 0x08	; 8
    2a88:	1c 93       	st	X, r17
    2a8a:	0e 93       	st	-X, r16
    2a8c:	17 97       	sbiw	r26, 0x07	; 7
    2a8e:	1a 96       	adiw	r26, 0x0a	; 10
    2a90:	fc 92       	st	X, r15
    2a92:	ee 92       	st	-X, r14
    2a94:	19 97       	sbiw	r26, 0x09	; 9
    2a96:	12 96       	adiw	r26, 0x02	; 2
    2a98:	6c 93       	st	X, r22
    2a9a:	12 97       	sbiw	r26, 0x02	; 2
    2a9c:	ed 91       	ld	r30, X+
    2a9e:	fc 91       	ld	r31, X
    2aa0:	02 80       	ldd	r0, Z+2	; 0x02
    2aa2:	f3 81       	ldd	r31, Z+3	; 0x03
    2aa4:	e0 2d       	mov	r30, r0
    2aa6:	09 95       	icall
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	08 95       	ret

00002ab2 <StepperMotorMosfetHBridge::setState(unsigned char)>:
    2ab2:	ef 92       	push	r14
    2ab4:	ff 92       	push	r15
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    2aba:	7c 01       	movw	r14, r24
    2abc:	06 2f       	mov	r16, r22
    2abe:	fc 01       	movw	r30, r24
    2ac0:	a3 81       	ldd	r26, Z+3	; 0x03
    2ac2:	b4 81       	ldd	r27, Z+4	; 0x04
    2ac4:	10 e0       	ldi	r17, 0x00	; 0
    2ac6:	ed 91       	ld	r30, X+
    2ac8:	fc 91       	ld	r31, X
    2aca:	11 97       	sbiw	r26, 0x01	; 1
    2acc:	b8 01       	movw	r22, r16
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	76 95       	lsr	r23
    2ad2:	67 95       	ror	r22
    2ad4:	8a 95       	dec	r24
    2ad6:	e1 f7       	brne	.-8      	; 0x2ad0 <StepperMotorMosfetHBridge::setState(unsigned char)+0x1e>
    2ad8:	61 70       	andi	r22, 0x01	; 1
    2ada:	02 80       	ldd	r0, Z+2	; 0x02
    2adc:	f3 81       	ldd	r31, Z+3	; 0x03
    2ade:	e0 2d       	mov	r30, r0
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	09 95       	icall
    2ae4:	f7 01       	movw	r30, r14
    2ae6:	a5 81       	ldd	r26, Z+5	; 0x05
    2ae8:	b6 81       	ldd	r27, Z+6	; 0x06
    2aea:	ed 91       	ld	r30, X+
    2aec:	fc 91       	ld	r31, X
    2aee:	11 97       	sbiw	r26, 0x01	; 1
    2af0:	b8 01       	movw	r22, r16
    2af2:	76 95       	lsr	r23
    2af4:	67 95       	ror	r22
    2af6:	76 95       	lsr	r23
    2af8:	67 95       	ror	r22
    2afa:	61 70       	andi	r22, 0x01	; 1
    2afc:	02 80       	ldd	r0, Z+2	; 0x02
    2afe:	f3 81       	ldd	r31, Z+3	; 0x03
    2b00:	e0 2d       	mov	r30, r0
    2b02:	cd 01       	movw	r24, r26
    2b04:	09 95       	icall
    2b06:	f7 01       	movw	r30, r14
    2b08:	a7 81       	ldd	r26, Z+7	; 0x07
    2b0a:	b0 85       	ldd	r27, Z+8	; 0x08
    2b0c:	ed 91       	ld	r30, X+
    2b0e:	fc 91       	ld	r31, X
    2b10:	11 97       	sbiw	r26, 0x01	; 1
    2b12:	b8 01       	movw	r22, r16
    2b14:	76 95       	lsr	r23
    2b16:	67 95       	ror	r22
    2b18:	61 70       	andi	r22, 0x01	; 1
    2b1a:	02 80       	ldd	r0, Z+2	; 0x02
    2b1c:	f3 81       	ldd	r31, Z+3	; 0x03
    2b1e:	e0 2d       	mov	r30, r0
    2b20:	cd 01       	movw	r24, r26
    2b22:	09 95       	icall
    2b24:	f7 01       	movw	r30, r14
    2b26:	a1 85       	ldd	r26, Z+9	; 0x09
    2b28:	b2 85       	ldd	r27, Z+10	; 0x0a
    2b2a:	ed 91       	ld	r30, X+
    2b2c:	fc 91       	ld	r31, X
    2b2e:	11 97       	sbiw	r26, 0x01	; 1
    2b30:	01 70       	andi	r16, 0x01	; 1
    2b32:	10 70       	andi	r17, 0x00	; 0
    2b34:	02 80       	ldd	r0, Z+2	; 0x02
    2b36:	f3 81       	ldd	r31, Z+3	; 0x03
    2b38:	e0 2d       	mov	r30, r0
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	60 2f       	mov	r22, r16
    2b3e:	09 95       	icall
    2b40:	1f 91       	pop	r17
    2b42:	0f 91       	pop	r16
    2b44:	ff 90       	pop	r15
    2b46:	ef 90       	pop	r14
    2b48:	08 95       	ret

00002b4a <StepperMotorMosfetHBridge::step(bool)>:
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	12 96       	adiw	r26, 0x02	; 2
    2b4e:	8c 91       	ld	r24, X
    2b50:	12 97       	sbiw	r26, 0x02	; 2
    2b52:	28 2f       	mov	r18, r24
    2b54:	23 70       	andi	r18, 0x03	; 3
    2b56:	86 95       	lsr	r24
    2b58:	86 95       	lsr	r24
    2b5a:	22 30       	cpi	r18, 0x02	; 2
    2b5c:	11 f0       	breq	.+4      	; 0x2b62 <StepperMotorMosfetHBridge::step(bool)+0x18>
    2b5e:	94 e0       	ldi	r25, 0x04	; 4
    2b60:	01 c0       	rjmp	.+2      	; 0x2b64 <StepperMotorMosfetHBridge::step(bool)+0x1a>
    2b62:	98 e0       	ldi	r25, 0x08	; 8
    2b64:	66 23       	and	r22, r22
    2b66:	29 f0       	breq	.+10     	; 0x2b72 <StepperMotorMosfetHBridge::step(bool)+0x28>
    2b68:	8f 5f       	subi	r24, 0xFF	; 255
    2b6a:	89 17       	cp	r24, r25
    2b6c:	34 f0       	brlt	.+12     	; 0x2b7a <StepperMotorMosfetHBridge::step(bool)+0x30>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <StepperMotorMosfetHBridge::step(bool)+0x30>
    2b72:	81 50       	subi	r24, 0x01	; 1
    2b74:	10 f4       	brcc	.+4      	; 0x2b7a <StepperMotorMosfetHBridge::step(bool)+0x30>
    2b76:	89 2f       	mov	r24, r25
    2b78:	81 50       	subi	r24, 0x01	; 1
    2b7a:	e8 2f       	mov	r30, r24
    2b7c:	ff 27       	eor	r31, r31
    2b7e:	e7 fd       	sbrc	r30, 7
    2b80:	f0 95       	com	r31
    2b82:	cf 01       	movw	r24, r30
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	82 2b       	or	r24, r18
    2b8e:	12 96       	adiw	r26, 0x02	; 2
    2b90:	8c 93       	st	X, r24
    2b92:	12 97       	sbiw	r26, 0x02	; 2
    2b94:	21 30       	cpi	r18, 0x01	; 1
    2b96:	29 f0       	breq	.+10     	; 0x2ba2 <StepperMotorMosfetHBridge::step(bool)+0x58>
    2b98:	22 30       	cpi	r18, 0x02	; 2
    2b9a:	31 f4       	brne	.+12     	; 0x2ba8 <StepperMotorMosfetHBridge::step(bool)+0x5e>
    2b9c:	ea 5d       	subi	r30, 0xDA	; 218
    2b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba0:	05 c0       	rjmp	.+10     	; 0x2bac <StepperMotorMosfetHBridge::step(bool)+0x62>
    2ba2:	e2 5d       	subi	r30, 0xD2	; 210
    2ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <StepperMotorMosfetHBridge::step(bool)+0x62>
    2ba8:	ee 5c       	subi	r30, 0xCE	; 206
    2baa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bac:	60 81       	ld	r22, Z
    2bae:	cd 01       	movw	r24, r26
    2bb0:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <StepperMotorMosfetHBridge::setState(unsigned char)>
    2bb4:	08 95       	ret

00002bb6 <StepperMotorMosfetHBridge::stop()>:
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <StepperMotorMosfetHBridge::setState(unsigned char)>
    2bbc:	08 95       	ret

00002bbe <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>:
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	73 87       	std	Z+11, r23	; 0x0b
    2bc2:	62 87       	std	Z+10, r22	; 0x0a
    2bc4:	51 8b       	std	Z+17, r21	; 0x11
    2bc6:	40 8b       	std	Z+16, r20	; 0x10
    2bc8:	33 8b       	std	Z+19, r19	; 0x13
    2bca:	22 8b       	std	Z+18, r18	; 0x12
    2bcc:	14 86       	std	Z+12, r1	; 0x0c
    2bce:	15 86       	std	Z+13, r1	; 0x0d
    2bd0:	16 86       	std	Z+14, r1	; 0x0e
    2bd2:	17 86       	std	Z+15, r1	; 0x0f
    2bd4:	14 8a       	std	Z+20, r1	; 0x14
    2bd6:	20 ed       	ldi	r18, 0xD0	; 208
    2bd8:	37 e0       	ldi	r19, 0x07	; 7
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	25 8b       	std	Z+21, r18	; 0x15
    2be0:	36 8b       	std	Z+22, r19	; 0x16
    2be2:	47 8b       	std	Z+23, r20	; 0x17
    2be4:	50 8f       	std	Z+24, r21	; 0x18
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e8       	ldi	r25, 0x80	; 128
    2bea:	95 83       	std	Z+5, r25	; 0x05
    2bec:	84 83       	std	Z+4, r24	; 0x04
    2bee:	26 83       	std	Z+6, r18	; 0x06
    2bf0:	37 83       	std	Z+7, r19	; 0x07
    2bf2:	40 87       	std	Z+8, r20	; 0x08
    2bf4:	51 87       	std	Z+9, r21	; 0x09
    2bf6:	88 ee       	ldi	r24, 0xE8	; 232
    2bf8:	93 e0       	ldi	r25, 0x03	; 3
    2bfa:	93 83       	std	Z+3, r25	; 0x03
    2bfc:	82 83       	std	Z+2, r24	; 0x02
    2bfe:	10 82       	st	Z, r1
    2c00:	08 95       	ret

00002c02 <StepperMotorAxis::initializePosition()>:
    2c02:	fc 01       	movw	r30, r24
    2c04:	83 e0       	ldi	r24, 0x03	; 3
    2c06:	80 83       	st	Z, r24
    2c08:	11 82       	std	Z+1, r1	; 0x01
    2c0a:	08 95       	ret

00002c0c <StepperMotorAxis::getAbsolutePositionMicroM()>:
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	8c 01       	movw	r16, r24
    2c12:	fc 01       	movw	r30, r24
    2c14:	64 85       	ldd	r22, Z+12	; 0x0c
    2c16:	75 85       	ldd	r23, Z+13	; 0x0d
    2c18:	86 85       	ldd	r24, Z+14	; 0x0e
    2c1a:	97 85       	ldd	r25, Z+15	; 0x0f
    2c1c:	28 ee       	ldi	r18, 0xE8	; 232
    2c1e:	33 e0       	ldi	r19, 0x03	; 3
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    2c28:	f8 01       	movw	r30, r16
    2c2a:	22 81       	ldd	r18, Z+2	; 0x02
    2c2c:	33 81       	ldd	r19, Z+3	; 0x03
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	50 e0       	ldi	r21, 0x00	; 0
    2c32:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
    2c36:	ca 01       	movw	r24, r20
    2c38:	b9 01       	movw	r22, r18
    2c3a:	24 e6       	ldi	r18, 0x64	; 100
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	08 95       	ret

00002c4c <StepperMotorAxis::stop()>:
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	84 89       	ldd	r24, Z+20	; 0x14
    2c50:	88 23       	and	r24, r24
    2c52:	11 f0       	breq	.+4      	; 0x2c58 <StepperMotorAxis::stop()+0xc>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	84 8b       	std	Z+20, r24	; 0x14
    2c58:	10 82       	st	Z, r1
    2c5a:	08 95       	ret

00002c5c <StepperMotorControlWithButtons::debugPrint()>:
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	ec 01       	movw	r28, r24
    2c62:	82 e4       	ldi	r24, 0x42	; 66
    2c64:	94 e0       	ldi	r25, 0x04	; 4
    2c66:	67 ed       	ldi	r22, 0xD7	; 215
    2c68:	75 e0       	ldi	r23, 0x05	; 5
    2c6a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2c6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c70:	88 23       	and	r24, r24
    2c72:	11 f4       	brne	.+4      	; 0x2c78 <StepperMotorControlWithButtons::debugPrint()+0x1c>
    2c74:	66 e4       	ldi	r22, 0x46	; 70
    2c76:	01 c0       	rjmp	.+2      	; 0x2c7a <StepperMotorControlWithButtons::debugPrint()+0x1e>
    2c78:	64 e5       	ldi	r22, 0x54	; 84
    2c7a:	82 e4       	ldi	r24, 0x42	; 66
    2c7c:	94 e0       	ldi	r25, 0x04	; 4
    2c7e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <Print::println(char)>
    2c82:	82 e4       	ldi	r24, 0x42	; 66
    2c84:	94 e0       	ldi	r25, 0x04	; 4
    2c86:	66 ec       	ldi	r22, 0xC6	; 198
    2c88:	75 e0       	ldi	r23, 0x05	; 5
    2c8a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2c8e:	6b 89       	ldd	r22, Y+19	; 0x13
    2c90:	7c 89       	ldd	r23, Y+20	; 0x14
    2c92:	82 e4       	ldi	r24, 0x42	; 66
    2c94:	94 e0       	ldi	r25, 0x04	; 4
    2c96:	4a e0       	ldi	r20, 0x0A	; 10
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <Print::println(unsigned int, int)>
    2c9e:	82 e4       	ldi	r24, 0x42	; 66
    2ca0:	94 e0       	ldi	r25, 0x04	; 4
    2ca2:	65 eb       	ldi	r22, 0xB5	; 181
    2ca4:	75 e0       	ldi	r23, 0x05	; 5
    2ca6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2caa:	4a 81       	ldd	r20, Y+2	; 0x02
    2cac:	5b 81       	ldd	r21, Y+3	; 0x03
    2cae:	6c 81       	ldd	r22, Y+4	; 0x04
    2cb0:	7d 81       	ldd	r23, Y+5	; 0x05
    2cb2:	82 e4       	ldi	r24, 0x42	; 66
    2cb4:	94 e0       	ldi	r25, 0x04	; 4
    2cb6:	2a e0       	ldi	r18, 0x0A	; 10
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Print::println(long, int)>
    2cbe:	82 e4       	ldi	r24, 0x42	; 66
    2cc0:	94 e0       	ldi	r25, 0x04	; 4
    2cc2:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    2cc6:	82 e4       	ldi	r24, 0x42	; 66
    2cc8:	94 e0       	ldi	r25, 0x04	; 4
    2cca:	64 ea       	ldi	r22, 0xA4	; 164
    2ccc:	75 e0       	ldi	r23, 0x05	; 5
    2cce:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2cd2:	ae 81       	ldd	r26, Y+6	; 0x06
    2cd4:	bf 81       	ldd	r27, Y+7	; 0x07
    2cd6:	ed 91       	ld	r30, X+
    2cd8:	fc 91       	ld	r31, X
    2cda:	11 97       	sbiw	r26, 0x01	; 1
    2cdc:	01 90       	ld	r0, Z+
    2cde:	f0 81       	ld	r31, Z
    2ce0:	e0 2d       	mov	r30, r0
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	09 95       	icall
    2ce6:	88 23       	and	r24, r24
    2ce8:	19 f4       	brne	.+6      	; 0x2cf0 <StepperMotorControlWithButtons::debugPrint()+0x94>
    2cea:	6b e5       	ldi	r22, 0x5B	; 91
    2cec:	75 e0       	ldi	r23, 0x05	; 5
    2cee:	02 c0       	rjmp	.+4      	; 0x2cf4 <StepperMotorControlWithButtons::debugPrint()+0x98>
    2cf0:	68 e5       	ldi	r22, 0x58	; 88
    2cf2:	75 e0       	ldi	r23, 0x05	; 5
    2cf4:	82 e4       	ldi	r24, 0x42	; 66
    2cf6:	94 e0       	ldi	r25, 0x04	; 4
    2cf8:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
    2cfc:	82 e4       	ldi	r24, 0x42	; 66
    2cfe:	94 e0       	ldi	r25, 0x04	; 4
    2d00:	63 e9       	ldi	r22, 0x93	; 147
    2d02:	75 e0       	ldi	r23, 0x05	; 5
    2d04:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2d08:	e8 85       	ldd	r30, Y+8	; 0x08
    2d0a:	f9 85       	ldd	r31, Y+9	; 0x09
    2d0c:	a0 81       	ld	r26, Z
    2d0e:	b1 81       	ldd	r27, Z+1	; 0x01
    2d10:	2d 91       	ld	r18, X+
    2d12:	3c 91       	ld	r19, X
    2d14:	cf 01       	movw	r24, r30
    2d16:	f9 01       	movw	r30, r18
    2d18:	09 95       	icall
    2d1a:	88 23       	and	r24, r24
    2d1c:	19 f4       	brne	.+6      	; 0x2d24 <StepperMotorControlWithButtons::debugPrint()+0xc8>
    2d1e:	6b e5       	ldi	r22, 0x5B	; 91
    2d20:	75 e0       	ldi	r23, 0x05	; 5
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <StepperMotorControlWithButtons::debugPrint()+0xcc>
    2d24:	68 e5       	ldi	r22, 0x58	; 88
    2d26:	75 e0       	ldi	r23, 0x05	; 5
    2d28:	82 e4       	ldi	r24, 0x42	; 66
    2d2a:	94 e0       	ldi	r25, 0x04	; 4
    2d2c:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
    2d30:	82 e4       	ldi	r24, 0x42	; 66
    2d32:	94 e0       	ldi	r25, 0x04	; 4
    2d34:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    2d38:	82 e4       	ldi	r24, 0x42	; 66
    2d3a:	94 e0       	ldi	r25, 0x04	; 4
    2d3c:	62 e8       	ldi	r22, 0x82	; 130
    2d3e:	75 e0       	ldi	r23, 0x05	; 5
    2d40:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2d44:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d46:	82 e4       	ldi	r24, 0x42	; 66
    2d48:	94 e0       	ldi	r25, 0x04	; 4
    2d4a:	70 e0       	ldi	r23, 0x00	; 0
    2d4c:	4a e0       	ldi	r20, 0x0A	; 10
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <Print::println(int, int)>
    2d54:	82 e4       	ldi	r24, 0x42	; 66
    2d56:	94 e0       	ldi	r25, 0x04	; 4
    2d58:	61 e7       	ldi	r22, 0x71	; 113
    2d5a:	75 e0       	ldi	r23, 0x05	; 5
    2d5c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2d60:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d62:	58 89       	ldd	r21, Y+16	; 0x10
    2d64:	69 89       	ldd	r22, Y+17	; 0x11
    2d66:	7a 89       	ldd	r23, Y+18	; 0x12
    2d68:	82 e4       	ldi	r24, 0x42	; 66
    2d6a:	94 e0       	ldi	r25, 0x04	; 4
    2d6c:	2a e0       	ldi	r18, 0x0A	; 10
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <Print::println(unsigned long, int)>
    2d74:	82 e4       	ldi	r24, 0x42	; 66
    2d76:	94 e0       	ldi	r25, 0x04	; 4
    2d78:	60 e6       	ldi	r22, 0x60	; 96
    2d7a:	75 e0       	ldi	r23, 0x05	; 5
    2d7c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2d80:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d82:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d84:	6d 85       	ldd	r22, Y+13	; 0x0d
    2d86:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d88:	82 e4       	ldi	r24, 0x42	; 66
    2d8a:	94 e0       	ldi	r25, 0x04	; 4
    2d8c:	2a e0       	ldi	r18, 0x0A	; 10
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <Print::println(unsigned long, int)>
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	08 95       	ret

00002d9a <StepperMotorAxis::debugPrint()>:
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	7c 01       	movw	r14, r24
    2da4:	02 e4       	ldi	r16, 0x42	; 66
    2da6:	14 e0       	ldi	r17, 0x04	; 4
    2da8:	c8 01       	movw	r24, r16
    2daa:	6d e4       	ldi	r22, 0x4D	; 77
    2dac:	75 e0       	ldi	r23, 0x05	; 5
    2dae:	0e 94 a7 1c 	call	0x394e	; 0x394e <Print::pgm_println(char const*)>
    2db2:	c8 01       	movw	r24, r16
    2db4:	6c e3       	ldi	r22, 0x3C	; 60
    2db6:	75 e0       	ldi	r23, 0x05	; 5
    2db8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2dbc:	f7 01       	movw	r30, r14
    2dbe:	60 81       	ld	r22, Z
    2dc0:	c8 01       	movw	r24, r16
    2dc2:	70 e0       	ldi	r23, 0x00	; 0
    2dc4:	4a e0       	ldi	r20, 0x0A	; 10
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <Print::print(int, int)>
    2dcc:	c8 01       	movw	r24, r16
    2dce:	6f e2       	ldi	r22, 0x2F	; 47
    2dd0:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print::print(char)>
    2dd4:	f7 01       	movw	r30, r14
    2dd6:	61 81       	ldd	r22, Z+1	; 0x01
    2dd8:	c8 01       	movw	r24, r16
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	4a e0       	ldi	r20, 0x0A	; 10
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <Print::println(int, int)>
    2de4:	c8 01       	movw	r24, r16
    2de6:	6b e2       	ldi	r22, 0x2B	; 43
    2de8:	75 e0       	ldi	r23, 0x05	; 5
    2dea:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2dee:	f7 01       	movw	r30, r14
    2df0:	64 85       	ldd	r22, Z+12	; 0x0c
    2df2:	75 85       	ldd	r23, Z+13	; 0x0d
    2df4:	86 85       	ldd	r24, Z+14	; 0x0e
    2df6:	97 85       	ldd	r25, Z+15	; 0x0f
    2df8:	28 ee       	ldi	r18, 0xE8	; 232
    2dfa:	33 e0       	ldi	r19, 0x03	; 3
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	50 e0       	ldi	r21, 0x00	; 0
    2e00:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    2e04:	f7 01       	movw	r30, r14
    2e06:	22 81       	ldd	r18, Z+2	; 0x02
    2e08:	33 81       	ldd	r19, Z+3	; 0x03
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	50 e0       	ldi	r21, 0x00	; 0
    2e0e:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
    2e12:	ca 01       	movw	r24, r20
    2e14:	b9 01       	movw	r22, r18
    2e16:	24 e6       	ldi	r18, 0x64	; 100
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    2e22:	ab 01       	movw	r20, r22
    2e24:	bc 01       	movw	r22, r24
    2e26:	c8 01       	movw	r24, r16
    2e28:	2a e0       	ldi	r18, 0x0A	; 10
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Print::println(long, int)>
    2e30:	c8 01       	movw	r24, r16
    2e32:	6a e1       	ldi	r22, 0x1A	; 26
    2e34:	75 e0       	ldi	r23, 0x05	; 5
    2e36:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2e3a:	f7 01       	movw	r30, r14
    2e3c:	22 81       	ldd	r18, Z+2	; 0x02
    2e3e:	33 81       	ldd	r19, Z+3	; 0x03
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	77 e8       	ldi	r23, 0x87	; 135
    2e48:	83 e9       	ldi	r24, 0x93	; 147
    2e4a:	93 e0       	ldi	r25, 0x03	; 3
    2e4c:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    2e50:	ca 01       	movw	r24, r20
    2e52:	b9 01       	movw	r22, r18
    2e54:	24 e6       	ldi	r18, 0x64	; 100
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    2e60:	f7 01       	movw	r30, r14
    2e62:	25 89       	ldd	r18, Z+21	; 0x15
    2e64:	36 89       	ldd	r19, Z+22	; 0x16
    2e66:	47 89       	ldd	r20, Z+23	; 0x17
    2e68:	50 8d       	ldd	r21, Z+24	; 0x18
    2e6a:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    2e6e:	c8 01       	movw	r24, r16
    2e70:	b9 01       	movw	r22, r18
    2e72:	4a e0       	ldi	r20, 0x0A	; 10
    2e74:	50 e0       	ldi	r21, 0x00	; 0
    2e76:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <Print::println(unsigned int, int)>
    2e7a:	c8 01       	movw	r24, r16
    2e7c:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    2e80:	c7 01       	movw	r24, r14
    2e82:	0a 96       	adiw	r24, 0x0a	; 10
    2e84:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <StepperMotorControlWithButtons::debugPrint()>
    2e88:	c8 01       	movw	r24, r16
    2e8a:	6f ef       	ldi	r22, 0xFF	; 255
    2e8c:	74 e0       	ldi	r23, 0x04	; 4
    2e8e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2e92:	f7 01       	movw	r30, r14
    2e94:	46 81       	ldd	r20, Z+6	; 0x06
    2e96:	57 81       	ldd	r21, Z+7	; 0x07
    2e98:	60 85       	ldd	r22, Z+8	; 0x08
    2e9a:	71 85       	ldd	r23, Z+9	; 0x09
    2e9c:	c8 01       	movw	r24, r16
    2e9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <Print::println(unsigned long, int)>
    2ea6:	c8 01       	movw	r24, r16
    2ea8:	6e ee       	ldi	r22, 0xEE	; 238
    2eaa:	74 e0       	ldi	r23, 0x04	; 4
    2eac:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2eb0:	f7 01       	movw	r30, r14
    2eb2:	62 81       	ldd	r22, Z+2	; 0x02
    2eb4:	73 81       	ldd	r23, Z+3	; 0x03
    2eb6:	c8 01       	movw	r24, r16
    2eb8:	4a e0       	ldi	r20, 0x0A	; 10
    2eba:	50 e0       	ldi	r21, 0x00	; 0
    2ebc:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <Print::println(unsigned int, int)>
    2ec0:	c8 01       	movw	r24, r16
    2ec2:	6d ed       	ldi	r22, 0xDD	; 221
    2ec4:	74 e0       	ldi	r23, 0x04	; 4
    2ec6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    2eca:	f7 01       	movw	r30, r14
    2ecc:	64 81       	ldd	r22, Z+4	; 0x04
    2ece:	75 81       	ldd	r23, Z+5	; 0x05
    2ed0:	c8 01       	movw	r24, r16
    2ed2:	4a e0       	ldi	r20, 0x0A	; 10
    2ed4:	50 e0       	ldi	r21, 0x00	; 0
    2ed6:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <Print::println(int, int)>
    2eda:	c8 01       	movw	r24, r16
    2edc:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	ff 90       	pop	r15
    2ee6:	ef 90       	pop	r14
    2ee8:	08 95       	ret

00002eea <StepperMotorControlWithButtons::rotate(bool)>:
    2eea:	cf 93       	push	r28
    2eec:	df 93       	push	r29
    2eee:	ec 01       	movw	r28, r24
    2ef0:	66 23       	and	r22, r22
    2ef2:	11 f4       	brne	.+4      	; 0x2ef8 <StepperMotorControlWithButtons::rotate(bool)+0xe>
    2ef4:	85 e0       	ldi	r24, 0x05	; 5
    2ef6:	01 c0       	rjmp	.+2      	; 0x2efa <StepperMotorControlWithButtons::rotate(bool)+0x10>
    2ef8:	84 e0       	ldi	r24, 0x04	; 4
    2efa:	8a 87       	std	Y+10, r24	; 0x0a
    2efc:	0e 94 a9 05 	call	0xb52	; 0xb52 <micros>
    2f00:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f02:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f04:	4d 85       	ldd	r20, Y+13	; 0x0d
    2f06:	5e 85       	ldd	r21, Y+14	; 0x0e
    2f08:	62 1b       	sub	r22, r18
    2f0a:	73 0b       	sbc	r23, r19
    2f0c:	84 0b       	sbc	r24, r20
    2f0e:	95 0b       	sbc	r25, r21
    2f10:	6f 87       	std	Y+15, r22	; 0x0f
    2f12:	78 8b       	std	Y+16, r23	; 0x10
    2f14:	89 8b       	std	Y+17, r24	; 0x11
    2f16:	9a 8b       	std	Y+18, r25	; 0x12
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	08 95       	ret

00002f1e <StepperMotorAxis::doInitializePosition()>:
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	ec 01       	movw	r28, r24
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	88 23       	and	r24, r24
    2f28:	19 f0       	breq	.+6      	; 0x2f30 <StepperMotorAxis::doInitializePosition()+0x12>
    2f2a:	81 30       	cpi	r24, 0x01	; 1
    2f2c:	c9 f4       	brne	.+50     	; 0x2f60 <StepperMotorAxis::doInitializePosition()+0x42>
    2f2e:	10 c0       	rjmp	.+32     	; 0x2f50 <StepperMotorAxis::doInitializePosition()+0x32>
    2f30:	8e 81       	ldd	r24, Y+6	; 0x06
    2f32:	9f 81       	ldd	r25, Y+7	; 0x07
    2f34:	a8 85       	ldd	r26, Y+8	; 0x08
    2f36:	b9 85       	ldd	r27, Y+9	; 0x09
    2f38:	8d 8b       	std	Y+21, r24	; 0x15
    2f3a:	9e 8b       	std	Y+22, r25	; 0x16
    2f3c:	af 8b       	std	Y+23, r26	; 0x17
    2f3e:	b8 8f       	std	Y+24, r27	; 0x18
    2f40:	ce 01       	movw	r24, r28
    2f42:	0a 96       	adiw	r24, 0x0a	; 10
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	89 83       	std	Y+1, r24	; 0x01
    2f4e:	08 c0       	rjmp	.+16     	; 0x2f60 <StepperMotorAxis::doInitializePosition()+0x42>
    2f50:	8c 89       	ldd	r24, Y+20	; 0x14
    2f52:	88 23       	and	r24, r24
    2f54:	29 f4       	brne	.+10     	; 0x2f60 <StepperMotorAxis::doInitializePosition()+0x42>
    2f56:	1c 86       	std	Y+12, r1	; 0x0c
    2f58:	1d 86       	std	Y+13, r1	; 0x0d
    2f5a:	1e 86       	std	Y+14, r1	; 0x0e
    2f5c:	1f 86       	std	Y+15, r1	; 0x0f
    2f5e:	18 82       	st	Y, r1
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	08 95       	ret

00002f66 <StepperMotorAxis::doDetermineAvailableSteps()>:
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	ec 01       	movw	r28, r24
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	81 30       	cpi	r24, 0x01	; 1
    2f70:	a1 f0       	breq	.+40     	; 0x2f9a <StepperMotorAxis::doDetermineAvailableSteps()+0x34>
    2f72:	81 30       	cpi	r24, 0x01	; 1
    2f74:	18 f0       	brcs	.+6      	; 0x2f7c <StepperMotorAxis::doDetermineAvailableSteps()+0x16>
    2f76:	82 30       	cpi	r24, 0x02	; 2
    2f78:	f9 f4       	brne	.+62     	; 0x2fb8 <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2f7a:	1a c0       	rjmp	.+52     	; 0x2fb0 <StepperMotorAxis::doDetermineAvailableSteps()+0x4a>
    2f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f80:	a8 85       	ldd	r26, Y+8	; 0x08
    2f82:	b9 85       	ldd	r27, Y+9	; 0x09
    2f84:	8d 8b       	std	Y+21, r24	; 0x15
    2f86:	9e 8b       	std	Y+22, r25	; 0x16
    2f88:	af 8b       	std	Y+23, r26	; 0x17
    2f8a:	b8 8f       	std	Y+24, r27	; 0x18
    2f8c:	ce 01       	movw	r24, r28
    2f8e:	0a 96       	adiw	r24, 0x0a	; 10
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	09 c0       	rjmp	.+18     	; 0x2fac <StepperMotorAxis::doDetermineAvailableSteps()+0x46>
    2f9a:	8c 89       	ldd	r24, Y+20	; 0x14
    2f9c:	88 23       	and	r24, r24
    2f9e:	61 f4       	brne	.+24     	; 0x2fb8 <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	0a 96       	adiw	r24, 0x0a	; 10
    2fa4:	61 e0       	ldi	r22, 0x01	; 1
    2fa6:	0e 94 75 17 	call	0x2eea	; 0x2eea <StepperMotorControlWithButtons::rotate(bool)>
    2faa:	82 e0       	ldi	r24, 0x02	; 2
    2fac:	89 83       	std	Y+1, r24	; 0x01
    2fae:	04 c0       	rjmp	.+8      	; 0x2fb8 <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2fb0:	8c 89       	ldd	r24, Y+20	; 0x14
    2fb2:	88 23       	and	r24, r24
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2fb6:	18 82       	st	Y, r1
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	08 95       	ret

00002fbe <StepperMotorControlWithButtons::gotoStep(long)>:
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	ec 01       	movw	r28, r24
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc8:	ac 81       	ldd	r26, Y+4	; 0x04
    2fca:	bd 81       	ldd	r27, Y+5	; 0x05
    2fcc:	48 1b       	sub	r20, r24
    2fce:	59 0b       	sbc	r21, r25
    2fd0:	6a 0b       	sbc	r22, r26
    2fd2:	7b 0b       	sbc	r23, r27
    2fd4:	77 fd       	sbrc	r23, 7
    2fd6:	05 c0       	rjmp	.+10     	; 0x2fe2 <StepperMotorControlWithButtons::gotoStep(long)+0x24>
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	8a 87       	std	Y+10, r24	; 0x0a
    2fdc:	5c 8b       	std	Y+20, r21	; 0x14
    2fde:	4b 8b       	std	Y+19, r20	; 0x13
    2fe0:	08 c0       	rjmp	.+16     	; 0x2ff2 <StepperMotorControlWithButtons::gotoStep(long)+0x34>
    2fe2:	83 e0       	ldi	r24, 0x03	; 3
    2fe4:	8a 87       	std	Y+10, r24	; 0x0a
    2fe6:	88 27       	eor	r24, r24
    2fe8:	99 27       	eor	r25, r25
    2fea:	84 1b       	sub	r24, r20
    2fec:	95 0b       	sbc	r25, r21
    2fee:	9c 8b       	std	Y+20, r25	; 0x14
    2ff0:	8b 8b       	std	Y+19, r24	; 0x13
    2ff2:	0e 94 a9 05 	call	0xb52	; 0xb52 <micros>
    2ff6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ff8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ffa:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ffc:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ffe:	62 1b       	sub	r22, r18
    3000:	73 0b       	sbc	r23, r19
    3002:	84 0b       	sbc	r24, r20
    3004:	95 0b       	sbc	r25, r21
    3006:	6f 87       	std	Y+15, r22	; 0x0f
    3008:	78 8b       	std	Y+16, r23	; 0x10
    300a:	89 8b       	std	Y+17, r24	; 0x11
    300c:	9a 8b       	std	Y+18, r25	; 0x12
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	08 95       	ret

00003014 <StepperMotorAxis::moveToPositionMicroMFast(long)>:
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	8c 01       	movw	r16, r24
    301a:	fc 01       	movw	r30, r24
    301c:	86 81       	ldd	r24, Z+6	; 0x06
    301e:	97 81       	ldd	r25, Z+7	; 0x07
    3020:	a0 85       	ldd	r26, Z+8	; 0x08
    3022:	b1 85       	ldd	r27, Z+9	; 0x09
    3024:	85 8b       	std	Z+21, r24	; 0x15
    3026:	96 8b       	std	Z+22, r25	; 0x16
    3028:	a7 8b       	std	Z+23, r26	; 0x17
    302a:	b0 8f       	std	Z+24, r27	; 0x18
    302c:	cb 01       	movw	r24, r22
    302e:	ba 01       	movw	r22, r20
    3030:	24 e6       	ldi	r18, 0x64	; 100
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	50 e0       	ldi	r21, 0x00	; 0
    3038:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
    303c:	ca 01       	movw	r24, r20
    303e:	b9 01       	movw	r22, r18
    3040:	f8 01       	movw	r30, r16
    3042:	22 81       	ldd	r18, Z+2	; 0x02
    3044:	33 81       	ldd	r19, Z+3	; 0x03
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    304e:	28 ee       	ldi	r18, 0xE8	; 232
    3050:	33 e0       	ldi	r19, 0x03	; 3
    3052:	40 e0       	ldi	r20, 0x00	; 0
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
    305a:	c8 01       	movw	r24, r16
    305c:	0a 96       	adiw	r24, 0x0a	; 10
    305e:	ba 01       	movw	r22, r20
    3060:	a9 01       	movw	r20, r18
    3062:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <StepperMotorControlWithButtons::gotoStep(long)>
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	08 95       	ret

0000306c <StepperMotorControlWithButtons::moveTo(long, unsigned long)>:
    306c:	ef 92       	push	r14
    306e:	ff 92       	push	r15
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	ec 01       	movw	r28, r24
    307a:	78 01       	movw	r14, r16
    307c:	89 01       	movw	r16, r18
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	9b 81       	ldd	r25, Y+3	; 0x03
    3082:	ac 81       	ldd	r26, Y+4	; 0x04
    3084:	bd 81       	ldd	r27, Y+5	; 0x05
    3086:	48 1b       	sub	r20, r24
    3088:	59 0b       	sbc	r21, r25
    308a:	6a 0b       	sbc	r22, r26
    308c:	7b 0b       	sbc	r23, r27
    308e:	77 fd       	sbrc	r23, 7
    3090:	05 c0       	rjmp	.+10     	; 0x309c <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x30>
    3092:	82 e0       	ldi	r24, 0x02	; 2
    3094:	8a 87       	std	Y+10, r24	; 0x0a
    3096:	5c 8b       	std	Y+20, r21	; 0x14
    3098:	4b 8b       	std	Y+19, r20	; 0x13
    309a:	08 c0       	rjmp	.+16     	; 0x30ac <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x40>
    309c:	83 e0       	ldi	r24, 0x03	; 3
    309e:	8a 87       	std	Y+10, r24	; 0x0a
    30a0:	88 27       	eor	r24, r24
    30a2:	99 27       	eor	r25, r25
    30a4:	84 1b       	sub	r24, r20
    30a6:	95 0b       	sbc	r25, r21
    30a8:	9c 8b       	std	Y+20, r25	; 0x14
    30aa:	8b 8b       	std	Y+19, r24	; 0x13
    30ac:	8b 89       	ldd	r24, Y+19	; 0x13
    30ae:	9c 89       	ldd	r25, Y+20	; 0x14
    30b0:	9c 01       	movw	r18, r24
    30b2:	40 e0       	ldi	r20, 0x00	; 0
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	2b 87       	std	Y+11, r18	; 0x0b
    30b8:	3c 87       	std	Y+12, r19	; 0x0c
    30ba:	4d 87       	std	Y+13, r20	; 0x0d
    30bc:	5e 87       	std	Y+14, r21	; 0x0e
    30be:	03 97       	sbiw	r24, 0x03	; 3
    30c0:	40 f4       	brcc	.+16     	; 0x30d2 <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x66>
    30c2:	2f 5f       	subi	r18, 0xFF	; 255
    30c4:	3f 4f       	sbci	r19, 0xFF	; 255
    30c6:	4f 4f       	sbci	r20, 0xFF	; 255
    30c8:	5f 4f       	sbci	r21, 0xFF	; 255
    30ca:	2b 87       	std	Y+11, r18	; 0x0b
    30cc:	3c 87       	std	Y+12, r19	; 0x0c
    30ce:	4d 87       	std	Y+13, r20	; 0x0d
    30d0:	5e 87       	std	Y+14, r21	; 0x0e
    30d2:	2b 85       	ldd	r18, Y+11	; 0x0b
    30d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    30d6:	4d 85       	ldd	r20, Y+13	; 0x0d
    30d8:	5e 85       	ldd	r21, Y+14	; 0x0e
    30da:	c8 01       	movw	r24, r16
    30dc:	b7 01       	movw	r22, r14
    30de:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    30e2:	2b 87       	std	Y+11, r18	; 0x0b
    30e4:	3c 87       	std	Y+12, r19	; 0x0c
    30e6:	4d 87       	std	Y+13, r20	; 0x0d
    30e8:	5e 87       	std	Y+14, r21	; 0x0e
    30ea:	0e 94 a9 05 	call	0xb52	; 0xb52 <micros>
    30ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    30f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    30f2:	4d 85       	ldd	r20, Y+13	; 0x0d
    30f4:	5e 85       	ldd	r21, Y+14	; 0x0e
    30f6:	62 1b       	sub	r22, r18
    30f8:	73 0b       	sbc	r23, r19
    30fa:	84 0b       	sbc	r24, r20
    30fc:	95 0b       	sbc	r25, r21
    30fe:	6f 87       	std	Y+15, r22	; 0x0f
    3100:	78 8b       	std	Y+16, r23	; 0x10
    3102:	89 8b       	std	Y+17, r24	; 0x11
    3104:	9a 8b       	std	Y+18, r25	; 0x12
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	ff 90       	pop	r15
    3110:	ef 90       	pop	r14
    3112:	08 95       	ret

00003114 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>:
    3114:	cf 92       	push	r12
    3116:	df 92       	push	r13
    3118:	ef 92       	push	r14
    311a:	ff 92       	push	r15
    311c:	0f 93       	push	r16
    311e:	1f 93       	push	r17
    3120:	6c 01       	movw	r12, r24
    3122:	78 01       	movw	r14, r16
    3124:	89 01       	movw	r16, r18
    3126:	cb 01       	movw	r24, r22
    3128:	ba 01       	movw	r22, r20
    312a:	24 e6       	ldi	r18, 0x64	; 100
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e0       	ldi	r20, 0x00	; 0
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
    3136:	ca 01       	movw	r24, r20
    3138:	b9 01       	movw	r22, r18
    313a:	f6 01       	movw	r30, r12
    313c:	22 81       	ldd	r18, Z+2	; 0x02
    313e:	33 81       	ldd	r19, Z+3	; 0x03
    3140:	40 e0       	ldi	r20, 0x00	; 0
    3142:	50 e0       	ldi	r21, 0x00	; 0
    3144:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    3148:	28 ee       	ldi	r18, 0xE8	; 232
    314a:	33 e0       	ldi	r19, 0x03	; 3
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	0e 94 4c 23 	call	0x4698	; 0x4698 <__divmodsi4>
    3154:	c6 01       	movw	r24, r12
    3156:	0a 96       	adiw	r24, 0x0a	; 10
    3158:	ba 01       	movw	r22, r20
    315a:	a9 01       	movw	r20, r18
    315c:	98 01       	movw	r18, r16
    315e:	87 01       	movw	r16, r14
    3160:	0e 94 36 18 	call	0x306c	; 0x306c <StepperMotorControlWithButtons::moveTo(long, unsigned long)>
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	ff 90       	pop	r15
    316a:	ef 90       	pop	r14
    316c:	df 90       	pop	r13
    316e:	cf 90       	pop	r12
    3170:	08 95       	ret

00003172 <StepperMotorControlWithButtons::update()>:
    3172:	df 92       	push	r13
    3174:	ef 92       	push	r14
    3176:	ff 92       	push	r15
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	ec 01       	movw	r28, r24
    3182:	8a 85       	ldd	r24, Y+10	; 0x0a
    3184:	83 30       	cpi	r24, 0x03	; 3
    3186:	41 f0       	breq	.+16     	; 0x3198 <StepperMotorControlWithButtons::update()+0x26>
    3188:	85 30       	cpi	r24, 0x05	; 5
    318a:	31 f0       	breq	.+12     	; 0x3198 <StepperMotorControlWithButtons::update()+0x26>
    318c:	88 23       	and	r24, r24
    318e:	09 f4       	brne	.+2      	; 0x3192 <StepperMotorControlWithButtons::update()+0x20>
    3190:	97 c0       	rjmp	.+302    	; 0x32c0 <StepperMotorControlWithButtons::update()+0x14e>
    3192:	dd 24       	eor	r13, r13
    3194:	d3 94       	inc	r13
    3196:	01 c0       	rjmp	.+2      	; 0x319a <StepperMotorControlWithButtons::update()+0x28>
    3198:	dd 24       	eor	r13, r13
    319a:	0e 94 a9 05 	call	0xb52	; 0xb52 <micros>
    319e:	7b 01       	movw	r14, r22
    31a0:	8c 01       	movw	r16, r24
    31a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a4:	98 89       	ldd	r25, Y+16	; 0x10
    31a6:	a9 89       	ldd	r26, Y+17	; 0x11
    31a8:	ba 89       	ldd	r27, Y+18	; 0x12
    31aa:	e8 1a       	sub	r14, r24
    31ac:	f9 0a       	sbc	r15, r25
    31ae:	0a 0b       	sbc	r16, r26
    31b0:	1b 0b       	sbc	r17, r27
    31b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	89 f0       	breq	.+34     	; 0x31da <StepperMotorControlWithButtons::update()+0x68>
    31b8:	dd 20       	and	r13, r13
    31ba:	19 f0       	breq	.+6      	; 0x31c2 <StepperMotorControlWithButtons::update()+0x50>
    31bc:	e8 85       	ldd	r30, Y+8	; 0x08
    31be:	f9 85       	ldd	r31, Y+9	; 0x09
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <StepperMotorControlWithButtons::update()+0x54>
    31c2:	ee 81       	ldd	r30, Y+6	; 0x06
    31c4:	ff 81       	ldd	r31, Y+7	; 0x07
    31c6:	a0 81       	ld	r26, Z
    31c8:	b1 81       	ldd	r27, Z+1	; 0x01
    31ca:	2d 91       	ld	r18, X+
    31cc:	3c 91       	ld	r19, X
    31ce:	cf 01       	movw	r24, r30
    31d0:	f9 01       	movw	r30, r18
    31d2:	09 95       	icall
    31d4:	88 23       	and	r24, r24
    31d6:	09 f0       	breq	.+2      	; 0x31da <StepperMotorControlWithButtons::update()+0x68>
    31d8:	68 c0       	rjmp	.+208    	; 0x32aa <StepperMotorControlWithButtons::update()+0x138>
    31da:	88 e8       	ldi	r24, 0x88	; 136
    31dc:	e8 16       	cp	r14, r24
    31de:	83 e1       	ldi	r24, 0x13	; 19
    31e0:	f8 06       	cpc	r15, r24
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	08 07       	cpc	r16, r24
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	18 07       	cpc	r17, r24
    31ea:	08 f4       	brcc	.+2      	; 0x31ee <StepperMotorControlWithButtons::update()+0x7c>
    31ec:	69 c0       	rjmp	.+210    	; 0x32c0 <StepperMotorControlWithButtons::update()+0x14e>
    31ee:	e8 81       	ld	r30, Y
    31f0:	f9 81       	ldd	r31, Y+1	; 0x01
    31f2:	a0 81       	ld	r26, Z
    31f4:	b1 81       	ldd	r27, Z+1	; 0x01
    31f6:	12 96       	adiw	r26, 0x02	; 2
    31f8:	2d 91       	ld	r18, X+
    31fa:	3c 91       	ld	r19, X
    31fc:	13 97       	sbiw	r26, 0x03	; 3
    31fe:	cf 01       	movw	r24, r30
    3200:	f9 01       	movw	r30, r18
    3202:	09 95       	icall
    3204:	1a 86       	std	Y+10, r1	; 0x0a
    3206:	5c c0       	rjmp	.+184    	; 0x32c0 <StepperMotorControlWithButtons::update()+0x14e>
    3208:	88 e8       	ldi	r24, 0x88	; 136
    320a:	e8 16       	cp	r14, r24
    320c:	83 e1       	ldi	r24, 0x13	; 19
    320e:	f8 06       	cpc	r15, r24
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	08 07       	cpc	r16, r24
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	18 07       	cpc	r17, r24
    3218:	08 f4       	brcc	.+2      	; 0x321c <StepperMotorControlWithButtons::update()+0xaa>
    321a:	52 c0       	rjmp	.+164    	; 0x32c0 <StepperMotorControlWithButtons::update()+0x14e>
    321c:	e8 81       	ld	r30, Y
    321e:	f9 81       	ldd	r31, Y+1	; 0x01
    3220:	a0 81       	ld	r26, Z
    3222:	b1 81       	ldd	r27, Z+1	; 0x01
    3224:	12 96       	adiw	r26, 0x02	; 2
    3226:	2d 91       	ld	r18, X+
    3228:	3c 91       	ld	r19, X
    322a:	13 97       	sbiw	r26, 0x03	; 3
    322c:	cf 01       	movw	r24, r30
    322e:	f9 01       	movw	r30, r18
    3230:	09 95       	icall
    3232:	46 c0       	rjmp	.+140    	; 0x32c0 <StepperMotorControlWithButtons::update()+0x14e>
    3234:	8a 85       	ldd	r24, Y+10	; 0x0a
    3236:	82 50       	subi	r24, 0x02	; 2
    3238:	82 30       	cpi	r24, 0x02	; 2
    323a:	50 f4       	brcc	.+20     	; 0x3250 <StepperMotorControlWithButtons::update()+0xde>
    323c:	8b 89       	ldd	r24, Y+19	; 0x13
    323e:	9c 89       	ldd	r25, Y+20	; 0x14
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	19 f4       	brne	.+6      	; 0x324a <StepperMotorControlWithButtons::update()+0xd8>
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	8a 87       	std	Y+10, r24	; 0x0a
    3248:	3b c0       	rjmp	.+118    	; 0x32c0 <StepperMotorControlWithButtons::update()+0x14e>
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	9c 8b       	std	Y+20, r25	; 0x14
    324e:	8b 8b       	std	Y+19, r24	; 0x13
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	9b 81       	ldd	r25, Y+3	; 0x03
    3254:	ac 81       	ldd	r26, Y+4	; 0x04
    3256:	bd 81       	ldd	r27, Y+5	; 0x05
    3258:	dd 20       	and	r13, r13
    325a:	21 f0       	breq	.+8      	; 0x3264 <StepperMotorControlWithButtons::update()+0xf2>
    325c:	01 96       	adiw	r24, 0x01	; 1
    325e:	a1 1d       	adc	r26, r1
    3260:	b1 1d       	adc	r27, r1
    3262:	03 c0       	rjmp	.+6      	; 0x326a <StepperMotorControlWithButtons::update()+0xf8>
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	a1 09       	sbc	r26, r1
    3268:	b1 09       	sbc	r27, r1
    326a:	8a 83       	std	Y+2, r24	; 0x02
    326c:	9b 83       	std	Y+3, r25	; 0x03
    326e:	ac 83       	std	Y+4, r26	; 0x04
    3270:	bd 83       	std	Y+5, r27	; 0x05
    3272:	a8 81       	ld	r26, Y
    3274:	b9 81       	ldd	r27, Y+1	; 0x01
    3276:	ed 91       	ld	r30, X+
    3278:	fc 91       	ld	r31, X
    327a:	11 97       	sbiw	r26, 0x01	; 1
    327c:	01 90       	ld	r0, Z+
    327e:	f0 81       	ld	r31, Z
    3280:	e0 2d       	mov	r30, r0
    3282:	cd 01       	movw	r24, r26
    3284:	6d 2d       	mov	r22, r13
    3286:	09 95       	icall
    3288:	8f 85       	ldd	r24, Y+15	; 0x0f
    328a:	98 89       	ldd	r25, Y+16	; 0x10
    328c:	a9 89       	ldd	r26, Y+17	; 0x11
    328e:	ba 89       	ldd	r27, Y+18	; 0x12
    3290:	2b 85       	ldd	r18, Y+11	; 0x0b
    3292:	3c 85       	ldd	r19, Y+12	; 0x0c
    3294:	4d 85       	ldd	r20, Y+13	; 0x0d
    3296:	5e 85       	ldd	r21, Y+14	; 0x0e
    3298:	82 0f       	add	r24, r18
    329a:	93 1f       	adc	r25, r19
    329c:	a4 1f       	adc	r26, r20
    329e:	b5 1f       	adc	r27, r21
    32a0:	8f 87       	std	Y+15, r24	; 0x0f
    32a2:	98 8b       	std	Y+16, r25	; 0x10
    32a4:	a9 8b       	std	Y+17, r26	; 0x11
    32a6:	ba 8b       	std	Y+18, r27	; 0x12
    32a8:	0b c0       	rjmp	.+22     	; 0x32c0 <StepperMotorControlWithButtons::update()+0x14e>
    32aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    32ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    32ae:	ad 85       	ldd	r26, Y+13	; 0x0d
    32b0:	be 85       	ldd	r27, Y+14	; 0x0e
    32b2:	e8 16       	cp	r14, r24
    32b4:	f9 06       	cpc	r15, r25
    32b6:	0a 07       	cpc	r16, r26
    32b8:	1b 07       	cpc	r17, r27
    32ba:	08 f4       	brcc	.+2      	; 0x32be <StepperMotorControlWithButtons::update()+0x14c>
    32bc:	a5 cf       	rjmp	.-182    	; 0x3208 <StepperMotorControlWithButtons::update()+0x96>
    32be:	ba cf       	rjmp	.-140    	; 0x3234 <StepperMotorControlWithButtons::update()+0xc2>
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	ff 90       	pop	r15
    32ca:	ef 90       	pop	r14
    32cc:	df 90       	pop	r13
    32ce:	08 95       	ret

000032d0 <StepperMotorAxis::update()>:
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	ec 01       	movw	r28, r24
    32d6:	0a 96       	adiw	r24, 0x0a	; 10
    32d8:	0e 94 b9 18 	call	0x3172	; 0x3172 <StepperMotorControlWithButtons::update()>
    32dc:	88 81       	ld	r24, Y
    32de:	83 30       	cpi	r24, 0x03	; 3
    32e0:	19 f0       	breq	.+6      	; 0x32e8 <StepperMotorAxis::update()+0x18>
    32e2:	8a 30       	cpi	r24, 0x0A	; 10
    32e4:	49 f4       	brne	.+18     	; 0x32f8 <StepperMotorAxis::update()+0x28>
    32e6:	04 c0       	rjmp	.+8      	; 0x32f0 <StepperMotorAxis::update()+0x20>
    32e8:	ce 01       	movw	r24, r28
    32ea:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <StepperMotorAxis::doInitializePosition()>
    32ee:	05 c0       	rjmp	.+10     	; 0x32fa <StepperMotorAxis::update()+0x2a>
    32f0:	ce 01       	movw	r24, r28
    32f2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <StepperMotorAxis::doDetermineAvailableSteps()>
    32f6:	01 c0       	rjmp	.+2      	; 0x32fa <StepperMotorAxis::update()+0x2a>
    32f8:	19 82       	std	Y+1, r1	; 0x01
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	08 95       	ret

00003300 <TicksPerSecond::tick()>:
    3300:	fc 01       	movw	r30, r24
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	a2 81       	ldd	r26, Z+2	; 0x02
    3308:	b3 81       	ldd	r27, Z+3	; 0x03
    330a:	01 96       	adiw	r24, 0x01	; 1
    330c:	a1 1d       	adc	r26, r1
    330e:	b1 1d       	adc	r27, r1
    3310:	80 83       	st	Z, r24
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	a2 83       	std	Z+2, r26	; 0x02
    3316:	b3 83       	std	Z+3, r27	; 0x03
    3318:	84 81       	ldd	r24, Z+4	; 0x04
    331a:	95 81       	ldd	r25, Z+5	; 0x05
    331c:	a6 81       	ldd	r26, Z+6	; 0x06
    331e:	b7 81       	ldd	r27, Z+7	; 0x07
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	a1 1d       	adc	r26, r1
    3324:	b1 1d       	adc	r27, r1
    3326:	84 83       	std	Z+4, r24	; 0x04
    3328:	95 83       	std	Z+5, r25	; 0x05
    332a:	a6 83       	std	Z+6, r26	; 0x06
    332c:	b7 83       	std	Z+7, r27	; 0x07
    332e:	80 85       	ldd	r24, Z+8	; 0x08
    3330:	91 85       	ldd	r25, Z+9	; 0x09
    3332:	a2 85       	ldd	r26, Z+10	; 0x0a
    3334:	b3 85       	ldd	r27, Z+11	; 0x0b
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	a1 1d       	adc	r26, r1
    333a:	b1 1d       	adc	r27, r1
    333c:	80 87       	std	Z+8, r24	; 0x08
    333e:	91 87       	std	Z+9, r25	; 0x09
    3340:	a2 87       	std	Z+10, r26	; 0x0a
    3342:	b3 87       	std	Z+11, r27	; 0x0b
    3344:	08 95       	ret

00003346 <TicksPerSecond::getIntTPS_unsafe()>:
    3346:	0f 93       	push	r16
    3348:	1f 93       	push	r17
    334a:	8c 01       	movw	r16, r24
    334c:	dc 01       	movw	r26, r24
    334e:	58 96       	adiw	r26, 0x18	; 24
    3350:	ec 91       	ld	r30, X
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	ee 0f       	add	r30, r30
    3356:	ff 1f       	adc	r31, r31
    3358:	ee 0f       	add	r30, r30
    335a:	ff 1f       	adc	r31, r31
    335c:	e0 0f       	add	r30, r16
    335e:	f1 1f       	adc	r31, r17
    3360:	60 81       	ld	r22, Z
    3362:	71 81       	ldd	r23, Z+1	; 0x01
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	28 ee       	ldi	r18, 0xE8	; 232
    336a:	33 e0       	ldi	r19, 0x03	; 3
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	50 e0       	ldi	r21, 0x00	; 0
    3370:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    3374:	f8 01       	movw	r30, r16
    3376:	25 8d       	ldd	r18, Z+29	; 0x1d
    3378:	36 8d       	ldd	r19, Z+30	; 0x1e
    337a:	47 8d       	ldd	r20, Z+31	; 0x1f
    337c:	50 a1       	ldd	r21, Z+32	; 0x20
    337e:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    3382:	c9 01       	movw	r24, r18
    3384:	1f 91       	pop	r17
    3386:	0f 91       	pop	r16
    3388:	08 95       	ret

0000338a <TicksPerSecond::update()>:
    338a:	ef 92       	push	r14
    338c:	ff 92       	push	r15
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	ec 01       	movw	r28, r24
    3398:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    339c:	7b 01       	movw	r14, r22
    339e:	8c 01       	movw	r16, r24
    33a0:	89 8d       	ldd	r24, Y+25	; 0x19
    33a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33a4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    33a6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    33a8:	a8 01       	movw	r20, r16
    33aa:	97 01       	movw	r18, r14
    33ac:	28 1b       	sub	r18, r24
    33ae:	39 0b       	sbc	r19, r25
    33b0:	4a 0b       	sbc	r20, r26
    33b2:	5b 0b       	sbc	r21, r27
    33b4:	89 a1       	ldd	r24, Y+33	; 0x21
    33b6:	9a a1       	ldd	r25, Y+34	; 0x22
    33b8:	a0 e0       	ldi	r26, 0x00	; 0
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	28 17       	cp	r18, r24
    33be:	39 07       	cpc	r19, r25
    33c0:	4a 07       	cpc	r20, r26
    33c2:	5b 07       	cpc	r21, r27
    33c4:	18 f1       	brcs	.+70     	; 0x340c <TicksPerSecond::update()+0x82>
    33c6:	88 8d       	ldd	r24, Y+24	; 0x18
    33c8:	a8 2f       	mov	r26, r24
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	fd 01       	movw	r30, r26
    33ce:	ee 0f       	add	r30, r30
    33d0:	ff 1f       	adc	r31, r31
    33d2:	ee 0f       	add	r30, r30
    33d4:	ff 1f       	adc	r31, r31
    33d6:	ec 0f       	add	r30, r28
    33d8:	fd 1f       	adc	r31, r29
    33da:	10 82       	st	Z, r1
    33dc:	11 82       	std	Z+1, r1	; 0x01
    33de:	12 82       	std	Z+2, r1	; 0x02
    33e0:	13 82       	std	Z+3, r1	; 0x03
    33e2:	13 96       	adiw	r26, 0x03	; 3
    33e4:	aa 0f       	add	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	aa 0f       	add	r26, r26
    33ea:	bb 1f       	adc	r27, r27
    33ec:	ac 0f       	add	r26, r28
    33ee:	bd 1f       	adc	r27, r29
    33f0:	ed 92       	st	X+, r14
    33f2:	fd 92       	st	X+, r15
    33f4:	0d 93       	st	X+, r16
    33f6:	1c 93       	st	X, r17
    33f8:	13 97       	sbiw	r26, 0x03	; 3
    33fa:	e9 8e       	std	Y+25, r14	; 0x19
    33fc:	fa 8e       	std	Y+26, r15	; 0x1a
    33fe:	0b 8f       	std	Y+27, r16	; 0x1b
    3400:	1c 8f       	std	Y+28, r17	; 0x1c
    3402:	8f 5f       	subi	r24, 0xFF	; 255
    3404:	88 8f       	std	Y+24, r24	; 0x18
    3406:	83 30       	cpi	r24, 0x03	; 3
    3408:	08 f0       	brcs	.+2      	; 0x340c <TicksPerSecond::update()+0x82>
    340a:	18 8e       	std	Y+24, r1	; 0x18
    340c:	e8 8d       	ldd	r30, Y+24	; 0x18
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	33 96       	adiw	r30, 0x03	; 3
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	ec 0f       	add	r30, r28
    341c:	fd 1f       	adc	r31, r29
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	a2 81       	ldd	r26, Z+2	; 0x02
    3424:	b3 81       	ldd	r27, Z+3	; 0x03
    3426:	a8 01       	movw	r20, r16
    3428:	97 01       	movw	r18, r14
    342a:	28 1b       	sub	r18, r24
    342c:	39 0b       	sbc	r19, r25
    342e:	4a 0b       	sbc	r20, r26
    3430:	5b 0b       	sbc	r21, r27
    3432:	2d 8f       	std	Y+29, r18	; 0x1d
    3434:	3e 8f       	std	Y+30, r19	; 0x1e
    3436:	4f 8f       	std	Y+31, r20	; 0x1f
    3438:	58 a3       	std	Y+32, r21	; 0x20
    343a:	21 15       	cp	r18, r1
    343c:	31 05       	cpc	r19, r1
    343e:	41 05       	cpc	r20, r1
    3440:	51 05       	cpc	r21, r1
    3442:	41 f4       	brne	.+16     	; 0x3454 <TicksPerSecond::update()+0xca>
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	a0 e0       	ldi	r26, 0x00	; 0
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
    344e:	9e 8f       	std	Y+30, r25	; 0x1e
    3450:	af 8f       	std	Y+31, r26	; 0x1f
    3452:	b8 a3       	std	Y+32, r27	; 0x20
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	1f 91       	pop	r17
    345a:	0f 91       	pop	r16
    345c:	ff 90       	pop	r15
    345e:	ef 90       	pop	r14
    3460:	08 95       	ret

00003462 <TicksPerSecond::initialize(unsigned int)>:
    3462:	ef 92       	push	r14
    3464:	ff 92       	push	r15
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	8c 01       	movw	r16, r24
    346c:	7b 01       	movw	r14, r22
    346e:	0e 94 9b 05 	call	0xb36	; 0xb36 <millis>
    3472:	f8 01       	movw	r30, r16
    3474:	61 8f       	std	Z+25, r22	; 0x19
    3476:	72 8f       	std	Z+26, r23	; 0x1a
    3478:	83 8f       	std	Z+27, r24	; 0x1b
    347a:	94 8f       	std	Z+28, r25	; 0x1c
    347c:	10 82       	st	Z, r1
    347e:	11 82       	std	Z+1, r1	; 0x01
    3480:	12 82       	std	Z+2, r1	; 0x02
    3482:	13 82       	std	Z+3, r1	; 0x03
    3484:	64 87       	std	Z+12, r22	; 0x0c
    3486:	75 87       	std	Z+13, r23	; 0x0d
    3488:	86 87       	std	Z+14, r24	; 0x0e
    348a:	97 87       	std	Z+15, r25	; 0x0f
    348c:	14 82       	std	Z+4, r1	; 0x04
    348e:	15 82       	std	Z+5, r1	; 0x05
    3490:	16 82       	std	Z+6, r1	; 0x06
    3492:	17 82       	std	Z+7, r1	; 0x07
    3494:	60 8b       	std	Z+16, r22	; 0x10
    3496:	71 8b       	std	Z+17, r23	; 0x11
    3498:	82 8b       	std	Z+18, r24	; 0x12
    349a:	93 8b       	std	Z+19, r25	; 0x13
    349c:	10 86       	std	Z+8, r1	; 0x08
    349e:	11 86       	std	Z+9, r1	; 0x09
    34a0:	12 86       	std	Z+10, r1	; 0x0a
    34a2:	13 86       	std	Z+11, r1	; 0x0b
    34a4:	64 8b       	std	Z+20, r22	; 0x14
    34a6:	75 8b       	std	Z+21, r23	; 0x15
    34a8:	86 8b       	std	Z+22, r24	; 0x16
    34aa:	97 8b       	std	Z+23, r25	; 0x17
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	a0 e0       	ldi	r26, 0x00	; 0
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	85 8f       	std	Z+29, r24	; 0x1d
    34b6:	96 8f       	std	Z+30, r25	; 0x1e
    34b8:	a7 8f       	std	Z+31, r26	; 0x1f
    34ba:	b0 a3       	std	Z+32, r27	; 0x20
    34bc:	10 8e       	std	Z+24, r1	; 0x18
    34be:	c7 01       	movw	r24, r14
    34c0:	63 e0       	ldi	r22, 0x03	; 3
    34c2:	70 e0       	ldi	r23, 0x00	; 0
    34c4:	0e 94 03 23 	call	0x4606	; 0x4606 <__udivmodhi4>
    34c8:	72 a3       	std	Z+34, r23	; 0x22
    34ca:	61 a3       	std	Z+33, r22	; 0x21
    34cc:	1f 91       	pop	r17
    34ce:	0f 91       	pop	r16
    34d0:	ff 90       	pop	r15
    34d2:	ef 90       	pop	r14
    34d4:	08 95       	ret

000034d6 <__vector_18>:
    34d6:	1f 92       	push	r1
    34d8:	0f 92       	push	r0
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	0f 92       	push	r0
    34de:	11 24       	eor	r1, r1
    34e0:	2f 93       	push	r18
    34e2:	8f 93       	push	r24
    34e4:	9f 93       	push	r25
    34e6:	ef 93       	push	r30
    34e8:	ff 93       	push	r31
    34ea:	80 91 c0 00 	lds	r24, 0x00C0
    34ee:	82 fd       	sbrc	r24, 2
    34f0:	15 c0       	rjmp	.+42     	; 0x351c <__vector_18+0x46>
    34f2:	20 91 c6 00 	lds	r18, 0x00C6
    34f6:	90 91 fe 03 	lds	r25, 0x03FE
    34fa:	9f 5f       	subi	r25, 0xFF	; 255
    34fc:	90 34       	cpi	r25, 0x40	; 64
    34fe:	08 f0       	brcs	.+2      	; 0x3502 <__vector_18+0x2c>
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	80 91 ff 03 	lds	r24, 0x03FF
    3506:	98 17       	cp	r25, r24
    3508:	59 f0       	breq	.+22     	; 0x3520 <__vector_18+0x4a>
    350a:	e0 91 fe 03 	lds	r30, 0x03FE
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	e2 54       	subi	r30, 0x42	; 66
    3512:	fc 4f       	sbci	r31, 0xFC	; 252
    3514:	20 83       	st	Z, r18
    3516:	90 93 fe 03 	sts	0x03FE, r25
    351a:	02 c0       	rjmp	.+4      	; 0x3520 <__vector_18+0x4a>
    351c:	80 91 c6 00 	lds	r24, 0x00C6
    3520:	ff 91       	pop	r31
    3522:	ef 91       	pop	r30
    3524:	9f 91       	pop	r25
    3526:	8f 91       	pop	r24
    3528:	2f 91       	pop	r18
    352a:	0f 90       	pop	r0
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	0f 90       	pop	r0
    3530:	1f 90       	pop	r1
    3532:	18 95       	reti

00003534 <__vector_19>:
    3534:	1f 92       	push	r1
    3536:	0f 92       	push	r0
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	0f 92       	push	r0
    353c:	11 24       	eor	r1, r1
    353e:	2f 93       	push	r18
    3540:	8f 93       	push	r24
    3542:	9f 93       	push	r25
    3544:	ef 93       	push	r30
    3546:	ff 93       	push	r31
    3548:	90 91 40 04 	lds	r25, 0x0440
    354c:	80 91 41 04 	lds	r24, 0x0441
    3550:	98 17       	cp	r25, r24
    3552:	31 f4       	brne	.+12     	; 0x3560 <__vector_19+0x2c>
    3554:	80 91 c1 00 	lds	r24, 0x00C1
    3558:	8f 7d       	andi	r24, 0xDF	; 223
    355a:	80 93 c1 00 	sts	0x00C1, r24
    355e:	10 c0       	rjmp	.+32     	; 0x3580 <__vector_19+0x4c>
    3560:	e0 91 41 04 	lds	r30, 0x0441
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	e0 50       	subi	r30, 0x00	; 0
    3568:	fc 4f       	sbci	r31, 0xFC	; 252
    356a:	20 81       	ld	r18, Z
    356c:	80 91 41 04 	lds	r24, 0x0441
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	01 96       	adiw	r24, 0x01	; 1
    3574:	8f 73       	andi	r24, 0x3F	; 63
    3576:	90 70       	andi	r25, 0x00	; 0
    3578:	80 93 41 04 	sts	0x0441, r24
    357c:	20 93 c6 00 	sts	0x00C6, r18
    3580:	ff 91       	pop	r31
    3582:	ef 91       	pop	r30
    3584:	9f 91       	pop	r25
    3586:	8f 91       	pop	r24
    3588:	2f 91       	pop	r18
    358a:	0f 90       	pop	r0
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	0f 90       	pop	r0
    3590:	1f 90       	pop	r1
    3592:	18 95       	reti

00003594 <HardwareSerial::begin(unsigned long)>:
    3594:	af 92       	push	r10
    3596:	bf 92       	push	r11
    3598:	df 92       	push	r13
    359a:	ef 92       	push	r14
    359c:	ff 92       	push	r15
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	ec 01       	movw	r28, r24
    35a8:	7a 01       	movw	r14, r20
    35aa:	8b 01       	movw	r16, r22
    35ac:	dd 24       	eor	r13, r13
    35ae:	40 30       	cpi	r20, 0x00	; 0
    35b0:	81 ee       	ldi	r24, 0xE1	; 225
    35b2:	58 07       	cpc	r21, r24
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	68 07       	cpc	r22, r24
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	78 07       	cpc	r23, r24
    35bc:	11 f0       	breq	.+4      	; 0x35c2 <HardwareSerial::begin(unsigned long)+0x2e>
    35be:	dd 24       	eor	r13, r13
    35c0:	d3 94       	inc	r13
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	a9 2e       	mov	r10, r25
    35c6:	b1 2c       	mov	r11, r1
    35c8:	ec 89       	ldd	r30, Y+20	; 0x14
    35ca:	fd 89       	ldd	r31, Y+21	; 0x15
    35cc:	dd 20       	and	r13, r13
    35ce:	69 f0       	breq	.+26     	; 0x35ea <HardwareSerial::begin(unsigned long)+0x56>
    35d0:	c5 01       	movw	r24, r10
    35d2:	08 a0       	ldd	r0, Y+32	; 0x20
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <HardwareSerial::begin(unsigned long)+0x46>
    35d6:	88 0f       	add	r24, r24
    35d8:	99 1f       	adc	r25, r25
    35da:	0a 94       	dec	r0
    35dc:	e2 f7       	brpl	.-8      	; 0x35d6 <HardwareSerial::begin(unsigned long)+0x42>
    35de:	80 83       	st	Z, r24
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	79 e0       	ldi	r23, 0x09	; 9
    35e4:	8d e3       	ldi	r24, 0x3D	; 61
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	05 c0       	rjmp	.+10     	; 0x35f4 <HardwareSerial::begin(unsigned long)+0x60>
    35ea:	10 82       	st	Z, r1
    35ec:	60 e8       	ldi	r22, 0x80	; 128
    35ee:	74 e8       	ldi	r23, 0x84	; 132
    35f0:	8e e1       	ldi	r24, 0x1E	; 30
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	a8 01       	movw	r20, r16
    35f6:	97 01       	movw	r18, r14
    35f8:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    35fc:	21 50       	subi	r18, 0x01	; 1
    35fe:	30 40       	sbci	r19, 0x00	; 0
    3600:	40 40       	sbci	r20, 0x00	; 0
    3602:	50 40       	sbci	r21, 0x00	; 0
    3604:	56 95       	lsr	r21
    3606:	47 95       	ror	r20
    3608:	37 95       	ror	r19
    360a:	27 95       	ror	r18
    360c:	80 e1       	ldi	r24, 0x10	; 16
    360e:	20 30       	cpi	r18, 0x00	; 0
    3610:	38 07       	cpc	r19, r24
    3612:	20 f0       	brcs	.+8      	; 0x361c <HardwareSerial::begin(unsigned long)+0x88>
    3614:	dd 20       	and	r13, r13
    3616:	11 f0       	breq	.+4      	; 0x361c <HardwareSerial::begin(unsigned long)+0x88>
    3618:	dd 24       	eor	r13, r13
    361a:	d6 cf       	rjmp	.-84     	; 0x35c8 <HardwareSerial::begin(unsigned long)+0x34>
    361c:	e8 89       	ldd	r30, Y+16	; 0x10
    361e:	f9 89       	ldd	r31, Y+17	; 0x11
    3620:	30 83       	st	Z, r19
    3622:	ea 89       	ldd	r30, Y+18	; 0x12
    3624:	fb 89       	ldd	r31, Y+19	; 0x13
    3626:	20 83       	st	Z, r18
    3628:	19 a2       	std	Y+33, r1	; 0x21
    362a:	ee 89       	ldd	r30, Y+22	; 0x16
    362c:	ff 89       	ldd	r31, Y+23	; 0x17
    362e:	40 81       	ld	r20, Z
    3630:	21 e0       	ldi	r18, 0x01	; 1
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	c9 01       	movw	r24, r18
    3636:	0c 8c       	ldd	r0, Y+28	; 0x1c
    3638:	02 c0       	rjmp	.+4      	; 0x363e <HardwareSerial::begin(unsigned long)+0xaa>
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	0a 94       	dec	r0
    3640:	e2 f7       	brpl	.-8      	; 0x363a <HardwareSerial::begin(unsigned long)+0xa6>
    3642:	48 2b       	or	r20, r24
    3644:	40 83       	st	Z, r20
    3646:	ee 89       	ldd	r30, Y+22	; 0x16
    3648:	ff 89       	ldd	r31, Y+23	; 0x17
    364a:	40 81       	ld	r20, Z
    364c:	c9 01       	movw	r24, r18
    364e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <HardwareSerial::begin(unsigned long)+0xc2>
    3652:	88 0f       	add	r24, r24
    3654:	99 1f       	adc	r25, r25
    3656:	0a 94       	dec	r0
    3658:	e2 f7       	brpl	.-8      	; 0x3652 <HardwareSerial::begin(unsigned long)+0xbe>
    365a:	48 2b       	or	r20, r24
    365c:	40 83       	st	Z, r20
    365e:	ee 89       	ldd	r30, Y+22	; 0x16
    3660:	ff 89       	ldd	r31, Y+23	; 0x17
    3662:	40 81       	ld	r20, Z
    3664:	c9 01       	movw	r24, r18
    3666:	0e 8c       	ldd	r0, Y+30	; 0x1e
    3668:	02 c0       	rjmp	.+4      	; 0x366e <HardwareSerial::begin(unsigned long)+0xda>
    366a:	88 0f       	add	r24, r24
    366c:	99 1f       	adc	r25, r25
    366e:	0a 94       	dec	r0
    3670:	e2 f7       	brpl	.-8      	; 0x366a <HardwareSerial::begin(unsigned long)+0xd6>
    3672:	48 2b       	or	r20, r24
    3674:	40 83       	st	Z, r20
    3676:	ee 89       	ldd	r30, Y+22	; 0x16
    3678:	ff 89       	ldd	r31, Y+23	; 0x17
    367a:	80 81       	ld	r24, Z
    367c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <HardwareSerial::begin(unsigned long)+0xf0>
    3680:	22 0f       	add	r18, r18
    3682:	33 1f       	adc	r19, r19
    3684:	0a 94       	dec	r0
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <HardwareSerial::begin(unsigned long)+0xec>
    3688:	20 95       	com	r18
    368a:	28 23       	and	r18, r24
    368c:	20 83       	st	Z, r18
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	df 90       	pop	r13
    369c:	bf 90       	pop	r11
    369e:	af 90       	pop	r10
    36a0:	08 95       	ret

000036a2 <HardwareSerial::available()>:
    36a2:	dc 01       	movw	r26, r24
    36a4:	1c 96       	adiw	r26, 0x0c	; 12
    36a6:	ed 91       	ld	r30, X+
    36a8:	fc 91       	ld	r31, X
    36aa:	1d 97       	sbiw	r26, 0x0d	; 13
    36ac:	e0 5c       	subi	r30, 0xC0	; 192
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	91 91       	ld	r25, Z+
    36b2:	80 81       	ld	r24, Z
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	98 17       	cp	r25, r24
    36ba:	11 f0       	breq	.+4      	; 0x36c0 <HardwareSerial::available()+0x1e>
    36bc:	21 e0       	ldi	r18, 0x01	; 1
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	c9 01       	movw	r24, r18
    36c2:	08 95       	ret

000036c4 <HardwareSerial::peek()>:
    36c4:	dc 01       	movw	r26, r24
    36c6:	1c 96       	adiw	r26, 0x0c	; 12
    36c8:	ed 91       	ld	r30, X+
    36ca:	fc 91       	ld	r31, X
    36cc:	1d 97       	sbiw	r26, 0x0d	; 13
    36ce:	e0 5c       	subi	r30, 0xC0	; 192
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	90 81       	ld	r25, Z
    36d4:	e0 54       	subi	r30, 0x40	; 64
    36d6:	f0 40       	sbci	r31, 0x00	; 0
    36d8:	df 01       	movw	r26, r30
    36da:	af 5b       	subi	r26, 0xBF	; 191
    36dc:	bf 4f       	sbci	r27, 0xFF	; 255
    36de:	8c 91       	ld	r24, X
    36e0:	98 17       	cp	r25, r24
    36e2:	19 f4       	brne	.+6      	; 0x36ea <HardwareSerial::peek()+0x26>
    36e4:	2f ef       	ldi	r18, 0xFF	; 255
    36e6:	3f ef       	ldi	r19, 0xFF	; 255
    36e8:	06 c0       	rjmp	.+12     	; 0x36f6 <HardwareSerial::peek()+0x32>
    36ea:	8c 91       	ld	r24, X
    36ec:	e8 0f       	add	r30, r24
    36ee:	f1 1d       	adc	r31, r1
    36f0:	80 81       	ld	r24, Z
    36f2:	28 2f       	mov	r18, r24
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	c9 01       	movw	r24, r18
    36f8:	08 95       	ret

000036fa <HardwareSerial::read()>:
    36fa:	dc 01       	movw	r26, r24
    36fc:	1c 96       	adiw	r26, 0x0c	; 12
    36fe:	ed 91       	ld	r30, X+
    3700:	fc 91       	ld	r31, X
    3702:	1d 97       	sbiw	r26, 0x0d	; 13
    3704:	e0 5c       	subi	r30, 0xC0	; 192
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	90 81       	ld	r25, Z
    370a:	e0 54       	subi	r30, 0x40	; 64
    370c:	f0 40       	sbci	r31, 0x00	; 0
    370e:	df 01       	movw	r26, r30
    3710:	af 5b       	subi	r26, 0xBF	; 191
    3712:	bf 4f       	sbci	r27, 0xFF	; 255
    3714:	8c 91       	ld	r24, X
    3716:	98 17       	cp	r25, r24
    3718:	19 f4       	brne	.+6      	; 0x3720 <HardwareSerial::read()+0x26>
    371a:	2f ef       	ldi	r18, 0xFF	; 255
    371c:	3f ef       	ldi	r19, 0xFF	; 255
    371e:	0a c0       	rjmp	.+20     	; 0x3734 <HardwareSerial::read()+0x3a>
    3720:	8c 91       	ld	r24, X
    3722:	e8 0f       	add	r30, r24
    3724:	f1 1d       	adc	r31, r1
    3726:	90 81       	ld	r25, Z
    3728:	8c 91       	ld	r24, X
    372a:	8f 5f       	subi	r24, 0xFF	; 255
    372c:	8f 73       	andi	r24, 0x3F	; 63
    372e:	8c 93       	st	X, r24
    3730:	29 2f       	mov	r18, r25
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	c9 01       	movw	r24, r18
    3736:	08 95       	ret

00003738 <HardwareSerial::flush()>:
    3738:	dc 01       	movw	r26, r24
    373a:	91 96       	adiw	r26, 0x21	; 33
    373c:	8c 91       	ld	r24, X
    373e:	91 97       	sbiw	r26, 0x21	; 33
    3740:	88 23       	and	r24, r24
    3742:	39 f0       	breq	.+14     	; 0x3752 <HardwareSerial::flush()+0x1a>
    3744:	54 96       	adiw	r26, 0x14	; 20
    3746:	ed 91       	ld	r30, X+
    3748:	fc 91       	ld	r31, X
    374a:	55 97       	sbiw	r26, 0x15	; 21
    374c:	80 81       	ld	r24, Z
    374e:	86 ff       	sbrs	r24, 6
    3750:	f9 cf       	rjmp	.-14     	; 0x3744 <HardwareSerial::flush()+0xc>
    3752:	91 96       	adiw	r26, 0x21	; 33
    3754:	1c 92       	st	X, r1
    3756:	08 95       	ret

00003758 <HardwareSerial::write(unsigned char)>:
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	ec 01       	movw	r28, r24
    375e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3760:	ff 85       	ldd	r31, Y+15	; 0x0f
    3762:	e0 5c       	subi	r30, 0xC0	; 192
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	90 81       	ld	r25, Z
    3768:	e0 54       	subi	r30, 0x40	; 64
    376a:	f0 40       	sbci	r31, 0x00	; 0
    376c:	9f 5f       	subi	r25, 0xFF	; 255
    376e:	90 34       	cpi	r25, 0x40	; 64
    3770:	08 f0       	brcs	.+2      	; 0x3774 <HardwareSerial::write(unsigned char)+0x1c>
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	df 01       	movw	r26, r30
    3776:	af 5b       	subi	r26, 0xBF	; 191
    3778:	bf 4f       	sbci	r27, 0xFF	; 255
    377a:	8c 91       	ld	r24, X
    377c:	98 17       	cp	r25, r24
    377e:	e9 f3       	breq	.-6      	; 0x377a <HardwareSerial::write(unsigned char)+0x22>
    3780:	e0 5c       	subi	r30, 0xC0	; 192
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	80 81       	ld	r24, Z
    3786:	e0 54       	subi	r30, 0x40	; 64
    3788:	f0 40       	sbci	r31, 0x00	; 0
    378a:	e8 0f       	add	r30, r24
    378c:	f1 1d       	adc	r31, r1
    378e:	60 83       	st	Z, r22
    3790:	ee 85       	ldd	r30, Y+14	; 0x0e
    3792:	ff 85       	ldd	r31, Y+15	; 0x0f
    3794:	e0 5c       	subi	r30, 0xC0	; 192
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	90 83       	st	Z, r25
    379a:	ee 89       	ldd	r30, Y+22	; 0x16
    379c:	ff 89       	ldd	r31, Y+23	; 0x17
    379e:	20 81       	ld	r18, Z
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	0f 8c       	ldd	r0, Y+31	; 0x1f
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <HardwareSerial::write(unsigned char)+0x54>
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	0a 94       	dec	r0
    37ae:	e2 f7       	brpl	.-8      	; 0x37a8 <HardwareSerial::write(unsigned char)+0x50>
    37b0:	28 2b       	or	r18, r24
    37b2:	20 83       	st	Z, r18
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	89 a3       	std	Y+33, r24	; 0x21
    37b8:	ec 89       	ldd	r30, Y+20	; 0x14
    37ba:	fd 89       	ldd	r31, Y+21	; 0x15
    37bc:	80 81       	ld	r24, Z
    37be:	80 64       	ori	r24, 0x40	; 64
    37c0:	80 83       	st	Z, r24
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	08 95       	ret

000037cc <global constructors keyed to rx_buffer>:
    37cc:	10 92 45 04 	sts	0x0445, r1
    37d0:	10 92 44 04 	sts	0x0444, r1
    37d4:	88 ee       	ldi	r24, 0xE8	; 232
    37d6:	93 e0       	ldi	r25, 0x03	; 3
    37d8:	a0 e0       	ldi	r26, 0x00	; 0
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	80 93 46 04 	sts	0x0446, r24
    37e0:	90 93 47 04 	sts	0x0447, r25
    37e4:	a0 93 48 04 	sts	0x0448, r26
    37e8:	b0 93 49 04 	sts	0x0449, r27
    37ec:	8a e3       	ldi	r24, 0x3A	; 58
    37ee:	91 e0       	ldi	r25, 0x01	; 1
    37f0:	90 93 43 04 	sts	0x0443, r25
    37f4:	80 93 42 04 	sts	0x0442, r24
    37f8:	8e eb       	ldi	r24, 0xBE	; 190
    37fa:	93 e0       	ldi	r25, 0x03	; 3
    37fc:	90 93 4f 04 	sts	0x044F, r25
    3800:	80 93 4e 04 	sts	0x044E, r24
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	94 e0       	ldi	r25, 0x04	; 4
    3808:	90 93 51 04 	sts	0x0451, r25
    380c:	80 93 50 04 	sts	0x0450, r24
    3810:	85 ec       	ldi	r24, 0xC5	; 197
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	90 93 53 04 	sts	0x0453, r25
    3818:	80 93 52 04 	sts	0x0452, r24
    381c:	84 ec       	ldi	r24, 0xC4	; 196
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	90 93 55 04 	sts	0x0455, r25
    3824:	80 93 54 04 	sts	0x0454, r24
    3828:	80 ec       	ldi	r24, 0xC0	; 192
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	90 93 57 04 	sts	0x0457, r25
    3830:	80 93 56 04 	sts	0x0456, r24
    3834:	81 ec       	ldi	r24, 0xC1	; 193
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	90 93 59 04 	sts	0x0459, r25
    383c:	80 93 58 04 	sts	0x0458, r24
    3840:	82 ec       	ldi	r24, 0xC2	; 194
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	90 93 5b 04 	sts	0x045B, r25
    3848:	80 93 5a 04 	sts	0x045A, r24
    384c:	86 ec       	ldi	r24, 0xC6	; 198
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	90 93 5d 04 	sts	0x045D, r25
    3854:	80 93 5c 04 	sts	0x045C, r24
    3858:	84 e0       	ldi	r24, 0x04	; 4
    385a:	80 93 5e 04 	sts	0x045E, r24
    385e:	83 e0       	ldi	r24, 0x03	; 3
    3860:	80 93 5f 04 	sts	0x045F, r24
    3864:	87 e0       	ldi	r24, 0x07	; 7
    3866:	80 93 60 04 	sts	0x0460, r24
    386a:	85 e0       	ldi	r24, 0x05	; 5
    386c:	80 93 61 04 	sts	0x0461, r24
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	80 93 62 04 	sts	0x0462, r24
    3876:	08 95       	ret

00003878 <Print::write(unsigned char const*, unsigned int)>:
    3878:	cf 92       	push	r12
    387a:	df 92       	push	r13
    387c:	ef 92       	push	r14
    387e:	ff 92       	push	r15
    3880:	0f 93       	push	r16
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	7c 01       	movw	r14, r24
    388a:	6b 01       	movw	r12, r22
    388c:	8a 01       	movw	r16, r20
    388e:	c0 e0       	ldi	r28, 0x00	; 0
    3890:	d0 e0       	ldi	r29, 0x00	; 0
    3892:	0f c0       	rjmp	.+30     	; 0x38b2 <Print::write(unsigned char const*, unsigned int)+0x3a>
    3894:	d6 01       	movw	r26, r12
    3896:	6d 91       	ld	r22, X+
    3898:	6d 01       	movw	r12, r26
    389a:	d7 01       	movw	r26, r14
    389c:	ed 91       	ld	r30, X+
    389e:	fc 91       	ld	r31, X
    38a0:	01 90       	ld	r0, Z+
    38a2:	f0 81       	ld	r31, Z
    38a4:	e0 2d       	mov	r30, r0
    38a6:	c7 01       	movw	r24, r14
    38a8:	09 95       	icall
    38aa:	c8 0f       	add	r28, r24
    38ac:	d9 1f       	adc	r29, r25
    38ae:	01 50       	subi	r16, 0x01	; 1
    38b0:	10 40       	sbci	r17, 0x00	; 0
    38b2:	01 15       	cp	r16, r1
    38b4:	11 05       	cpc	r17, r1
    38b6:	71 f7       	brne	.-36     	; 0x3894 <Print::write(unsigned char const*, unsigned int)+0x1c>
    38b8:	ce 01       	movw	r24, r28
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	1f 91       	pop	r17
    38c0:	0f 91       	pop	r16
    38c2:	ff 90       	pop	r15
    38c4:	ef 90       	pop	r14
    38c6:	df 90       	pop	r13
    38c8:	cf 90       	pop	r12
    38ca:	08 95       	ret

000038cc <Print::pgm_print(char const*)>:
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	8c 01       	movw	r16, r24
    38d6:	eb 01       	movw	r28, r22
    38d8:	fe 01       	movw	r30, r28
    38da:	21 96       	adiw	r28, 0x01	; 1
    38dc:	64 91       	lpm	r22, Z+
    38de:	66 23       	and	r22, r22
    38e0:	49 f0       	breq	.+18     	; 0x38f4 <Print::pgm_print(char const*)+0x28>
    38e2:	d8 01       	movw	r26, r16
    38e4:	ed 91       	ld	r30, X+
    38e6:	fc 91       	ld	r31, X
    38e8:	01 90       	ld	r0, Z+
    38ea:	f0 81       	ld	r31, Z
    38ec:	e0 2d       	mov	r30, r0
    38ee:	c8 01       	movw	r24, r16
    38f0:	09 95       	icall
    38f2:	f2 cf       	rjmp	.-28     	; 0x38d8 <Print::pgm_print(char const*)+0xc>
    38f4:	df 91       	pop	r29
    38f6:	cf 91       	pop	r28
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	08 95       	ret

000038fe <Print::print(char)>:
    38fe:	dc 01       	movw	r26, r24
    3900:	ed 91       	ld	r30, X+
    3902:	fc 91       	ld	r31, X
    3904:	01 90       	ld	r0, Z+
    3906:	f0 81       	ld	r31, Z
    3908:	e0 2d       	mov	r30, r0
    390a:	09 95       	icall
    390c:	08 95       	ret

0000390e <Print::println()>:
    390e:	ef 92       	push	r14
    3910:	ff 92       	push	r15
    3912:	0f 93       	push	r16
    3914:	1f 93       	push	r17
    3916:	8c 01       	movw	r16, r24
    3918:	dc 01       	movw	r26, r24
    391a:	ed 91       	ld	r30, X+
    391c:	fc 91       	ld	r31, X
    391e:	01 90       	ld	r0, Z+
    3920:	f0 81       	ld	r31, Z
    3922:	e0 2d       	mov	r30, r0
    3924:	6d e0       	ldi	r22, 0x0D	; 13
    3926:	09 95       	icall
    3928:	7c 01       	movw	r14, r24
    392a:	d8 01       	movw	r26, r16
    392c:	ed 91       	ld	r30, X+
    392e:	fc 91       	ld	r31, X
    3930:	01 90       	ld	r0, Z+
    3932:	f0 81       	ld	r31, Z
    3934:	e0 2d       	mov	r30, r0
    3936:	c8 01       	movw	r24, r16
    3938:	6a e0       	ldi	r22, 0x0A	; 10
    393a:	09 95       	icall
    393c:	9c 01       	movw	r18, r24
    393e:	2e 0d       	add	r18, r14
    3940:	3f 1d       	adc	r19, r15
    3942:	c9 01       	movw	r24, r18
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	ff 90       	pop	r15
    394a:	ef 90       	pop	r14
    394c:	08 95       	ret

0000394e <Print::pgm_println(char const*)>:
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	8c 01       	movw	r16, r24
    3954:	0e 94 66 1c 	call	0x38cc	; 0x38cc <Print::pgm_print(char const*)>
    3958:	c8 01       	movw	r24, r16
    395a:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	08 95       	ret

00003964 <Print::println(char)>:
    3964:	ef 92       	push	r14
    3966:	ff 92       	push	r15
    3968:	0f 93       	push	r16
    396a:	1f 93       	push	r17
    396c:	7c 01       	movw	r14, r24
    396e:	dc 01       	movw	r26, r24
    3970:	ed 91       	ld	r30, X+
    3972:	fc 91       	ld	r31, X
    3974:	01 90       	ld	r0, Z+
    3976:	f0 81       	ld	r31, Z
    3978:	e0 2d       	mov	r30, r0
    397a:	09 95       	icall
    397c:	8c 01       	movw	r16, r24
    397e:	c7 01       	movw	r24, r14
    3980:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    3984:	08 0f       	add	r16, r24
    3986:	19 1f       	adc	r17, r25
    3988:	c8 01       	movw	r24, r16
    398a:	1f 91       	pop	r17
    398c:	0f 91       	pop	r16
    398e:	ff 90       	pop	r15
    3990:	ef 90       	pop	r14
    3992:	08 95       	ret

00003994 <Print::write(char const*)>:
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	ec 01       	movw	r28, r24
    399a:	61 15       	cp	r22, r1
    399c:	71 05       	cpc	r23, r1
    399e:	19 f4       	brne	.+6      	; 0x39a6 <Print::write(char const*)+0x12>
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	0f c0       	rjmp	.+30     	; 0x39c4 <Print::write(char const*)+0x30>
    39a6:	db 01       	movw	r26, r22
    39a8:	0d 90       	ld	r0, X+
    39aa:	00 20       	and	r0, r0
    39ac:	e9 f7       	brne	.-6      	; 0x39a8 <Print::write(char const*)+0x14>
    39ae:	11 97       	sbiw	r26, 0x01	; 1
    39b0:	a6 1b       	sub	r26, r22
    39b2:	b7 0b       	sbc	r27, r23
    39b4:	e8 81       	ld	r30, Y
    39b6:	f9 81       	ldd	r31, Y+1	; 0x01
    39b8:	02 80       	ldd	r0, Z+2	; 0x02
    39ba:	f3 81       	ldd	r31, Z+3	; 0x03
    39bc:	e0 2d       	mov	r30, r0
    39be:	ad 01       	movw	r20, r26
    39c0:	09 95       	icall
    39c2:	9c 01       	movw	r18, r24
    39c4:	c9 01       	movw	r24, r18
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	08 95       	ret

000039cc <Print::printNumber(unsigned long, unsigned char)>:
    39cc:	4f 92       	push	r4
    39ce:	5f 92       	push	r5
    39d0:	7f 92       	push	r7
    39d2:	8f 92       	push	r8
    39d4:	9f 92       	push	r9
    39d6:	af 92       	push	r10
    39d8:	bf 92       	push	r11
    39da:	cf 92       	push	r12
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	a1 97       	sbiw	r28, 0x21	; 33
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	2c 01       	movw	r4, r24
    39fc:	74 2e       	mov	r7, r20
    39fe:	cb 01       	movw	r24, r22
    3a00:	22 30       	cpi	r18, 0x02	; 2
    3a02:	08 f4       	brcc	.+2      	; 0x3a06 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    3a04:	2a e0       	ldi	r18, 0x0A	; 10
    3a06:	19 a2       	std	Y+33, r1	; 0x21
    3a08:	31 e2       	ldi	r19, 0x21	; 33
    3a0a:	c3 2e       	mov	r12, r19
    3a0c:	d1 2c       	mov	r13, r1
    3a0e:	cc 0e       	add	r12, r28
    3a10:	dd 1e       	adc	r13, r29
    3a12:	82 2e       	mov	r8, r18
    3a14:	99 24       	eor	r9, r9
    3a16:	aa 24       	eor	r10, r10
    3a18:	bb 24       	eor	r11, r11
    3a1a:	67 2d       	mov	r22, r7
    3a1c:	75 2f       	mov	r23, r21
    3a1e:	a5 01       	movw	r20, r10
    3a20:	94 01       	movw	r18, r8
    3a22:	0e 94 2a 23 	call	0x4654	; 0x4654 <__udivmodsi4>
    3a26:	79 01       	movw	r14, r18
    3a28:	8a 01       	movw	r16, r20
    3a2a:	c8 01       	movw	r24, r16
    3a2c:	b7 01       	movw	r22, r14
    3a2e:	a5 01       	movw	r20, r10
    3a30:	94 01       	movw	r18, r8
    3a32:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__mulsi3>
    3a36:	47 2d       	mov	r20, r7
    3a38:	46 1b       	sub	r20, r22
    3a3a:	08 94       	sec
    3a3c:	c1 08       	sbc	r12, r1
    3a3e:	d1 08       	sbc	r13, r1
    3a40:	4a 30       	cpi	r20, 0x0A	; 10
    3a42:	10 f4       	brcc	.+4      	; 0x3a48 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    3a44:	40 5d       	subi	r20, 0xD0	; 208
    3a46:	01 c0       	rjmp	.+2      	; 0x3a4a <Print::printNumber(unsigned long, unsigned char)+0x7e>
    3a48:	49 5c       	subi	r20, 0xC9	; 201
    3a4a:	f6 01       	movw	r30, r12
    3a4c:	40 83       	st	Z, r20
    3a4e:	e1 14       	cp	r14, r1
    3a50:	f1 04       	cpc	r15, r1
    3a52:	01 05       	cpc	r16, r1
    3a54:	11 05       	cpc	r17, r1
    3a56:	21 f0       	breq	.+8      	; 0x3a60 <Print::printNumber(unsigned long, unsigned char)+0x94>
    3a58:	7e 2c       	mov	r7, r14
    3a5a:	5f 2d       	mov	r21, r15
    3a5c:	c8 01       	movw	r24, r16
    3a5e:	dd cf       	rjmp	.-70     	; 0x3a1a <Print::printNumber(unsigned long, unsigned char)+0x4e>
    3a60:	c2 01       	movw	r24, r4
    3a62:	b6 01       	movw	r22, r12
    3a64:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Print::write(char const*)>
    3a68:	a1 96       	adiw	r28, 0x21	; 33
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	ff 90       	pop	r15
    3a7e:	ef 90       	pop	r14
    3a80:	df 90       	pop	r13
    3a82:	cf 90       	pop	r12
    3a84:	bf 90       	pop	r11
    3a86:	af 90       	pop	r10
    3a88:	9f 90       	pop	r9
    3a8a:	8f 90       	pop	r8
    3a8c:	7f 90       	pop	r7
    3a8e:	5f 90       	pop	r5
    3a90:	4f 90       	pop	r4
    3a92:	08 95       	ret

00003a94 <Print::print(unsigned long, int)>:
    3a94:	dc 01       	movw	r26, r24
    3a96:	21 15       	cp	r18, r1
    3a98:	31 05       	cpc	r19, r1
    3a9a:	41 f4       	brne	.+16     	; 0x3aac <Print::print(unsigned long, int)+0x18>
    3a9c:	ed 91       	ld	r30, X+
    3a9e:	fc 91       	ld	r31, X
    3aa0:	01 90       	ld	r0, Z+
    3aa2:	f0 81       	ld	r31, Z
    3aa4:	e0 2d       	mov	r30, r0
    3aa6:	64 2f       	mov	r22, r20
    3aa8:	09 95       	icall
    3aaa:	08 95       	ret
    3aac:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <Print::printNumber(unsigned long, unsigned char)>
    3ab0:	08 95       	ret

00003ab2 <Print::println(unsigned long, int)>:
    3ab2:	ef 92       	push	r14
    3ab4:	ff 92       	push	r15
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	7c 01       	movw	r14, r24
    3abc:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <Print::print(unsigned long, int)>
    3ac0:	8c 01       	movw	r16, r24
    3ac2:	c7 01       	movw	r24, r14
    3ac4:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    3ac8:	9c 01       	movw	r18, r24
    3aca:	20 0f       	add	r18, r16
    3acc:	31 1f       	adc	r19, r17
    3ace:	c9 01       	movw	r24, r18
    3ad0:	1f 91       	pop	r17
    3ad2:	0f 91       	pop	r16
    3ad4:	ff 90       	pop	r15
    3ad6:	ef 90       	pop	r14
    3ad8:	08 95       	ret

00003ada <Print::println(unsigned int, int)>:
    3ada:	cf 92       	push	r12
    3adc:	df 92       	push	r13
    3ade:	ef 92       	push	r14
    3ae0:	ff 92       	push	r15
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	6c 01       	movw	r12, r24
    3ae8:	7b 01       	movw	r14, r22
    3aea:	9a 01       	movw	r18, r20
    3aec:	00 e0       	ldi	r16, 0x00	; 0
    3aee:	10 e0       	ldi	r17, 0x00	; 0
    3af0:	b8 01       	movw	r22, r16
    3af2:	a7 01       	movw	r20, r14
    3af4:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <Print::print(unsigned long, int)>
    3af8:	8c 01       	movw	r16, r24
    3afa:	c6 01       	movw	r24, r12
    3afc:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    3b00:	08 0f       	add	r16, r24
    3b02:	19 1f       	adc	r17, r25
    3b04:	c8 01       	movw	r24, r16
    3b06:	1f 91       	pop	r17
    3b08:	0f 91       	pop	r16
    3b0a:	ff 90       	pop	r15
    3b0c:	ef 90       	pop	r14
    3b0e:	df 90       	pop	r13
    3b10:	cf 90       	pop	r12
    3b12:	08 95       	ret

00003b14 <Print::print(long, int)>:
    3b14:	cf 92       	push	r12
    3b16:	df 92       	push	r13
    3b18:	ef 92       	push	r14
    3b1a:	ff 92       	push	r15
    3b1c:	0f 93       	push	r16
    3b1e:	1f 93       	push	r17
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	ec 01       	movw	r28, r24
    3b26:	6a 01       	movw	r12, r20
    3b28:	7b 01       	movw	r14, r22
    3b2a:	21 15       	cp	r18, r1
    3b2c:	31 05       	cpc	r19, r1
    3b2e:	41 f4       	brne	.+16     	; 0x3b40 <Print::print(long, int)+0x2c>
    3b30:	e8 81       	ld	r30, Y
    3b32:	f9 81       	ldd	r31, Y+1	; 0x01
    3b34:	01 90       	ld	r0, Z+
    3b36:	f0 81       	ld	r31, Z
    3b38:	e0 2d       	mov	r30, r0
    3b3a:	64 2f       	mov	r22, r20
    3b3c:	09 95       	icall
    3b3e:	1f c0       	rjmp	.+62     	; 0x3b7e <Print::print(long, int)+0x6a>
    3b40:	2a 30       	cpi	r18, 0x0A	; 10
    3b42:	31 05       	cpc	r19, r1
    3b44:	d1 f4       	brne	.+52     	; 0x3b7a <Print::print(long, int)+0x66>
    3b46:	77 ff       	sbrs	r23, 7
    3b48:	17 c0       	rjmp	.+46     	; 0x3b78 <Print::print(long, int)+0x64>
    3b4a:	e8 81       	ld	r30, Y
    3b4c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b4e:	01 90       	ld	r0, Z+
    3b50:	f0 81       	ld	r31, Z
    3b52:	e0 2d       	mov	r30, r0
    3b54:	6d e2       	ldi	r22, 0x2D	; 45
    3b56:	09 95       	icall
    3b58:	8c 01       	movw	r16, r24
    3b5a:	44 27       	eor	r20, r20
    3b5c:	55 27       	eor	r21, r21
    3b5e:	ba 01       	movw	r22, r20
    3b60:	4c 19       	sub	r20, r12
    3b62:	5d 09       	sbc	r21, r13
    3b64:	6e 09       	sbc	r22, r14
    3b66:	7f 09       	sbc	r23, r15
    3b68:	ce 01       	movw	r24, r28
    3b6a:	2a e0       	ldi	r18, 0x0A	; 10
    3b6c:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <Print::printNumber(unsigned long, unsigned char)>
    3b70:	98 01       	movw	r18, r16
    3b72:	28 0f       	add	r18, r24
    3b74:	39 1f       	adc	r19, r25
    3b76:	04 c0       	rjmp	.+8      	; 0x3b80 <Print::print(long, int)+0x6c>
    3b78:	2a e0       	ldi	r18, 0x0A	; 10
    3b7a:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <Print::printNumber(unsigned long, unsigned char)>
    3b7e:	9c 01       	movw	r18, r24
    3b80:	c9 01       	movw	r24, r18
    3b82:	df 91       	pop	r29
    3b84:	cf 91       	pop	r28
    3b86:	1f 91       	pop	r17
    3b88:	0f 91       	pop	r16
    3b8a:	ff 90       	pop	r15
    3b8c:	ef 90       	pop	r14
    3b8e:	df 90       	pop	r13
    3b90:	cf 90       	pop	r12
    3b92:	08 95       	ret

00003b94 <Print::println(long, int)>:
    3b94:	ef 92       	push	r14
    3b96:	ff 92       	push	r15
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	7c 01       	movw	r14, r24
    3b9e:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <Print::print(long, int)>
    3ba2:	8c 01       	movw	r16, r24
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    3baa:	9c 01       	movw	r18, r24
    3bac:	20 0f       	add	r18, r16
    3bae:	31 1f       	adc	r19, r17
    3bb0:	c9 01       	movw	r24, r18
    3bb2:	1f 91       	pop	r17
    3bb4:	0f 91       	pop	r16
    3bb6:	ff 90       	pop	r15
    3bb8:	ef 90       	pop	r14
    3bba:	08 95       	ret

00003bbc <Print::print(int, int)>:
    3bbc:	ef 92       	push	r14
    3bbe:	ff 92       	push	r15
    3bc0:	0f 93       	push	r16
    3bc2:	1f 93       	push	r17
    3bc4:	7b 01       	movw	r14, r22
    3bc6:	9a 01       	movw	r18, r20
    3bc8:	00 27       	eor	r16, r16
    3bca:	f7 fc       	sbrc	r15, 7
    3bcc:	00 95       	com	r16
    3bce:	10 2f       	mov	r17, r16
    3bd0:	b8 01       	movw	r22, r16
    3bd2:	a7 01       	movw	r20, r14
    3bd4:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <Print::print(long, int)>
    3bd8:	1f 91       	pop	r17
    3bda:	0f 91       	pop	r16
    3bdc:	ff 90       	pop	r15
    3bde:	ef 90       	pop	r14
    3be0:	08 95       	ret

00003be2 <Print::println(int, int)>:
    3be2:	cf 92       	push	r12
    3be4:	df 92       	push	r13
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	6c 01       	movw	r12, r24
    3bf0:	7b 01       	movw	r14, r22
    3bf2:	9a 01       	movw	r18, r20
    3bf4:	00 27       	eor	r16, r16
    3bf6:	f7 fc       	sbrc	r15, 7
    3bf8:	00 95       	com	r16
    3bfa:	10 2f       	mov	r17, r16
    3bfc:	b8 01       	movw	r22, r16
    3bfe:	a7 01       	movw	r20, r14
    3c00:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <Print::print(long, int)>
    3c04:	8c 01       	movw	r16, r24
    3c06:	c6 01       	movw	r24, r12
    3c08:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    3c0c:	08 0f       	add	r16, r24
    3c0e:	19 1f       	adc	r17, r25
    3c10:	c8 01       	movw	r24, r16
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	ff 90       	pop	r15
    3c18:	ef 90       	pop	r14
    3c1a:	df 90       	pop	r13
    3c1c:	cf 90       	pop	r12
    3c1e:	08 95       	ret

00003c20 <Print::print(char const*)>:
    3c20:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Print::write(char const*)>
    3c24:	08 95       	ret

00003c26 <Print::println(char const*)>:
    3c26:	ef 92       	push	r14
    3c28:	ff 92       	push	r15
    3c2a:	0f 93       	push	r16
    3c2c:	1f 93       	push	r17
    3c2e:	7c 01       	movw	r14, r24
    3c30:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Print::write(char const*)>
    3c34:	8c 01       	movw	r16, r24
    3c36:	c7 01       	movw	r24, r14
    3c38:	0e 94 87 1c 	call	0x390e	; 0x390e <Print::println()>
    3c3c:	08 0f       	add	r16, r24
    3c3e:	19 1f       	adc	r17, r25
    3c40:	c8 01       	movw	r24, r16
    3c42:	1f 91       	pop	r17
    3c44:	0f 91       	pop	r16
    3c46:	ff 90       	pop	r15
    3c48:	ef 90       	pop	r14
    3c4a:	08 95       	ret

00003c4c <attachInterrupt>:
    3c4c:	82 30       	cpi	r24, 0x02	; 2
    3c4e:	00 f5       	brcc	.+64     	; 0x3c90 <attachInterrupt+0x44>
    3c50:	e8 2f       	mov	r30, r24
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	ee 0f       	add	r30, r30
    3c56:	ff 1f       	adc	r31, r31
    3c58:	ec 59       	subi	r30, 0x9C	; 156
    3c5a:	fb 4f       	sbci	r31, 0xFB	; 251
    3c5c:	71 83       	std	Z+1, r23	; 0x01
    3c5e:	60 83       	st	Z, r22
    3c60:	88 23       	and	r24, r24
    3c62:	19 f0       	breq	.+6      	; 0x3c6a <attachInterrupt+0x1e>
    3c64:	81 30       	cpi	r24, 0x01	; 1
    3c66:	a1 f4       	brne	.+40     	; 0x3c90 <attachInterrupt+0x44>
    3c68:	08 c0       	rjmp	.+16     	; 0x3c7a <attachInterrupt+0x2e>
    3c6a:	80 91 69 00 	lds	r24, 0x0069
    3c6e:	8c 7f       	andi	r24, 0xFC	; 252
    3c70:	84 2b       	or	r24, r20
    3c72:	80 93 69 00 	sts	0x0069, r24
    3c76:	e8 9a       	sbi	0x1d, 0	; 29
    3c78:	08 95       	ret
    3c7a:	80 91 69 00 	lds	r24, 0x0069
    3c7e:	44 0f       	add	r20, r20
    3c80:	55 1f       	adc	r21, r21
    3c82:	44 0f       	add	r20, r20
    3c84:	55 1f       	adc	r21, r21
    3c86:	83 7f       	andi	r24, 0xF3	; 243
    3c88:	84 2b       	or	r24, r20
    3c8a:	80 93 69 00 	sts	0x0069, r24
    3c8e:	e9 9a       	sbi	0x1d, 1	; 29
    3c90:	08 95       	ret

00003c92 <__vector_1>:
    3c92:	1f 92       	push	r1
    3c94:	0f 92       	push	r0
    3c96:	0f b6       	in	r0, 0x3f	; 63
    3c98:	0f 92       	push	r0
    3c9a:	11 24       	eor	r1, r1
    3c9c:	2f 93       	push	r18
    3c9e:	3f 93       	push	r19
    3ca0:	4f 93       	push	r20
    3ca2:	5f 93       	push	r21
    3ca4:	6f 93       	push	r22
    3ca6:	7f 93       	push	r23
    3ca8:	8f 93       	push	r24
    3caa:	9f 93       	push	r25
    3cac:	af 93       	push	r26
    3cae:	bf 93       	push	r27
    3cb0:	ef 93       	push	r30
    3cb2:	ff 93       	push	r31
    3cb4:	80 91 64 04 	lds	r24, 0x0464
    3cb8:	90 91 65 04 	lds	r25, 0x0465
    3cbc:	89 2b       	or	r24, r25
    3cbe:	29 f0       	breq	.+10     	; 0x3cca <__vector_1+0x38>
    3cc0:	e0 91 64 04 	lds	r30, 0x0464
    3cc4:	f0 91 65 04 	lds	r31, 0x0465
    3cc8:	09 95       	icall
    3cca:	ff 91       	pop	r31
    3ccc:	ef 91       	pop	r30
    3cce:	bf 91       	pop	r27
    3cd0:	af 91       	pop	r26
    3cd2:	9f 91       	pop	r25
    3cd4:	8f 91       	pop	r24
    3cd6:	7f 91       	pop	r23
    3cd8:	6f 91       	pop	r22
    3cda:	5f 91       	pop	r21
    3cdc:	4f 91       	pop	r20
    3cde:	3f 91       	pop	r19
    3ce0:	2f 91       	pop	r18
    3ce2:	0f 90       	pop	r0
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	0f 90       	pop	r0
    3ce8:	1f 90       	pop	r1
    3cea:	18 95       	reti

00003cec <__vector_2>:
    3cec:	1f 92       	push	r1
    3cee:	0f 92       	push	r0
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	0f 92       	push	r0
    3cf4:	11 24       	eor	r1, r1
    3cf6:	2f 93       	push	r18
    3cf8:	3f 93       	push	r19
    3cfa:	4f 93       	push	r20
    3cfc:	5f 93       	push	r21
    3cfe:	6f 93       	push	r22
    3d00:	7f 93       	push	r23
    3d02:	8f 93       	push	r24
    3d04:	9f 93       	push	r25
    3d06:	af 93       	push	r26
    3d08:	bf 93       	push	r27
    3d0a:	ef 93       	push	r30
    3d0c:	ff 93       	push	r31
    3d0e:	80 91 66 04 	lds	r24, 0x0466
    3d12:	90 91 67 04 	lds	r25, 0x0467
    3d16:	89 2b       	or	r24, r25
    3d18:	29 f0       	breq	.+10     	; 0x3d24 <__vector_2+0x38>
    3d1a:	e0 91 66 04 	lds	r30, 0x0466
    3d1e:	f0 91 67 04 	lds	r31, 0x0467
    3d22:	09 95       	icall
    3d24:	ff 91       	pop	r31
    3d26:	ef 91       	pop	r30
    3d28:	bf 91       	pop	r27
    3d2a:	af 91       	pop	r26
    3d2c:	9f 91       	pop	r25
    3d2e:	8f 91       	pop	r24
    3d30:	7f 91       	pop	r23
    3d32:	6f 91       	pop	r22
    3d34:	5f 91       	pop	r21
    3d36:	4f 91       	pop	r20
    3d38:	3f 91       	pop	r19
    3d3a:	2f 91       	pop	r18
    3d3c:	0f 90       	pop	r0
    3d3e:	0f be       	out	0x3f, r0	; 63
    3d40:	0f 90       	pop	r0
    3d42:	1f 90       	pop	r1
    3d44:	18 95       	reti

00003d46 <pinMode>:
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	48 2f       	mov	r20, r24
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	ca 01       	movw	r24, r20
    3d50:	86 5e       	subi	r24, 0xE6	; 230
    3d52:	99 4f       	sbci	r25, 0xF9	; 249
    3d54:	fc 01       	movw	r30, r24
    3d56:	34 91       	lpm	r19, Z+
    3d58:	4a 5f       	subi	r20, 0xFA	; 250
    3d5a:	59 4f       	sbci	r21, 0xF9	; 249
    3d5c:	fa 01       	movw	r30, r20
    3d5e:	84 91       	lpm	r24, Z+
    3d60:	88 23       	and	r24, r24
    3d62:	69 f1       	breq	.+90     	; 0x3dbe <pinMode+0x78>
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	88 0f       	add	r24, r24
    3d68:	99 1f       	adc	r25, r25
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	e8 51       	subi	r30, 0x18	; 24
    3d6e:	fa 4f       	sbci	r31, 0xFA	; 250
    3d70:	a5 91       	lpm	r26, Z+
    3d72:	b4 91       	lpm	r27, Z+
    3d74:	fc 01       	movw	r30, r24
    3d76:	ee 50       	subi	r30, 0x0E	; 14
    3d78:	fa 4f       	sbci	r31, 0xFA	; 250
    3d7a:	c5 91       	lpm	r28, Z+
    3d7c:	d4 91       	lpm	r29, Z+
    3d7e:	66 23       	and	r22, r22
    3d80:	51 f4       	brne	.+20     	; 0x3d96 <pinMode+0x50>
    3d82:	2f b7       	in	r18, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	8c 91       	ld	r24, X
    3d88:	93 2f       	mov	r25, r19
    3d8a:	90 95       	com	r25
    3d8c:	89 23       	and	r24, r25
    3d8e:	8c 93       	st	X, r24
    3d90:	88 81       	ld	r24, Y
    3d92:	89 23       	and	r24, r25
    3d94:	0b c0       	rjmp	.+22     	; 0x3dac <pinMode+0x66>
    3d96:	62 30       	cpi	r22, 0x02	; 2
    3d98:	61 f4       	brne	.+24     	; 0x3db2 <pinMode+0x6c>
    3d9a:	2f b7       	in	r18, 0x3f	; 63
    3d9c:	f8 94       	cli
    3d9e:	8c 91       	ld	r24, X
    3da0:	93 2f       	mov	r25, r19
    3da2:	90 95       	com	r25
    3da4:	89 23       	and	r24, r25
    3da6:	8c 93       	st	X, r24
    3da8:	88 81       	ld	r24, Y
    3daa:	83 2b       	or	r24, r19
    3dac:	88 83       	st	Y, r24
    3dae:	2f bf       	out	0x3f, r18	; 63
    3db0:	06 c0       	rjmp	.+12     	; 0x3dbe <pinMode+0x78>
    3db2:	9f b7       	in	r25, 0x3f	; 63
    3db4:	f8 94       	cli
    3db6:	8c 91       	ld	r24, X
    3db8:	83 2b       	or	r24, r19
    3dba:	8c 93       	st	X, r24
    3dbc:	9f bf       	out	0x3f, r25	; 63
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	08 95       	ret

00003dc4 <RepRapPCB::doInitializePositionXY()>:
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	ec 01       	movw	r28, r24
    3dca:	8c a1       	ldd	r24, Y+36	; 0x24
    3dcc:	88 23       	and	r24, r24
    3dce:	19 f0       	breq	.+6      	; 0x3dd6 <RepRapPCB::doInitializePositionXY()+0x12>
    3dd0:	81 30       	cpi	r24, 0x01	; 1
    3dd2:	59 f5       	brne	.+86     	; 0x3e2a <RepRapPCB::doInitializePositionXY()+0x66>
    3dd4:	0d c0       	rjmp	.+26     	; 0x3df0 <RepRapPCB::doInitializePositionXY()+0x2c>
    3dd6:	ce 01       	movw	r24, r28
    3dd8:	85 51       	subi	r24, 0x15	; 21
    3dda:	9f 4f       	sbci	r25, 0xFF	; 255
    3ddc:	0e 94 01 16 	call	0x2c02	; 0x2c02 <StepperMotorAxis::initializePosition()>
    3de0:	ce 01       	movw	r24, r28
    3de2:	86 5f       	subi	r24, 0xF6	; 246
    3de4:	9e 4f       	sbci	r25, 0xFE	; 254
    3de6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <StepperMotorAxis::initializePosition()>
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	8c a3       	std	Y+36, r24	; 0x24
    3dee:	1d c0       	rjmp	.+58     	; 0x3e2a <RepRapPCB::doInitializePositionXY()+0x66>
    3df0:	c5 51       	subi	r28, 0x15	; 21
    3df2:	df 4f       	sbci	r29, 0xFF	; 255
    3df4:	88 81       	ld	r24, Y
    3df6:	cb 5e       	subi	r28, 0xEB	; 235
    3df8:	d0 40       	sbci	r29, 0x00	; 0
    3dfa:	88 23       	and	r24, r24
    3dfc:	b1 f4       	brne	.+44     	; 0x3e2a <RepRapPCB::doInitializePositionXY()+0x66>
    3dfe:	c1 50       	subi	r28, 0x01	; 1
    3e00:	df 4f       	sbci	r29, 0xFF	; 255
    3e02:	88 81       	ld	r24, Y
    3e04:	cf 5f       	subi	r28, 0xFF	; 255
    3e06:	d0 40       	sbci	r29, 0x00	; 0
    3e08:	88 23       	and	r24, r24
    3e0a:	79 f4       	brne	.+30     	; 0x3e2a <RepRapPCB::doInitializePositionXY()+0x66>
    3e0c:	c6 5f       	subi	r28, 0xF6	; 246
    3e0e:	de 4f       	sbci	r29, 0xFE	; 254
    3e10:	88 81       	ld	r24, Y
    3e12:	ca 50       	subi	r28, 0x0A	; 10
    3e14:	d1 40       	sbci	r29, 0x01	; 1
    3e16:	88 23       	and	r24, r24
    3e18:	41 f4       	brne	.+16     	; 0x3e2a <RepRapPCB::doInitializePositionXY()+0x66>
    3e1a:	c2 5e       	subi	r28, 0xE2	; 226
    3e1c:	de 4f       	sbci	r29, 0xFE	; 254
    3e1e:	88 81       	ld	r24, Y
    3e20:	ce 51       	subi	r28, 0x1E	; 30
    3e22:	d1 40       	sbci	r29, 0x01	; 1
    3e24:	88 23       	and	r24, r24
    3e26:	09 f4       	brne	.+2      	; 0x3e2a <RepRapPCB::doInitializePositionXY()+0x66>
    3e28:	1b a2       	std	Y+35, r1	; 0x23
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	08 95       	ret

00003e30 <RepRapPCB::doInitializePosition()>:
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	ec 01       	movw	r28, r24
    3e3a:	8c a1       	ldd	r24, Y+36	; 0x24
    3e3c:	81 30       	cpi	r24, 0x01	; 1
    3e3e:	c9 f0       	breq	.+50     	; 0x3e72 <RepRapPCB::doInitializePosition()+0x42>
    3e40:	81 30       	cpi	r24, 0x01	; 1
    3e42:	30 f0       	brcs	.+12     	; 0x3e50 <RepRapPCB::doInitializePosition()+0x20>
    3e44:	82 30       	cpi	r24, 0x02	; 2
    3e46:	91 f1       	breq	.+100    	; 0x3eac <RepRapPCB::doInitializePosition()+0x7c>
    3e48:	83 30       	cpi	r24, 0x03	; 3
    3e4a:	09 f0       	breq	.+2      	; 0x3e4e <RepRapPCB::doInitializePosition()+0x1e>
    3e4c:	61 c0       	rjmp	.+194    	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3e4e:	51 c0       	rjmp	.+162    	; 0x3ef2 <RepRapPCB::doInitializePosition()+0xc2>
    3e50:	8e 01       	movw	r16, r28
    3e52:	07 5d       	subi	r16, 0xD7	; 215
    3e54:	1e 4f       	sbci	r17, 0xFE	; 254
    3e56:	c8 01       	movw	r24, r16
    3e58:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <StepperMotorAxis::getAbsolutePositionMicroM()>
    3e5c:	ab 01       	movw	r20, r22
    3e5e:	bc 01       	movw	r22, r24
    3e60:	48 57       	subi	r20, 0x78	; 120
    3e62:	5c 4e       	sbci	r21, 0xEC	; 236
    3e64:	6f 4f       	sbci	r22, 0xFF	; 255
    3e66:	7f 4f       	sbci	r23, 0xFF	; 255
    3e68:	c8 01       	movw	r24, r16
    3e6a:	0e 94 0a 18 	call	0x3014	; 0x3014 <StepperMotorAxis::moveToPositionMicroMFast(long)>
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	1b c0       	rjmp	.+54     	; 0x3ea8 <RepRapPCB::doInitializePosition()+0x78>
    3e72:	c7 5d       	subi	r28, 0xD7	; 215
    3e74:	de 4f       	sbci	r29, 0xFE	; 254
    3e76:	88 81       	ld	r24, Y
    3e78:	c9 52       	subi	r28, 0x29	; 41
    3e7a:	d1 40       	sbci	r29, 0x01	; 1
    3e7c:	88 23       	and	r24, r24
    3e7e:	09 f0       	breq	.+2      	; 0x3e82 <RepRapPCB::doInitializePosition()+0x52>
    3e80:	47 c0       	rjmp	.+142    	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3e82:	c3 5c       	subi	r28, 0xC3	; 195
    3e84:	de 4f       	sbci	r29, 0xFE	; 254
    3e86:	88 81       	ld	r24, Y
    3e88:	cd 53       	subi	r28, 0x3D	; 61
    3e8a:	d1 40       	sbci	r29, 0x01	; 1
    3e8c:	88 23       	and	r24, r24
    3e8e:	09 f0       	breq	.+2      	; 0x3e92 <RepRapPCB::doInitializePosition()+0x62>
    3e90:	3f c0       	rjmp	.+126    	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3e92:	ce 01       	movw	r24, r28
    3e94:	85 51       	subi	r24, 0x15	; 21
    3e96:	9f 4f       	sbci	r25, 0xFF	; 255
    3e98:	0e 94 01 16 	call	0x2c02	; 0x2c02 <StepperMotorAxis::initializePosition()>
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	86 5f       	subi	r24, 0xF6	; 246
    3ea0:	9e 4f       	sbci	r25, 0xFE	; 254
    3ea2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <StepperMotorAxis::initializePosition()>
    3ea6:	82 e0       	ldi	r24, 0x02	; 2
    3ea8:	8c a3       	std	Y+36, r24	; 0x24
    3eaa:	32 c0       	rjmp	.+100    	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3eac:	c5 51       	subi	r28, 0x15	; 21
    3eae:	df 4f       	sbci	r29, 0xFF	; 255
    3eb0:	88 81       	ld	r24, Y
    3eb2:	cb 5e       	subi	r28, 0xEB	; 235
    3eb4:	d0 40       	sbci	r29, 0x00	; 0
    3eb6:	88 23       	and	r24, r24
    3eb8:	59 f5       	brne	.+86     	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3eba:	c1 50       	subi	r28, 0x01	; 1
    3ebc:	df 4f       	sbci	r29, 0xFF	; 255
    3ebe:	88 81       	ld	r24, Y
    3ec0:	cf 5f       	subi	r28, 0xFF	; 255
    3ec2:	d0 40       	sbci	r29, 0x00	; 0
    3ec4:	88 23       	and	r24, r24
    3ec6:	21 f5       	brne	.+72     	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3ec8:	c6 5f       	subi	r28, 0xF6	; 246
    3eca:	de 4f       	sbci	r29, 0xFE	; 254
    3ecc:	88 81       	ld	r24, Y
    3ece:	ca 50       	subi	r28, 0x0A	; 10
    3ed0:	d1 40       	sbci	r29, 0x01	; 1
    3ed2:	88 23       	and	r24, r24
    3ed4:	e9 f4       	brne	.+58     	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3ed6:	c2 5e       	subi	r28, 0xE2	; 226
    3ed8:	de 4f       	sbci	r29, 0xFE	; 254
    3eda:	88 81       	ld	r24, Y
    3edc:	ce 51       	subi	r28, 0x1E	; 30
    3ede:	d1 40       	sbci	r29, 0x01	; 1
    3ee0:	88 23       	and	r24, r24
    3ee2:	b1 f4       	brne	.+44     	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3ee4:	ce 01       	movw	r24, r28
    3ee6:	87 5d       	subi	r24, 0xD7	; 215
    3ee8:	9e 4f       	sbci	r25, 0xFE	; 254
    3eea:	0e 94 01 16 	call	0x2c02	; 0x2c02 <StepperMotorAxis::initializePosition()>
    3eee:	83 e0       	ldi	r24, 0x03	; 3
    3ef0:	db cf       	rjmp	.-74     	; 0x3ea8 <RepRapPCB::doInitializePosition()+0x78>
    3ef2:	c7 5d       	subi	r28, 0xD7	; 215
    3ef4:	de 4f       	sbci	r29, 0xFE	; 254
    3ef6:	88 81       	ld	r24, Y
    3ef8:	c9 52       	subi	r28, 0x29	; 41
    3efa:	d1 40       	sbci	r29, 0x01	; 1
    3efc:	88 23       	and	r24, r24
    3efe:	41 f4       	brne	.+16     	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3f00:	c3 5c       	subi	r28, 0xC3	; 195
    3f02:	de 4f       	sbci	r29, 0xFE	; 254
    3f04:	88 81       	ld	r24, Y
    3f06:	cd 53       	subi	r28, 0x3D	; 61
    3f08:	d1 40       	sbci	r29, 0x01	; 1
    3f0a:	88 23       	and	r24, r24
    3f0c:	09 f4       	brne	.+2      	; 0x3f10 <RepRapPCB::doInitializePosition()+0xe0>
    3f0e:	1b a2       	std	Y+35, r1	; 0x23
    3f10:	df 91       	pop	r29
    3f12:	cf 91       	pop	r28
    3f14:	1f 91       	pop	r17
    3f16:	0f 91       	pop	r16
    3f18:	08 95       	ret

00003f1a <RepRapPCB::update()>:
    3f1a:	cf 93       	push	r28
    3f1c:	df 93       	push	r29
    3f1e:	ec 01       	movw	r28, r24
    3f20:	87 57       	subi	r24, 0x77	; 119
    3f22:	9f 4f       	sbci	r25, 0xFF	; 255
    3f24:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <DigitalInputShiftRegister_74HC166::update()>
    3f28:	ce 01       	movw	r24, r28
    3f2a:	85 51       	subi	r24, 0x15	; 21
    3f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f2e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <StepperMotorAxis::update()>
    3f32:	ce 01       	movw	r24, r28
    3f34:	86 5f       	subi	r24, 0xF6	; 246
    3f36:	9e 4f       	sbci	r25, 0xFE	; 254
    3f38:	0e 94 68 19 	call	0x32d0	; 0x32d0 <StepperMotorAxis::update()>
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	87 5d       	subi	r24, 0xD7	; 215
    3f40:	9e 4f       	sbci	r25, 0xFE	; 254
    3f42:	0e 94 68 19 	call	0x32d0	; 0x32d0 <StepperMotorAxis::update()>
    3f46:	ce 01       	movw	r24, r28
    3f48:	88 5b       	subi	r24, 0xB8	; 184
    3f4a:	9e 4f       	sbci	r25, 0xFE	; 254
    3f4c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <StepperMotorAxis::update()>
    3f50:	ce 01       	movw	r24, r28
    3f52:	85 96       	adiw	r24, 0x25	; 37
    3f54:	0e 94 66 10 	call	0x20cc	; 0x20cc <DigitalOutputShiftRegister_74HC595::update()>
    3f58:	8b a1       	ldd	r24, Y+35	; 0x23
    3f5a:	82 30       	cpi	r24, 0x02	; 2
    3f5c:	19 f0       	breq	.+6      	; 0x3f64 <RepRapPCB::update()+0x4a>
    3f5e:	83 30       	cpi	r24, 0x03	; 3
    3f60:	41 f4       	brne	.+16     	; 0x3f72 <RepRapPCB::update()+0x58>
    3f62:	04 c0       	rjmp	.+8      	; 0x3f6c <RepRapPCB::update()+0x52>
    3f64:	ce 01       	movw	r24, r28
    3f66:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <RepRapPCB::doInitializePosition()>
    3f6a:	03 c0       	rjmp	.+6      	; 0x3f72 <RepRapPCB::update()+0x58>
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <RepRapPCB::doInitializePositionXY()>
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	08 95       	ret

00003f78 <RepRapPCB::initialize()>:
    3f78:	2f 92       	push	r2
    3f7a:	3f 92       	push	r3
    3f7c:	4f 92       	push	r4
    3f7e:	5f 92       	push	r5
    3f80:	6f 92       	push	r6
    3f82:	7f 92       	push	r7
    3f84:	8f 92       	push	r8
    3f86:	9f 92       	push	r9
    3f88:	af 92       	push	r10
    3f8a:	bf 92       	push	r11
    3f8c:	cf 92       	push	r12
    3f8e:	df 92       	push	r13
    3f90:	ef 92       	push	r14
    3f92:	ff 92       	push	r15
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	df 93       	push	r29
    3f9a:	cf 93       	push	r28
    3f9c:	00 d0       	rcall	.+0      	; 0x3f9e <RepRapPCB::initialize()+0x26>
    3f9e:	00 d0       	rcall	.+0      	; 0x3fa0 <RepRapPCB::initialize()+0x28>
    3fa0:	00 d0       	rcall	.+0      	; 0x3fa2 <RepRapPCB::initialize()+0x2a>
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	6c 01       	movw	r12, r24
    3fa8:	fc 01       	movw	r30, r24
    3faa:	13 a2       	std	Z+35, r1	; 0x23
    3fac:	14 a2       	std	Z+36, r1	; 0x24
    3fae:	6c e0       	ldi	r22, 0x0C	; 12
    3fb0:	40 e0       	ldi	r20, 0x00	; 0
    3fb2:	0e 94 8d 12 	call	0x251a	; 0x251a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3fb6:	86 01       	movw	r16, r12
    3fb8:	0a 5f       	subi	r16, 0xFA	; 250
    3fba:	1f 4f       	sbci	r17, 0xFF	; 255
    3fbc:	c8 01       	movw	r24, r16
    3fbe:	6d e0       	ldi	r22, 0x0D	; 13
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	0e 94 8d 12 	call	0x251a	; 0x251a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3fc6:	ac e0       	ldi	r26, 0x0C	; 12
    3fc8:	ea 2e       	mov	r14, r26
    3fca:	f1 2c       	mov	r15, r1
    3fcc:	ec 0c       	add	r14, r12
    3fce:	fd 1c       	adc	r15, r13
    3fd0:	c7 01       	movw	r24, r14
    3fd2:	6b e0       	ldi	r22, 0x0B	; 11
    3fd4:	40 e0       	ldi	r20, 0x00	; 0
    3fd6:	0e 94 8d 12 	call	0x251a	; 0x251a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3fda:	f5 e2       	ldi	r31, 0x25	; 37
    3fdc:	af 2e       	mov	r10, r31
    3fde:	b1 2c       	mov	r11, r1
    3fe0:	ac 0c       	add	r10, r12
    3fe2:	bd 1c       	adc	r11, r13
    3fe4:	c5 01       	movw	r24, r10
    3fe6:	61 e1       	ldi	r22, 0x11	; 17
    3fe8:	43 e0       	ldi	r20, 0x03	; 3
    3fea:	96 01       	movw	r18, r12
    3fec:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3ff0:	e2 e1       	ldi	r30, 0x12	; 18
    3ff2:	6e 2e       	mov	r6, r30
    3ff4:	71 2c       	mov	r7, r1
    3ff6:	6c 0c       	add	r6, r12
    3ff8:	7d 1c       	adc	r7, r13
    3ffa:	c3 01       	movw	r24, r6
    3ffc:	69 e0       	ldi	r22, 0x09	; 9
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	0e 94 8d 12 	call	0x251a	; 0x251a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    4004:	78 e1       	ldi	r23, 0x18	; 24
    4006:	e7 2e       	mov	r14, r23
    4008:	f1 2c       	mov	r15, r1
    400a:	ec 0c       	add	r14, r12
    400c:	fd 1c       	adc	r15, r13
    400e:	c7 01       	movw	r24, r14
    4010:	68 e0       	ldi	r22, 0x08	; 8
    4012:	40 e0       	ldi	r20, 0x00	; 0
    4014:	0e 94 8d 12 	call	0x251a	; 0x251a <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    4018:	86 01       	movw	r16, r12
    401a:	02 5e       	subi	r16, 0xE2	; 226
    401c:	1f 4f       	sbci	r17, 0xFF	; 255
    401e:	c8 01       	movw	r24, r16
    4020:	6a e0       	ldi	r22, 0x0A	; 10
    4022:	40 e0       	ldi	r20, 0x00	; 0
    4024:	0e 94 bd 12 	call	0x257a	; 0x257a <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    4028:	69 e8       	ldi	r22, 0x89	; 137
    402a:	86 2e       	mov	r8, r22
    402c:	91 2c       	mov	r9, r1
    402e:	8c 0c       	add	r8, r12
    4030:	9d 1c       	adc	r9, r13
    4032:	c4 01       	movw	r24, r8
    4034:	69 e0       	ldi	r22, 0x09	; 9
    4036:	a3 01       	movw	r20, r6
    4038:	97 01       	movw	r18, r14
    403a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)>
    403e:	c5 01       	movw	r24, r10
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    4046:	2c 01       	movw	r4, r24
    4048:	c5 01       	movw	r24, r10
    404a:	61 e0       	ldi	r22, 0x01	; 1
    404c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    4050:	3c 01       	movw	r6, r24
    4052:	c5 01       	movw	r24, r10
    4054:	62 e0       	ldi	r22, 0x02	; 2
    4056:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    405a:	8c 01       	movw	r16, r24
    405c:	c5 01       	movw	r24, r10
    405e:	63 e0       	ldi	r22, 0x03	; 3
    4060:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    4064:	7c 01       	movw	r14, r24
    4066:	96 01       	movw	r18, r12
    4068:	21 54       	subi	r18, 0x41	; 65
    406a:	3f 4f       	sbci	r19, 0xFF	; 255
    406c:	3a 83       	std	Y+2, r19	; 0x02
    406e:	29 83       	std	Y+1, r18	; 0x01
    4070:	c9 01       	movw	r24, r18
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	a2 01       	movw	r20, r4
    4076:	93 01       	movw	r18, r6
    4078:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    407c:	c5 01       	movw	r24, r10
    407e:	64 e0       	ldi	r22, 0x04	; 4
    4080:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    4084:	2c 01       	movw	r4, r24
    4086:	c5 01       	movw	r24, r10
    4088:	65 e0       	ldi	r22, 0x05	; 5
    408a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    408e:	3c 01       	movw	r6, r24
    4090:	c5 01       	movw	r24, r10
    4092:	66 e0       	ldi	r22, 0x06	; 6
    4094:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    4098:	8c 01       	movw	r16, r24
    409a:	c5 01       	movw	r24, r10
    409c:	67 e0       	ldi	r22, 0x07	; 7
    409e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    40a2:	7c 01       	movw	r14, r24
    40a4:	b6 01       	movw	r22, r12
    40a6:	66 53       	subi	r22, 0x36	; 54
    40a8:	7f 4f       	sbci	r23, 0xFF	; 255
    40aa:	7c 83       	std	Y+4, r23	; 0x04
    40ac:	6b 83       	std	Y+3, r22	; 0x03
    40ae:	cb 01       	movw	r24, r22
    40b0:	60 e0       	ldi	r22, 0x00	; 0
    40b2:	a2 01       	movw	r20, r4
    40b4:	93 01       	movw	r18, r6
    40b6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    40ba:	c5 01       	movw	r24, r10
    40bc:	68 e0       	ldi	r22, 0x08	; 8
    40be:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    40c2:	2c 01       	movw	r4, r24
    40c4:	c5 01       	movw	r24, r10
    40c6:	69 e0       	ldi	r22, 0x09	; 9
    40c8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    40cc:	3c 01       	movw	r6, r24
    40ce:	c5 01       	movw	r24, r10
    40d0:	6a e0       	ldi	r22, 0x0A	; 10
    40d2:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    40d6:	8c 01       	movw	r16, r24
    40d8:	c5 01       	movw	r24, r10
    40da:	6b e0       	ldi	r22, 0x0B	; 11
    40dc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    40e0:	7c 01       	movw	r14, r24
    40e2:	c6 01       	movw	r24, r12
    40e4:	8b 52       	subi	r24, 0x2B	; 43
    40e6:	9f 4f       	sbci	r25, 0xFF	; 255
    40e8:	9e 83       	std	Y+6, r25	; 0x06
    40ea:	8d 83       	std	Y+5, r24	; 0x05
    40ec:	60 e0       	ldi	r22, 0x00	; 0
    40ee:	a2 01       	movw	r20, r4
    40f0:	93 01       	movw	r18, r6
    40f2:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    40f6:	c5 01       	movw	r24, r10
    40f8:	6c e0       	ldi	r22, 0x0C	; 12
    40fa:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    40fe:	2c 01       	movw	r4, r24
    4100:	c5 01       	movw	r24, r10
    4102:	6d e0       	ldi	r22, 0x0D	; 13
    4104:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    4108:	3c 01       	movw	r6, r24
    410a:	c5 01       	movw	r24, r10
    410c:	6e e0       	ldi	r22, 0x0E	; 14
    410e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    4112:	8c 01       	movw	r16, r24
    4114:	c5 01       	movw	r24, r10
    4116:	6f e0       	ldi	r22, 0x0F	; 15
    4118:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    411c:	7c 01       	movw	r14, r24
    411e:	50 ee       	ldi	r21, 0xE0	; 224
    4120:	25 2e       	mov	r2, r21
    4122:	31 2c       	mov	r3, r1
    4124:	2c 0c       	add	r2, r12
    4126:	3d 1c       	adc	r3, r13
    4128:	c1 01       	movw	r24, r2
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	a2 01       	movw	r20, r4
    412e:	93 01       	movw	r18, r6
    4130:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    4134:	c5 01       	movw	r24, r10
    4136:	60 e1       	ldi	r22, 0x10	; 16
    4138:	0e 94 7d 12 	call	0x24fa	; 0x24fa <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    413c:	e7 e6       	ldi	r30, 0x67	; 103
    413e:	f1 e0       	ldi	r31, 0x01	; 1
    4140:	ce 0e       	add	r12, r30
    4142:	df 1e       	adc	r13, r31
    4144:	f6 01       	movw	r30, r12
    4146:	91 83       	std	Z+1, r25	; 0x01
    4148:	80 83       	st	Z, r24
    414a:	29 e9       	ldi	r18, 0x99	; 153
    414c:	3e ef       	ldi	r19, 0xFE	; 254
    414e:	c2 0e       	add	r12, r18
    4150:	d3 1e       	adc	r13, r19
    4152:	c4 01       	movw	r24, r8
    4154:	68 e0       	ldi	r22, 0x08	; 8
    4156:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    415a:	8c 01       	movw	r16, r24
    415c:	c4 01       	movw	r24, r8
    415e:	60 e0       	ldi	r22, 0x00	; 0
    4160:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    4164:	9c 01       	movw	r18, r24
    4166:	c6 01       	movw	r24, r12
    4168:	85 51       	subi	r24, 0x15	; 21
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	69 81       	ldd	r22, Y+1	; 0x01
    416e:	7a 81       	ldd	r23, Y+2	; 0x02
    4170:	a8 01       	movw	r20, r16
    4172:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    4176:	c4 01       	movw	r24, r8
    4178:	61 e0       	ldi	r22, 0x01	; 1
    417a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    417e:	8c 01       	movw	r16, r24
    4180:	c4 01       	movw	r24, r8
    4182:	62 e0       	ldi	r22, 0x02	; 2
    4184:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    4188:	9c 01       	movw	r18, r24
    418a:	c6 01       	movw	r24, r12
    418c:	86 5f       	subi	r24, 0xF6	; 246
    418e:	9e 4f       	sbci	r25, 0xFE	; 254
    4190:	6b 81       	ldd	r22, Y+3	; 0x03
    4192:	7c 81       	ldd	r23, Y+4	; 0x04
    4194:	a8 01       	movw	r20, r16
    4196:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    419a:	c4 01       	movw	r24, r8
    419c:	64 e0       	ldi	r22, 0x04	; 4
    419e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    41a2:	8c 01       	movw	r16, r24
    41a4:	c4 01       	movw	r24, r8
    41a6:	63 e0       	ldi	r22, 0x03	; 3
    41a8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    41ac:	9c 01       	movw	r18, r24
    41ae:	c6 01       	movw	r24, r12
    41b0:	87 5d       	subi	r24, 0xD7	; 215
    41b2:	9e 4f       	sbci	r25, 0xFE	; 254
    41b4:	6d 81       	ldd	r22, Y+5	; 0x05
    41b6:	7e 81       	ldd	r23, Y+6	; 0x06
    41b8:	a8 01       	movw	r20, r16
    41ba:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    41be:	c4 01       	movw	r24, r8
    41c0:	65 e0       	ldi	r22, 0x05	; 5
    41c2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    41c6:	8c 01       	movw	r16, r24
    41c8:	c4 01       	movw	r24, r8
    41ca:	66 e0       	ldi	r22, 0x06	; 6
    41cc:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    41d0:	9c 01       	movw	r18, r24
    41d2:	c6 01       	movw	r24, r12
    41d4:	88 5b       	subi	r24, 0xB8	; 184
    41d6:	9e 4f       	sbci	r25, 0xFE	; 254
    41d8:	b1 01       	movw	r22, r2
    41da:	a8 01       	movw	r20, r16
    41dc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    41e0:	61 ef       	ldi	r22, 0xF1	; 241
    41e2:	70 e0       	ldi	r23, 0x00	; 0
    41e4:	c6 0e       	add	r12, r22
    41e6:	d7 1e       	adc	r13, r23
    41e8:	8c ed       	ldi	r24, 0xDC	; 220
    41ea:	95 e0       	ldi	r25, 0x05	; 5
    41ec:	a0 e0       	ldi	r26, 0x00	; 0
    41ee:	b0 e0       	ldi	r27, 0x00	; 0
    41f0:	f6 01       	movw	r30, r12
    41f2:	80 83       	st	Z, r24
    41f4:	91 83       	std	Z+1, r25	; 0x01
    41f6:	a2 83       	std	Z+2, r26	; 0x02
    41f8:	b3 83       	std	Z+3, r27	; 0x03
    41fa:	2f e1       	ldi	r18, 0x1F	; 31
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	c2 0e       	add	r12, r18
    4200:	d3 1e       	adc	r13, r19
    4202:	f6 01       	movw	r30, r12
    4204:	80 83       	st	Z, r24
    4206:	91 83       	std	Z+1, r25	; 0x01
    4208:	a2 83       	std	Z+2, r26	; 0x02
    420a:	b3 83       	std	Z+3, r27	; 0x03
    420c:	c2 0e       	add	r12, r18
    420e:	d3 1e       	adc	r13, r19
    4210:	44 ec       	ldi	r20, 0xC4	; 196
    4212:	e4 2e       	mov	r14, r20
    4214:	49 e0       	ldi	r20, 0x09	; 9
    4216:	f4 2e       	mov	r15, r20
    4218:	01 2d       	mov	r16, r1
    421a:	11 2d       	mov	r17, r1
    421c:	f6 01       	movw	r30, r12
    421e:	e0 82       	st	Z, r14
    4220:	f1 82       	std	Z+1, r15	; 0x01
    4222:	02 83       	std	Z+2, r16	; 0x02
    4224:	13 83       	std	Z+3, r17	; 0x03
    4226:	c2 0e       	add	r12, r18
    4228:	d3 1e       	adc	r13, r19
    422a:	20 ed       	ldi	r18, 0xD0	; 208
    422c:	37 e0       	ldi	r19, 0x07	; 7
    422e:	40 e0       	ldi	r20, 0x00	; 0
    4230:	50 e0       	ldi	r21, 0x00	; 0
    4232:	f6 01       	movw	r30, r12
    4234:	20 83       	st	Z, r18
    4236:	31 83       	std	Z+1, r19	; 0x01
    4238:	42 83       	std	Z+2, r20	; 0x02
    423a:	53 83       	std	Z+3, r21	; 0x03
    423c:	62 eb       	ldi	r22, 0xB2	; 178
    423e:	7f ef       	ldi	r23, 0xFF	; 255
    4240:	c6 0e       	add	r12, r22
    4242:	d7 1e       	adc	r13, r23
    4244:	f6 01       	movw	r30, r12
    4246:	80 83       	st	Z, r24
    4248:	91 83       	std	Z+1, r25	; 0x01
    424a:	a2 83       	std	Z+2, r26	; 0x02
    424c:	b3 83       	std	Z+3, r27	; 0x03
    424e:	6f e1       	ldi	r22, 0x1F	; 31
    4250:	70 e0       	ldi	r23, 0x00	; 0
    4252:	c6 0e       	add	r12, r22
    4254:	d7 1e       	adc	r13, r23
    4256:	f6 01       	movw	r30, r12
    4258:	80 83       	st	Z, r24
    425a:	91 83       	std	Z+1, r25	; 0x01
    425c:	a2 83       	std	Z+2, r26	; 0x02
    425e:	b3 83       	std	Z+3, r27	; 0x03
    4260:	c6 0e       	add	r12, r22
    4262:	d7 1e       	adc	r13, r23
    4264:	f6 01       	movw	r30, r12
    4266:	e0 82       	st	Z, r14
    4268:	f1 82       	std	Z+1, r15	; 0x01
    426a:	02 83       	std	Z+2, r16	; 0x02
    426c:	13 83       	std	Z+3, r17	; 0x03
    426e:	c6 0e       	add	r12, r22
    4270:	d7 1e       	adc	r13, r23
    4272:	f6 01       	movw	r30, r12
    4274:	20 83       	st	Z, r18
    4276:	31 83       	std	Z+1, r19	; 0x01
    4278:	42 83       	std	Z+2, r20	; 0x02
    427a:	53 83       	std	Z+3, r21	; 0x03
    427c:	20 e9       	ldi	r18, 0x90	; 144
    427e:	3f ef       	ldi	r19, 0xFF	; 255
    4280:	c2 0e       	add	r12, r18
    4282:	d3 1e       	adc	r13, r19
    4284:	27 e7       	ldi	r18, 0x77	; 119
    4286:	3e e3       	ldi	r19, 0x3E	; 62
    4288:	f6 01       	movw	r30, r12
    428a:	31 83       	std	Z+1, r19	; 0x01
    428c:	20 83       	st	Z, r18
    428e:	c6 0e       	add	r12, r22
    4290:	d7 1e       	adc	r13, r23
    4292:	8d e9       	ldi	r24, 0x9D	; 157
    4294:	9e e3       	ldi	r25, 0x3E	; 62
    4296:	f6 01       	movw	r30, r12
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
    429c:	c6 0e       	add	r12, r22
    429e:	d7 1e       	adc	r13, r23
    42a0:	8d e1       	ldi	r24, 0x1D	; 29
    42a2:	9f e0       	ldi	r25, 0x0F	; 15
    42a4:	f6 01       	movw	r30, r12
    42a6:	91 83       	std	Z+1, r25	; 0x01
    42a8:	80 83       	st	Z, r24
    42aa:	c6 0e       	add	r12, r22
    42ac:	d7 1e       	adc	r13, r23
    42ae:	f6 01       	movw	r30, r12
    42b0:	31 83       	std	Z+1, r19	; 0x01
    42b2:	20 83       	st	Z, r18
    42b4:	25 ea       	ldi	r18, 0xA5	; 165
    42b6:	3f ef       	ldi	r19, 0xFF	; 255
    42b8:	c2 0e       	add	r12, r18
    42ba:	d3 1e       	adc	r13, r19
    42bc:	24 eb       	ldi	r18, 0xB4	; 180
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	f6 01       	movw	r30, r12
    42c2:	31 83       	std	Z+1, r19	; 0x01
    42c4:	20 83       	st	Z, r18
    42c6:	c6 0e       	add	r12, r22
    42c8:	d7 1e       	adc	r13, r23
    42ca:	89 e9       	ldi	r24, 0x99	; 153
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	f6 01       	movw	r30, r12
    42d0:	91 83       	std	Z+1, r25	; 0x01
    42d2:	80 83       	st	Z, r24
    42d4:	c6 0e       	add	r12, r22
    42d6:	d7 1e       	adc	r13, r23
    42d8:	88 ea       	ldi	r24, 0xA8	; 168
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	f6 01       	movw	r30, r12
    42de:	91 83       	std	Z+1, r25	; 0x01
    42e0:	80 83       	st	Z, r24
    42e2:	c6 0e       	add	r12, r22
    42e4:	d7 1e       	adc	r13, r23
    42e6:	f6 01       	movw	r30, r12
    42e8:	31 83       	std	Z+1, r19	; 0x01
    42ea:	20 83       	st	Z, r18
    42ec:	26 96       	adiw	r28, 0x06	; 6
    42ee:	0f b6       	in	r0, 0x3f	; 63
    42f0:	f8 94       	cli
    42f2:	de bf       	out	0x3e, r29	; 62
    42f4:	0f be       	out	0x3f, r0	; 63
    42f6:	cd bf       	out	0x3d, r28	; 61
    42f8:	cf 91       	pop	r28
    42fa:	df 91       	pop	r29
    42fc:	1f 91       	pop	r17
    42fe:	0f 91       	pop	r16
    4300:	ff 90       	pop	r15
    4302:	ef 90       	pop	r14
    4304:	df 90       	pop	r13
    4306:	cf 90       	pop	r12
    4308:	bf 90       	pop	r11
    430a:	af 90       	pop	r10
    430c:	9f 90       	pop	r9
    430e:	8f 90       	pop	r8
    4310:	7f 90       	pop	r7
    4312:	6f 90       	pop	r6
    4314:	5f 90       	pop	r5
    4316:	4f 90       	pop	r4
    4318:	3f 90       	pop	r3
    431a:	2f 90       	pop	r2
    431c:	08 95       	ret

0000431e <isspace>:
    431e:	91 11       	cpse	r25, r1
    4320:	50 c1       	rjmp	.+672    	; 0x45c2 <__ctype_isfalse>
    4322:	80 32       	cpi	r24, 0x20	; 32
    4324:	19 f0       	breq	.+6      	; 0x432c <isspace+0xe>
    4326:	89 50       	subi	r24, 0x09	; 9
    4328:	85 50       	subi	r24, 0x05	; 5
    432a:	d0 f7       	brcc	.-12     	; 0x4320 <isspace+0x2>
    432c:	08 95       	ret

0000432e <__cmpsf2>:
    432e:	71 d0       	rcall	.+226    	; 0x4412 <__fp_cmp>
    4330:	08 f4       	brcc	.+2      	; 0x4334 <__cmpsf2+0x6>
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	08 95       	ret

00004336 <__fixsfsi>:
    4336:	04 d0       	rcall	.+8      	; 0x4340 <__fixunssfsi>
    4338:	68 94       	set
    433a:	b1 11       	cpse	r27, r1
    433c:	d9 c0       	rjmp	.+434    	; 0x44f0 <__fp_szero>
    433e:	08 95       	ret

00004340 <__fixunssfsi>:
    4340:	bc d0       	rcall	.+376    	; 0x44ba <__fp_splitA>
    4342:	88 f0       	brcs	.+34     	; 0x4366 <__fixunssfsi+0x26>
    4344:	9f 57       	subi	r25, 0x7F	; 127
    4346:	90 f0       	brcs	.+36     	; 0x436c <__fixunssfsi+0x2c>
    4348:	b9 2f       	mov	r27, r25
    434a:	99 27       	eor	r25, r25
    434c:	b7 51       	subi	r27, 0x17	; 23
    434e:	a0 f0       	brcs	.+40     	; 0x4378 <__fixunssfsi+0x38>
    4350:	d1 f0       	breq	.+52     	; 0x4386 <__fixunssfsi+0x46>
    4352:	66 0f       	add	r22, r22
    4354:	77 1f       	adc	r23, r23
    4356:	88 1f       	adc	r24, r24
    4358:	99 1f       	adc	r25, r25
    435a:	1a f0       	brmi	.+6      	; 0x4362 <__fixunssfsi+0x22>
    435c:	ba 95       	dec	r27
    435e:	c9 f7       	brne	.-14     	; 0x4352 <__fixunssfsi+0x12>
    4360:	12 c0       	rjmp	.+36     	; 0x4386 <__fixunssfsi+0x46>
    4362:	b1 30       	cpi	r27, 0x01	; 1
    4364:	81 f0       	breq	.+32     	; 0x4386 <__fixunssfsi+0x46>
    4366:	c3 d0       	rcall	.+390    	; 0x44ee <__fp_zero>
    4368:	b1 e0       	ldi	r27, 0x01	; 1
    436a:	08 95       	ret
    436c:	c0 c0       	rjmp	.+384    	; 0x44ee <__fp_zero>
    436e:	67 2f       	mov	r22, r23
    4370:	78 2f       	mov	r23, r24
    4372:	88 27       	eor	r24, r24
    4374:	b8 5f       	subi	r27, 0xF8	; 248
    4376:	39 f0       	breq	.+14     	; 0x4386 <__fixunssfsi+0x46>
    4378:	b9 3f       	cpi	r27, 0xF9	; 249
    437a:	cc f3       	brlt	.-14     	; 0x436e <__fixunssfsi+0x2e>
    437c:	86 95       	lsr	r24
    437e:	77 95       	ror	r23
    4380:	67 95       	ror	r22
    4382:	b3 95       	inc	r27
    4384:	d9 f7       	brne	.-10     	; 0x437c <__fixunssfsi+0x3c>
    4386:	3e f4       	brtc	.+14     	; 0x4396 <__fixunssfsi+0x56>
    4388:	90 95       	com	r25
    438a:	80 95       	com	r24
    438c:	70 95       	com	r23
    438e:	61 95       	neg	r22
    4390:	7f 4f       	sbci	r23, 0xFF	; 255
    4392:	8f 4f       	sbci	r24, 0xFF	; 255
    4394:	9f 4f       	sbci	r25, 0xFF	; 255
    4396:	08 95       	ret

00004398 <__floatunsisf>:
    4398:	e8 94       	clt
    439a:	09 c0       	rjmp	.+18     	; 0x43ae <__floatsisf+0x12>

0000439c <__floatsisf>:
    439c:	97 fb       	bst	r25, 7
    439e:	3e f4       	brtc	.+14     	; 0x43ae <__floatsisf+0x12>
    43a0:	90 95       	com	r25
    43a2:	80 95       	com	r24
    43a4:	70 95       	com	r23
    43a6:	61 95       	neg	r22
    43a8:	7f 4f       	sbci	r23, 0xFF	; 255
    43aa:	8f 4f       	sbci	r24, 0xFF	; 255
    43ac:	9f 4f       	sbci	r25, 0xFF	; 255
    43ae:	99 23       	and	r25, r25
    43b0:	a9 f0       	breq	.+42     	; 0x43dc <__floatsisf+0x40>
    43b2:	f9 2f       	mov	r31, r25
    43b4:	96 e9       	ldi	r25, 0x96	; 150
    43b6:	bb 27       	eor	r27, r27
    43b8:	93 95       	inc	r25
    43ba:	f6 95       	lsr	r31
    43bc:	87 95       	ror	r24
    43be:	77 95       	ror	r23
    43c0:	67 95       	ror	r22
    43c2:	b7 95       	ror	r27
    43c4:	f1 11       	cpse	r31, r1
    43c6:	f8 cf       	rjmp	.-16     	; 0x43b8 <__floatsisf+0x1c>
    43c8:	fa f4       	brpl	.+62     	; 0x4408 <__floatsisf+0x6c>
    43ca:	bb 0f       	add	r27, r27
    43cc:	11 f4       	brne	.+4      	; 0x43d2 <__floatsisf+0x36>
    43ce:	60 ff       	sbrs	r22, 0
    43d0:	1b c0       	rjmp	.+54     	; 0x4408 <__floatsisf+0x6c>
    43d2:	6f 5f       	subi	r22, 0xFF	; 255
    43d4:	7f 4f       	sbci	r23, 0xFF	; 255
    43d6:	8f 4f       	sbci	r24, 0xFF	; 255
    43d8:	9f 4f       	sbci	r25, 0xFF	; 255
    43da:	16 c0       	rjmp	.+44     	; 0x4408 <__floatsisf+0x6c>
    43dc:	88 23       	and	r24, r24
    43de:	11 f0       	breq	.+4      	; 0x43e4 <__floatsisf+0x48>
    43e0:	96 e9       	ldi	r25, 0x96	; 150
    43e2:	11 c0       	rjmp	.+34     	; 0x4406 <__floatsisf+0x6a>
    43e4:	77 23       	and	r23, r23
    43e6:	21 f0       	breq	.+8      	; 0x43f0 <__floatsisf+0x54>
    43e8:	9e e8       	ldi	r25, 0x8E	; 142
    43ea:	87 2f       	mov	r24, r23
    43ec:	76 2f       	mov	r23, r22
    43ee:	05 c0       	rjmp	.+10     	; 0x43fa <__floatsisf+0x5e>
    43f0:	66 23       	and	r22, r22
    43f2:	71 f0       	breq	.+28     	; 0x4410 <__floatsisf+0x74>
    43f4:	96 e8       	ldi	r25, 0x86	; 134
    43f6:	86 2f       	mov	r24, r22
    43f8:	70 e0       	ldi	r23, 0x00	; 0
    43fa:	60 e0       	ldi	r22, 0x00	; 0
    43fc:	2a f0       	brmi	.+10     	; 0x4408 <__floatsisf+0x6c>
    43fe:	9a 95       	dec	r25
    4400:	66 0f       	add	r22, r22
    4402:	77 1f       	adc	r23, r23
    4404:	88 1f       	adc	r24, r24
    4406:	da f7       	brpl	.-10     	; 0x43fe <__floatsisf+0x62>
    4408:	88 0f       	add	r24, r24
    440a:	96 95       	lsr	r25
    440c:	87 95       	ror	r24
    440e:	97 f9       	bld	r25, 7
    4410:	08 95       	ret

00004412 <__fp_cmp>:
    4412:	99 0f       	add	r25, r25
    4414:	00 08       	sbc	r0, r0
    4416:	55 0f       	add	r21, r21
    4418:	aa 0b       	sbc	r26, r26
    441a:	e0 e8       	ldi	r30, 0x80	; 128
    441c:	fe ef       	ldi	r31, 0xFE	; 254
    441e:	16 16       	cp	r1, r22
    4420:	17 06       	cpc	r1, r23
    4422:	e8 07       	cpc	r30, r24
    4424:	f9 07       	cpc	r31, r25
    4426:	c0 f0       	brcs	.+48     	; 0x4458 <__fp_cmp+0x46>
    4428:	12 16       	cp	r1, r18
    442a:	13 06       	cpc	r1, r19
    442c:	e4 07       	cpc	r30, r20
    442e:	f5 07       	cpc	r31, r21
    4430:	98 f0       	brcs	.+38     	; 0x4458 <__fp_cmp+0x46>
    4432:	62 1b       	sub	r22, r18
    4434:	73 0b       	sbc	r23, r19
    4436:	84 0b       	sbc	r24, r20
    4438:	95 0b       	sbc	r25, r21
    443a:	39 f4       	brne	.+14     	; 0x444a <__fp_cmp+0x38>
    443c:	0a 26       	eor	r0, r26
    443e:	61 f0       	breq	.+24     	; 0x4458 <__fp_cmp+0x46>
    4440:	23 2b       	or	r18, r19
    4442:	24 2b       	or	r18, r20
    4444:	25 2b       	or	r18, r21
    4446:	21 f4       	brne	.+8      	; 0x4450 <__fp_cmp+0x3e>
    4448:	08 95       	ret
    444a:	0a 26       	eor	r0, r26
    444c:	09 f4       	brne	.+2      	; 0x4450 <__fp_cmp+0x3e>
    444e:	a1 40       	sbci	r26, 0x01	; 1
    4450:	a6 95       	lsr	r26
    4452:	8f ef       	ldi	r24, 0xFF	; 255
    4454:	81 1d       	adc	r24, r1
    4456:	81 1d       	adc	r24, r1
    4458:	08 95       	ret

0000445a <__fp_inf>:
    445a:	97 f9       	bld	r25, 7
    445c:	9f 67       	ori	r25, 0x7F	; 127
    445e:	80 e8       	ldi	r24, 0x80	; 128
    4460:	70 e0       	ldi	r23, 0x00	; 0
    4462:	60 e0       	ldi	r22, 0x00	; 0
    4464:	08 95       	ret

00004466 <__fp_nan>:
    4466:	9f ef       	ldi	r25, 0xFF	; 255
    4468:	80 ec       	ldi	r24, 0xC0	; 192
    446a:	08 95       	ret

0000446c <__fp_pscA>:
    446c:	00 24       	eor	r0, r0
    446e:	0a 94       	dec	r0
    4470:	16 16       	cp	r1, r22
    4472:	17 06       	cpc	r1, r23
    4474:	18 06       	cpc	r1, r24
    4476:	09 06       	cpc	r0, r25
    4478:	08 95       	ret

0000447a <__fp_pscB>:
    447a:	00 24       	eor	r0, r0
    447c:	0a 94       	dec	r0
    447e:	12 16       	cp	r1, r18
    4480:	13 06       	cpc	r1, r19
    4482:	14 06       	cpc	r1, r20
    4484:	05 06       	cpc	r0, r21
    4486:	08 95       	ret

00004488 <__fp_round>:
    4488:	09 2e       	mov	r0, r25
    448a:	03 94       	inc	r0
    448c:	00 0c       	add	r0, r0
    448e:	11 f4       	brne	.+4      	; 0x4494 <__fp_round+0xc>
    4490:	88 23       	and	r24, r24
    4492:	52 f0       	brmi	.+20     	; 0x44a8 <__fp_round+0x20>
    4494:	bb 0f       	add	r27, r27
    4496:	40 f4       	brcc	.+16     	; 0x44a8 <__fp_round+0x20>
    4498:	bf 2b       	or	r27, r31
    449a:	11 f4       	brne	.+4      	; 0x44a0 <__fp_round+0x18>
    449c:	60 ff       	sbrs	r22, 0
    449e:	04 c0       	rjmp	.+8      	; 0x44a8 <__fp_round+0x20>
    44a0:	6f 5f       	subi	r22, 0xFF	; 255
    44a2:	7f 4f       	sbci	r23, 0xFF	; 255
    44a4:	8f 4f       	sbci	r24, 0xFF	; 255
    44a6:	9f 4f       	sbci	r25, 0xFF	; 255
    44a8:	08 95       	ret

000044aa <__fp_split3>:
    44aa:	57 fd       	sbrc	r21, 7
    44ac:	90 58       	subi	r25, 0x80	; 128
    44ae:	44 0f       	add	r20, r20
    44b0:	55 1f       	adc	r21, r21
    44b2:	59 f0       	breq	.+22     	; 0x44ca <__fp_splitA+0x10>
    44b4:	5f 3f       	cpi	r21, 0xFF	; 255
    44b6:	71 f0       	breq	.+28     	; 0x44d4 <__fp_splitA+0x1a>
    44b8:	47 95       	ror	r20

000044ba <__fp_splitA>:
    44ba:	88 0f       	add	r24, r24
    44bc:	97 fb       	bst	r25, 7
    44be:	99 1f       	adc	r25, r25
    44c0:	61 f0       	breq	.+24     	; 0x44da <__fp_splitA+0x20>
    44c2:	9f 3f       	cpi	r25, 0xFF	; 255
    44c4:	79 f0       	breq	.+30     	; 0x44e4 <__fp_splitA+0x2a>
    44c6:	87 95       	ror	r24
    44c8:	08 95       	ret
    44ca:	12 16       	cp	r1, r18
    44cc:	13 06       	cpc	r1, r19
    44ce:	14 06       	cpc	r1, r20
    44d0:	55 1f       	adc	r21, r21
    44d2:	f2 cf       	rjmp	.-28     	; 0x44b8 <__fp_split3+0xe>
    44d4:	46 95       	lsr	r20
    44d6:	f1 df       	rcall	.-30     	; 0x44ba <__fp_splitA>
    44d8:	08 c0       	rjmp	.+16     	; 0x44ea <__fp_splitA+0x30>
    44da:	16 16       	cp	r1, r22
    44dc:	17 06       	cpc	r1, r23
    44de:	18 06       	cpc	r1, r24
    44e0:	99 1f       	adc	r25, r25
    44e2:	f1 cf       	rjmp	.-30     	; 0x44c6 <__fp_splitA+0xc>
    44e4:	86 95       	lsr	r24
    44e6:	71 05       	cpc	r23, r1
    44e8:	61 05       	cpc	r22, r1
    44ea:	08 94       	sec
    44ec:	08 95       	ret

000044ee <__fp_zero>:
    44ee:	e8 94       	clt

000044f0 <__fp_szero>:
    44f0:	bb 27       	eor	r27, r27
    44f2:	66 27       	eor	r22, r22
    44f4:	77 27       	eor	r23, r23
    44f6:	cb 01       	movw	r24, r22
    44f8:	97 f9       	bld	r25, 7
    44fa:	08 95       	ret

000044fc <__mulsf3>:
    44fc:	0b d0       	rcall	.+22     	; 0x4514 <__mulsf3x>
    44fe:	c4 cf       	rjmp	.-120    	; 0x4488 <__fp_round>
    4500:	b5 df       	rcall	.-150    	; 0x446c <__fp_pscA>
    4502:	28 f0       	brcs	.+10     	; 0x450e <__mulsf3+0x12>
    4504:	ba df       	rcall	.-140    	; 0x447a <__fp_pscB>
    4506:	18 f0       	brcs	.+6      	; 0x450e <__mulsf3+0x12>
    4508:	95 23       	and	r25, r21
    450a:	09 f0       	breq	.+2      	; 0x450e <__mulsf3+0x12>
    450c:	a6 cf       	rjmp	.-180    	; 0x445a <__fp_inf>
    450e:	ab cf       	rjmp	.-170    	; 0x4466 <__fp_nan>
    4510:	11 24       	eor	r1, r1
    4512:	ee cf       	rjmp	.-36     	; 0x44f0 <__fp_szero>

00004514 <__mulsf3x>:
    4514:	ca df       	rcall	.-108    	; 0x44aa <__fp_split3>
    4516:	a0 f3       	brcs	.-24     	; 0x4500 <__mulsf3+0x4>

00004518 <__mulsf3_pse>:
    4518:	95 9f       	mul	r25, r21
    451a:	d1 f3       	breq	.-12     	; 0x4510 <__mulsf3+0x14>
    451c:	95 0f       	add	r25, r21
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	55 1f       	adc	r21, r21
    4522:	62 9f       	mul	r22, r18
    4524:	f0 01       	movw	r30, r0
    4526:	72 9f       	mul	r23, r18
    4528:	bb 27       	eor	r27, r27
    452a:	f0 0d       	add	r31, r0
    452c:	b1 1d       	adc	r27, r1
    452e:	63 9f       	mul	r22, r19
    4530:	aa 27       	eor	r26, r26
    4532:	f0 0d       	add	r31, r0
    4534:	b1 1d       	adc	r27, r1
    4536:	aa 1f       	adc	r26, r26
    4538:	64 9f       	mul	r22, r20
    453a:	66 27       	eor	r22, r22
    453c:	b0 0d       	add	r27, r0
    453e:	a1 1d       	adc	r26, r1
    4540:	66 1f       	adc	r22, r22
    4542:	82 9f       	mul	r24, r18
    4544:	22 27       	eor	r18, r18
    4546:	b0 0d       	add	r27, r0
    4548:	a1 1d       	adc	r26, r1
    454a:	62 1f       	adc	r22, r18
    454c:	73 9f       	mul	r23, r19
    454e:	b0 0d       	add	r27, r0
    4550:	a1 1d       	adc	r26, r1
    4552:	62 1f       	adc	r22, r18
    4554:	83 9f       	mul	r24, r19
    4556:	a0 0d       	add	r26, r0
    4558:	61 1d       	adc	r22, r1
    455a:	22 1f       	adc	r18, r18
    455c:	74 9f       	mul	r23, r20
    455e:	33 27       	eor	r19, r19
    4560:	a0 0d       	add	r26, r0
    4562:	61 1d       	adc	r22, r1
    4564:	23 1f       	adc	r18, r19
    4566:	84 9f       	mul	r24, r20
    4568:	60 0d       	add	r22, r0
    456a:	21 1d       	adc	r18, r1
    456c:	82 2f       	mov	r24, r18
    456e:	76 2f       	mov	r23, r22
    4570:	6a 2f       	mov	r22, r26
    4572:	11 24       	eor	r1, r1
    4574:	9f 57       	subi	r25, 0x7F	; 127
    4576:	50 40       	sbci	r21, 0x00	; 0
    4578:	8a f0       	brmi	.+34     	; 0x459c <__mulsf3_pse+0x84>
    457a:	e1 f0       	breq	.+56     	; 0x45b4 <__mulsf3_pse+0x9c>
    457c:	88 23       	and	r24, r24
    457e:	4a f0       	brmi	.+18     	; 0x4592 <__mulsf3_pse+0x7a>
    4580:	ee 0f       	add	r30, r30
    4582:	ff 1f       	adc	r31, r31
    4584:	bb 1f       	adc	r27, r27
    4586:	66 1f       	adc	r22, r22
    4588:	77 1f       	adc	r23, r23
    458a:	88 1f       	adc	r24, r24
    458c:	91 50       	subi	r25, 0x01	; 1
    458e:	50 40       	sbci	r21, 0x00	; 0
    4590:	a9 f7       	brne	.-22     	; 0x457c <__mulsf3_pse+0x64>
    4592:	9e 3f       	cpi	r25, 0xFE	; 254
    4594:	51 05       	cpc	r21, r1
    4596:	70 f0       	brcs	.+28     	; 0x45b4 <__mulsf3_pse+0x9c>
    4598:	60 cf       	rjmp	.-320    	; 0x445a <__fp_inf>
    459a:	aa cf       	rjmp	.-172    	; 0x44f0 <__fp_szero>
    459c:	5f 3f       	cpi	r21, 0xFF	; 255
    459e:	ec f3       	brlt	.-6      	; 0x459a <__mulsf3_pse+0x82>
    45a0:	98 3e       	cpi	r25, 0xE8	; 232
    45a2:	dc f3       	brlt	.-10     	; 0x459a <__mulsf3_pse+0x82>
    45a4:	86 95       	lsr	r24
    45a6:	77 95       	ror	r23
    45a8:	67 95       	ror	r22
    45aa:	b7 95       	ror	r27
    45ac:	f7 95       	ror	r31
    45ae:	e7 95       	ror	r30
    45b0:	9f 5f       	subi	r25, 0xFF	; 255
    45b2:	c1 f7       	brne	.-16     	; 0x45a4 <__mulsf3_pse+0x8c>
    45b4:	fe 2b       	or	r31, r30
    45b6:	88 0f       	add	r24, r24
    45b8:	91 1d       	adc	r25, r1
    45ba:	96 95       	lsr	r25
    45bc:	87 95       	ror	r24
    45be:	97 f9       	bld	r25, 7
    45c0:	08 95       	ret

000045c2 <__ctype_isfalse>:
    45c2:	99 27       	eor	r25, r25
    45c4:	88 27       	eor	r24, r24

000045c6 <__ctype_istrue>:
    45c6:	08 95       	ret

000045c8 <__mulsi3>:
    45c8:	62 9f       	mul	r22, r18
    45ca:	d0 01       	movw	r26, r0
    45cc:	73 9f       	mul	r23, r19
    45ce:	f0 01       	movw	r30, r0
    45d0:	82 9f       	mul	r24, r18
    45d2:	e0 0d       	add	r30, r0
    45d4:	f1 1d       	adc	r31, r1
    45d6:	64 9f       	mul	r22, r20
    45d8:	e0 0d       	add	r30, r0
    45da:	f1 1d       	adc	r31, r1
    45dc:	92 9f       	mul	r25, r18
    45de:	f0 0d       	add	r31, r0
    45e0:	83 9f       	mul	r24, r19
    45e2:	f0 0d       	add	r31, r0
    45e4:	74 9f       	mul	r23, r20
    45e6:	f0 0d       	add	r31, r0
    45e8:	65 9f       	mul	r22, r21
    45ea:	f0 0d       	add	r31, r0
    45ec:	99 27       	eor	r25, r25
    45ee:	72 9f       	mul	r23, r18
    45f0:	b0 0d       	add	r27, r0
    45f2:	e1 1d       	adc	r30, r1
    45f4:	f9 1f       	adc	r31, r25
    45f6:	63 9f       	mul	r22, r19
    45f8:	b0 0d       	add	r27, r0
    45fa:	e1 1d       	adc	r30, r1
    45fc:	f9 1f       	adc	r31, r25
    45fe:	bd 01       	movw	r22, r26
    4600:	cf 01       	movw	r24, r30
    4602:	11 24       	eor	r1, r1
    4604:	08 95       	ret

00004606 <__udivmodhi4>:
    4606:	aa 1b       	sub	r26, r26
    4608:	bb 1b       	sub	r27, r27
    460a:	51 e1       	ldi	r21, 0x11	; 17
    460c:	07 c0       	rjmp	.+14     	; 0x461c <__udivmodhi4_ep>

0000460e <__udivmodhi4_loop>:
    460e:	aa 1f       	adc	r26, r26
    4610:	bb 1f       	adc	r27, r27
    4612:	a6 17       	cp	r26, r22
    4614:	b7 07       	cpc	r27, r23
    4616:	10 f0       	brcs	.+4      	; 0x461c <__udivmodhi4_ep>
    4618:	a6 1b       	sub	r26, r22
    461a:	b7 0b       	sbc	r27, r23

0000461c <__udivmodhi4_ep>:
    461c:	88 1f       	adc	r24, r24
    461e:	99 1f       	adc	r25, r25
    4620:	5a 95       	dec	r21
    4622:	a9 f7       	brne	.-22     	; 0x460e <__udivmodhi4_loop>
    4624:	80 95       	com	r24
    4626:	90 95       	com	r25
    4628:	bc 01       	movw	r22, r24
    462a:	cd 01       	movw	r24, r26
    462c:	08 95       	ret

0000462e <__divmodhi4>:
    462e:	97 fb       	bst	r25, 7
    4630:	09 2e       	mov	r0, r25
    4632:	07 26       	eor	r0, r23
    4634:	0a d0       	rcall	.+20     	; 0x464a <__divmodhi4_neg1>
    4636:	77 fd       	sbrc	r23, 7
    4638:	04 d0       	rcall	.+8      	; 0x4642 <__divmodhi4_neg2>
    463a:	e5 df       	rcall	.-54     	; 0x4606 <__udivmodhi4>
    463c:	06 d0       	rcall	.+12     	; 0x464a <__divmodhi4_neg1>
    463e:	00 20       	and	r0, r0
    4640:	1a f4       	brpl	.+6      	; 0x4648 <__divmodhi4_exit>

00004642 <__divmodhi4_neg2>:
    4642:	70 95       	com	r23
    4644:	61 95       	neg	r22
    4646:	7f 4f       	sbci	r23, 0xFF	; 255

00004648 <__divmodhi4_exit>:
    4648:	08 95       	ret

0000464a <__divmodhi4_neg1>:
    464a:	f6 f7       	brtc	.-4      	; 0x4648 <__divmodhi4_exit>
    464c:	90 95       	com	r25
    464e:	81 95       	neg	r24
    4650:	9f 4f       	sbci	r25, 0xFF	; 255
    4652:	08 95       	ret

00004654 <__udivmodsi4>:
    4654:	a1 e2       	ldi	r26, 0x21	; 33
    4656:	1a 2e       	mov	r1, r26
    4658:	aa 1b       	sub	r26, r26
    465a:	bb 1b       	sub	r27, r27
    465c:	fd 01       	movw	r30, r26
    465e:	0d c0       	rjmp	.+26     	; 0x467a <__udivmodsi4_ep>

00004660 <__udivmodsi4_loop>:
    4660:	aa 1f       	adc	r26, r26
    4662:	bb 1f       	adc	r27, r27
    4664:	ee 1f       	adc	r30, r30
    4666:	ff 1f       	adc	r31, r31
    4668:	a2 17       	cp	r26, r18
    466a:	b3 07       	cpc	r27, r19
    466c:	e4 07       	cpc	r30, r20
    466e:	f5 07       	cpc	r31, r21
    4670:	20 f0       	brcs	.+8      	; 0x467a <__udivmodsi4_ep>
    4672:	a2 1b       	sub	r26, r18
    4674:	b3 0b       	sbc	r27, r19
    4676:	e4 0b       	sbc	r30, r20
    4678:	f5 0b       	sbc	r31, r21

0000467a <__udivmodsi4_ep>:
    467a:	66 1f       	adc	r22, r22
    467c:	77 1f       	adc	r23, r23
    467e:	88 1f       	adc	r24, r24
    4680:	99 1f       	adc	r25, r25
    4682:	1a 94       	dec	r1
    4684:	69 f7       	brne	.-38     	; 0x4660 <__udivmodsi4_loop>
    4686:	60 95       	com	r22
    4688:	70 95       	com	r23
    468a:	80 95       	com	r24
    468c:	90 95       	com	r25
    468e:	9b 01       	movw	r18, r22
    4690:	ac 01       	movw	r20, r24
    4692:	bd 01       	movw	r22, r26
    4694:	cf 01       	movw	r24, r30
    4696:	08 95       	ret

00004698 <__divmodsi4>:
    4698:	97 fb       	bst	r25, 7
    469a:	09 2e       	mov	r0, r25
    469c:	05 26       	eor	r0, r21
    469e:	0e d0       	rcall	.+28     	; 0x46bc <__divmodsi4_neg1>
    46a0:	57 fd       	sbrc	r21, 7
    46a2:	04 d0       	rcall	.+8      	; 0x46ac <__divmodsi4_neg2>
    46a4:	d7 df       	rcall	.-82     	; 0x4654 <__udivmodsi4>
    46a6:	0a d0       	rcall	.+20     	; 0x46bc <__divmodsi4_neg1>
    46a8:	00 1c       	adc	r0, r0
    46aa:	38 f4       	brcc	.+14     	; 0x46ba <__divmodsi4_exit>

000046ac <__divmodsi4_neg2>:
    46ac:	50 95       	com	r21
    46ae:	40 95       	com	r20
    46b0:	30 95       	com	r19
    46b2:	21 95       	neg	r18
    46b4:	3f 4f       	sbci	r19, 0xFF	; 255
    46b6:	4f 4f       	sbci	r20, 0xFF	; 255
    46b8:	5f 4f       	sbci	r21, 0xFF	; 255

000046ba <__divmodsi4_exit>:
    46ba:	08 95       	ret

000046bc <__divmodsi4_neg1>:
    46bc:	f6 f7       	brtc	.-4      	; 0x46ba <__divmodsi4_exit>
    46be:	90 95       	com	r25
    46c0:	80 95       	com	r24
    46c2:	70 95       	com	r23
    46c4:	61 95       	neg	r22
    46c6:	7f 4f       	sbci	r23, 0xFF	; 255
    46c8:	8f 4f       	sbci	r24, 0xFF	; 255
    46ca:	9f 4f       	sbci	r25, 0xFF	; 255
    46cc:	08 95       	ret

000046ce <__prologue_saves__>:
    46ce:	2f 92       	push	r2
    46d0:	3f 92       	push	r3
    46d2:	4f 92       	push	r4
    46d4:	5f 92       	push	r5
    46d6:	6f 92       	push	r6
    46d8:	7f 92       	push	r7
    46da:	8f 92       	push	r8
    46dc:	9f 92       	push	r9
    46de:	af 92       	push	r10
    46e0:	bf 92       	push	r11
    46e2:	cf 92       	push	r12
    46e4:	df 92       	push	r13
    46e6:	ef 92       	push	r14
    46e8:	ff 92       	push	r15
    46ea:	0f 93       	push	r16
    46ec:	1f 93       	push	r17
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
    46f6:	ca 1b       	sub	r28, r26
    46f8:	db 0b       	sbc	r29, r27
    46fa:	0f b6       	in	r0, 0x3f	; 63
    46fc:	f8 94       	cli
    46fe:	de bf       	out	0x3e, r29	; 62
    4700:	0f be       	out	0x3f, r0	; 63
    4702:	cd bf       	out	0x3d, r28	; 61
    4704:	09 94       	ijmp

00004706 <__epilogue_restores__>:
    4706:	2a 88       	ldd	r2, Y+18	; 0x12
    4708:	39 88       	ldd	r3, Y+17	; 0x11
    470a:	48 88       	ldd	r4, Y+16	; 0x10
    470c:	5f 84       	ldd	r5, Y+15	; 0x0f
    470e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4710:	7d 84       	ldd	r7, Y+13	; 0x0d
    4712:	8c 84       	ldd	r8, Y+12	; 0x0c
    4714:	9b 84       	ldd	r9, Y+11	; 0x0b
    4716:	aa 84       	ldd	r10, Y+10	; 0x0a
    4718:	b9 84       	ldd	r11, Y+9	; 0x09
    471a:	c8 84       	ldd	r12, Y+8	; 0x08
    471c:	df 80       	ldd	r13, Y+7	; 0x07
    471e:	ee 80       	ldd	r14, Y+6	; 0x06
    4720:	fd 80       	ldd	r15, Y+5	; 0x05
    4722:	0c 81       	ldd	r16, Y+4	; 0x04
    4724:	1b 81       	ldd	r17, Y+3	; 0x03
    4726:	aa 81       	ldd	r26, Y+2	; 0x02
    4728:	b9 81       	ldd	r27, Y+1	; 0x01
    472a:	ce 0f       	add	r28, r30
    472c:	d1 1d       	adc	r29, r1
    472e:	0f b6       	in	r0, 0x3f	; 63
    4730:	f8 94       	cli
    4732:	de bf       	out	0x3e, r29	; 62
    4734:	0f be       	out	0x3f, r0	; 63
    4736:	cd bf       	out	0x3d, r28	; 61
    4738:	ed 01       	movw	r28, r26
    473a:	08 95       	ret

0000473c <__tablejump2__>:
    473c:	ee 0f       	add	r30, r30
    473e:	ff 1f       	adc	r31, r31

00004740 <__tablejump__>:
    4740:	05 90       	lpm	r0, Z+
    4742:	f4 91       	lpm	r31, Z+
    4744:	e0 2d       	mov	r30, r0
    4746:	09 94       	ijmp

00004748 <_exit>:
    4748:	f8 94       	cli

0000474a <__stop_program>:
    474a:	ff cf       	rjmp	.-2      	; 0x474a <__stop_program>
