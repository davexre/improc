...
AVR Memory Usage
----------------
Device: atmega328p

Program:   17954 bytes (54.8% Full)
(.text + .data + .bootloader)

Data:        860 bytes (42.0% Full)
(.data + .bss + .noinit)


...
...
   text	   data	    bss	    dec	    hex	filename
  17886	     68	    792	  18746	   493a	ArduinoProject.elf
...
...

ArduinoProject.elf:     file format elf32-avr

Contents of section .data:
 800060 20000000 00004f0e 81100000 0000660d   .....O.......f.
 800070 00000000 4e0d510d 00000000 3c0d0000  ....N.Q.....<...
 800080 0000b113 e713080a 02060405 01090a06  ................
 800090 05090802 04010000 00007119 1f194a19  ..........q...J.
 8000a0 33196719                             3.g.            
...
...
Print final symbols sizes (b - .bss; d - .data; t - .text; v/w - weak)
...
...
00000025 b btn
00000005 b diButtonPin
00000006 b diLedPin
00000005 b diRotorPinA
00000005 b diRotorPinB
00000002 B errno
00000004 b intFunc
00000019 b led
00000004 B maxStep
00000001 B modeState
00000361 b pcb
00000007 b reader
00000100 b readerBuffer
00000001 B repRapMode
00000072 b rotor
00000066 B rx_buffer
00000002 B selectedAxis
00000002 B selectedAxisName
00000022 B Serial
00000001 b timer0_fract
00000004 B timer0_millis
00000004 B timer0_overflow_count
00000004 B timeStamp
00000004 B timeToMoveToEndMillis
00000066 B tx_buffer
00000008 d motorStatesMosfetHBridge_DoublePrecision
00000004 d motorStatesMosfetHBridge_FullPower
00000004 d motorStatesMosfetHBridge_HalfPower
00000056 T AdvButton::initialize(DigitalInputPin*, bool, unsigned int)
00000052 T AdvButton::reset()
00000252 T AdvButton::update()
00000008 T atof
00000060 T atoi
00000078 T atol
00000070 T attachInterrupt
00000010 T BLINK1
00000014 T BLINK2
00000006 T BLINK3
00000006 T BLINK_FAST
00000176 T BlinkingLed::getNextDelay()
00000028 T BlinkingLed::initialize(DigitalOutputPin*)
00000074 T BlinkingLed::playBlink(unsigned int const*, short)
00000164 T BlinkingLed::update()
00000006 T BLINK_MEDIUM
00000002 T BLINK_OFF
00000004 T BLINK_ON
00000006 T BLINK_SLOW
00000062 T Button::initialize(DigitalInputPin*, unsigned int)
00000056 T Button::reset()
00000190 T Button::update()
00000008 T __cmpsf2
00000036 T DigitalInputArduinoPin::getState()
00000128 T DigitalInputArduinoPin::initialize(unsigned char, bool)
00000092 T DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)
00000278 T DigitalInputShiftRegister_74HC166::update()
00000032 T DigitalInputShiftRegister::createPinHandler(unsigned char)
00000064 T DigitalInputShiftRegisterPin::getState()
00000006 T DigitalOutputArduinoPin::getState()
00000096 T DigitalOutputArduinoPin::initialize(unsigned char, bool)
00000042 T DigitalOutputArduinoPin::setState(bool)
00000032 T DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)
00000154 T DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)
00000070 T DigitalOutputShiftRegister_74HC595_Pin::getState()
00000016 T DigitalOutputShiftRegister_74HC595_Pin::setState(bool)
00000138 T DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)
00000762 T DigitalOutputShiftRegister_74HC595::update()
00000020 T digital_pin_to_bit_mask_PGM
00000020 T digital_pin_to_port_PGM
00000020 T digital_pin_to_timer_PGM
00000116 t doAlterDelayBetweenSteps()
00000025 t doAlterDelayBetweenSteps()::__c
00000003 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000021 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000050 t doAxis(char const*, char*, StepperMotorAxis&)::__c
00000658 t doAxis(char const*, char*, StepperMotorAxis&)
00000120 t doGotoStep()
00000013 t doGotoStep()::__c
00000660 t doMoveForthAndBackAtSpeed()
00000016 t doMoveForthAndBackAtSpeed()::__c
00000322 t doStepTicking()
00000010 t doStepTicking()::__c
00000013 t doStepTicking()::__c
00000006 T exit
00000010 T __fixsfsi
00000088 T __fixunssfsi
00000122 T __floatunsisf
00000072 T __fp_cmp
00000012 T __fp_inf
00000006 T __fp_nan
00000014 T __fp_pscA
00000014 T __fp_pscB
00000034 T __fp_round
00000068 T __fp_split3
00000014 T __fp_zero
00000132 t global constructors keyed to rx_buffer
00000160 t global constructors keyed to repRapMode
00000040 T HardwareSerial::available()
00000204 T HardwareSerial::begin(long)
00000020 T HardwareSerial::flush()
00000046 T HardwareSerial::peek()
00000058 T HardwareSerial::read()
00000090 T HardwareSerial::write(unsigned char)
00000845 t helpMessage
00000118 T init
00000014 T main
00000076 T micros
00000028 T millis
00000004 T __mulsf3
00000194 T __mulsf3x
00000007 t pgmAxisNameX
00000007 t pgmAxisNameY
00000007 t pgmAxisNameZ
00000005 t pgm_Down
00000003 t pgm_Up
00000076 T pinMode
00000010 T port_to_input_PGM
00000010 T port_to_mode_PGM
00000010 T port_to_output_PGM
00000014 t printHelp()
00000050 T Print::pgm_print(char const*)
00000022 T Print::pgm_println(char const*)
00000006 T Print::print(char const*)
00000036 T Print::print(char, int)
00000038 T Print::print(int, int)
00000046 T Print::println()
00000022 T Print::println(char const*)
00000052 T Print::println(char, int)
00000054 T Print::println(int, int)
00000022 T Print::println(long, int)
00000022 T Print::println(unsigned long, int)
00000050 T Print::println(unsigned int, int)
00000108 T Print::print(long, int)
00000304 T Print::printNumber(unsigned long, unsigned char)
00000030 T Print::print(unsigned long, int)
00000048 T Print::write(char const*)
00000003 t pstr_inf
00000005 t pstr_inity
00000003 t pstr_nan
00000024 t pwr_m10
00000024 t pwr_p10
00000234 T RepRapPCB::doInitializePosition()
00000108 T RepRapPCB::doInitializePositionXY()
00000934 T RepRapPCB::initialize()
00001094 T RepRapPCBTest::loop()
00000016 t RepRapPCBTest::loop()::__c
00000228 T RepRapPCBTest::setup()
00000012 t RepRapPCBTest::setup()::__c
00000025 t RepRapPCBTest::setup()::__c
00000094 T RepRapPCB::update()
00000106 T RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)
00000372 T RotaryEncoderAcceleration::update()
00000050 T RotaryEncoderState::setMinMax(long, long)
00000226 T RotaryEncoderState::setValue_unsafe(long)
00000060 T SerialReader::initialize(long, int, char*)
00000028 T SerialReader::readln()
00000140 T SerialReader::update()
00000007 t showError(char const*)::__c
00000052 t showError(char const*)
00000042 T StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)
00000114 T StateLed::setState(short)
00000010 t states
00000294 T StepperMotorAxis::debugPrint()
00000011 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000017 t StepperMotorAxis::debugPrint()::__c
00000027 t StepperMotorAxis::debugPrint()::__c
00000088 T StepperMotorAxis::doDetermineAvailableSteps()
00000072 T StepperMotorAxis::doInitializePosition()
00000064 T StepperMotorAxis::getAbsolutePositionMicroM()
00000010 T StepperMotorAxis::initializePosition()
00000068 T StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)
00000088 T StepperMotorAxis::moveToPositionMicroMFast(long)
00000094 T StepperMotorAxis::moveToPositionMicroM(long, unsigned long)
00000016 T StepperMotorAxis::stop()
00000048 T StepperMotorAxis::update()
00000322 T StepperMotorControlWithButtons::debugPrint()
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000017 t StepperMotorControlWithButtons::debugPrint()::__c
00000086 T StepperMotorControlWithButtons::gotoStep(long)
00000168 T StepperMotorControlWithButtons::moveTo(long, unsigned long)
00000052 T StepperMotorControlWithButtons::rotate(bool)
00000350 T StepperMotorControlWithButtons::update()
00000070 T StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)
00000152 T StepperMotorMosfetHBridge::setState(unsigned char)
00000108 T StepperMotorMosfetHBridge::step(bool)
00000008 T StepperMotorMosfetHBridge::stop()
00000048 t stop()
00000048 T strncasecmp_P
00000704 T strtod
00000068 T TicksPerSecond::getIntTPS_unsafe()
00000116 T TicksPerSecond::initialize(unsigned int)
00000070 T TicksPerSecond::tick()
00000216 T TicksPerSecond::update()
00000010 t UpdateRotor()
00000090 T __vector_1
00000144 T __vector_16
00000078 T __vector_18
00000092 T __vector_19
00000090 T __vector_2
00000006 V vtable for DigitalInputArduinoPin
00000006 V vtable for DigitalInputShiftRegisterPin
00000008 V vtable for DigitalOutputArduinoPin
00000008 V vtable for DigitalOutputShiftRegister_74HC595_Pin
00000008 V vtable for StepperMotorMosfetHBridge
00000014 V vtable for HardwareSerial
00000074 W StepperMotorAxis::speedToDelayBetweenSteps(unsigned int)
...
...

ArduinoProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000045de  00004672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000318  008000a4  008000a4  000046b6  2**0
                  ALLOC
  3 .stab         00004278  00000000  00000000  000046b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011de  00000000  00000000  00008930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 03 	jmp	0x66e	; 0x66e <__ctors_end>
       4:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__vector_1>
       8:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__vector_2>
       c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      10:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      14:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      18:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      1c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      20:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      24:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      28:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      2c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      30:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      34:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      38:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      3c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      40:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_16>
      44:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      48:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__vector_18>
      4c:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__vector_19>
      50:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>

00000054 <pgmAxisNameX>:
      54:	58 20 61 78 69 73 00                                X axis.

0000005b <pgmAxisNameY>:
      5b:	59 20 61 78 69 73 00                                Y axis.

00000062 <pgmAxisNameZ>:
      62:	5a 20 61 78 69 73 00                                Z axis.

00000069 <RepRapPCBTest::loop()::__c>:
      69:	69 6e 76 61 6c 69 64 20 63 6f 6d 6d 61 6e 64 00     invalid command.

00000079 <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      79:	6f 6b 00                                            ok.

0000007c <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      7c:	69 6e 76 61 6c 69 64 20 61 78 69 73 20 63 6f 6d     invalid axis com
      8c:	6d 61 6e 64 00                                      mand.

00000091 <doAxis(char const*, char*, StepperMotorAxis&)::__c>:
      91:	6d 61 78 53 74 65 70 09 6d 69 6e 53 74 65 70 09     maxStep.minStep.
      a1:	74 69 6d 65 54 6f 45 6e 64 4d 69 6c 6c 69 73 09     timeToEndMillis.
      b1:	74 69 6d 65 54 6f 53 74 61 72 74 4d 69 6c 6c 69     timeToStartMilli
      c1:	73 00                                               s.

000000c3 <showError(char const*)::__c>:
      c3:	45 72 72 6f 72 20 00                                Error .

000000ca <doAlterDelayBetweenSteps()::__c>:
      ca:	3a 20 64 65 6c 61 79 20 62 65 74 77 65 65 6e 20     : delay between 
      da:	73 74 65 70 73 20 3d 20 00                          steps = .

000000e3 <doGotoStep()::__c>:
      e3:	3a 20 67 6f 74 6f 20 73 74 65 70 20 00              : goto step .

000000f0 <doMoveForthAndBackAtSpeed()::__c>:
      f0:	3a 20 73 70 65 65 64 20 6d 6d 2f 6d 69 6e 20 00     : speed mm/min .

00000100 <doStepTicking()::__c>:
     100:	54 69 63 6b 20 64 65 6c 61 79 3a 20 00              Tick delay: .

0000010d <doStepTicking()::__c>:
     10d:	44 65 6c 61 79 20 69 73 20 00                       Delay is .

00000117 <helpMessage>:
     117:	43 6f 6d 6d 61 6e 64 20 66 6f 72 6d 61 74 3a 20     Command format: 
     127:	3c 63 6f 6d 6d 61 6e 64 3e 3c 73 75 62 2d 63 6f     <command><sub-co
     137:	6d 6d 61 6e 64 3e 5b 70 61 72 61 6d 65 74 65 72     mmand>[parameter
     147:	5d 3c 70 72 65 73 73 20 65 6e 74 65 72 3e 0a 57     ]<press enter>.W
     157:	68 65 72 65 3a 0a 3c 63 6f 6d 6d 61 6e 64 3e 0a     here:.<command>.
     167:	20 20 78 2c 20 79 2c 20 7a 20 2d 20 75 73 65 20       x, y, z - use 
     177:	61 78 69 73 20 78 2c 79 20 6f 72 20 7a 2e 20 53     axis x,y or z. S
     187:	65 65 20 61 78 69 73 20 63 6f 6d 6d 61 6e 64 73     ee axis commands
     197:	0a 20 20 61 20 2d 20 41 6c 6c 20 28 78 2c 79 2c     .  a - All (x,y,
     1a7:	7a 29 20 61 78 69 73 0a 20 20 73 20 2d 20 53 74     z) axis.  s - St
     1b7:	6f 70 20 61 6c 6c 20 6d 6f 74 6f 72 73 0a 20 20     op all motors.  
     1c7:	69 20 2d 20 49 6e 69 74 69 61 6c 69 7a 65 20 61     i - Initialize a
     1d7:	6c 6c 20 6d 6f 74 6f 72 73 0a 20 20 68 20 2d 20     ll motors.  h - 
     1e7:	70 72 69 6e 74 20 74 68 69 73 20 48 65 6c 70 0a     print this Help.
     1f7:	3c 61 78 69 73 20 63 6f 6d 6d 61 6e 64 73 3e 0a     <axis commands>.
     207:	20 20 73 20 2d 20 67 6f 74 6f 20 53 74 61 72 74       s - goto Start
     217:	20 70 6f 73 69 74 69 6f 6e 0a 20 20 65 20 2d 20      position.  e - 
     227:	67 6f 74 6f 20 45 6e 64 20 70 6f 73 69 74 69 6f     goto End positio
     237:	6e 0a 20 20 64 20 2d 20 64 6f 20 44 65 74 65 72     n.  d - do Deter
     247:	6d 69 6e 65 20 61 76 61 69 6c 61 62 6c 65 20 73     mine available s
     257:	74 65 70 73 0a 20 20 68 20 2d 20 67 6f 74 6f 20     teps.  h - goto 
     267:	48 6f 6d 65 20 70 6f 73 69 74 69 6f 6e 0a 20 20     Home position.  
     277:	70 20 2d 20 50 72 69 6e 74 20 61 78 69 73 20 73     p - Print axis s
     287:	74 61 74 75 73 0a 20 20 67 20 2d 20 47 6f 74 6f     tatus.  g - Goto
     297:	20 73 74 65 70 20 28 70 61 72 61 6d 65 74 65 72      step (parameter
     2a7:	20 6c 6f 6e 67 20 69 6e 74 29 0a 20 20 6d 20 2d      long int).  m -
     2b7:	20 4d 6f 76 65 20 74 6f 20 70 6f 73 69 74 69 6f      Move to positio
     2c7:	6e 20 28 70 61 72 61 6d 65 74 65 72 20 66 6c 6f     n (parameter flo
     2d7:	61 74 20 2d 20 61 62 73 6f 6c 75 74 65 20 70 6f     at - absolute po
     2e7:	73 69 74 69 6f 6e 20 69 6e 20 6d 69 6c 6c 69 6d     sition in millim
     2f7:	65 74 65 72 73 29 0a 20 20 79 20 2d 20 73 65 74     eters).  y - set
     307:	20 64 65 6c 61 59 20 62 65 74 77 65 65 6e 20 73      delaY between s
     317:	74 65 70 73 20 61 74 20 6d 61 78 69 6d 75 6d 20     teps at maximum 
     327:	73 70 65 65 64 20 28 70 61 72 61 6d 65 74 65 72     speed (parameter
     337:	20 69 6e 74 20 2d 20 64 65 6c 61 79 20 6d 69 63      int - delay mic
     347:	72 6f 73 65 63 6f 6e 64 73 29 0a 20 20 71 20 2d     roseconds).  q -
     357:	20 73 65 74 20 73 70 65 65 64 20 74 6f 20 6d 6f      set speed to mo
     367:	76 65 20 74 68 65 20 61 78 69 73 20 66 72 6f 6d     ve the axis from
     377:	20 73 74 61 72 74 20 74 6f 20 65 6e 64 20 28 70      start to end (p
     387:	61 72 61 6d 65 74 65 72 20 6c 6f 6e 67 20 2d 20     arameter long - 
     397:	73 70 65 65 64 20 69 6e 20 6d 6d 2f 6d 69 6e 29     speed in mm/min)
     3a7:	0a 2d 2d 20 73 65 74 20 74 68 65 20 72 6f 74 61     .-- set the rota
     3b7:	72 79 20 65 6e 63 6f 64 65 72 20 74 6f 20 63 6f     ry encoder to co
     3c7:	6e 74 72 6f 6c 20 61 20 76 61 6c 75 65 2c 20 6f     ntrol a value, o
     3d7:	6e 6c 79 20 6f 6e 65 20 61 78 69 73 20 61 74 20     nly one axis at 
     3e7:	61 20 74 69 6d 65 2c 20 6c 6f 6e 67 20 63 6c 69     a time, long cli
     3f7:	63 6b 20 74 6f 20 74 75 72 6e 20 6f 66 66 0a 20     ck to turn off. 
     407:	20 47 20 2d 20 47 6f 74 6f 20 73 74 65 70 0a 20      G - Goto step. 
     417:	20 59 20 2d 20 64 65 6c 61 59 20 62 65 74 77 65      Y - delaY betwe
     427:	65 6e 20 73 74 65 70 73 0a 20 20 51 20 2d 20 73     en steps.  Q - s
     437:	65 74 20 73 70 65 65 64 20 74 6f 20 6d 6f 76 65     et speed to move
     447:	20 74 68 65 20 61 78 69 73 20 66 72 6f 6d 20 73      the axis from s
     457:	74 61 72 74 20 74 6f 20 65 6e 64 0a 00              tart to end..

00000464 <states>:
     464:	93 04 99 04 a5 04 9f 04 99 04                       ..........

0000046e <RepRapPCBTest::setup()::__c>:
     46e:	50 72 65 73 73 20 74 68 65 20 62 75 74 74 6f 6e     Press the button
     47e:	20 74 6f 20 73 74 6f 70 00                           to stop.

00000487 <RepRapPCBTest::setup()::__c>:
     487:	49 6e 69 74 69 61 6c 69 7a 65 64 00                 Initialized.

00000493 <BLINK_SLOW>:
     493:	f4 01 f4 01 00 00                                   ......

00000499 <BLINK_MEDIUM>:
     499:	fa 00 fa 00 00 00                                   ......

0000049f <BLINK_FAST>:
     49f:	32 00 32 00 00 00                                   2.2...

000004a5 <BLINK_OFF>:
	...

000004a7 <BLINK_ON>:
     4a7:	32 00 00 00                                         2...

000004ab <BLINK1>:
     4ab:	32 00 32 00 fa 00 fa 00 00 00                       2.2.......

000004b5 <BLINK2>:
     4b5:	32 00 fa 00 32 00 fa 00 fa 00 fa 00 00 00           2...2.........

000004c3 <BLINK3>:
     4c3:	32 00 f4 01 00 00                                   2.....

000004c9 <StepperMotorAxis::debugPrint()::__c>:
     4c9:	68 6f 6d 65 20 70 6f 73 69 74 69 6f 6e 3a 20 20     home position:  
	...

000004da <StepperMotorAxis::debugPrint()::__c>:
     4da:	61 78 69 73 20 72 65 73 6f 6c 75 74 69 6f 6e 3a     axis resolution:
	...

000004eb <StepperMotorAxis::debugPrint()::__c>:
     4eb:	64 65 6c 61 79 20 62 2f 6e 20 73 74 65 70 73 40     delay b/n steps@
     4fb:	6d 61 78 20 73 70 65 65 64 3a 00                    max speed:.

00000506 <StepperMotorAxis::debugPrint()::__c>:
     506:	73 70 65 65 64 20 28 51 29 3a 20 20 20 20 20 20     speed (Q):      
	...

00000517 <StepperMotorAxis::debugPrint()::__c>:
     517:	61 62 73 20 70 6f 73 69 74 69 6f 6e 3a 20 20 20     abs position:   
	...

00000528 <StepperMotorAxis::debugPrint()::__c>:
     528:	41 58 49 53 20 6d 6f 64 65 3a 20 20 20 20 20 20     AXIS mode:      
	...

00000539 <StepperMotorAxis::debugPrint()::__c>:
     539:	41 58 49 53 20 73 74 61 74 65 00                    AXIS state.

00000544 <pgm_Up>:
     544:	55 70 00                                            Up.

00000547 <pgm_Down>:
     547:	44 6f 77 6e 00                                      Down.

0000054c <StepperMotorControlWithButtons::debugPrint()::__c>:
     54c:	64 65 6c 61 79 20 62 2f 6e 20 73 74 65 70 73 3a     delay b/n steps:
	...

0000055d <StepperMotorControlWithButtons::debugPrint()::__c>:
     55d:	6c 61 73 74 54 69 6d 65 73 74 4d 69 63 72 6f 3a     lastTimestMicro:
	...

0000056e <StepperMotorControlWithButtons::debugPrint()::__c>:
     56e:	6d 6f 76 65 6d 65 6e 74 20 6d 6f 64 65 3a 20 20     movement mode:  
	...

0000057f <StepperMotorControlWithButtons::debugPrint()::__c>:
     57f:	65 6e 64 20 62 75 74 74 6f 6e 3a 20 20 20 20 20     end button:     
	...

00000590 <StepperMotorControlWithButtons::debugPrint()::__c>:
     590:	73 74 61 72 74 20 62 75 74 74 6f 6e 3a 20 20 20     start button:   
	...

000005a1 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5a1:	63 75 72 20 73 74 65 70 3a 20 20 20 20 20 20 20     cur step:       
	...

000005b2 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5b2:	72 65 6d 61 69 6e 69 6e 67 20 73 74 65 70 73 3a     remaining steps:
	...

000005c3 <StepperMotorControlWithButtons::debugPrint()::__c>:
     5c3:	69 73 4d 6f 76 69 6e 67 3a 20 20 20 20 20 20 20     isMoving:       
	...

000005d4 <port_to_mode_PGM>:
     5d4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005de <port_to_output_PGM>:
     5de:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005e8 <port_to_input_PGM>:
     5e8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000005f2 <digital_pin_to_port_PGM>:
     5f2:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     602:	03 03 03 03                                         ....

00000606 <digital_pin_to_bit_mask_PGM>:
     606:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     616:	04 08 10 20                                         ... 

0000061a <digital_pin_to_timer_PGM>:
     61a:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     62a:	00 00 00 00                                         ....

0000062e <pstr_inf>:
     62e:	49 4e 46                                            INF

00000631 <pstr_inity>:
     631:	49 4e 49 54 59                                      INITY

00000636 <pstr_nan>:
     636:	4e 41 4e                                            NAN

00000639 <pwr_m10>:
     639:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     649:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000651 <pwr_p10>:
     651:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     661:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000066a <__ctors_start>:
     66a:	44 04       	cpc	r4, r4
     66c:	9e 19       	sub	r25, r14

0000066e <__ctors_end>:
     66e:	11 24       	eor	r1, r1
     670:	1f be       	out	0x3f, r1	; 63
     672:	cf e5       	ldi	r28, 0x5F	; 95
     674:	d4 e0       	ldi	r29, 0x04	; 4
     676:	de bf       	out	0x3e, r29	; 62
     678:	cd bf       	out	0x3d, r28	; 61

0000067a <__do_copy_data>:
     67a:	10 e0       	ldi	r17, 0x00	; 0
     67c:	a0 e6       	ldi	r26, 0x60	; 96
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	ee ed       	ldi	r30, 0xDE	; 222
     682:	f5 e4       	ldi	r31, 0x45	; 69
     684:	02 c0       	rjmp	.+4      	; 0x68a <.do_copy_data_start>

00000686 <.do_copy_data_loop>:
     686:	05 90       	lpm	r0, Z+
     688:	0d 92       	st	X+, r0

0000068a <.do_copy_data_start>:
     68a:	a4 3a       	cpi	r26, 0xA4	; 164
     68c:	b1 07       	cpc	r27, r17
     68e:	d9 f7       	brne	.-10     	; 0x686 <.do_copy_data_loop>

00000690 <__do_clear_bss>:
     690:	13 e0       	ldi	r17, 0x03	; 3
     692:	a4 ea       	ldi	r26, 0xA4	; 164
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	01 c0       	rjmp	.+2      	; 0x69a <.do_clear_bss_start>

00000698 <.do_clear_bss_loop>:
     698:	1d 92       	st	X+, r1

0000069a <.do_clear_bss_start>:
     69a:	ac 3b       	cpi	r26, 0xBC	; 188
     69c:	b1 07       	cpc	r27, r17
     69e:	e1 f7       	brne	.-8      	; 0x698 <.do_clear_bss_loop>

000006a0 <__do_global_ctors>:
     6a0:	16 e0       	ldi	r17, 0x06	; 6
     6a2:	ce e6       	ldi	r28, 0x6E	; 110
     6a4:	d6 e0       	ldi	r29, 0x06	; 6
     6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <.do_global_ctors_start>

000006a8 <.do_global_ctors_loop>:
     6a8:	22 97       	sbiw	r28, 0x02	; 2
     6aa:	fe 01       	movw	r30, r28
     6ac:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <__tablejump__>

000006b0 <.do_global_ctors_start>:
     6b0:	ca 36       	cpi	r28, 0x6A	; 106
     6b2:	d1 07       	cpc	r29, r17
     6b4:	c9 f7       	brne	.-14     	; 0x6a8 <.do_global_ctors_loop>
     6b6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <main>
     6ba:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <exit>

000006be <__bad_interrupt>:
     6be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006c2 <main>:
     6c2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <init>
     6c6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <RepRapPCBTest::setup()>
     6ca:	0e 94 77 08 	call	0x10ee	; 0x10ee <RepRapPCBTest::loop()>
     6ce:	fd cf       	rjmp	.-6      	; 0x6ca <main+0x8>

000006d0 <__vector_16>:
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	2f 93       	push	r18
     6dc:	3f 93       	push	r19
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
     6e6:	80 91 a8 00 	lds	r24, 0x00A8
     6ea:	90 91 a9 00 	lds	r25, 0x00A9
     6ee:	a0 91 aa 00 	lds	r26, 0x00AA
     6f2:	b0 91 ab 00 	lds	r27, 0x00AB
     6f6:	30 91 ac 00 	lds	r19, 0x00AC
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	a1 1d       	adc	r26, r1
     6fe:	b1 1d       	adc	r27, r1
     700:	23 2f       	mov	r18, r19
     702:	2d 5f       	subi	r18, 0xFD	; 253
     704:	2d 37       	cpi	r18, 0x7D	; 125
     706:	20 f0       	brcs	.+8      	; 0x710 <__vector_16+0x40>
     708:	2d 57       	subi	r18, 0x7D	; 125
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	a1 1d       	adc	r26, r1
     70e:	b1 1d       	adc	r27, r1
     710:	20 93 ac 00 	sts	0x00AC, r18
     714:	80 93 a8 00 	sts	0x00A8, r24
     718:	90 93 a9 00 	sts	0x00A9, r25
     71c:	a0 93 aa 00 	sts	0x00AA, r26
     720:	b0 93 ab 00 	sts	0x00AB, r27
     724:	80 91 a4 00 	lds	r24, 0x00A4
     728:	90 91 a5 00 	lds	r25, 0x00A5
     72c:	a0 91 a6 00 	lds	r26, 0x00A6
     730:	b0 91 a7 00 	lds	r27, 0x00A7
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	a1 1d       	adc	r26, r1
     738:	b1 1d       	adc	r27, r1
     73a:	80 93 a4 00 	sts	0x00A4, r24
     73e:	90 93 a5 00 	sts	0x00A5, r25
     742:	a0 93 a6 00 	sts	0x00A6, r26
     746:	b0 93 a7 00 	sts	0x00A7, r27
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <millis>:
     760:	8f b7       	in	r24, 0x3f	; 63
     762:	f8 94       	cli
     764:	20 91 a8 00 	lds	r18, 0x00A8
     768:	30 91 a9 00 	lds	r19, 0x00A9
     76c:	40 91 aa 00 	lds	r20, 0x00AA
     770:	50 91 ab 00 	lds	r21, 0x00AB
     774:	8f bf       	out	0x3f, r24	; 63
     776:	b9 01       	movw	r22, r18
     778:	ca 01       	movw	r24, r20
     77a:	08 95       	ret

0000077c <micros>:
     77c:	9f b7       	in	r25, 0x3f	; 63
     77e:	f8 94       	cli
     780:	20 91 a4 00 	lds	r18, 0x00A4
     784:	30 91 a5 00 	lds	r19, 0x00A5
     788:	40 91 a6 00 	lds	r20, 0x00A6
     78c:	50 91 a7 00 	lds	r21, 0x00A7
     790:	86 b5       	in	r24, 0x26	; 38
     792:	a8 9b       	sbis	0x15, 0	; 21
     794:	06 c0       	rjmp	.+12     	; 0x7a2 <micros+0x26>
     796:	8f 3f       	cpi	r24, 0xFF	; 255
     798:	21 f0       	breq	.+8      	; 0x7a2 <micros+0x26>
     79a:	2f 5f       	subi	r18, 0xFF	; 255
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	4f 4f       	sbci	r20, 0xFF	; 255
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	9f bf       	out	0x3f, r25	; 63
     7a4:	54 2f       	mov	r21, r20
     7a6:	43 2f       	mov	r20, r19
     7a8:	32 2f       	mov	r19, r18
     7aa:	22 27       	eor	r18, r18
     7ac:	28 0f       	add	r18, r24
     7ae:	31 1d       	adc	r19, r1
     7b0:	41 1d       	adc	r20, r1
     7b2:	51 1d       	adc	r21, r1
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	22 0f       	add	r18, r18
     7b8:	33 1f       	adc	r19, r19
     7ba:	44 1f       	adc	r20, r20
     7bc:	55 1f       	adc	r21, r21
     7be:	8a 95       	dec	r24
     7c0:	d1 f7       	brne	.-12     	; 0x7b6 <micros+0x3a>
     7c2:	b9 01       	movw	r22, r18
     7c4:	ca 01       	movw	r24, r20
     7c6:	08 95       	ret

000007c8 <init>:
     7c8:	78 94       	sei
     7ca:	84 b5       	in	r24, 0x24	; 36
     7cc:	82 60       	ori	r24, 0x02	; 2
     7ce:	84 bd       	out	0x24, r24	; 36
     7d0:	84 b5       	in	r24, 0x24	; 36
     7d2:	81 60       	ori	r24, 0x01	; 1
     7d4:	84 bd       	out	0x24, r24	; 36
     7d6:	85 b5       	in	r24, 0x25	; 37
     7d8:	82 60       	ori	r24, 0x02	; 2
     7da:	85 bd       	out	0x25, r24	; 37
     7dc:	85 b5       	in	r24, 0x25	; 37
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	85 bd       	out	0x25, r24	; 37
     7e2:	ee e6       	ldi	r30, 0x6E	; 110
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	81 60       	ori	r24, 0x01	; 1
     7ea:	80 83       	st	Z, r24
     7ec:	e1 e8       	ldi	r30, 0x81	; 129
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	10 82       	st	Z, r1
     7f2:	80 81       	ld	r24, Z
     7f4:	82 60       	ori	r24, 0x02	; 2
     7f6:	80 83       	st	Z, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	81 60       	ori	r24, 0x01	; 1
     7fc:	80 83       	st	Z, r24
     7fe:	e0 e8       	ldi	r30, 0x80	; 128
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	81 60       	ori	r24, 0x01	; 1
     806:	80 83       	st	Z, r24
     808:	e1 eb       	ldi	r30, 0xB1	; 177
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	84 60       	ori	r24, 0x04	; 4
     810:	80 83       	st	Z, r24
     812:	e0 eb       	ldi	r30, 0xB0	; 176
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	81 60       	ori	r24, 0x01	; 1
     81a:	80 83       	st	Z, r24
     81c:	ea e7       	ldi	r30, 0x7A	; 122
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	84 60       	ori	r24, 0x04	; 4
     824:	80 83       	st	Z, r24
     826:	80 81       	ld	r24, Z
     828:	82 60       	ori	r24, 0x02	; 2
     82a:	80 83       	st	Z, r24
     82c:	80 81       	ld	r24, Z
     82e:	81 60       	ori	r24, 0x01	; 1
     830:	80 83       	st	Z, r24
     832:	80 81       	ld	r24, Z
     834:	80 68       	ori	r24, 0x80	; 128
     836:	80 83       	st	Z, r24
     838:	10 92 c1 00 	sts	0x00C1, r1
     83c:	08 95       	ret

0000083e <StepperMotorAxis::speedToDelayBetweenSteps(unsigned int)>:
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	7b 01       	movw	r14, r22
     848:	fc 01       	movw	r30, r24
     84a:	22 81       	ldd	r18, Z+2	; 0x02
     84c:	33 81       	ldd	r19, Z+3	; 0x03
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	77 e8       	ldi	r23, 0x87	; 135
     856:	83 e9       	ldi	r24, 0x93	; 147
     858:	93 e0       	ldi	r25, 0x03	; 3
     85a:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     85e:	ca 01       	movw	r24, r20
     860:	b9 01       	movw	r22, r18
     862:	24 e6       	ldi	r18, 0x64	; 100
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     86e:	00 e0       	ldi	r16, 0x00	; 0
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	a8 01       	movw	r20, r16
     874:	97 01       	movw	r18, r14
     876:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     87a:	ca 01       	movw	r24, r20
     87c:	b9 01       	movw	r22, r18
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	08 95       	ret

00000888 <global constructors keyed to repRapMode>:
     888:	84 e7       	ldi	r24, 0x74	; 116
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	90 93 c0 00 	sts	0x00C0, r25
     890:	80 93 bf 00 	sts	0x00BF, r24
     894:	90 93 c6 00 	sts	0x00C6, r25
     898:	80 93 c5 00 	sts	0x00C5, r24
     89c:	90 93 cc 00 	sts	0x00CC, r25
     8a0:	80 93 cb 00 	sts	0x00CB, r24
     8a4:	90 93 d2 00 	sts	0x00D2, r25
     8a8:	80 93 d1 00 	sts	0x00D1, r24
     8ac:	90 93 d8 00 	sts	0x00D8, r25
     8b0:	80 93 d7 00 	sts	0x00D7, r24
     8b4:	8c e7       	ldi	r24, 0x7C	; 124
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	90 93 de 00 	sts	0x00DE, r25
     8bc:	80 93 dd 00 	sts	0x00DD, r24
     8c0:	e4 ee       	ldi	r30, 0xE4	; 228
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	86 e6       	ldi	r24, 0x66	; 102
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	91 83       	std	Z+1, r25	; 0x01
     8ca:	80 83       	st	Z, r24
     8cc:	35 96       	adiw	r30, 0x05	; 5
     8ce:	21 e0       	ldi	r18, 0x01	; 1
     8d0:	e9 33       	cpi	r30, 0x39	; 57
     8d2:	f2 07       	cpc	r31, r18
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <global constructors keyed to repRapMode+0x40>
     8d6:	3f 96       	adiw	r30, 0x0f	; 15
     8d8:	8e e6       	ldi	r24, 0x6E	; 110
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	91 83       	std	Z+1, r25	; 0x01
     8de:	80 83       	st	Z, r24
     8e0:	35 96       	adiw	r30, 0x05	; 5
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	e5 37       	cpi	r30, 0x75	; 117
     8e6:	f2 07       	cpc	r31, r18
     8e8:	c9 f7       	brne	.-14     	; 0x8dc <global constructors keyed to repRapMode+0x54>
     8ea:	82 e8       	ldi	r24, 0x82	; 130
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	92 87       	std	Z+10, r25	; 0x0a
     8f0:	81 87       	std	Z+9, r24	; 0x09
     8f2:	95 8b       	std	Z+21, r25	; 0x15
     8f4:	84 8b       	std	Z+20, r24	; 0x14
     8f6:	90 a3       	std	Z+32, r25	; 0x20
     8f8:	87 8f       	std	Z+31, r24	; 0x1f
     8fa:	93 a7       	std	Z+43, r25	; 0x2b
     8fc:	82 a7       	std	Z+42, r24	; 0x2a
     8fe:	2c e7       	ldi	r18, 0x7C	; 124
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	30 93 29 02 	sts	0x0229, r19
     906:	20 93 28 02 	sts	0x0228, r18
     90a:	84 e7       	ldi	r24, 0x74	; 116
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	90 93 2e 02 	sts	0x022E, r25
     912:	80 93 2d 02 	sts	0x022D, r24
     916:	30 93 34 02 	sts	0x0234, r19
     91a:	20 93 33 02 	sts	0x0233, r18
     91e:	30 93 39 02 	sts	0x0239, r19
     922:	20 93 38 02 	sts	0x0238, r18
     926:	08 95       	ret

00000928 <printHelp()>:
     928:	80 ea       	ldi	r24, 0xA0	; 160
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	67 e1       	ldi	r22, 0x17	; 23
     92e:	71 e0       	ldi	r23, 0x01	; 1
     930:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
     934:	08 95       	ret

00000936 <showError(char const*)>:
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	7c 01       	movw	r14, r24
     940:	00 ea       	ldi	r16, 0xA0	; 160
     942:	13 e0       	ldi	r17, 0x03	; 3
     944:	c8 01       	movw	r24, r16
     946:	63 ec       	ldi	r22, 0xC3	; 195
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
     94e:	c8 01       	movw	r24, r16
     950:	b7 01       	movw	r22, r14
     952:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
     956:	c8 01       	movw	r24, r16
     958:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
     95c:	0e 94 94 04 	call	0x928	; 0x928 <printHelp()>
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	08 95       	ret

0000096a <doAxis(char const*, char*, StepperMotorAxis&)>:
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	8c 01       	movw	r16, r24
     978:	7b 01       	movw	r14, r22
     97a:	ea 01       	movw	r28, r20
     97c:	80 ea       	ldi	r24, 0xA0	; 160
     97e:	93 e0       	ldi	r25, 0x03	; 3
     980:	b8 01       	movw	r22, r16
     982:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
     986:	10 93 b0 00 	sts	0x00B0, r17
     98a:	00 93 af 00 	sts	0x00AF, r16
     98e:	d0 93 b2 00 	sts	0x00B2, r29
     992:	c0 93 b1 00 	sts	0x00B1, r28
     996:	c7 01       	movw	r24, r14
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	f7 01       	movw	r30, r14
     99c:	20 81       	ld	r18, Z
     99e:	27 36       	cpi	r18, 0x67	; 103
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <doAxis(char const*, char*, StepperMotorAxis&)+0x3a>
     9a2:	4a c0       	rjmp	.+148    	; 0xa38 <doAxis(char const*, char*, StepperMotorAxis&)+0xce>
     9a4:	28 36       	cpi	r18, 0x68	; 104
     9a6:	a0 f4       	brcc	.+40     	; 0x9d0 <doAxis(char const*, char*, StepperMotorAxis&)+0x66>
     9a8:	24 35       	cpi	r18, 0x54	; 84
     9aa:	09 f4       	brne	.+2      	; 0x9ae <doAxis(char const*, char*, StepperMotorAxis&)+0x44>
     9ac:	e7 c0       	rjmp	.+462    	; 0xb7c <doAxis(char const*, char*, StepperMotorAxis&)+0x212>
     9ae:	25 35       	cpi	r18, 0x55	; 85
     9b0:	38 f4       	brcc	.+14     	; 0x9c0 <doAxis(char const*, char*, StepperMotorAxis&)+0x56>
     9b2:	27 34       	cpi	r18, 0x47	; 71
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <doAxis(char const*, char*, StepperMotorAxis&)+0x4e>
     9b6:	c1 c0       	rjmp	.+386    	; 0xb3a <doAxis(char const*, char*, StepperMotorAxis&)+0x1d0>
     9b8:	21 35       	cpi	r18, 0x51	; 81
     9ba:	09 f0       	breq	.+2      	; 0x9be <doAxis(char const*, char*, StepperMotorAxis&)+0x54>
     9bc:	0d c1       	rjmp	.+538    	; 0xbd8 <doAxis(char const*, char*, StepperMotorAxis&)+0x26e>
     9be:	88 c0       	rjmp	.+272    	; 0xad0 <doAxis(char const*, char*, StepperMotorAxis&)+0x166>
     9c0:	24 36       	cpi	r18, 0x64	; 100
     9c2:	19 f1       	breq	.+70     	; 0xa0a <doAxis(char const*, char*, StepperMotorAxis&)+0xa0>
     9c4:	25 36       	cpi	r18, 0x65	; 101
     9c6:	d9 f0       	breq	.+54     	; 0x9fe <doAxis(char const*, char*, StepperMotorAxis&)+0x94>
     9c8:	29 35       	cpi	r18, 0x59	; 89
     9ca:	09 f0       	breq	.+2      	; 0x9ce <doAxis(char const*, char*, StepperMotorAxis&)+0x64>
     9cc:	05 c1       	rjmp	.+522    	; 0xbd8 <doAxis(char const*, char*, StepperMotorAxis&)+0x26e>
     9ce:	58 c0       	rjmp	.+176    	; 0xa80 <doAxis(char const*, char*, StepperMotorAxis&)+0x116>
     9d0:	20 37       	cpi	r18, 0x70	; 112
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <doAxis(char const*, char*, StepperMotorAxis&)+0x6c>
     9d4:	fd c0       	rjmp	.+506    	; 0xbd0 <doAxis(char const*, char*, StepperMotorAxis&)+0x266>
     9d6:	21 37       	cpi	r18, 0x71	; 113
     9d8:	30 f4       	brcc	.+12     	; 0x9e6 <doAxis(char const*, char*, StepperMotorAxis&)+0x7c>
     9da:	28 36       	cpi	r18, 0x68	; 104
     9dc:	01 f1       	breq	.+64     	; 0xa1e <doAxis(char const*, char*, StepperMotorAxis&)+0xb4>
     9de:	2d 36       	cpi	r18, 0x6D	; 109
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <doAxis(char const*, char*, StepperMotorAxis&)+0x7a>
     9e2:	fa c0       	rjmp	.+500    	; 0xbd8 <doAxis(char const*, char*, StepperMotorAxis&)+0x26e>
     9e4:	32 c0       	rjmp	.+100    	; 0xa4a <doAxis(char const*, char*, StepperMotorAxis&)+0xe0>
     9e6:	23 37       	cpi	r18, 0x73	; 115
     9e8:	31 f0       	breq	.+12     	; 0x9f6 <doAxis(char const*, char*, StepperMotorAxis&)+0x8c>
     9ea:	29 37       	cpi	r18, 0x79	; 121
     9ec:	f1 f1       	breq	.+124    	; 0xa6a <doAxis(char const*, char*, StepperMotorAxis&)+0x100>
     9ee:	21 37       	cpi	r18, 0x71	; 113
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <doAxis(char const*, char*, StepperMotorAxis&)+0x8a>
     9f2:	f2 c0       	rjmp	.+484    	; 0xbd8 <doAxis(char const*, char*, StepperMotorAxis&)+0x26e>
     9f4:	62 c0       	rjmp	.+196    	; 0xaba <doAxis(char const*, char*, StepperMotorAxis&)+0x150>
     9f6:	ce 01       	movw	r24, r28
     9f8:	0a 96       	adiw	r24, 0x0a	; 10
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <doAxis(char const*, char*, StepperMotorAxis&)+0x9a>
     9fe:	ce 01       	movw	r24, r28
     a00:	0a 96       	adiw	r24, 0x0a	; 10
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
     a08:	ec c0       	rjmp	.+472    	; 0xbe2 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	80 93 ad 00 	sts	0x00AD, r24
     a10:	80 ea       	ldi	r24, 0xA0	; 160
     a12:	93 e0       	ldi	r25, 0x03	; 3
     a14:	61 e9       	ldi	r22, 0x91	; 145
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
     a1c:	ac c0       	rjmp	.+344    	; 0xb76 <doAxis(char const*, char*, StepperMotorAxis&)+0x20c>
     a1e:	6c 81       	ldd	r22, Y+4	; 0x04
     a20:	7d 81       	ldd	r23, Y+5	; 0x05
     a22:	88 27       	eor	r24, r24
     a24:	77 fd       	sbrc	r23, 7
     a26:	80 95       	com	r24
     a28:	98 2f       	mov	r25, r24
     a2a:	28 ee       	ldi	r18, 0xE8	; 232
     a2c:	33 e0       	ldi	r19, 0x03	; 3
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     a36:	13 c0       	rjmp	.+38     	; 0xa5e <doAxis(char const*, char*, StepperMotorAxis&)+0xf4>
     a38:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <atol>
     a3c:	ab 01       	movw	r20, r22
     a3e:	bc 01       	movw	r22, r24
     a40:	ce 01       	movw	r24, r28
     a42:	0a 96       	adiw	r24, 0x0a	; 10
     a44:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <StepperMotorControlWithButtons::gotoStep(long)>
     a48:	cc c0       	rjmp	.+408    	; 0xbe2 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     a4a:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <atof>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	4a e7       	ldi	r20, 0x7A	; 122
     a54:	54 e4       	ldi	r21, 0x44	; 68
     a56:	0e 94 47 20 	call	0x408e	; 0x408e <__mulsf3>
     a5a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__fixsfsi>
     a5e:	ab 01       	movw	r20, r22
     a60:	bc 01       	movw	r22, r24
     a62:	ce 01       	movw	r24, r28
     a64:	0e 94 03 16 	call	0x2c06	; 0x2c06 <StepperMotorAxis::moveToPositionMicroMFast(long)>
     a68:	bc c0       	rjmp	.+376    	; 0xbe2 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     a6a:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <atol>
     a6e:	6e 83       	std	Y+6, r22	; 0x06
     a70:	7f 83       	std	Y+7, r23	; 0x07
     a72:	88 87       	std	Y+8, r24	; 0x08
     a74:	99 87       	std	Y+9, r25	; 0x09
     a76:	6d 8b       	std	Y+21, r22	; 0x15
     a78:	7e 8b       	std	Y+22, r23	; 0x16
     a7a:	8f 8b       	std	Y+23, r24	; 0x17
     a7c:	98 8f       	std	Y+24, r25	; 0x18
     a7e:	b1 c0       	rjmp	.+354    	; 0xbe2 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     a80:	80 91 7f 02 	lds	r24, 0x027F
     a84:	90 91 80 02 	lds	r25, 0x0280
     a88:	44 e6       	ldi	r20, 0x64	; 100
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	00 e1       	ldi	r16, 0x10	; 16
     a92:	17 e2       	ldi	r17, 0x27	; 39
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <RotaryEncoderState::setMinMax(long, long)>
     a9c:	1f b7       	in	r17, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	4e 81       	ldd	r20, Y+6	; 0x06
     aa2:	5f 81       	ldd	r21, Y+7	; 0x07
     aa4:	68 85       	ldd	r22, Y+8	; 0x08
     aa6:	79 85       	ldd	r23, Y+9	; 0x09
     aa8:	80 91 7f 02 	lds	r24, 0x027F
     aac:	90 91 80 02 	lds	r25, 0x0280
     ab0:	0e 94 09 11 	call	0x2212	; 0x2212 <RotaryEncoderState::setValue_unsafe(long)>
     ab4:	1f bf       	out	0x3f, r17	; 63
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	5c c0       	rjmp	.+184    	; 0xb72 <doAxis(char const*, char*, StepperMotorAxis&)+0x208>
     aba:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <atoi>
     abe:	bc 01       	movw	r22, r24
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 1f 04 	call	0x83e	; 0x83e <StepperMotorAxis::speedToDelayBetweenSteps(unsigned int)>
     ac6:	6d 8b       	std	Y+21, r22	; 0x15
     ac8:	7e 8b       	std	Y+22, r23	; 0x16
     aca:	8f 8b       	std	Y+23, r24	; 0x17
     acc:	98 8f       	std	Y+24, r25	; 0x18
     ace:	33 c0       	rjmp	.+102    	; 0xb36 <doAxis(char const*, char*, StepperMotorAxis&)+0x1cc>
     ad0:	80 91 7f 02 	lds	r24, 0x027F
     ad4:	90 91 80 02 	lds	r25, 0x0280
     ad8:	4e e1       	ldi	r20, 0x1E	; 30
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	00 e7       	ldi	r16, 0x70	; 112
     ae2:	17 e1       	ldi	r17, 0x17	; 23
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <RotaryEncoderState::setMinMax(long, long)>
     aec:	1f b7       	in	r17, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	2a 81       	ldd	r18, Y+2	; 0x02
     af2:	3b 81       	ldd	r19, Y+3	; 0x03
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	77 e8       	ldi	r23, 0x87	; 135
     afc:	83 e9       	ldi	r24, 0x93	; 147
     afe:	93 e0       	ldi	r25, 0x03	; 3
     b00:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     b04:	ca 01       	movw	r24, r20
     b06:	b9 01       	movw	r22, r18
     b08:	24 e6       	ldi	r18, 0x64	; 100
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     b14:	2d 89       	ldd	r18, Y+21	; 0x15
     b16:	3e 89       	ldd	r19, Y+22	; 0x16
     b18:	4f 89       	ldd	r20, Y+23	; 0x17
     b1a:	58 8d       	ldd	r21, Y+24	; 0x18
     b1c:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	80 91 7f 02 	lds	r24, 0x027F
     b28:	90 91 80 02 	lds	r25, 0x0280
     b2c:	ba 01       	movw	r22, r20
     b2e:	a9 01       	movw	r20, r18
     b30:	0e 94 09 11 	call	0x2212	; 0x2212 <RotaryEncoderState::setValue_unsafe(long)>
     b34:	1f bf       	out	0x3f, r17	; 63
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	1c c0       	rjmp	.+56     	; 0xb72 <doAxis(char const*, char*, StepperMotorAxis&)+0x208>
     b3a:	80 91 7f 02 	lds	r24, 0x027F
     b3e:	90 91 80 02 	lds	r25, 0x0280
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	00 e1       	ldi	r16, 0x10	; 16
     b4c:	17 e2       	ldi	r17, 0x27	; 39
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <RotaryEncoderState::setMinMax(long, long)>
     b56:	1f b7       	in	r17, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	4c 85       	ldd	r20, Y+12	; 0x0c
     b5c:	5d 85       	ldd	r21, Y+13	; 0x0d
     b5e:	6e 85       	ldd	r22, Y+14	; 0x0e
     b60:	7f 85       	ldd	r23, Y+15	; 0x0f
     b62:	80 91 7f 02 	lds	r24, 0x027F
     b66:	90 91 80 02 	lds	r25, 0x0280
     b6a:	0e 94 09 11 	call	0x2212	; 0x2212 <RotaryEncoderState::setValue_unsafe(long)>
     b6e:	1f bf       	out	0x3f, r17	; 63
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	80 93 ad 00 	sts	0x00AD, r24
     b76:	10 92 ae 00 	sts	0x00AE, r1
     b7a:	33 c0       	rjmp	.+102    	; 0xbe2 <doAxis(char const*, char*, StepperMotorAxis&)+0x278>
     b7c:	80 91 7f 02 	lds	r24, 0x027F
     b80:	90 91 80 02 	lds	r25, 0x0280
     b84:	48 e0       	ldi	r20, 0x08	; 8
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	00 ed       	ldi	r16, 0xD0	; 208
     b8e:	17 e0       	ldi	r17, 0x07	; 7
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <RotaryEncoderState::setMinMax(long, long)>
     b98:	1f b7       	in	r17, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	80 91 7f 02 	lds	r24, 0x027F
     ba0:	90 91 80 02 	lds	r25, 0x0280
     ba4:	48 ee       	ldi	r20, 0xE8	; 232
     ba6:	53 e0       	ldi	r21, 0x03	; 3
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 09 11 	call	0x2212	; 0x2212 <RotaryEncoderState::setValue_unsafe(long)>
     bb0:	1f bf       	out	0x3f, r17	; 63
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	80 93 ad 00 	sts	0x00AD, r24
     bb8:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
     bbc:	60 93 b7 00 	sts	0x00B7, r22
     bc0:	70 93 b8 00 	sts	0x00B8, r23
     bc4:	80 93 b9 00 	sts	0x00B9, r24
     bc8:	90 93 ba 00 	sts	0x00BA, r25
     bcc:	10 92 ae 00 	sts	0x00AE, r1
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <StepperMotorAxis::debugPrint()>
     bd6:	0b c0       	rjmp	.+22     	; 0xbee <doAxis(char const*, char*, StepperMotorAxis&)+0x284>
     bd8:	8c e7       	ldi	r24, 0x7C	; 124
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 9b 04 	call	0x936	; 0x936 <showError(char const*)>
     be0:	06 c0       	rjmp	.+12     	; 0xbee <doAxis(char const*, char*, StepperMotorAxis&)+0x284>
     be2:	80 ea       	ldi	r24, 0xA0	; 160
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	69 e7       	ldi	r22, 0x79	; 121
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	08 95       	ret

00000bfc <doAlterDelayBetweenSteps()>:
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	e0 91 7f 02 	lds	r30, 0x027F
     c08:	f0 91 80 02 	lds	r31, 0x0280
     c0c:	86 85       	ldd	r24, Z+14	; 0x0e
     c0e:	88 23       	and	r24, r24
     c10:	51 f1       	breq	.+84     	; 0xc66 <doAlterDelayBetweenSteps()+0x6a>
     c12:	8f b7       	in	r24, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	16 86       	std	Z+14, r1	; 0x0e
     c18:	e0 84       	ldd	r14, Z+8	; 0x08
     c1a:	f1 84       	ldd	r15, Z+9	; 0x09
     c1c:	02 85       	ldd	r16, Z+10	; 0x0a
     c1e:	13 85       	ldd	r17, Z+11	; 0x0b
     c20:	8f bf       	out	0x3f, r24	; 63
     c22:	60 91 af 00 	lds	r22, 0x00AF
     c26:	70 91 b0 00 	lds	r23, 0x00B0
     c2a:	80 ea       	ldi	r24, 0xA0	; 160
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
     c32:	80 ea       	ldi	r24, 0xA0	; 160
     c34:	93 e0       	ldi	r25, 0x03	; 3
     c36:	6a ec       	ldi	r22, 0xCA	; 202
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
     c3e:	80 ea       	ldi	r24, 0xA0	; 160
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	b8 01       	movw	r22, r16
     c44:	a7 01       	movw	r20, r14
     c46:	2a e0       	ldi	r18, 0x0A	; 10
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <Print::println(long, int)>
     c4e:	e0 91 b1 00 	lds	r30, 0x00B1
     c52:	f0 91 b2 00 	lds	r31, 0x00B2
     c56:	e6 82       	std	Z+6, r14	; 0x06
     c58:	f7 82       	std	Z+7, r15	; 0x07
     c5a:	00 87       	std	Z+8, r16	; 0x08
     c5c:	11 87       	std	Z+9, r17	; 0x09
     c5e:	e5 8a       	std	Z+21, r14	; 0x15
     c60:	f6 8a       	std	Z+22, r15	; 0x16
     c62:	07 8b       	std	Z+23, r16	; 0x17
     c64:	10 8f       	std	Z+24, r17	; 0x18
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	08 95       	ret

00000c70 <doGotoStep()>:
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	e0 91 7f 02 	lds	r30, 0x027F
     c7c:	f0 91 80 02 	lds	r31, 0x0280
     c80:	86 85       	ldd	r24, Z+14	; 0x0e
     c82:	88 23       	and	r24, r24
     c84:	61 f1       	breq	.+88     	; 0xcde <doGotoStep()+0x6e>
     c86:	8f b7       	in	r24, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	16 86       	std	Z+14, r1	; 0x0e
     c8c:	e0 84       	ldd	r14, Z+8	; 0x08
     c8e:	f1 84       	ldd	r15, Z+9	; 0x09
     c90:	02 85       	ldd	r16, Z+10	; 0x0a
     c92:	13 85       	ldd	r17, Z+11	; 0x0b
     c94:	8f bf       	out	0x3f, r24	; 63
     c96:	60 91 af 00 	lds	r22, 0x00AF
     c9a:	70 91 b0 00 	lds	r23, 0x00B0
     c9e:	80 ea       	ldi	r24, 0xA0	; 160
     ca0:	93 e0       	ldi	r25, 0x03	; 3
     ca2:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
     ca6:	80 ea       	ldi	r24, 0xA0	; 160
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	63 ee       	ldi	r22, 0xE3	; 227
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
     cb2:	80 ea       	ldi	r24, 0xA0	; 160
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	b8 01       	movw	r22, r16
     cb8:	a7 01       	movw	r20, r14
     cba:	2a e0       	ldi	r18, 0x0A	; 10
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	0e 94 67 1b 	call	0x36ce	; 0x36ce <Print::println(long, int)>
     cc2:	e0 91 b1 00 	lds	r30, 0x00B1
     cc6:	f0 91 b2 00 	lds	r31, 0x00B2
     cca:	e6 82       	std	Z+6, r14	; 0x06
     ccc:	f7 82       	std	Z+7, r15	; 0x07
     cce:	00 87       	std	Z+8, r16	; 0x08
     cd0:	11 87       	std	Z+9, r17	; 0x09
     cd2:	cf 01       	movw	r24, r30
     cd4:	0a 96       	adiw	r24, 0x0a	; 10
     cd6:	b8 01       	movw	r22, r16
     cd8:	a7 01       	movw	r20, r14
     cda:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <StepperMotorControlWithButtons::gotoStep(long)>
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	08 95       	ret

00000ce8 <doMoveForthAndBackAtSpeed()>:
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	e0 91 7f 02 	lds	r30, 0x027F
     cfc:	f0 91 80 02 	lds	r31, 0x0280
     d00:	86 85       	ldd	r24, Z+14	; 0x0e
     d02:	88 23       	and	r24, r24
     d04:	61 f1       	breq	.+88     	; 0xd5e <doMoveForthAndBackAtSpeed()+0x76>
     d06:	8f b7       	in	r24, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	16 86       	std	Z+14, r1	; 0x0e
     d0c:	c0 84       	ldd	r12, Z+8	; 0x08
     d0e:	d1 84       	ldd	r13, Z+9	; 0x09
     d10:	e2 84       	ldd	r14, Z+10	; 0x0a
     d12:	f3 84       	ldd	r15, Z+11	; 0x0b
     d14:	8f bf       	out	0x3f, r24	; 63
     d16:	60 91 af 00 	lds	r22, 0x00AF
     d1a:	70 91 b0 00 	lds	r23, 0x00B0
     d1e:	80 ea       	ldi	r24, 0xA0	; 160
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
     d26:	80 ea       	ldi	r24, 0xA0	; 160
     d28:	93 e0       	ldi	r25, 0x03	; 3
     d2a:	60 ef       	ldi	r22, 0xF0	; 240
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
     d32:	80 ea       	ldi	r24, 0xA0	; 160
     d34:	93 e0       	ldi	r25, 0x03	; 3
     d36:	b6 01       	movw	r22, r12
     d38:	4a e0       	ldi	r20, 0x0A	; 10
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	0e 94 38 1b 	call	0x3670	; 0x3670 <Print::println(unsigned int, int)>
     d40:	00 91 b1 00 	lds	r16, 0x00B1
     d44:	10 91 b2 00 	lds	r17, 0x00B2
     d48:	c8 01       	movw	r24, r16
     d4a:	b6 01       	movw	r22, r12
     d4c:	0e 94 1f 04 	call	0x83e	; 0x83e <StepperMotorAxis::speedToDelayBetweenSteps(unsigned int)>
     d50:	d8 01       	movw	r26, r16
     d52:	55 96       	adiw	r26, 0x15	; 21
     d54:	6d 93       	st	X+, r22
     d56:	7d 93       	st	X+, r23
     d58:	8d 93       	st	X+, r24
     d5a:	9c 93       	st	X, r25
     d5c:	58 97       	sbiw	r26, 0x18	; 24
     d5e:	80 91 ae 00 	lds	r24, 0x00AE
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f4       	brne	.+2      	; 0xd68 <doMoveForthAndBackAtSpeed()+0x80>
     d66:	48 c0       	rjmp	.+144    	; 0xdf8 <doMoveForthAndBackAtSpeed()+0x110>
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	38 f0       	brcs	.+14     	; 0xd7a <doMoveForthAndBackAtSpeed()+0x92>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	09 f4       	brne	.+2      	; 0xd72 <doMoveForthAndBackAtSpeed()+0x8a>
     d70:	6c c0       	rjmp	.+216    	; 0xe4a <doMoveForthAndBackAtSpeed()+0x162>
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	09 f0       	breq	.+2      	; 0xd78 <doMoveForthAndBackAtSpeed()+0x90>
     d76:	f9 c0       	rjmp	.+498    	; 0xf6a <doMoveForthAndBackAtSpeed()+0x282>
     d78:	b0 c0       	rjmp	.+352    	; 0xeda <doMoveForthAndBackAtSpeed()+0x1f2>
     d7a:	80 91 b1 00 	lds	r24, 0x00B1
     d7e:	90 91 b2 00 	lds	r25, 0x00B2
     d82:	0e 94 12 14 	call	0x2824	; 0x2824 <StepperMotorAxis::getAbsolutePositionMicroM()>
     d86:	6b 01       	movw	r12, r22
     d88:	7c 01       	movw	r14, r24
     d8a:	a0 90 b1 00 	lds	r10, 0x00B1
     d8e:	b0 90 b2 00 	lds	r11, 0x00B2
     d92:	80 e6       	ldi	r24, 0x60	; 96
     d94:	99 e7       	ldi	r25, 0x79	; 121
     d96:	ae ef       	ldi	r26, 0xFE	; 254
     d98:	bf ef       	ldi	r27, 0xFF	; 255
     d9a:	c8 0e       	add	r12, r24
     d9c:	d9 1e       	adc	r13, r25
     d9e:	ea 1e       	adc	r14, r26
     da0:	fb 1e       	adc	r15, r27
     da2:	d5 01       	movw	r26, r10
     da4:	55 96       	adiw	r26, 0x15	; 21
     da6:	6d 91       	ld	r22, X+
     da8:	7d 91       	ld	r23, X+
     daa:	8d 91       	ld	r24, X+
     dac:	9c 91       	ld	r25, X
     dae:	58 97       	sbiw	r26, 0x18	; 24
     db0:	20 ea       	ldi	r18, 0xA0	; 160
     db2:	36 e8       	ldi	r19, 0x86	; 134
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     dbc:	28 ee       	ldi	r18, 0xE8	; 232
     dbe:	33 e0       	ldi	r19, 0x03	; 3
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     dc8:	ca 01       	movw	r24, r20
     dca:	b9 01       	movw	r22, r18
     dcc:	f5 01       	movw	r30, r10
     dce:	22 81       	ldd	r18, Z+2	; 0x02
     dd0:	33 81       	ldd	r19, Z+3	; 0x03
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     dda:	24 e6       	ldi	r18, 0x64	; 100
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     de6:	89 01       	movw	r16, r18
     de8:	9a 01       	movw	r18, r20
     dea:	c5 01       	movw	r24, r10
     dec:	b7 01       	movw	r22, r14
     dee:	a6 01       	movw	r20, r12
     df0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	b7 c0       	rjmp	.+366    	; 0xf66 <doMoveForthAndBackAtSpeed()+0x27e>
     df8:	e0 91 b1 00 	lds	r30, 0x00B1
     dfc:	f0 91 b2 00 	lds	r31, 0x00B2
     e00:	80 81       	ld	r24, Z
     e02:	88 23       	and	r24, r24
     e04:	09 f0       	breq	.+2      	; 0xe08 <doMoveForthAndBackAtSpeed()+0x120>
     e06:	b1 c0       	rjmp	.+354    	; 0xf6a <doMoveForthAndBackAtSpeed()+0x282>
     e08:	84 89       	ldd	r24, Z+20	; 0x14
     e0a:	88 23       	and	r24, r24
     e0c:	09 f0       	breq	.+2      	; 0xe10 <doMoveForthAndBackAtSpeed()+0x128>
     e0e:	ad c0       	rjmp	.+346    	; 0xf6a <doMoveForthAndBackAtSpeed()+0x282>
     e10:	cf 01       	movw	r24, r30
     e12:	0e 94 12 14 	call	0x2824	; 0x2824 <StepperMotorAxis::getAbsolutePositionMicroM()>
     e16:	6b 01       	movw	r12, r22
     e18:	7c 01       	movw	r14, r24
     e1a:	a0 90 b1 00 	lds	r10, 0x00B1
     e1e:	b0 90 b2 00 	lds	r11, 0x00B2
     e22:	80 ea       	ldi	r24, 0xA0	; 160
     e24:	96 e8       	ldi	r25, 0x86	; 134
     e26:	a1 e0       	ldi	r26, 0x01	; 1
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	c8 0e       	add	r12, r24
     e2c:	d9 1e       	adc	r13, r25
     e2e:	ea 1e       	adc	r14, r26
     e30:	fb 1e       	adc	r15, r27
     e32:	d5 01       	movw	r26, r10
     e34:	55 96       	adiw	r26, 0x15	; 21
     e36:	6d 91       	ld	r22, X+
     e38:	7d 91       	ld	r23, X+
     e3a:	8d 91       	ld	r24, X+
     e3c:	9c 91       	ld	r25, X
     e3e:	58 97       	sbiw	r26, 0x18	; 24
     e40:	20 ea       	ldi	r18, 0xA0	; 160
     e42:	36 e8       	ldi	r19, 0x86	; 134
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	6f c0       	rjmp	.+222    	; 0xf28 <doMoveForthAndBackAtSpeed()+0x240>
     e4a:	e0 91 b1 00 	lds	r30, 0x00B1
     e4e:	f0 91 b2 00 	lds	r31, 0x00B2
     e52:	80 81       	ld	r24, Z
     e54:	88 23       	and	r24, r24
     e56:	09 f0       	breq	.+2      	; 0xe5a <doMoveForthAndBackAtSpeed()+0x172>
     e58:	88 c0       	rjmp	.+272    	; 0xf6a <doMoveForthAndBackAtSpeed()+0x282>
     e5a:	84 89       	ldd	r24, Z+20	; 0x14
     e5c:	88 23       	and	r24, r24
     e5e:	09 f0       	breq	.+2      	; 0xe62 <doMoveForthAndBackAtSpeed()+0x17a>
     e60:	84 c0       	rjmp	.+264    	; 0xf6a <doMoveForthAndBackAtSpeed()+0x282>
     e62:	cf 01       	movw	r24, r30
     e64:	0e 94 12 14 	call	0x2824	; 0x2824 <StepperMotorAxis::getAbsolutePositionMicroM()>
     e68:	6b 01       	movw	r12, r22
     e6a:	7c 01       	movw	r14, r24
     e6c:	a0 90 b1 00 	lds	r10, 0x00B1
     e70:	b0 90 b2 00 	lds	r11, 0x00B2
     e74:	80 e5       	ldi	r24, 0x50	; 80
     e76:	93 ec       	ldi	r25, 0xC3	; 195
     e78:	a0 e0       	ldi	r26, 0x00	; 0
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	c8 0e       	add	r12, r24
     e7e:	d9 1e       	adc	r13, r25
     e80:	ea 1e       	adc	r14, r26
     e82:	fb 1e       	adc	r15, r27
     e84:	d5 01       	movw	r26, r10
     e86:	55 96       	adiw	r26, 0x15	; 21
     e88:	6d 91       	ld	r22, X+
     e8a:	7d 91       	ld	r23, X+
     e8c:	8d 91       	ld	r24, X+
     e8e:	9c 91       	ld	r25, X
     e90:	58 97       	sbiw	r26, 0x18	; 24
     e92:	20 e5       	ldi	r18, 0x50	; 80
     e94:	33 ec       	ldi	r19, 0xC3	; 195
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     e9e:	28 ee       	ldi	r18, 0xE8	; 232
     ea0:	33 e0       	ldi	r19, 0x03	; 3
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     eaa:	ca 01       	movw	r24, r20
     eac:	b9 01       	movw	r22, r18
     eae:	f5 01       	movw	r30, r10
     eb0:	22 81       	ldd	r18, Z+2	; 0x02
     eb2:	33 81       	ldd	r19, Z+3	; 0x03
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     ebc:	24 e6       	ldi	r18, 0x64	; 100
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     ec8:	89 01       	movw	r16, r18
     eca:	9a 01       	movw	r18, r20
     ecc:	c5 01       	movw	r24, r10
     ece:	b7 01       	movw	r22, r14
     ed0:	a6 01       	movw	r20, r12
     ed2:	0e 94 83 16 	call	0x2d06	; 0x2d06 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	46 c0       	rjmp	.+140    	; 0xf66 <doMoveForthAndBackAtSpeed()+0x27e>
     eda:	e0 91 b1 00 	lds	r30, 0x00B1
     ede:	f0 91 b2 00 	lds	r31, 0x00B2
     ee2:	80 81       	ld	r24, Z
     ee4:	88 23       	and	r24, r24
     ee6:	09 f0       	breq	.+2      	; 0xeea <doMoveForthAndBackAtSpeed()+0x202>
     ee8:	40 c0       	rjmp	.+128    	; 0xf6a <doMoveForthAndBackAtSpeed()+0x282>
     eea:	84 89       	ldd	r24, Z+20	; 0x14
     eec:	88 23       	and	r24, r24
     eee:	e9 f5       	brne	.+122    	; 0xf6a <doMoveForthAndBackAtSpeed()+0x282>
     ef0:	cf 01       	movw	r24, r30
     ef2:	0e 94 12 14 	call	0x2824	; 0x2824 <StepperMotorAxis::getAbsolutePositionMicroM()>
     ef6:	6b 01       	movw	r12, r22
     ef8:	7c 01       	movw	r14, r24
     efa:	a0 90 b1 00 	lds	r10, 0x00B1
     efe:	b0 90 b2 00 	lds	r11, 0x00B2
     f02:	80 eb       	ldi	r24, 0xB0	; 176
     f04:	9c e3       	ldi	r25, 0x3C	; 60
     f06:	af ef       	ldi	r26, 0xFF	; 255
     f08:	bf ef       	ldi	r27, 0xFF	; 255
     f0a:	c8 0e       	add	r12, r24
     f0c:	d9 1e       	adc	r13, r25
     f0e:	ea 1e       	adc	r14, r26
     f10:	fb 1e       	adc	r15, r27
     f12:	d5 01       	movw	r26, r10
     f14:	55 96       	adiw	r26, 0x15	; 21
     f16:	6d 91       	ld	r22, X+
     f18:	7d 91       	ld	r23, X+
     f1a:	8d 91       	ld	r24, X+
     f1c:	9c 91       	ld	r25, X
     f1e:	58 97       	sbiw	r26, 0x18	; 24
     f20:	20 e5       	ldi	r18, 0x50	; 80
     f22:	33 ec       	ldi	r19, 0xC3	; 195
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     f2c:	28 ee       	ldi	r18, 0xE8	; 232
     f2e:	33 e0       	ldi	r19, 0x03	; 3
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     f38:	ca 01       	movw	r24, r20
     f3a:	b9 01       	movw	r22, r18
     f3c:	f5 01       	movw	r30, r10
     f3e:	22 81       	ldd	r18, Z+2	; 0x02
     f40:	33 81       	ldd	r19, Z+3	; 0x03
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
     f4a:	24 e6       	ldi	r18, 0x64	; 100
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
     f56:	89 01       	movw	r16, r18
     f58:	9a 01       	movw	r18, r20
     f5a:	c5 01       	movw	r24, r10
     f5c:	b7 01       	movw	r22, r14
     f5e:	a6 01       	movw	r20, r12
     f60:	0e 94 83 16 	call	0x2d06	; 0x2d06 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	80 93 ae 00 	sts	0x00AE, r24
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	af 90       	pop	r10
     f7a:	08 95       	ret

00000f7c <doStepTicking()>:
     f7c:	6f 92       	push	r6
     f7e:	7f 92       	push	r7
     f80:	8f 92       	push	r8
     f82:	9f 92       	push	r9
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
     f98:	7b 01       	movw	r14, r22
     f9a:	8c 01       	movw	r16, r24
     f9c:	60 90 b7 00 	lds	r6, 0x00B7
     fa0:	70 90 b8 00 	lds	r7, 0x00B8
     fa4:	80 90 b9 00 	lds	r8, 0x00B9
     fa8:	90 90 ba 00 	lds	r9, 0x00BA
     fac:	e0 91 7f 02 	lds	r30, 0x027F
     fb0:	f0 91 80 02 	lds	r31, 0x0280
     fb4:	86 85       	ldd	r24, Z+14	; 0x0e
     fb6:	88 23       	and	r24, r24
     fb8:	c1 f0       	breq	.+48     	; 0xfea <doStepTicking()+0x6e>
     fba:	80 ea       	ldi	r24, 0xA0	; 160
     fbc:	93 e0       	ldi	r25, 0x03	; 3
     fbe:	6d e0       	ldi	r22, 0x0D	; 13
     fc0:	71 e0       	ldi	r23, 0x01	; 1
     fc2:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
     fc6:	e0 91 7f 02 	lds	r30, 0x027F
     fca:	f0 91 80 02 	lds	r31, 0x0280
     fce:	8f b7       	in	r24, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	16 86       	std	Z+14, r1	; 0x0e
     fd4:	40 85       	ldd	r20, Z+8	; 0x08
     fd6:	51 85       	ldd	r21, Z+9	; 0x09
     fd8:	62 85       	ldd	r22, Z+10	; 0x0a
     fda:	73 85       	ldd	r23, Z+11	; 0x0b
     fdc:	8f bf       	out	0x3f, r24	; 63
     fde:	80 ea       	ldi	r24, 0xA0	; 160
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	0e 94 67 1b 	call	0x36ce	; 0x36ce <Print::println(long, int)>
     fea:	e0 91 7f 02 	lds	r30, 0x027F
     fee:	f0 91 80 02 	lds	r31, 0x0280
     ff2:	8f b7       	in	r24, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	16 86       	std	Z+14, r1	; 0x0e
     ff8:	a0 84       	ldd	r10, Z+8	; 0x08
     ffa:	b1 84       	ldd	r11, Z+9	; 0x09
     ffc:	c2 84       	ldd	r12, Z+10	; 0x0a
     ffe:	d3 84       	ldd	r13, Z+11	; 0x0b
    1000:	8f bf       	out	0x3f, r24	; 63
    1002:	e6 18       	sub	r14, r6
    1004:	f7 08       	sbc	r15, r7
    1006:	08 09       	sbc	r16, r8
    1008:	19 09       	sbc	r17, r9
    100a:	ea 14       	cp	r14, r10
    100c:	fb 04       	cpc	r15, r11
    100e:	0c 05       	cpc	r16, r12
    1010:	1d 05       	cpc	r17, r13
    1012:	08 f4       	brcc	.+2      	; 0x1016 <doStepTicking()+0x9a>
    1014:	47 c0       	rjmp	.+142    	; 0x10a4 <doStepTicking()+0x128>
    1016:	e0 91 b1 00 	lds	r30, 0x00B1
    101a:	f0 91 b2 00 	lds	r31, 0x00B2
    101e:	44 85       	ldd	r20, Z+12	; 0x0c
    1020:	55 85       	ldd	r21, Z+13	; 0x0d
    1022:	66 85       	ldd	r22, Z+14	; 0x0e
    1024:	77 85       	ldd	r23, Z+15	; 0x0f
    1026:	80 91 ae 00 	lds	r24, 0x00AE
    102a:	88 23       	and	r24, r24
    102c:	41 f0       	breq	.+16     	; 0x103e <doStepTicking()+0xc2>
    102e:	7a 01       	movw	r14, r20
    1030:	8b 01       	movw	r16, r22
    1032:	08 94       	sec
    1034:	e1 1c       	adc	r14, r1
    1036:	f1 1c       	adc	r15, r1
    1038:	01 1d       	adc	r16, r1
    103a:	11 1d       	adc	r17, r1
    103c:	07 c0       	rjmp	.+14     	; 0x104c <doStepTicking()+0xd0>
    103e:	7a 01       	movw	r14, r20
    1040:	8b 01       	movw	r16, r22
    1042:	08 94       	sec
    1044:	e1 08       	sbc	r14, r1
    1046:	f1 08       	sbc	r15, r1
    1048:	01 09       	sbc	r16, r1
    104a:	11 09       	sbc	r17, r1
    104c:	cf 01       	movw	r24, r30
    104e:	0a 96       	adiw	r24, 0x0a	; 10
    1050:	b8 01       	movw	r22, r16
    1052:	a7 01       	movw	r20, r14
    1054:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <StepperMotorControlWithButtons::gotoStep(long)>
    1058:	80 ea       	ldi	r24, 0xA0	; 160
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	71 e0       	ldi	r23, 0x01	; 1
    1060:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    1064:	80 ea       	ldi	r24, 0xA0	; 160
    1066:	93 e0       	ldi	r25, 0x03	; 3
    1068:	b6 01       	movw	r22, r12
    106a:	a5 01       	movw	r20, r10
    106c:	2a e0       	ldi	r18, 0x0A	; 10
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	0e 94 ac 1a 	call	0x3558	; 0x3558 <Print::print(unsigned long, int)>
    1074:	80 ea       	ldi	r24, 0xA0	; 160
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	60 e6       	ldi	r22, 0x60	; 96
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	0e 94 11 1a 	call	0x3422	; 0x3422 <Print::print(char const*)>
    1080:	80 ea       	ldi	r24, 0xA0	; 160
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	b8 01       	movw	r22, r16
    1086:	a7 01       	movw	r20, r14
    1088:	2a e0       	ldi	r18, 0x0A	; 10
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	0e 94 67 1b 	call	0x36ce	; 0x36ce <Print::println(long, int)>
    1090:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    1094:	60 93 b7 00 	sts	0x00B7, r22
    1098:	70 93 b8 00 	sts	0x00B8, r23
    109c:	80 93 b9 00 	sts	0x00B9, r24
    10a0:	90 93 ba 00 	sts	0x00BA, r25
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	9f 90       	pop	r9
    10b6:	8f 90       	pop	r8
    10b8:	7f 90       	pop	r7
    10ba:	6f 90       	pop	r6
    10bc:	08 95       	ret

000010be <stop()>:
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	0a ea       	ldi	r16, 0xAA	; 170
    10c4:	11 e0       	ldi	r17, 0x01	; 1
    10c6:	c8 01       	movw	r24, r16
    10c8:	0e 94 32 14 	call	0x2864	; 0x2864 <StepperMotorAxis::stop()>
    10cc:	c8 01       	movw	r24, r16
    10ce:	4f 96       	adiw	r24, 0x1f	; 31
    10d0:	0e 94 32 14 	call	0x2864	; 0x2864 <StepperMotorAxis::stop()>
    10d4:	c8 01       	movw	r24, r16
    10d6:	ce 96       	adiw	r24, 0x3e	; 62
    10d8:	0e 94 32 14 	call	0x2864	; 0x2864 <StepperMotorAxis::stop()>
    10dc:	87 e0       	ldi	r24, 0x07	; 7
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	0e 94 32 14 	call	0x2864	; 0x2864 <StepperMotorAxis::stop()>
    10e4:	10 92 ad 00 	sts	0x00AD, r1
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <RepRapPCBTest::loop()>:
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	8f eb       	ldi	r24, 0xBF	; 191
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <RepRapPCB::update()>
    10fe:	8d e3       	ldi	r24, 0x3D	; 61
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	0e 94 90 12 	call	0x2520	; 0x2520 <SerialReader::update()>
    1106:	84 e4       	ldi	r24, 0x44	; 68
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <AdvButton::update()>
    110e:	8d e5       	ldi	r24, 0x5D	; 93
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	0e 94 2b 0c 	call	0x1856	; 0x1856 <BlinkingLed::update()>
    1116:	80 91 43 02 	lds	r24, 0x0243
    111a:	88 23       	and	r24, r24
    111c:	09 f4       	brne	.+2      	; 0x1120 <RepRapPCBTest::loop()+0x32>
    111e:	54 c0       	rjmp	.+168    	; 0x11c8 <RepRapPCBTest::loop()+0xda>
    1120:	8d e3       	ldi	r24, 0x3D	; 61
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	0e 94 82 12 	call	0x2504	; 0x2504 <SerialReader::readln()>
    1128:	8c 01       	movw	r16, r24
    112a:	80 ea       	ldi	r24, 0xA0	; 160
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	b8 01       	movw	r22, r16
    1130:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <Print::println(char const*)>
    1134:	e8 01       	movw	r28, r16
    1136:	21 96       	adiw	r28, 0x01	; 1
    1138:	f8 01       	movw	r30, r16
    113a:	00 81       	ld	r16, Z
    113c:	03 37       	cpi	r16, 0x73	; 115
    113e:	e9 f1       	breq	.+122    	; 0x11ba <RepRapPCBTest::loop()+0xcc>
    1140:	04 37       	cpi	r16, 0x74	; 116
    1142:	38 f4       	brcc	.+14     	; 0x1152 <RepRapPCBTest::loop()+0x64>
    1144:	08 36       	cpi	r16, 0x68	; 104
    1146:	b1 f1       	breq	.+108    	; 0x11b4 <RepRapPCBTest::loop()+0xc6>
    1148:	09 36       	cpi	r16, 0x69	; 105
    114a:	51 f0       	breq	.+20     	; 0x1160 <RepRapPCBTest::loop()+0x72>
    114c:	01 36       	cpi	r16, 0x61	; 97
    114e:	c1 f5       	brne	.+112    	; 0x11c0 <RepRapPCBTest::loop()+0xd2>
    1150:	0e c0       	rjmp	.+28     	; 0x116e <RepRapPCBTest::loop()+0x80>
    1152:	09 37       	cpi	r16, 0x79	; 121
    1154:	19 f1       	breq	.+70     	; 0x119c <RepRapPCBTest::loop()+0xae>
    1156:	0a 37       	cpi	r16, 0x7A	; 122
    1158:	39 f1       	breq	.+78     	; 0x11a8 <RepRapPCBTest::loop()+0xba>
    115a:	08 37       	cpi	r16, 0x78	; 120
    115c:	89 f5       	brne	.+98     	; 0x11c0 <RepRapPCBTest::loop()+0xd2>
    115e:	16 c0       	rjmp	.+44     	; 0x118c <RepRapPCBTest::loop()+0x9e>
    1160:	0e 94 5f 08 	call	0x10be	; 0x10be <stop()>
    1164:	85 e0       	ldi	r24, 0x05	; 5
    1166:	80 93 ad 00 	sts	0x00AD, r24
    116a:	10 92 ae 00 	sts	0x00AE, r1
    116e:	84 e5       	ldi	r24, 0x54	; 84
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	be 01       	movw	r22, r28
    1174:	4a ea       	ldi	r20, 0xAA	; 170
    1176:	51 e0       	ldi	r21, 0x01	; 1
    1178:	0e 94 b5 04 	call	0x96a	; 0x96a <doAxis(char const*, char*, StepperMotorAxis&)>
    117c:	8b e5       	ldi	r24, 0x5B	; 91
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	be 01       	movw	r22, r28
    1182:	49 ec       	ldi	r20, 0xC9	; 201
    1184:	51 e0       	ldi	r21, 0x01	; 1
    1186:	0e 94 b5 04 	call	0x96a	; 0x96a <doAxis(char const*, char*, StepperMotorAxis&)>
    118a:	0e c0       	rjmp	.+28     	; 0x11a8 <RepRapPCBTest::loop()+0xba>
    118c:	84 e5       	ldi	r24, 0x54	; 84
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	be 01       	movw	r22, r28
    1192:	4a ea       	ldi	r20, 0xAA	; 170
    1194:	51 e0       	ldi	r21, 0x01	; 1
    1196:	0e 94 b5 04 	call	0x96a	; 0x96a <doAxis(char const*, char*, StepperMotorAxis&)>
    119a:	16 c0       	rjmp	.+44     	; 0x11c8 <RepRapPCBTest::loop()+0xda>
    119c:	8b e5       	ldi	r24, 0x5B	; 91
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	be 01       	movw	r22, r28
    11a2:	49 ec       	ldi	r20, 0xC9	; 201
    11a4:	51 e0       	ldi	r21, 0x01	; 1
    11a6:	f7 cf       	rjmp	.-18     	; 0x1196 <RepRapPCBTest::loop()+0xa8>
    11a8:	82 e6       	ldi	r24, 0x62	; 98
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	be 01       	movw	r22, r28
    11ae:	48 ee       	ldi	r20, 0xE8	; 232
    11b0:	51 e0       	ldi	r21, 0x01	; 1
    11b2:	f1 cf       	rjmp	.-30     	; 0x1196 <RepRapPCBTest::loop()+0xa8>
    11b4:	0e 94 94 04 	call	0x928	; 0x928 <printHelp()>
    11b8:	07 c0       	rjmp	.+14     	; 0x11c8 <RepRapPCBTest::loop()+0xda>
    11ba:	0e 94 5f 08 	call	0x10be	; 0x10be <stop()>
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <RepRapPCBTest::loop()+0xda>
    11c0:	89 e6       	ldi	r24, 0x69	; 105
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 9b 04 	call	0x936	; 0x936 <showError(char const*)>
    11c8:	00 91 ad 00 	lds	r16, 0x00AD
    11cc:	03 30       	cpi	r16, 0x03	; 3
    11ce:	c1 f0       	breq	.+48     	; 0x1200 <RepRapPCBTest::loop()+0x112>
    11d0:	04 30       	cpi	r16, 0x04	; 4
    11d2:	30 f4       	brcc	.+12     	; 0x11e0 <RepRapPCBTest::loop()+0xf2>
    11d4:	01 30       	cpi	r16, 0x01	; 1
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <RepRapPCBTest::loop()+0x106>
    11d8:	02 30       	cpi	r16, 0x02	; 2
    11da:	09 f0       	breq	.+2      	; 0x11de <RepRapPCBTest::loop()+0xf0>
    11dc:	99 c1       	rjmp	.+818    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <RepRapPCBTest::loop()+0x10c>
    11e0:	05 30       	cpi	r16, 0x05	; 5
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <RepRapPCBTest::loop()+0xf8>
    11e4:	04 c1       	rjmp	.+520    	; 0x13ee <RepRapPCBTest::loop()+0x300>
    11e6:	05 30       	cpi	r16, 0x05	; 5
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <RepRapPCBTest::loop()+0xfe>
    11ea:	fe c0       	rjmp	.+508    	; 0x13e8 <RepRapPCBTest::loop()+0x2fa>
    11ec:	06 30       	cpi	r16, 0x06	; 6
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <RepRapPCBTest::loop()+0x104>
    11f0:	8f c1       	rjmp	.+798    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    11f2:	7c c1       	rjmp	.+760    	; 0x14ec <RepRapPCBTest::loop()+0x3fe>
    11f4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <doAlterDelayBetweenSteps()>
    11f8:	8b c1       	rjmp	.+790    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    11fa:	0e 94 38 06 	call	0xc70	; 0xc70 <doGotoStep()>
    11fe:	88 c1       	rjmp	.+784    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    1200:	80 91 ae 00 	lds	r24, 0x00AE
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	b9 f0       	breq	.+46     	; 0x1236 <RepRapPCBTest::loop()+0x148>
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	30 f0       	brcs	.+12     	; 0x1218 <RepRapPCBTest::loop()+0x12a>
    120c:	82 30       	cpi	r24, 0x02	; 2
    120e:	81 f1       	breq	.+96     	; 0x1270 <RepRapPCBTest::loop()+0x182>
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	09 f0       	breq	.+2      	; 0x1216 <RepRapPCBTest::loop()+0x128>
    1214:	e6 c0       	rjmp	.+460    	; 0x13e2 <RepRapPCBTest::loop()+0x2f4>
    1216:	6b c0       	rjmp	.+214    	; 0x12ee <RepRapPCBTest::loop()+0x200>
    1218:	e0 91 b1 00 	lds	r30, 0x00B1
    121c:	f0 91 b2 00 	lds	r31, 0x00B2
    1220:	86 81       	ldd	r24, Z+6	; 0x06
    1222:	97 81       	ldd	r25, Z+7	; 0x07
    1224:	a0 85       	ldd	r26, Z+8	; 0x08
    1226:	b1 85       	ldd	r27, Z+9	; 0x09
    1228:	85 8b       	std	Z+21, r24	; 0x15
    122a:	96 8b       	std	Z+22, r25	; 0x16
    122c:	a7 8b       	std	Z+23, r26	; 0x17
    122e:	b0 8f       	std	Z+24, r27	; 0x18
    1230:	cf 01       	movw	r24, r30
    1232:	0a 96       	adiw	r24, 0x0a	; 10
    1234:	20 c1       	rjmp	.+576    	; 0x1476 <RepRapPCBTest::loop()+0x388>
    1236:	e0 91 b1 00 	lds	r30, 0x00B1
    123a:	f0 91 b2 00 	lds	r31, 0x00B2
    123e:	84 89       	ldd	r24, Z+20	; 0x14
    1240:	88 23       	and	r24, r24
    1242:	09 f0       	breq	.+2      	; 0x1246 <RepRapPCBTest::loop()+0x158>
    1244:	65 c1       	rjmp	.+714    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    1246:	14 86       	std	Z+12, r1	; 0x0c
    1248:	15 86       	std	Z+13, r1	; 0x0d
    124a:	16 86       	std	Z+14, r1	; 0x0e
    124c:	17 86       	std	Z+15, r1	; 0x0f
    124e:	cf 01       	movw	r24, r30
    1250:	0a 96       	adiw	r24, 0x0a	; 10
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    1258:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    125c:	60 93 b7 00 	sts	0x00B7, r22
    1260:	70 93 b8 00 	sts	0x00B8, r23
    1264:	80 93 b9 00 	sts	0x00B9, r24
    1268:	90 93 ba 00 	sts	0x00BA, r25
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	07 c1       	rjmp	.+526    	; 0x147e <RepRapPCBTest::loop()+0x390>
    1270:	e0 91 b1 00 	lds	r30, 0x00B1
    1274:	f0 91 b2 00 	lds	r31, 0x00B2
    1278:	84 89       	ldd	r24, Z+20	; 0x14
    127a:	88 23       	and	r24, r24
    127c:	09 f0       	breq	.+2      	; 0x1280 <RepRapPCBTest::loop()+0x192>
    127e:	48 c1       	rjmp	.+656    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    1280:	84 85       	ldd	r24, Z+12	; 0x0c
    1282:	95 85       	ldd	r25, Z+13	; 0x0d
    1284:	a6 85       	ldd	r26, Z+14	; 0x0e
    1286:	b7 85       	ldd	r27, Z+15	; 0x0f
    1288:	80 93 b3 00 	sts	0x00B3, r24
    128c:	90 93 b4 00 	sts	0x00B4, r25
    1290:	a0 93 b5 00 	sts	0x00B5, r26
    1294:	b0 93 b6 00 	sts	0x00B6, r27
    1298:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    129c:	20 91 b7 00 	lds	r18, 0x00B7
    12a0:	30 91 b8 00 	lds	r19, 0x00B8
    12a4:	40 91 b9 00 	lds	r20, 0x00B9
    12a8:	50 91 ba 00 	lds	r21, 0x00BA
    12ac:	62 1b       	sub	r22, r18
    12ae:	73 0b       	sbc	r23, r19
    12b0:	84 0b       	sbc	r24, r20
    12b2:	95 0b       	sbc	r25, r21
    12b4:	60 93 bb 00 	sts	0x00BB, r22
    12b8:	70 93 bc 00 	sts	0x00BC, r23
    12bc:	80 93 bd 00 	sts	0x00BD, r24
    12c0:	90 93 be 00 	sts	0x00BE, r25
    12c4:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    12c8:	60 93 b7 00 	sts	0x00B7, r22
    12cc:	70 93 b8 00 	sts	0x00B8, r23
    12d0:	80 93 b9 00 	sts	0x00B9, r24
    12d4:	90 93 ba 00 	sts	0x00BA, r25
    12d8:	80 91 b1 00 	lds	r24, 0x00B1
    12dc:	90 91 b2 00 	lds	r25, 0x00B2
    12e0:	0a 96       	adiw	r24, 0x0a	; 10
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    12e8:	00 93 ae 00 	sts	0x00AE, r16
    12ec:	11 c1       	rjmp	.+546    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    12ee:	e0 91 b1 00 	lds	r30, 0x00B1
    12f2:	f0 91 b2 00 	lds	r31, 0x00B2
    12f6:	84 89       	ldd	r24, Z+20	; 0x14
    12f8:	88 23       	and	r24, r24
    12fa:	09 f0       	breq	.+2      	; 0x12fe <RepRapPCBTest::loop()+0x210>
    12fc:	09 c1       	rjmp	.+530    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    12fe:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    1302:	20 91 b7 00 	lds	r18, 0x00B7
    1306:	30 91 b8 00 	lds	r19, 0x00B8
    130a:	40 91 b9 00 	lds	r20, 0x00B9
    130e:	50 91 ba 00 	lds	r21, 0x00BA
    1312:	62 1b       	sub	r22, r18
    1314:	73 0b       	sbc	r23, r19
    1316:	84 0b       	sbc	r24, r20
    1318:	95 0b       	sbc	r25, r21
    131a:	60 93 b7 00 	sts	0x00B7, r22
    131e:	70 93 b8 00 	sts	0x00B8, r23
    1322:	80 93 b9 00 	sts	0x00B9, r24
    1326:	90 93 ba 00 	sts	0x00BA, r25
    132a:	40 91 b3 00 	lds	r20, 0x00B3
    132e:	50 91 b4 00 	lds	r21, 0x00B4
    1332:	60 91 b5 00 	lds	r22, 0x00B5
    1336:	70 91 b6 00 	lds	r23, 0x00B6
    133a:	80 ea       	ldi	r24, 0xA0	; 160
    133c:	93 e0       	ldi	r25, 0x03	; 3
    133e:	2a e0       	ldi	r18, 0x0A	; 10
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    1346:	80 ea       	ldi	r24, 0xA0	; 160
    1348:	93 e0       	ldi	r25, 0x03	; 3
    134a:	69 e0       	ldi	r22, 0x09	; 9
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	0e 94 04 1b 	call	0x3608	; 0x3608 <Print::print(char, int)>
    1354:	e0 91 b1 00 	lds	r30, 0x00B1
    1358:	f0 91 b2 00 	lds	r31, 0x00B2
    135c:	44 85       	ldd	r20, Z+12	; 0x0c
    135e:	55 85       	ldd	r21, Z+13	; 0x0d
    1360:	66 85       	ldd	r22, Z+14	; 0x0e
    1362:	77 85       	ldd	r23, Z+15	; 0x0f
    1364:	80 ea       	ldi	r24, 0xA0	; 160
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	2a e0       	ldi	r18, 0x0A	; 10
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    1370:	80 ea       	ldi	r24, 0xA0	; 160
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	69 e0       	ldi	r22, 0x09	; 9
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	0e 94 04 1b 	call	0x3608	; 0x3608 <Print::print(char, int)>
    137e:	40 91 bb 00 	lds	r20, 0x00BB
    1382:	50 91 bc 00 	lds	r21, 0x00BC
    1386:	60 91 bd 00 	lds	r22, 0x00BD
    138a:	70 91 be 00 	lds	r23, 0x00BE
    138e:	80 ea       	ldi	r24, 0xA0	; 160
    1390:	93 e0       	ldi	r25, 0x03	; 3
    1392:	2a e0       	ldi	r18, 0x0A	; 10
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	0e 94 ac 1a 	call	0x3558	; 0x3558 <Print::print(unsigned long, int)>
    139a:	80 ea       	ldi	r24, 0xA0	; 160
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	69 e0       	ldi	r22, 0x09	; 9
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	0e 94 04 1b 	call	0x3608	; 0x3608 <Print::print(char, int)>
    13a8:	40 91 b7 00 	lds	r20, 0x00B7
    13ac:	50 91 b8 00 	lds	r21, 0x00B8
    13b0:	60 91 b9 00 	lds	r22, 0x00B9
    13b4:	70 91 ba 00 	lds	r23, 0x00BA
    13b8:	80 ea       	ldi	r24, 0xA0	; 160
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <Print::print(unsigned long, int)>
    13c4:	80 ea       	ldi	r24, 0xA0	; 160
    13c6:	93 e0       	ldi	r25, 0x03	; 3
    13c8:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    13cc:	e0 91 b1 00 	lds	r30, 0x00B1
    13d0:	f0 91 b2 00 	lds	r31, 0x00B2
    13d4:	14 86       	std	Z+12, r1	; 0x0c
    13d6:	15 86       	std	Z+13, r1	; 0x0d
    13d8:	16 86       	std	Z+14, r1	; 0x0e
    13da:	17 86       	std	Z+15, r1	; 0x0f
    13dc:	10 92 ae 00 	sts	0x00AE, r1
    13e0:	97 c0       	rjmp	.+302    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    13e2:	0e 94 5f 08 	call	0x10be	; 0x10be <stop()>
    13e6:	94 c0       	rjmp	.+296    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    13e8:	0e 94 74 06 	call	0xce8	; 0xce8 <doMoveForthAndBackAtSpeed()>
    13ec:	91 c0       	rjmp	.+290    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    13ee:	80 91 ae 00 	lds	r24, 0x00AE
    13f2:	88 23       	and	r24, r24
    13f4:	21 f0       	breq	.+8      	; 0x13fe <RepRapPCBTest::loop()+0x310>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	09 f0       	breq	.+2      	; 0x13fc <RepRapPCBTest::loop()+0x30e>
    13fa:	8a c0       	rjmp	.+276    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    13fc:	43 c0       	rjmp	.+134    	; 0x1484 <RepRapPCBTest::loop()+0x396>
    13fe:	80 91 b0 01 	lds	r24, 0x01B0
    1402:	90 91 b1 01 	lds	r25, 0x01B1
    1406:	a0 91 b2 01 	lds	r26, 0x01B2
    140a:	b0 91 b3 01 	lds	r27, 0x01B3
    140e:	80 93 bf 01 	sts	0x01BF, r24
    1412:	90 93 c0 01 	sts	0x01C0, r25
    1416:	a0 93 c1 01 	sts	0x01C1, r26
    141a:	b0 93 c2 01 	sts	0x01C2, r27
    141e:	80 91 cf 01 	lds	r24, 0x01CF
    1422:	90 91 d0 01 	lds	r25, 0x01D0
    1426:	a0 91 d1 01 	lds	r26, 0x01D1
    142a:	b0 91 d2 01 	lds	r27, 0x01D2
    142e:	80 93 de 01 	sts	0x01DE, r24
    1432:	90 93 df 01 	sts	0x01DF, r25
    1436:	a0 93 e0 01 	sts	0x01E0, r26
    143a:	b0 93 e1 01 	sts	0x01E1, r27
    143e:	80 91 ee 01 	lds	r24, 0x01EE
    1442:	90 91 ef 01 	lds	r25, 0x01EF
    1446:	a0 91 f0 01 	lds	r26, 0x01F0
    144a:	b0 91 f1 01 	lds	r27, 0x01F1
    144e:	80 93 fd 01 	sts	0x01FD, r24
    1452:	90 93 fe 01 	sts	0x01FE, r25
    1456:	a0 93 ff 01 	sts	0x01FF, r26
    145a:	b0 93 00 02 	sts	0x0200, r27
    145e:	84 eb       	ldi	r24, 0xB4	; 180
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    1468:	83 ed       	ldi	r24, 0xD3	; 211
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    1472:	82 ef       	ldi	r24, 0xF2	; 242
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 ae 00 	sts	0x00AE, r24
    1482:	46 c0       	rjmp	.+140    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    1484:	80 91 aa 01 	lds	r24, 0x01AA
    1488:	88 23       	and	r24, r24
    148a:	09 f0       	breq	.+2      	; 0x148e <RepRapPCBTest::loop()+0x3a0>
    148c:	41 c0       	rjmp	.+130    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    148e:	80 91 be 01 	lds	r24, 0x01BE
    1492:	88 23       	and	r24, r24
    1494:	e9 f5       	brne	.+122    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    1496:	80 91 c9 01 	lds	r24, 0x01C9
    149a:	88 23       	and	r24, r24
    149c:	c9 f5       	brne	.+114    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    149e:	80 91 dd 01 	lds	r24, 0x01DD
    14a2:	88 23       	and	r24, r24
    14a4:	a9 f5       	brne	.+106    	; 0x1510 <RepRapPCBTest::loop()+0x422>
    14a6:	80 91 e8 01 	lds	r24, 0x01E8
    14aa:	88 23       	and	r24, r24
    14ac:	89 f5       	brne	.+98     	; 0x1510 <RepRapPCBTest::loop()+0x422>
    14ae:	80 91 fc 01 	lds	r24, 0x01FC
    14b2:	88 23       	and	r24, r24
    14b4:	69 f5       	brne	.+90     	; 0x1510 <RepRapPCBTest::loop()+0x422>
    14b6:	10 92 b6 01 	sts	0x01B6, r1
    14ba:	10 92 b7 01 	sts	0x01B7, r1
    14be:	10 92 b8 01 	sts	0x01B8, r1
    14c2:	10 92 b9 01 	sts	0x01B9, r1
    14c6:	10 92 d5 01 	sts	0x01D5, r1
    14ca:	10 92 d6 01 	sts	0x01D6, r1
    14ce:	10 92 d7 01 	sts	0x01D7, r1
    14d2:	10 92 d8 01 	sts	0x01D8, r1
    14d6:	10 92 f4 01 	sts	0x01F4, r1
    14da:	10 92 f5 01 	sts	0x01F5, r1
    14de:	10 92 f6 01 	sts	0x01F6, r1
    14e2:	10 92 f7 01 	sts	0x01F7, r1
    14e6:	10 92 ad 00 	sts	0x00AD, r1
    14ea:	12 c0       	rjmp	.+36     	; 0x1510 <RepRapPCBTest::loop()+0x422>
    14ec:	0e 94 be 07 	call	0xf7c	; 0xf7c <doStepTicking()>
    14f0:	80 91 5c 02 	lds	r24, 0x025C
    14f4:	88 23       	and	r24, r24
    14f6:	61 f0       	breq	.+24     	; 0x1510 <RepRapPCBTest::loop()+0x422>
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	80 91 ae 00 	lds	r24, 0x00AE
    14fe:	88 23       	and	r24, r24
    1500:	09 f4       	brne	.+2      	; 0x1504 <RepRapPCBTest::loop()+0x416>
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	90 93 ae 00 	sts	0x00AE, r25
    1508:	84 e4       	ldi	r24, 0x44	; 68
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	0e 94 11 0b 	call	0x1622	; 0x1622 <AdvButton::reset()>
    1510:	80 91 5c 02 	lds	r24, 0x025C
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	29 f4       	brne	.+10     	; 0x1522 <RepRapPCBTest::loop()+0x434>
    1518:	0e 94 5f 08 	call	0x10be	; 0x10be <stop()>
    151c:	0e 94 94 04 	call	0x928	; 0x928 <printHelp()>
    1520:	04 c0       	rjmp	.+8      	; 0x152a <RepRapPCBTest::loop()+0x43c>
    1522:	88 23       	and	r24, r24
    1524:	11 f0       	breq	.+4      	; 0x152a <RepRapPCBTest::loop()+0x43c>
    1526:	0e 94 5f 08 	call	0x10be	; 0x10be <stop()>
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	08 95       	ret

00001534 <RepRapPCBTest::setup()>:
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	08 e2       	ldi	r16, 0x28	; 40
    153e:	12 e0       	ldi	r17, 0x02	; 2
    1540:	c8 01       	movw	r24, r16
    1542:	64 e0       	ldi	r22, 0x04	; 4
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	0e 94 c9 10 	call	0x2192	; 0x2192 <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    154a:	84 e4       	ldi	r24, 0x44	; 68
    154c:	92 e0       	ldi	r25, 0x02	; 2
    154e:	b8 01       	movw	r22, r16
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	2a e0       	ldi	r18, 0x0A	; 10
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	0e 94 a9 0b 	call	0x1752	; 0x1752 <AdvButton::initialize(DigitalInputPin*, bool, unsigned int)>
    155a:	0d e2       	ldi	r16, 0x2D	; 45
    155c:	12 e0       	ldi	r17, 0x02	; 2
    155e:	c8 01       	movw	r24, r16
    1560:	66 e0       	ldi	r22, 0x06	; 6
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	0e 94 99 10 	call	0x2132	; 0x2132 <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    1568:	8d e5       	ldi	r24, 0x5D	; 93
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	b8 01       	movw	r22, r16
    156e:	44 e6       	ldi	r20, 0x64	; 100
    1570:	54 e0       	ldi	r21, 0x04	; 4
    1572:	25 e0       	ldi	r18, 0x05	; 5
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	01 e0       	ldi	r16, 0x01	; 1
    1578:	0e 94 2d 13 	call	0x265a	; 0x265a <StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)>
    157c:	8d e3       	ldi	r24, 0x3D	; 61
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	52 ec       	ldi	r21, 0xC2	; 194
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	24 e6       	ldi	r18, 0x64	; 100
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	08 eb       	ldi	r16, 0xB8	; 184
    158e:	12 e0       	ldi	r17, 0x02	; 2
    1590:	0e 94 d6 12 	call	0x25ac	; 0x25ac <SerialReader::initialize(long, int, char*)>
    1594:	83 e3       	ldi	r24, 0x33	; 51
    1596:	e8 2e       	mov	r14, r24
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	f8 2e       	mov	r15, r24
    159c:	c7 01       	movw	r24, r14
    159e:	62 e0       	ldi	r22, 0x02	; 2
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	0e 94 c9 10 	call	0x2192	; 0x2192 <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    15a6:	08 e3       	ldi	r16, 0x38	; 56
    15a8:	12 e0       	ldi	r17, 0x02	; 2
    15aa:	c8 01       	movw	r24, r16
    15ac:	63 e0       	ldi	r22, 0x03	; 3
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 c9 10 	call	0x2192	; 0x2192 <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    15b4:	80 e7       	ldi	r24, 0x70	; 112
    15b6:	92 e0       	ldi	r25, 0x02	; 2
    15b8:	b7 01       	movw	r22, r14
    15ba:	a8 01       	movw	r20, r16
    15bc:	0e 94 4d 12 	call	0x249a	; 0x249a <RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	6c e0       	ldi	r22, 0x0C	; 12
    15c4:	7b e0       	ldi	r23, 0x0B	; 11
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	0e 94 a7 1b 	call	0x374e	; 0x374e <attachInterrupt>
    15ce:	8f eb       	ldi	r24, 0xBF	; 191
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <RepRapPCB::initialize()>
    15d6:	10 92 ad 00 	sts	0x00AD, r1
    15da:	84 e5       	ldi	r24, 0x54	; 84
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	90 93 b0 00 	sts	0x00B0, r25
    15e2:	80 93 af 00 	sts	0x00AF, r24
    15e6:	8a ea       	ldi	r24, 0xAA	; 170
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	90 93 b2 00 	sts	0x00B2, r25
    15ee:	80 93 b1 00 	sts	0x00B1, r24
    15f2:	00 ea       	ldi	r16, 0xA0	; 160
    15f4:	13 e0       	ldi	r17, 0x03	; 3
    15f6:	c8 01       	movw	r24, r16
    15f8:	67 e8       	ldi	r22, 0x87	; 135
    15fa:	74 e0       	ldi	r23, 0x04	; 4
    15fc:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
    1600:	c8 01       	movw	r24, r16
    1602:	6e e6       	ldi	r22, 0x6E	; 110
    1604:	74 e0       	ldi	r23, 0x04	; 4
    1606:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
    160a:	0e 94 94 04 	call	0x928	; 0x928 <printHelp()>
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	08 95       	ret

00001618 <UpdateRotor()>:
    1618:	80 e7       	ldi	r24, 0x70	; 112
    161a:	92 e0       	ldi	r25, 0x02	; 2
    161c:	0e 94 93 11 	call	0x2326	; 0x2326 <RotaryEncoderAcceleration::update()>
    1620:	08 95       	ret

00001622 <AdvButton::reset()>:
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	8c 01       	movw	r16, r24
    1628:	0e 94 a2 0c 	call	0x1944	; 0x1944 <Button::reset()>
    162c:	f8 01       	movw	r30, r16
    162e:	17 8a       	std	Z+23, r1	; 0x17
    1630:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    1634:	f8 01       	movw	r30, r16
    1636:	66 87       	std	Z+14, r22	; 0x0e
    1638:	77 87       	std	Z+15, r23	; 0x0f
    163a:	80 8b       	std	Z+16, r24	; 0x10
    163c:	91 8b       	std	Z+17, r25	; 0x11
    163e:	68 51       	subi	r22, 0x18	; 24
    1640:	7c 4f       	sbci	r23, 0xFC	; 252
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	62 8b       	std	Z+18, r22	; 0x12
    1648:	73 8b       	std	Z+19, r23	; 0x13
    164a:	84 8b       	std	Z+20, r24	; 0x14
    164c:	95 8b       	std	Z+21, r25	; 0x15
    164e:	10 8e       	std	Z+24, r1	; 0x18
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	08 95       	ret

00001656 <AdvButton::update()>:
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
    1664:	0e 94 be 0c 	call	0x197c	; 0x197c <Button::update()>
    1668:	18 8e       	std	Y+24, r1	; 0x18
    166a:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    166e:	9b 01       	movw	r18, r22
    1670:	ac 01       	movw	r20, r24
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	98 17       	cp	r25, r24
    1678:	b9 f1       	breq	.+110    	; 0x16e8 <AdvButton::update()+0x92>
    167a:	99 23       	and	r25, r25
    167c:	71 f4       	brne	.+28     	; 0x169a <AdvButton::update()+0x44>
    167e:	2e 87       	std	Y+14, r18	; 0x0e
    1680:	3f 87       	std	Y+15, r19	; 0x0f
    1682:	48 8b       	std	Y+16, r20	; 0x10
    1684:	59 8b       	std	Y+17, r21	; 0x11
    1686:	28 51       	subi	r18, 0x18	; 24
    1688:	3c 4f       	sbci	r19, 0xFC	; 252
    168a:	4f 4f       	sbci	r20, 0xFF	; 255
    168c:	5f 4f       	sbci	r21, 0xFF	; 255
    168e:	2a 8b       	std	Y+18, r18	; 0x12
    1690:	3b 8b       	std	Y+19, r19	; 0x13
    1692:	4c 8b       	std	Y+20, r20	; 0x14
    1694:	5d 8b       	std	Y+21, r21	; 0x15
    1696:	1f 8a       	std	Y+23, r1	; 0x17
    1698:	55 c0       	rjmp	.+170    	; 0x1744 <AdvButton::update()+0xee>
    169a:	8f 89       	ldd	r24, Y+23	; 0x17
    169c:	88 23       	and	r24, r24
    169e:	a9 f4       	brne	.+42     	; 0x16ca <AdvButton::update()+0x74>
    16a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a4:	ac 85       	ldd	r26, Y+12	; 0x0c
    16a6:	bd 85       	ldd	r27, Y+13	; 0x0d
    16a8:	79 01       	movw	r14, r18
    16aa:	8a 01       	movw	r16, r20
    16ac:	e8 1a       	sub	r14, r24
    16ae:	f9 0a       	sbc	r15, r25
    16b0:	0a 0b       	sbc	r16, r26
    16b2:	1b 0b       	sbc	r17, r27
    16b4:	d8 01       	movw	r26, r16
    16b6:	c7 01       	movw	r24, r14
    16b8:	81 59       	subi	r24, 0x91	; 145
    16ba:	91 40       	sbci	r25, 0x01	; 1
    16bc:	a0 40       	sbci	r26, 0x00	; 0
    16be:	b0 40       	sbci	r27, 0x00	; 0
    16c0:	10 f4       	brcc	.+4      	; 0x16c6 <AdvButton::update()+0x70>
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <AdvButton::update()+0x72>
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	88 8f       	std	Y+24, r24	; 0x18
    16ca:	8f 89       	ldd	r24, Y+23	; 0x17
    16cc:	88 23       	and	r24, r24
    16ce:	39 f0       	breq	.+14     	; 0x16de <AdvButton::update()+0x88>
    16d0:	8e 89       	ldd	r24, Y+22	; 0x16
    16d2:	88 23       	and	r24, r24
    16d4:	21 f4       	brne	.+8      	; 0x16de <AdvButton::update()+0x88>
    16d6:	20 52       	subi	r18, 0x20	; 32
    16d8:	33 40       	sbci	r19, 0x03	; 3
    16da:	40 40       	sbci	r20, 0x00	; 0
    16dc:	50 40       	sbci	r21, 0x00	; 0
    16de:	2a 87       	std	Y+10, r18	; 0x0a
    16e0:	3b 87       	std	Y+11, r19	; 0x0b
    16e2:	4c 87       	std	Y+12, r20	; 0x0c
    16e4:	5d 87       	std	Y+13, r21	; 0x0d
    16e6:	2e c0       	rjmp	.+92     	; 0x1744 <AdvButton::update()+0xee>
    16e8:	99 23       	and	r25, r25
    16ea:	61 f5       	brne	.+88     	; 0x1744 <AdvButton::update()+0xee>
    16ec:	8e 89       	ldd	r24, Y+22	; 0x16
    16ee:	88 23       	and	r24, r24
    16f0:	a9 f0       	breq	.+42     	; 0x171c <AdvButton::update()+0xc6>
    16f2:	8a 89       	ldd	r24, Y+18	; 0x12
    16f4:	9b 89       	ldd	r25, Y+19	; 0x13
    16f6:	ac 89       	ldd	r26, Y+20	; 0x14
    16f8:	bd 89       	ldd	r27, Y+21	; 0x15
    16fa:	28 17       	cp	r18, r24
    16fc:	39 07       	cpc	r19, r25
    16fe:	4a 07       	cpc	r20, r26
    1700:	5b 07       	cpc	r21, r27
    1702:	00 f1       	brcs	.+64     	; 0x1744 <AdvButton::update()+0xee>
    1704:	2e 5c       	subi	r18, 0xCE	; 206
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	4f 4f       	sbci	r20, 0xFF	; 255
    170a:	5f 4f       	sbci	r21, 0xFF	; 255
    170c:	2a 8b       	std	Y+18, r18	; 0x12
    170e:	3b 8b       	std	Y+19, r19	; 0x13
    1710:	4c 8b       	std	Y+20, r20	; 0x14
    1712:	5d 8b       	std	Y+21, r21	; 0x15
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	8f 8b       	std	Y+23, r24	; 0x17
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	13 c0       	rjmp	.+38     	; 0x1742 <AdvButton::update()+0xec>
    171c:	8f 89       	ldd	r24, Y+23	; 0x17
    171e:	88 23       	and	r24, r24
    1720:	89 f4       	brne	.+34     	; 0x1744 <AdvButton::update()+0xee>
    1722:	8e 85       	ldd	r24, Y+14	; 0x0e
    1724:	9f 85       	ldd	r25, Y+15	; 0x0f
    1726:	a8 89       	ldd	r26, Y+16	; 0x10
    1728:	b9 89       	ldd	r27, Y+17	; 0x11
    172a:	28 1b       	sub	r18, r24
    172c:	39 0b       	sbc	r19, r25
    172e:	4a 0b       	sbc	r20, r26
    1730:	5b 0b       	sbc	r21, r27
    1732:	28 55       	subi	r18, 0x58	; 88
    1734:	32 40       	sbci	r19, 0x02	; 2
    1736:	40 40       	sbci	r20, 0x00	; 0
    1738:	50 40       	sbci	r21, 0x00	; 0
    173a:	20 f0       	brcs	.+8      	; 0x1744 <AdvButton::update()+0xee>
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	8f 8b       	std	Y+23, r24	; 0x17
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	88 8f       	std	Y+24, r24	; 0x18
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	08 95       	ret

00001752 <AdvButton::initialize(DigitalInputPin*, bool, unsigned int)>:
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	8c 01       	movw	r16, r24
    175a:	f4 2e       	mov	r15, r20
    175c:	a9 01       	movw	r20, r18
    175e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Button::initialize(DigitalInputPin*, unsigned int)>
    1762:	f8 01       	movw	r30, r16
    1764:	f6 8a       	std	Z+22, r15	; 0x16
    1766:	16 86       	std	Z+14, r1	; 0x0e
    1768:	17 86       	std	Z+15, r1	; 0x0f
    176a:	10 8a       	std	Z+16, r1	; 0x10
    176c:	11 8a       	std	Z+17, r1	; 0x11
    176e:	12 86       	std	Z+10, r1	; 0x0a
    1770:	13 86       	std	Z+11, r1	; 0x0b
    1772:	14 86       	std	Z+12, r1	; 0x0c
    1774:	15 86       	std	Z+13, r1	; 0x0d
    1776:	12 8a       	std	Z+18, r1	; 0x12
    1778:	13 8a       	std	Z+19, r1	; 0x13
    177a:	14 8a       	std	Z+20, r1	; 0x14
    177c:	15 8a       	std	Z+21, r1	; 0x15
    177e:	17 8a       	std	Z+23, r1	; 0x17
    1780:	10 8e       	std	Z+24, r1	; 0x18
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	08 95       	ret

0000178a <BlinkingLed::initialize(DigitalOutputPin*)>:
    178a:	fc 01       	movw	r30, r24
    178c:	71 83       	std	Z+1, r23	; 0x01
    178e:	60 83       	st	Z, r22
    1790:	13 82       	std	Z+3, r1	; 0x03
    1792:	12 82       	std	Z+2, r1	; 0x02
    1794:	14 82       	std	Z+4, r1	; 0x04
    1796:	13 86       	std	Z+11, r1	; 0x0b
    1798:	12 86       	std	Z+10, r1	; 0x0a
    179a:	11 86       	std	Z+9, r1	; 0x09
    179c:	15 82       	std	Z+5, r1	; 0x05
    179e:	16 82       	std	Z+6, r1	; 0x06
    17a0:	17 82       	std	Z+7, r1	; 0x07
    17a2:	10 86       	std	Z+8, r1	; 0x08
    17a4:	08 95       	ret

000017a6 <BlinkingLed::getNextDelay()>:
    17a6:	dc 01       	movw	r26, r24
    17a8:	6f b7       	in	r22, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	19 96       	adiw	r26, 0x09	; 9
    17ae:	4d 91       	ld	r20, X+
    17b0:	5c 91       	ld	r21, X
    17b2:	1a 97       	sbiw	r26, 0x0a	; 10
    17b4:	41 15       	cp	r20, r1
    17b6:	51 05       	cpc	r21, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <BlinkingLed::getNextDelay()+0x16>
    17ba:	48 c0       	rjmp	.+144    	; 0x184c <BlinkingLed::getNextDelay()+0xa6>
    17bc:	14 96       	adiw	r26, 0x04	; 4
    17be:	2c 91       	ld	r18, X
    17c0:	14 97       	sbiw	r26, 0x04	; 4
    17c2:	82 2f       	mov	r24, r18
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	12 96       	adiw	r26, 0x02	; 2
    17cc:	ed 91       	ld	r30, X+
    17ce:	fc 91       	ld	r31, X
    17d0:	13 97       	sbiw	r26, 0x03	; 3
    17d2:	e8 0f       	add	r30, r24
    17d4:	f9 1f       	adc	r31, r25
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	14 96       	adiw	r26, 0x04	; 4
    17da:	2c 93       	st	X, r18
    17dc:	14 97       	sbiw	r26, 0x04	; 4
    17de:	85 91       	lpm	r24, Z+
    17e0:	94 91       	lpm	r25, Z+
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	51 f5       	brne	.+84     	; 0x183a <BlinkingLed::getNextDelay()+0x94>
    17e6:	1b 96       	adiw	r26, 0x0b	; 11
    17e8:	1c 92       	st	X, r1
    17ea:	1b 97       	sbiw	r26, 0x0b	; 11
    17ec:	14 96       	adiw	r26, 0x04	; 4
    17ee:	1c 92       	st	X, r1
    17f0:	14 97       	sbiw	r26, 0x04	; 4
    17f2:	14 16       	cp	r1, r20
    17f4:	15 06       	cpc	r1, r21
    17f6:	34 f4       	brge	.+12     	; 0x1804 <BlinkingLed::getNextDelay()+0x5e>
    17f8:	41 50       	subi	r20, 0x01	; 1
    17fa:	50 40       	sbci	r21, 0x00	; 0
    17fc:	1a 96       	adiw	r26, 0x0a	; 10
    17fe:	5c 93       	st	X, r21
    1800:	4e 93       	st	-X, r20
    1802:	19 97       	sbiw	r26, 0x09	; 9
    1804:	19 96       	adiw	r26, 0x09	; 9
    1806:	8d 91       	ld	r24, X+
    1808:	9c 91       	ld	r25, X
    180a:	1a 97       	sbiw	r26, 0x0a	; 10
    180c:	89 2b       	or	r24, r25
    180e:	f1 f0       	breq	.+60     	; 0x184c <BlinkingLed::getNextDelay()+0xa6>
    1810:	14 96       	adiw	r26, 0x04	; 4
    1812:	2c 91       	ld	r18, X
    1814:	14 97       	sbiw	r26, 0x04	; 4
    1816:	82 2f       	mov	r24, r18
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	12 96       	adiw	r26, 0x02	; 2
    1820:	ed 91       	ld	r30, X+
    1822:	fc 91       	ld	r31, X
    1824:	13 97       	sbiw	r26, 0x03	; 3
    1826:	e8 0f       	add	r30, r24
    1828:	f9 1f       	adc	r31, r25
    182a:	2f 5f       	subi	r18, 0xFF	; 255
    182c:	14 96       	adiw	r26, 0x04	; 4
    182e:	2c 93       	st	X, r18
    1830:	14 97       	sbiw	r26, 0x04	; 4
    1832:	85 91       	lpm	r24, Z+
    1834:	94 91       	lpm	r25, Z+
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	11 f0       	breq	.+4      	; 0x183e <BlinkingLed::getNextDelay()+0x98>
    183a:	9c 01       	movw	r18, r24
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <BlinkingLed::getNextDelay()+0xaa>
    183e:	14 96       	adiw	r26, 0x04	; 4
    1840:	1c 92       	st	X, r1
    1842:	14 97       	sbiw	r26, 0x04	; 4
    1844:	1a 96       	adiw	r26, 0x0a	; 10
    1846:	1c 92       	st	X, r1
    1848:	1e 92       	st	-X, r1
    184a:	19 97       	sbiw	r26, 0x09	; 9
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	6f bf       	out	0x3f, r22	; 63
    1852:	c9 01       	movw	r24, r18
    1854:	08 95       	ret

00001856 <BlinkingLed::update()>:
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	ec 01       	movw	r28, r24
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	89 2b       	or	r24, r25
    186a:	99 f1       	breq	.+102    	; 0x18d2 <BlinkingLed::update()+0x7c>
    186c:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    1870:	7b 01       	movw	r14, r22
    1872:	8c 01       	movw	r16, r24
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	af 81       	ldd	r26, Y+7	; 0x07
    187a:	b8 85       	ldd	r27, Y+8	; 0x08
    187c:	a8 01       	movw	r20, r16
    187e:	97 01       	movw	r18, r14
    1880:	28 1b       	sub	r18, r24
    1882:	39 0b       	sbc	r19, r25
    1884:	4a 0b       	sbc	r20, r26
    1886:	5b 0b       	sbc	r21, r27
    1888:	57 fd       	sbrc	r21, 7
    188a:	30 c0       	rjmp	.+96     	; 0x18ec <BlinkingLed::update()+0x96>
    188c:	ce 01       	movw	r24, r28
    188e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <BlinkingLed::getNextDelay()>
    1892:	9c 01       	movw	r18, r24
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	11 f4       	brne	.+4      	; 0x189c <BlinkingLed::update()+0x46>
    1898:	1b 86       	std	Y+11, r1	; 0x0b
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <BlinkingLed::update()+0x4e>
    189c:	8b 85       	ldd	r24, Y+11	; 0x0b
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	89 27       	eor	r24, r25
    18a2:	8b 87       	std	Y+11, r24	; 0x0b
    18a4:	c9 01       	movw	r24, r18
    18a6:	a0 e0       	ldi	r26, 0x00	; 0
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	8e 0d       	add	r24, r14
    18ac:	9f 1d       	adc	r25, r15
    18ae:	a0 1f       	adc	r26, r16
    18b0:	b1 1f       	adc	r27, r17
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	af 83       	std	Y+7, r26	; 0x07
    18b8:	b8 87       	std	Y+8, r27	; 0x08
    18ba:	a8 81       	ld	r26, Y
    18bc:	b9 81       	ldd	r27, Y+1	; 0x01
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	02 80       	ldd	r0, Z+2	; 0x02
    18c6:	f3 81       	ldd	r31, Z+3	; 0x03
    18c8:	e0 2d       	mov	r30, r0
    18ca:	cd 01       	movw	r24, r26
    18cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ce:	09 95       	icall
    18d0:	0d c0       	rjmp	.+26     	; 0x18ec <BlinkingLed::update()+0x96>
    18d2:	1b 86       	std	Y+11, r1	; 0x0b
    18d4:	e8 81       	ld	r30, Y
    18d6:	f9 81       	ldd	r31, Y+1	; 0x01
    18d8:	a0 81       	ld	r26, Z
    18da:	b1 81       	ldd	r27, Z+1	; 0x01
    18dc:	12 96       	adiw	r26, 0x02	; 2
    18de:	2d 91       	ld	r18, X+
    18e0:	3c 91       	ld	r19, X
    18e2:	13 97       	sbiw	r26, 0x03	; 3
    18e4:	cf 01       	movw	r24, r30
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	f9 01       	movw	r30, r18
    18ea:	09 95       	icall
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	08 95       	ret

000018fa <BlinkingLed::playBlink(unsigned int const*, short)>:
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	ec 01       	movw	r28, r24
    1900:	61 15       	cp	r22, r1
    1902:	71 05       	cpc	r23, r1
    1904:	11 f4       	brne	.+4      	; 0x190a <BlinkingLed::playBlink(unsigned int const*, short)+0x10>
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	9b 81       	ldd	r25, Y+3	; 0x03
    190e:	68 17       	cp	r22, r24
    1910:	79 07       	cpc	r23, r25
    1912:	19 f4       	brne	.+6      	; 0x191a <BlinkingLed::playBlink(unsigned int const*, short)+0x20>
    1914:	5a 87       	std	Y+10, r21	; 0x0a
    1916:	49 87       	std	Y+9, r20	; 0x09
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <BlinkingLed::playBlink(unsigned int const*, short)+0x3e>
    191a:	8f b7       	in	r24, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	1c 82       	std	Y+4, r1	; 0x04
    1920:	7b 83       	std	Y+3, r23	; 0x03
    1922:	6a 83       	std	Y+2, r22	; 0x02
    1924:	5a 87       	std	Y+10, r21	; 0x0a
    1926:	49 87       	std	Y+9, r20	; 0x09
    1928:	1b 86       	std	Y+11, r1	; 0x0b
    192a:	8f bf       	out	0x3f, r24	; 63
    192c:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    1930:	6d 83       	std	Y+5, r22	; 0x05
    1932:	7e 83       	std	Y+6, r23	; 0x06
    1934:	8f 83       	std	Y+7, r24	; 0x07
    1936:	98 87       	std	Y+8, r25	; 0x08
    1938:	ce 01       	movw	r24, r28
    193a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <BlinkingLed::update()>
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <Button::reset()>:
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	8c 01       	movw	r16, r24
    194a:	fc 01       	movw	r30, r24
    194c:	83 81       	ldd	r24, Z+3	; 0x03
    194e:	82 83       	std	Z+2, r24	; 0x02
    1950:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    1954:	f8 01       	movw	r30, r16
    1956:	20 85       	ldd	r18, Z+8	; 0x08
    1958:	31 85       	ldd	r19, Z+9	; 0x09
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	20 95       	com	r18
    1960:	30 95       	com	r19
    1962:	40 95       	com	r20
    1964:	50 95       	com	r21
    1966:	26 0f       	add	r18, r22
    1968:	37 1f       	adc	r19, r23
    196a:	48 1f       	adc	r20, r24
    196c:	59 1f       	adc	r21, r25
    196e:	24 83       	std	Z+4, r18	; 0x04
    1970:	35 83       	std	Z+5, r19	; 0x05
    1972:	46 83       	std	Z+6, r20	; 0x06
    1974:	57 83       	std	Z+7, r21	; 0x07
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	08 95       	ret

0000197c <Button::update()>:
    197c:	9f 92       	push	r9
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	ec 01       	movw	r28, r24
    1994:	a8 81       	ld	r26, Y
    1996:	b9 81       	ldd	r27, Y+1	; 0x01
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	11 97       	sbiw	r26, 0x01	; 1
    199e:	01 90       	ld	r0, Z+
    19a0:	f0 81       	ld	r31, Z
    19a2:	e0 2d       	mov	r30, r0
    19a4:	cd 01       	movw	r24, r26
    19a6:	09 95       	icall
    19a8:	98 2e       	mov	r9, r24
    19aa:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    19ae:	7b 01       	movw	r14, r22
    19b0:	8c 01       	movw	r16, r24
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	8a 83       	std	Y+2, r24	; 0x02
    19b6:	ac 80       	ldd	r10, Y+4	; 0x04
    19b8:	bd 80       	ldd	r11, Y+5	; 0x05
    19ba:	ce 80       	ldd	r12, Y+6	; 0x06
    19bc:	df 80       	ldd	r13, Y+7	; 0x07
    19be:	68 85       	ldd	r22, Y+8	; 0x08
    19c0:	79 85       	ldd	r23, Y+9	; 0x09
    19c2:	98 16       	cp	r9, r24
    19c4:	a1 f0       	breq	.+40     	; 0x19ee <Button::update()+0x72>
    19c6:	a8 01       	movw	r20, r16
    19c8:	97 01       	movw	r18, r14
    19ca:	2a 19       	sub	r18, r10
    19cc:	3b 09       	sbc	r19, r11
    19ce:	4c 09       	sbc	r20, r12
    19d0:	5d 09       	sbc	r21, r13
    19d2:	cb 01       	movw	r24, r22
    19d4:	a0 e0       	ldi	r26, 0x00	; 0
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	28 17       	cp	r18, r24
    19da:	39 07       	cpc	r19, r25
    19dc:	4a 07       	cpc	r20, r26
    19de:	5b 07       	cpc	r21, r27
    19e0:	08 f0       	brcs	.+2      	; 0x19e4 <Button::update()+0x68>
    19e2:	9b 82       	std	Y+3, r9	; 0x03
    19e4:	ec 82       	std	Y+4, r14	; 0x04
    19e6:	fd 82       	std	Y+5, r15	; 0x05
    19e8:	0e 83       	std	Y+6, r16	; 0x06
    19ea:	1f 83       	std	Y+7, r17	; 0x07
    19ec:	1a c0       	rjmp	.+52     	; 0x1a22 <Button::update()+0xa6>
    19ee:	9b 01       	movw	r18, r22
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	d8 01       	movw	r26, r16
    19f6:	c7 01       	movw	r24, r14
    19f8:	8a 19       	sub	r24, r10
    19fa:	9b 09       	sbc	r25, r11
    19fc:	ac 09       	sbc	r26, r12
    19fe:	bd 09       	sbc	r27, r13
    1a00:	82 17       	cp	r24, r18
    1a02:	93 07       	cpc	r25, r19
    1a04:	a4 07       	cpc	r26, r20
    1a06:	b5 07       	cpc	r27, r21
    1a08:	60 f0       	brcs	.+24     	; 0x1a22 <Button::update()+0xa6>
    1a0a:	20 95       	com	r18
    1a0c:	30 95       	com	r19
    1a0e:	40 95       	com	r20
    1a10:	50 95       	com	r21
    1a12:	2e 0d       	add	r18, r14
    1a14:	3f 1d       	adc	r19, r15
    1a16:	40 1f       	adc	r20, r16
    1a18:	51 1f       	adc	r21, r17
    1a1a:	2c 83       	std	Y+4, r18	; 0x04
    1a1c:	3d 83       	std	Y+5, r19	; 0x05
    1a1e:	4e 83       	std	Y+6, r20	; 0x06
    1a20:	5f 83       	std	Y+7, r21	; 0x07
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	bf 90       	pop	r11
    1a34:	af 90       	pop	r10
    1a36:	9f 90       	pop	r9
    1a38:	08 95       	ret

00001a3a <Button::initialize(DigitalInputPin*, unsigned int)>:
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	8c 01       	movw	r16, r24
    1a40:	fc 01       	movw	r30, r24
    1a42:	71 83       	std	Z+1, r23	; 0x01
    1a44:	60 83       	st	Z, r22
    1a46:	51 87       	std	Z+9, r21	; 0x09
    1a48:	40 87       	std	Z+8, r20	; 0x08
    1a4a:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    1a4e:	f8 01       	movw	r30, r16
    1a50:	64 83       	std	Z+4, r22	; 0x04
    1a52:	75 83       	std	Z+5, r23	; 0x05
    1a54:	86 83       	std	Z+6, r24	; 0x06
    1a56:	97 83       	std	Z+7, r25	; 0x07
    1a58:	a0 81       	ld	r26, Z
    1a5a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a5c:	ed 91       	ld	r30, X+
    1a5e:	fc 91       	ld	r31, X
    1a60:	11 97       	sbiw	r26, 0x01	; 1
    1a62:	01 90       	ld	r0, Z+
    1a64:	f0 81       	ld	r31, Z
    1a66:	e0 2d       	mov	r30, r0
    1a68:	cd 01       	movw	r24, r26
    1a6a:	09 95       	icall
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	83 83       	std	Z+3, r24	; 0x03
    1a70:	82 83       	std	Z+2, r24	; 0x02
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	08 95       	ret

00001a78 <DigitalInputArduinoPin::getState()>:
    1a78:	dc 01       	movw	r26, r24
    1a7a:	13 96       	adiw	r26, 0x03	; 3
    1a7c:	ed 91       	ld	r30, X+
    1a7e:	fc 91       	ld	r31, X
    1a80:	14 97       	sbiw	r26, 0x04	; 4
    1a82:	20 81       	ld	r18, Z
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	12 96       	adiw	r26, 0x02	; 2
    1a8a:	8c 91       	ld	r24, X
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	28 23       	and	r18, r24
    1a90:	39 23       	and	r19, r25
    1a92:	23 2b       	or	r18, r19
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <DigitalInputArduinoPin::getState()+0x20>
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	84 2f       	mov	r24, r20
    1a9a:	08 95       	ret

00001a9c <DigitalOutputArduinoPin::getState()>:
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	85 81       	ldd	r24, Z+5	; 0x05
    1aa0:	08 95       	ret

00001aa2 <DigitalOutputArduinoPin::setState(bool)>:
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	65 83       	std	Z+5, r22	; 0x05
    1aa6:	a3 81       	ldd	r26, Z+3	; 0x03
    1aa8:	b4 81       	ldd	r27, Z+4	; 0x04
    1aaa:	22 81       	ldd	r18, Z+2	; 0x02
    1aac:	66 23       	and	r22, r22
    1aae:	31 f0       	breq	.+12     	; 0x1abc <DigitalOutputArduinoPin::setState(bool)+0x1a>
    1ab0:	9f b7       	in	r25, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	8c 91       	ld	r24, X
    1ab6:	82 2b       	or	r24, r18
    1ab8:	8c 93       	st	X, r24
    1aba:	06 c0       	rjmp	.+12     	; 0x1ac8 <DigitalOutputArduinoPin::setState(bool)+0x26>
    1abc:	9f b7       	in	r25, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	8c 91       	ld	r24, X
    1ac2:	20 95       	com	r18
    1ac4:	28 23       	and	r18, r24
    1ac6:	2c 93       	st	X, r18
    1ac8:	9f bf       	out	0x3f, r25	; 63
    1aca:	08 95       	ret

00001acc <DigitalInputShiftRegisterPin::getState()>:
    1acc:	fc 01       	movw	r30, r24
    1ace:	a2 81       	ldd	r26, Z+2	; 0x02
    1ad0:	b3 81       	ldd	r27, Z+3	; 0x03
    1ad2:	24 81       	ldd	r18, Z+4	; 0x04
    1ad4:	9f 96       	adiw	r26, 0x2f	; 47
    1ad6:	8c 91       	ld	r24, X
    1ad8:	9f 97       	sbiw	r26, 0x2f	; 47
    1ada:	28 17       	cp	r18, r24
    1adc:	10 f0       	brcs	.+4      	; 0x1ae2 <DigitalInputShiftRegisterPin::getState()+0x16>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	08 95       	ret
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	c9 01       	movw	r24, r18
    1ae6:	43 e0       	ldi	r20, 0x03	; 3
    1ae8:	95 95       	asr	r25
    1aea:	87 95       	ror	r24
    1aec:	4a 95       	dec	r20
    1aee:	e1 f7       	brne	.-8      	; 0x1ae8 <DigitalInputShiftRegisterPin::getState()+0x1c>
    1af0:	a8 0f       	add	r26, r24
    1af2:	b9 1f       	adc	r27, r25
    1af4:	9d 96       	adiw	r26, 0x2d	; 45
    1af6:	8c 91       	ld	r24, X
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	27 70       	andi	r18, 0x07	; 7
    1afc:	30 70       	andi	r19, 0x00	; 0
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DigitalInputShiftRegisterPin::getState()+0x38>
    1b00:	95 95       	asr	r25
    1b02:	87 95       	ror	r24
    1b04:	2a 95       	dec	r18
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DigitalInputShiftRegisterPin::getState()+0x34>
    1b08:	81 70       	andi	r24, 0x01	; 1
    1b0a:	08 95       	ret

00001b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>:
    1b0c:	26 2f       	mov	r18, r22
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	f9 01       	movw	r30, r18
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	e2 0f       	add	r30, r18
    1b1c:	f3 1f       	adc	r31, r19
    1b1e:	e8 0f       	add	r30, r24
    1b20:	f9 1f       	adc	r31, r25
    1b22:	93 83       	std	Z+3, r25	; 0x03
    1b24:	82 83       	std	Z+2, r24	; 0x02
    1b26:	64 83       	std	Z+4, r22	; 0x04
    1b28:	cf 01       	movw	r24, r30
    1b2a:	08 95       	ret

00001b2c <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)>:
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	ec 01       	movw	r28, r24
    1b3a:	da 01       	movw	r26, r20
    1b3c:	79 01       	movw	r14, r18
    1b3e:	69 30       	cpi	r22, 0x09	; 9
    1b40:	08 f4       	brcc	.+2      	; 0x1b44 <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)+0x18>
    1b42:	69 e0       	ldi	r22, 0x09	; 9
    1b44:	6f a7       	std	Y+47, r22	; 0x2f
    1b46:	b9 ab       	std	Y+49, r27	; 0x31
    1b48:	a8 ab       	std	Y+48, r26	; 0x30
    1b4a:	fb aa       	std	Y+51, r15	; 0x33
    1b4c:	ea aa       	std	Y+50, r14	; 0x32
    1b4e:	1d ab       	std	Y+53, r17	; 0x35
    1b50:	0c ab       	std	Y+52, r16	; 0x34
    1b52:	ed 91       	ld	r30, X+
    1b54:	fc 91       	ld	r31, X
    1b56:	11 97       	sbiw	r26, 0x01	; 1
    1b58:	02 80       	ldd	r0, Z+2	; 0x02
    1b5a:	f3 81       	ldd	r31, Z+3	; 0x03
    1b5c:	e0 2d       	mov	r30, r0
    1b5e:	cd 01       	movw	r24, r26
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	09 95       	icall
    1b64:	d7 01       	movw	r26, r14
    1b66:	ed 91       	ld	r30, X+
    1b68:	fc 91       	ld	r31, X
    1b6a:	02 80       	ldd	r0, Z+2	; 0x02
    1b6c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b6e:	e0 2d       	mov	r30, r0
    1b70:	c7 01       	movw	r24, r14
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	09 95       	icall
    1b76:	1e a6       	std	Y+46, r1	; 0x2e
    1b78:	1d a6       	std	Y+45, r1	; 0x2d
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	08 95       	ret

00001b88 <DigitalInputShiftRegister_74HC166::update()>:
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	ec 01       	movw	r28, r24
    1b96:	aa a9       	ldd	r26, Y+50	; 0x32
    1b98:	bb a9       	ldd	r27, Y+51	; 0x33
    1b9a:	ed 91       	ld	r30, X+
    1b9c:	fc 91       	ld	r31, X
    1b9e:	11 97       	sbiw	r26, 0x01	; 1
    1ba0:	02 80       	ldd	r0, Z+2	; 0x02
    1ba2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ba4:	e0 2d       	mov	r30, r0
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	09 95       	icall
    1bac:	a8 a9       	ldd	r26, Y+48	; 0x30
    1bae:	b9 a9       	ldd	r27, Y+49	; 0x31
    1bb0:	ed 91       	ld	r30, X+
    1bb2:	fc 91       	ld	r31, X
    1bb4:	11 97       	sbiw	r26, 0x01	; 1
    1bb6:	02 80       	ldd	r0, Z+2	; 0x02
    1bb8:	f3 81       	ldd	r31, Z+3	; 0x03
    1bba:	e0 2d       	mov	r30, r0
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	09 95       	icall
    1bc2:	aa a9       	ldd	r26, Y+50	; 0x32
    1bc4:	bb a9       	ldd	r27, Y+51	; 0x33
    1bc6:	ed 91       	ld	r30, X+
    1bc8:	fc 91       	ld	r31, X
    1bca:	11 97       	sbiw	r26, 0x01	; 1
    1bcc:	02 80       	ldd	r0, Z+2	; 0x02
    1bce:	f3 81       	ldd	r31, Z+3	; 0x03
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	09 95       	icall
    1bd8:	a8 a9       	ldd	r26, Y+48	; 0x30
    1bda:	b9 a9       	ldd	r27, Y+49	; 0x31
    1bdc:	ed 91       	ld	r30, X+
    1bde:	fc 91       	ld	r31, X
    1be0:	11 97       	sbiw	r26, 0x01	; 1
    1be2:	02 80       	ldd	r0, Z+2	; 0x02
    1be4:	f3 81       	ldd	r31, Z+3	; 0x03
    1be6:	e0 2d       	mov	r30, r0
    1be8:	cd 01       	movw	r24, r26
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	09 95       	icall
    1bee:	8e 01       	movw	r16, r28
    1bf0:	03 5d       	subi	r16, 0xD3	; 211
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	ff 24       	eor	r15, r15
    1bf6:	f3 94       	inc	r15
    1bf8:	ee 24       	eor	r14, r14
    1bfa:	31 c0       	rjmp	.+98     	; 0x1c5e <DigitalInputShiftRegister_74HC166::update()+0xd6>
    1bfc:	ec a9       	ldd	r30, Y+52	; 0x34
    1bfe:	fd a9       	ldd	r31, Y+53	; 0x35
    1c00:	a0 81       	ld	r26, Z
    1c02:	b1 81       	ldd	r27, Z+1	; 0x01
    1c04:	2d 91       	ld	r18, X+
    1c06:	3c 91       	ld	r19, X
    1c08:	cf 01       	movw	r24, r30
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	09 95       	icall
    1c0e:	f8 01       	movw	r30, r16
    1c10:	90 81       	ld	r25, Z
    1c12:	88 23       	and	r24, r24
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <DigitalInputShiftRegister_74HC166::update()+0x92>
    1c16:	9f 29       	or	r25, r15
    1c18:	04 c0       	rjmp	.+8      	; 0x1c22 <DigitalInputShiftRegister_74HC166::update()+0x9a>
    1c1a:	8f 2d       	mov	r24, r15
    1c1c:	80 95       	com	r24
    1c1e:	98 23       	and	r25, r24
    1c20:	f8 01       	movw	r30, r16
    1c22:	90 83       	st	Z, r25
    1c24:	aa a9       	ldd	r26, Y+50	; 0x32
    1c26:	bb a9       	ldd	r27, Y+51	; 0x33
    1c28:	ed 91       	ld	r30, X+
    1c2a:	fc 91       	ld	r31, X
    1c2c:	11 97       	sbiw	r26, 0x01	; 1
    1c2e:	02 80       	ldd	r0, Z+2	; 0x02
    1c30:	f3 81       	ldd	r31, Z+3	; 0x03
    1c32:	e0 2d       	mov	r30, r0
    1c34:	cd 01       	movw	r24, r26
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	09 95       	icall
    1c3a:	aa a9       	ldd	r26, Y+50	; 0x32
    1c3c:	bb a9       	ldd	r27, Y+51	; 0x33
    1c3e:	ed 91       	ld	r30, X+
    1c40:	fc 91       	ld	r31, X
    1c42:	11 97       	sbiw	r26, 0x01	; 1
    1c44:	02 80       	ldd	r0, Z+2	; 0x02
    1c46:	f3 81       	ldd	r31, Z+3	; 0x03
    1c48:	e0 2d       	mov	r30, r0
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	09 95       	icall
    1c50:	ff 0c       	add	r15, r15
    1c52:	21 f4       	brne	.+8      	; 0x1c5c <DigitalInputShiftRegister_74HC166::update()+0xd4>
    1c54:	0f 5f       	subi	r16, 0xFF	; 255
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	ff 24       	eor	r15, r15
    1c5a:	f3 94       	inc	r15
    1c5c:	e3 94       	inc	r14
    1c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c60:	e8 16       	cp	r14, r24
    1c62:	60 f2       	brcs	.-104    	; 0x1bfc <DigitalInputShiftRegister_74HC166::update()+0x74>
    1c64:	a8 a9       	ldd	r26, Y+48	; 0x30
    1c66:	b9 a9       	ldd	r27, Y+49	; 0x31
    1c68:	ed 91       	ld	r30, X+
    1c6a:	fc 91       	ld	r31, X
    1c6c:	11 97       	sbiw	r26, 0x01	; 1
    1c6e:	02 80       	ldd	r0, Z+2	; 0x02
    1c70:	f3 81       	ldd	r31, Z+3	; 0x03
    1c72:	e0 2d       	mov	r30, r0
    1c74:	cd 01       	movw	r24, r26
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	09 95       	icall
    1c7a:	aa a9       	ldd	r26, Y+50	; 0x32
    1c7c:	bb a9       	ldd	r27, Y+51	; 0x33
    1c7e:	ed 91       	ld	r30, X+
    1c80:	fc 91       	ld	r31, X
    1c82:	11 97       	sbiw	r26, 0x01	; 1
    1c84:	02 80       	ldd	r0, Z+2	; 0x02
    1c86:	f3 81       	ldd	r31, Z+3	; 0x03
    1c88:	e0 2d       	mov	r30, r0
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	09 95       	icall
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	08 95       	ret

00001c9e <DigitalOutputShiftRegister_74HC595_Pin::getState()>:
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ca2:	b3 81       	ldd	r27, Z+3	; 0x03
    1ca4:	24 81       	ldd	r18, Z+4	; 0x04
    1ca6:	a4 5a       	subi	r26, 0xA4	; 164
    1ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    1caa:	8c 91       	ld	r24, X
    1cac:	ac 55       	subi	r26, 0x5C	; 92
    1cae:	b0 40       	sbci	r27, 0x00	; 0
    1cb0:	28 17       	cp	r18, r24
    1cb2:	10 f0       	brcs	.+4      	; 0x1cb8 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x1a>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	08 95       	ret
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	c9 01       	movw	r24, r18
    1cbc:	e3 e0       	ldi	r30, 0x03	; 3
    1cbe:	95 95       	asr	r25
    1cc0:	87 95       	ror	r24
    1cc2:	ea 95       	dec	r30
    1cc4:	e1 f7       	brne	.-8      	; 0x1cbe <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x20>
    1cc6:	a8 0f       	add	r26, r24
    1cc8:	b9 1f       	adc	r27, r25
    1cca:	aa 5a       	subi	r26, 0xAA	; 170
    1ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cce:	8c 91       	ld	r24, X
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	27 70       	andi	r18, 0x07	; 7
    1cd4:	30 70       	andi	r19, 0x00	; 0
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x3e>
    1cd8:	95 95       	asr	r25
    1cda:	87 95       	ror	r24
    1cdc:	2a 95       	dec	r18
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DigitalOutputShiftRegister_74HC595_Pin::getState()+0x3a>
    1ce0:	81 70       	andi	r24, 0x01	; 1
    1ce2:	08 95       	ret

00001ce4 <DigitalOutputShiftRegister_74HC595::update()>:
    1ce4:	6f 92       	push	r6
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	ec 01       	movw	r28, r24
    1d02:	c3 5a       	subi	r28, 0xA3	; 163
    1d04:	df 4f       	sbci	r29, 0xFF	; 255
    1d06:	88 81       	ld	r24, Y
    1d08:	cd 55       	subi	r28, 0x5D	; 93
    1d0a:	d0 40       	sbci	r29, 0x00	; 0
    1d0c:	88 23       	and	r24, r24
    1d0e:	41 f4       	brne	.+16     	; 0x1d20 <DigitalOutputShiftRegister_74HC595::update()+0x3c>
    1d10:	cb 5a       	subi	r28, 0xAB	; 171
    1d12:	df 4f       	sbci	r29, 0xFF	; 255
    1d14:	88 81       	ld	r24, Y
    1d16:	c5 55       	subi	r28, 0x55	; 85
    1d18:	d0 40       	sbci	r29, 0x00	; 0
    1d1a:	88 23       	and	r24, r24
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <DigitalOutputShiftRegister_74HC595::update()+0x3c>
    1d1e:	50 c1       	rjmp	.+672    	; 0x1fc0 <DigitalOutputShiftRegister_74HC595::update()+0x2dc>
    1d20:	c0 5a       	subi	r28, 0xA0	; 160
    1d22:	df 4f       	sbci	r29, 0xFF	; 255
    1d24:	a8 81       	ld	r26, Y
    1d26:	b9 81       	ldd	r27, Y+1	; 0x01
    1d28:	c0 56       	subi	r28, 0x60	; 96
    1d2a:	d0 40       	sbci	r29, 0x00	; 0
    1d2c:	ed 91       	ld	r30, X+
    1d2e:	fc 91       	ld	r31, X
    1d30:	11 97       	sbiw	r26, 0x01	; 1
    1d32:	02 80       	ldd	r0, Z+2	; 0x02
    1d34:	f3 81       	ldd	r31, Z+3	; 0x03
    1d36:	e0 2d       	mov	r30, r0
    1d38:	cd 01       	movw	r24, r26
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	09 95       	icall
    1d3e:	65 e5       	ldi	r22, 0x55	; 85
    1d40:	c6 2e       	mov	r12, r22
    1d42:	d1 2c       	mov	r13, r1
    1d44:	cc 0e       	add	r12, r28
    1d46:	dd 1e       	adc	r13, r29
    1d48:	d6 01       	movw	r26, r12
    1d4a:	8c 91       	ld	r24, X
    1d4c:	82 50       	subi	r24, 0x02	; 2
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <DigitalOutputShiftRegister_74HC595::update()+0x70>
    1d52:	96 c0       	rjmp	.+300    	; 0x1e80 <DigitalOutputShiftRegister_74HC595::update()+0x19c>
    1d54:	8e 01       	movw	r16, r28
    1d56:	0e 59       	subi	r16, 0x9E	; 158
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	a0 81       	ld	r26, Z
    1d5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d60:	ed 91       	ld	r30, X+
    1d62:	fc 91       	ld	r31, X
    1d64:	11 97       	sbiw	r26, 0x01	; 1
    1d66:	02 80       	ldd	r0, Z+2	; 0x02
    1d68:	f3 81       	ldd	r31, Z+3	; 0x03
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	09 95       	icall
    1d72:	fe 01       	movw	r30, r28
    1d74:	e4 5a       	subi	r30, 0xA4	; 164
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	20 81       	ld	r18, Z
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	21 50       	subi	r18, 0x01	; 1
    1d7e:	30 40       	sbci	r19, 0x00	; 0
    1d80:	a9 01       	movw	r20, r18
    1d82:	47 70       	andi	r20, 0x07	; 7
    1d84:	50 70       	andi	r21, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DigitalOutputShiftRegister_74HC595::update()+0xac>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	4a 95       	dec	r20
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DigitalOutputShiftRegister_74HC595::update()+0xa8>
    1d94:	b8 2e       	mov	r11, r24
    1d96:	79 01       	movw	r14, r18
    1d98:	53 e0       	ldi	r21, 0x03	; 3
    1d9a:	f5 94       	asr	r15
    1d9c:	e7 94       	ror	r14
    1d9e:	5a 95       	dec	r21
    1da0:	e1 f7       	brne	.-8      	; 0x1d9a <DigitalOutputShiftRegister_74HC595::update()+0xb6>
    1da2:	86 e5       	ldi	r24, 0x56	; 86
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	e8 0e       	add	r14, r24
    1da8:	f9 1e       	adc	r15, r25
    1daa:	ec 0e       	add	r14, r28
    1dac:	fd 1e       	adc	r15, r29
    1dae:	aa 24       	eor	r10, r10
    1db0:	3f 01       	movw	r6, r30
    1db2:	4e e5       	ldi	r20, 0x5E	; 94
    1db4:	84 2e       	mov	r8, r20
    1db6:	91 2c       	mov	r9, r1
    1db8:	8c 0e       	add	r8, r28
    1dba:	9d 1e       	adc	r9, r29
    1dbc:	41 c0       	rjmp	.+130    	; 0x1e40 <DigitalOutputShiftRegister_74HC595::update()+0x15c>
    1dbe:	f4 01       	movw	r30, r8
    1dc0:	a0 81       	ld	r26, Z
    1dc2:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	fc 91       	ld	r31, X
    1dc8:	11 97       	sbiw	r26, 0x01	; 1
    1dca:	02 80       	ldd	r0, Z+2	; 0x02
    1dcc:	f3 81       	ldd	r31, Z+3	; 0x03
    1dce:	e0 2d       	mov	r30, r0
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	09 95       	icall
    1dd6:	d6 01       	movw	r26, r12
    1dd8:	8c 91       	ld	r24, X
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	19 f5       	brne	.+70     	; 0x1e24 <DigitalOutputShiftRegister_74HC595::update()+0x140>
    1dde:	f8 01       	movw	r30, r16
    1de0:	a0 81       	ld	r26, Z
    1de2:	b1 81       	ldd	r27, Z+1	; 0x01
    1de4:	4d 91       	ld	r20, X+
    1de6:	5c 91       	ld	r21, X
    1de8:	11 97       	sbiw	r26, 0x01	; 1
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	f7 01       	movw	r30, r14
    1dee:	80 81       	ld	r24, Z
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	2b 2d       	mov	r18, r11
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	82 23       	and	r24, r18
    1df8:	93 23       	and	r25, r19
    1dfa:	89 2b       	or	r24, r25
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <DigitalOutputShiftRegister_74HC595::update()+0x11c>
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	fa 01       	movw	r30, r20
    1e02:	22 81       	ldd	r18, Z+2	; 0x02
    1e04:	33 81       	ldd	r19, Z+3	; 0x03
    1e06:	cd 01       	movw	r24, r26
    1e08:	f9 01       	movw	r30, r18
    1e0a:	09 95       	icall
    1e0c:	8b 2d       	mov	r24, r11
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	95 95       	asr	r25
    1e12:	87 95       	ror	r24
    1e14:	b8 2e       	mov	r11, r24
    1e16:	88 23       	and	r24, r24
    1e18:	29 f4       	brne	.+10     	; 0x1e24 <DigitalOutputShiftRegister_74HC595::update()+0x140>
    1e1a:	08 94       	sec
    1e1c:	e1 08       	sbc	r14, r1
    1e1e:	f1 08       	sbc	r15, r1
    1e20:	20 e8       	ldi	r18, 0x80	; 128
    1e22:	b2 2e       	mov	r11, r18
    1e24:	d4 01       	movw	r26, r8
    1e26:	ed 91       	ld	r30, X+
    1e28:	fc 91       	ld	r31, X
    1e2a:	a0 81       	ld	r26, Z
    1e2c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e2e:	12 96       	adiw	r26, 0x02	; 2
    1e30:	2d 91       	ld	r18, X+
    1e32:	3c 91       	ld	r19, X
    1e34:	13 97       	sbiw	r26, 0x03	; 3
    1e36:	cf 01       	movw	r24, r30
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	f9 01       	movw	r30, r18
    1e3c:	09 95       	icall
    1e3e:	a3 94       	inc	r10
    1e40:	f3 01       	movw	r30, r6
    1e42:	80 81       	ld	r24, Z
    1e44:	a8 16       	cp	r10, r24
    1e46:	08 f4       	brcc	.+2      	; 0x1e4a <DigitalOutputShiftRegister_74HC595::update()+0x166>
    1e48:	ba cf       	rjmp	.-140    	; 0x1dbe <DigitalOutputShiftRegister_74HC595::update()+0xda>
    1e4a:	8e 01       	movw	r16, r28
    1e4c:	00 5a       	subi	r16, 0xA0	; 160
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	f8 01       	movw	r30, r16
    1e52:	a0 81       	ld	r26, Z
    1e54:	b1 81       	ldd	r27, Z+1	; 0x01
    1e56:	ed 91       	ld	r30, X+
    1e58:	fc 91       	ld	r31, X
    1e5a:	11 97       	sbiw	r26, 0x01	; 1
    1e5c:	02 80       	ldd	r0, Z+2	; 0x02
    1e5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1e60:	e0 2d       	mov	r30, r0
    1e62:	cd 01       	movw	r24, r26
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	09 95       	icall
    1e68:	f8 01       	movw	r30, r16
    1e6a:	a0 81       	ld	r26, Z
    1e6c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e6e:	ed 91       	ld	r30, X+
    1e70:	fc 91       	ld	r31, X
    1e72:	11 97       	sbiw	r26, 0x01	; 1
    1e74:	02 80       	ldd	r0, Z+2	; 0x02
    1e76:	f3 81       	ldd	r31, Z+3	; 0x03
    1e78:	e0 2d       	mov	r30, r0
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	09 95       	icall
    1e80:	c3 5a       	subi	r28, 0xA3	; 163
    1e82:	df 4f       	sbci	r29, 0xFF	; 255
    1e84:	18 82       	st	Y, r1
    1e86:	cd 55       	subi	r28, 0x5D	; 93
    1e88:	d0 40       	sbci	r29, 0x00	; 0
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e4 5a       	subi	r30, 0xA4	; 164
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	20 81       	ld	r18, Z
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	21 50       	subi	r18, 0x01	; 1
    1e96:	30 40       	sbci	r19, 0x00	; 0
    1e98:	a9 01       	movw	r20, r18
    1e9a:	47 70       	andi	r20, 0x07	; 7
    1e9c:	50 70       	andi	r21, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <DigitalOutputShiftRegister_74HC595::update()+0x1c4>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	4a 95       	dec	r20
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <DigitalOutputShiftRegister_74HC595::update()+0x1c0>
    1eac:	d8 2e       	mov	r13, r24
    1eae:	89 01       	movw	r16, r18
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	15 95       	asr	r17
    1eb4:	07 95       	ror	r16
    1eb6:	9a 95       	dec	r25
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <DigitalOutputShiftRegister_74HC595::update()+0x1ce>
    1eba:	0a 5a       	subi	r16, 0xAA	; 170
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	0c 0f       	add	r16, r28
    1ec0:	1d 1f       	adc	r17, r29
    1ec2:	cc 24       	eor	r12, r12
    1ec4:	4f 01       	movw	r8, r30
    1ec6:	82 e6       	ldi	r24, 0x62	; 98
    1ec8:	a8 2e       	mov	r10, r24
    1eca:	b1 2c       	mov	r11, r1
    1ecc:	ac 0e       	add	r10, r28
    1ece:	bd 1e       	adc	r11, r29
    1ed0:	be e5       	ldi	r27, 0x5E	; 94
    1ed2:	eb 2e       	mov	r14, r27
    1ed4:	f1 2c       	mov	r15, r1
    1ed6:	ec 0e       	add	r14, r28
    1ed8:	fd 1e       	adc	r15, r29
    1eda:	3b c0       	rjmp	.+118    	; 0x1f52 <DigitalOutputShiftRegister_74HC595::update()+0x26e>
    1edc:	f7 01       	movw	r30, r14
    1ede:	a0 81       	ld	r26, Z
    1ee0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ee2:	ed 91       	ld	r30, X+
    1ee4:	fc 91       	ld	r31, X
    1ee6:	11 97       	sbiw	r26, 0x01	; 1
    1ee8:	02 80       	ldd	r0, Z+2	; 0x02
    1eea:	f3 81       	ldd	r31, Z+3	; 0x03
    1eec:	e0 2d       	mov	r30, r0
    1eee:	cd 01       	movw	r24, r26
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	09 95       	icall
    1ef4:	f5 01       	movw	r30, r10
    1ef6:	a0 81       	ld	r26, Z
    1ef8:	b1 81       	ldd	r27, Z+1	; 0x01
    1efa:	4d 91       	ld	r20, X+
    1efc:	5c 91       	ld	r21, X
    1efe:	11 97       	sbiw	r26, 0x01	; 1
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	f8 01       	movw	r30, r16
    1f04:	80 81       	ld	r24, Z
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	2d 2d       	mov	r18, r13
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	82 23       	and	r24, r18
    1f0e:	93 23       	and	r25, r19
    1f10:	89 2b       	or	r24, r25
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <DigitalOutputShiftRegister_74HC595::update()+0x232>
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	fa 01       	movw	r30, r20
    1f18:	22 81       	ldd	r18, Z+2	; 0x02
    1f1a:	33 81       	ldd	r19, Z+3	; 0x03
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	f9 01       	movw	r30, r18
    1f20:	09 95       	icall
    1f22:	f7 01       	movw	r30, r14
    1f24:	a0 81       	ld	r26, Z
    1f26:	b1 81       	ldd	r27, Z+1	; 0x01
    1f28:	ed 91       	ld	r30, X+
    1f2a:	fc 91       	ld	r31, X
    1f2c:	11 97       	sbiw	r26, 0x01	; 1
    1f2e:	02 80       	ldd	r0, Z+2	; 0x02
    1f30:	f3 81       	ldd	r31, Z+3	; 0x03
    1f32:	e0 2d       	mov	r30, r0
    1f34:	cd 01       	movw	r24, r26
    1f36:	61 e0       	ldi	r22, 0x01	; 1
    1f38:	09 95       	icall
    1f3a:	8d 2d       	mov	r24, r13
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	95 95       	asr	r25
    1f40:	87 95       	ror	r24
    1f42:	d8 2e       	mov	r13, r24
    1f44:	88 23       	and	r24, r24
    1f46:	21 f4       	brne	.+8      	; 0x1f50 <DigitalOutputShiftRegister_74HC595::update()+0x26c>
    1f48:	01 50       	subi	r16, 0x01	; 1
    1f4a:	10 40       	sbci	r17, 0x00	; 0
    1f4c:	f0 e8       	ldi	r31, 0x80	; 128
    1f4e:	df 2e       	mov	r13, r31
    1f50:	c3 94       	inc	r12
    1f52:	d4 01       	movw	r26, r8
    1f54:	8c 91       	ld	r24, X
    1f56:	c8 16       	cp	r12, r24
    1f58:	08 f2       	brcs	.-126    	; 0x1edc <DigitalOutputShiftRegister_74HC595::update()+0x1f8>
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	a0 81       	ld	r26, Z
    1f5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f60:	ed 91       	ld	r30, X+
    1f62:	fc 91       	ld	r31, X
    1f64:	11 97       	sbiw	r26, 0x01	; 1
    1f66:	02 80       	ldd	r0, Z+2	; 0x02
    1f68:	f3 81       	ldd	r31, Z+3	; 0x03
    1f6a:	e0 2d       	mov	r30, r0
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	09 95       	icall
    1f72:	f5 01       	movw	r30, r10
    1f74:	a0 81       	ld	r26, Z
    1f76:	b1 81       	ldd	r27, Z+1	; 0x01
    1f78:	ed 91       	ld	r30, X+
    1f7a:	fc 91       	ld	r31, X
    1f7c:	11 97       	sbiw	r26, 0x01	; 1
    1f7e:	02 80       	ldd	r0, Z+2	; 0x02
    1f80:	f3 81       	ldd	r31, Z+3	; 0x03
    1f82:	e0 2d       	mov	r30, r0
    1f84:	cd 01       	movw	r24, r26
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	09 95       	icall
    1f8a:	8e 01       	movw	r16, r28
    1f8c:	00 5a       	subi	r16, 0xA0	; 160
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	f8 01       	movw	r30, r16
    1f92:	a0 81       	ld	r26, Z
    1f94:	b1 81       	ldd	r27, Z+1	; 0x01
    1f96:	ed 91       	ld	r30, X+
    1f98:	fc 91       	ld	r31, X
    1f9a:	11 97       	sbiw	r26, 0x01	; 1
    1f9c:	02 80       	ldd	r0, Z+2	; 0x02
    1f9e:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa0:	e0 2d       	mov	r30, r0
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	09 95       	icall
    1fa8:	f8 01       	movw	r30, r16
    1faa:	a0 81       	ld	r26, Z
    1fac:	b1 81       	ldd	r27, Z+1	; 0x01
    1fae:	ed 91       	ld	r30, X+
    1fb0:	fc 91       	ld	r31, X
    1fb2:	11 97       	sbiw	r26, 0x01	; 1
    1fb4:	02 80       	ldd	r0, Z+2	; 0x02
    1fb6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb8:	e0 2d       	mov	r30, r0
    1fba:	cd 01       	movw	r24, r26
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	09 95       	icall
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	ff 90       	pop	r15
    1fca:	ef 90       	pop	r14
    1fcc:	df 90       	pop	r13
    1fce:	cf 90       	pop	r12
    1fd0:	bf 90       	pop	r11
    1fd2:	af 90       	pop	r10
    1fd4:	9f 90       	pop	r9
    1fd6:	8f 90       	pop	r8
    1fd8:	7f 90       	pop	r7
    1fda:	6f 90       	pop	r6
    1fdc:	08 95       	ret

00001fde <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>:
    1fde:	ef 92       	push	r14
    1fe0:	ff 92       	push	r15
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	ec 01       	movw	r28, r24
    1fec:	d9 01       	movw	r26, r18
    1fee:	61 31       	cpi	r22, 0x11	; 17
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)+0x16>
    1ff2:	61 e1       	ldi	r22, 0x11	; 17
    1ff4:	c4 5a       	subi	r28, 0xA4	; 164
    1ff6:	df 4f       	sbci	r29, 0xFF	; 255
    1ff8:	68 83       	st	Y, r22
    1ffa:	22 96       	adiw	r28, 0x02	; 2
    1ffc:	a9 93       	st	Y+, r26
    1ffe:	b9 93       	st	Y+, r27
    2000:	09 93       	st	Y+, r16
    2002:	19 93       	st	Y+, r17
    2004:	f9 82       	std	Y+1, r15	; 0x01
    2006:	e8 82       	st	Y, r14
    2008:	2d 97       	sbiw	r28, 0x0d	; 13
    200a:	48 83       	st	Y, r20
    200c:	28 96       	adiw	r28, 0x08	; 8
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	88 83       	st	Y, r24
    2012:	ed 91       	ld	r30, X+
    2014:	fc 91       	ld	r31, X
    2016:	11 97       	sbiw	r26, 0x01	; 1
    2018:	02 80       	ldd	r0, Z+2	; 0x02
    201a:	f3 81       	ldd	r31, Z+3	; 0x03
    201c:	e0 2d       	mov	r30, r0
    201e:	cd 01       	movw	r24, r26
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	09 95       	icall
    2024:	d8 01       	movw	r26, r16
    2026:	ed 91       	ld	r30, X+
    2028:	fc 91       	ld	r31, X
    202a:	02 80       	ldd	r0, Z+2	; 0x02
    202c:	f3 81       	ldd	r31, Z+3	; 0x03
    202e:	e0 2d       	mov	r30, r0
    2030:	c8 01       	movw	r24, r16
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	09 95       	icall
    2036:	d7 01       	movw	r26, r14
    2038:	ed 91       	ld	r30, X+
    203a:	fc 91       	ld	r31, X
    203c:	02 80       	ldd	r0, Z+2	; 0x02
    203e:	f3 81       	ldd	r31, Z+3	; 0x03
    2040:	e0 2d       	mov	r30, r0
    2042:	c7 01       	movw	r24, r14
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	09 95       	icall
    2048:	25 97       	sbiw	r28, 0x05	; 5
    204a:	18 82       	st	Y, r1
    204c:	23 96       	adiw	r28, 0x03	; 3
    204e:	18 82       	st	Y, r1
    2050:	24 97       	sbiw	r28, 0x04	; 4
    2052:	18 82       	st	Y, r1
    2054:	23 96       	adiw	r28, 0x03	; 3
    2056:	18 82       	st	Y, r1
    2058:	24 97       	sbiw	r28, 0x04	; 4
    205a:	18 82       	st	Y, r1
    205c:	23 96       	adiw	r28, 0x03	; 3
    205e:	18 82       	st	Y, r1
    2060:	c9 55       	subi	r28, 0x59	; 89
    2062:	d0 40       	sbci	r29, 0x00	; 0
    2064:	ce 01       	movw	r24, r28
    2066:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DigitalOutputShiftRegister_74HC595::update()>
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	08 95       	ret

00002078 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)>:
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	dc 01       	movw	r26, r24
    2080:	14 2f       	mov	r17, r20
    2082:	a4 5a       	subi	r26, 0xA4	; 164
    2084:	bf 4f       	sbci	r27, 0xFF	; 255
    2086:	8c 91       	ld	r24, X
    2088:	ac 55       	subi	r26, 0x5C	; 92
    208a:	b0 40       	sbci	r27, 0x00	; 0
    208c:	68 17       	cp	r22, r24
    208e:	a8 f5       	brcc	.+106    	; 0x20fa <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x82>
    2090:	46 2f       	mov	r20, r22
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	9a 01       	movw	r18, r20
    2096:	27 70       	andi	r18, 0x07	; 7
    2098:	30 70       	andi	r19, 0x00	; 0
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x2c>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	2a 95       	dec	r18
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x28>
    20a8:	78 2f       	mov	r23, r24
    20aa:	e3 e0       	ldi	r30, 0x03	; 3
    20ac:	56 95       	lsr	r21
    20ae:	47 95       	ror	r20
    20b0:	ea 95       	dec	r30
    20b2:	e1 f7       	brne	.-8      	; 0x20ac <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x34>
    20b4:	4a 0f       	add	r20, r26
    20b6:	5b 1f       	adc	r21, r27
    20b8:	ea 01       	movw	r28, r20
    20ba:	ca 5a       	subi	r28, 0xAA	; 170
    20bc:	df 4f       	sbci	r29, 0xFF	; 255
    20be:	68 81       	ld	r22, Y
    20c0:	86 2f       	mov	r24, r22
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	27 2f       	mov	r18, r23
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	82 23       	and	r24, r18
    20ca:	93 23       	and	r25, r19
    20cc:	21 2f       	mov	r18, r17
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	82 17       	cp	r24, r18
    20d2:	93 07       	cpc	r25, r19
    20d4:	91 f0       	breq	.+36     	; 0x20fa <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x82>
    20d6:	a3 5a       	subi	r26, 0xA3	; 163
    20d8:	bf 4f       	sbci	r27, 0xFF	; 255
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8c 93       	st	X, r24
    20de:	97 2f       	mov	r25, r23
    20e0:	90 95       	com	r25
    20e2:	fa 01       	movw	r30, r20
    20e4:	e7 5a       	subi	r30, 0xA7	; 167
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	89 23       	and	r24, r25
    20ec:	80 83       	st	Z, r24
    20ee:	11 23       	and	r17, r17
    20f0:	11 f0       	breq	.+4      	; 0x20f6 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x7e>
    20f2:	67 2b       	or	r22, r23
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)+0x80>
    20f6:	69 23       	and	r22, r25
    20f8:	68 83       	st	Y, r22
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	08 95       	ret

00002102 <DigitalOutputShiftRegister_74HC595_Pin::setState(bool)>:
    2102:	fc 01       	movw	r30, r24
    2104:	46 2f       	mov	r20, r22
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	64 81       	ldd	r22, Z+4	; 0x04
    210c:	0e 94 3c 10 	call	0x2078	; 0x2078 <DigitalOutputShiftRegister_74HC595::setState(unsigned char, bool)>
    2110:	08 95       	ret

00002112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>:
    2112:	26 2f       	mov	r18, r22
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	f9 01       	movw	r30, r18
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	e2 0f       	add	r30, r18
    2122:	f3 1f       	adc	r31, r19
    2124:	e8 0f       	add	r30, r24
    2126:	f9 1f       	adc	r31, r25
    2128:	93 83       	std	Z+3, r25	; 0x03
    212a:	82 83       	std	Z+2, r24	; 0x02
    212c:	64 83       	std	Z+4, r22	; 0x04
    212e:	cf 01       	movw	r24, r30
    2130:	08 95       	ret

00002132 <DigitalOutputArduinoPin::initialize(unsigned char, bool)>:
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	8c 01       	movw	r16, r24
    213a:	86 2f       	mov	r24, r22
    213c:	f4 2e       	mov	r15, r20
    213e:	26 2f       	mov	r18, r22
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	f9 01       	movw	r30, r18
    2144:	ea 5f       	subi	r30, 0xFA	; 250
    2146:	f9 4f       	sbci	r31, 0xF9	; 249
    2148:	e4 91       	lpm	r30, Z+
    214a:	d8 01       	movw	r26, r16
    214c:	12 96       	adiw	r26, 0x02	; 2
    214e:	ec 93       	st	X, r30
    2150:	12 97       	sbiw	r26, 0x02	; 2
    2152:	2e 50       	subi	r18, 0x0E	; 14
    2154:	3a 4f       	sbci	r19, 0xFA	; 250
    2156:	f9 01       	movw	r30, r18
    2158:	94 91       	lpm	r25, Z+
    215a:	e9 2f       	mov	r30, r25
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	e2 52       	subi	r30, 0x22	; 34
    2164:	fa 4f       	sbci	r31, 0xFA	; 250
    2166:	25 91       	lpm	r18, Z+
    2168:	34 91       	lpm	r19, Z+
    216a:	14 96       	adiw	r26, 0x04	; 4
    216c:	3c 93       	st	X, r19
    216e:	2e 93       	st	-X, r18
    2170:	13 97       	sbiw	r26, 0x03	; 3
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	0e 94 24 1c 	call	0x3848	; 0x3848 <pinMode>
    2178:	d8 01       	movw	r26, r16
    217a:	ed 91       	ld	r30, X+
    217c:	fc 91       	ld	r31, X
    217e:	02 80       	ldd	r0, Z+2	; 0x02
    2180:	f3 81       	ldd	r31, Z+3	; 0x03
    2182:	e0 2d       	mov	r30, r0
    2184:	c8 01       	movw	r24, r16
    2186:	6f 2d       	mov	r22, r15
    2188:	09 95       	icall
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	08 95       	ret

00002192 <DigitalInputArduinoPin::initialize(unsigned char, bool)>:
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	7c 01       	movw	r14, r24
    219e:	86 2f       	mov	r24, r22
    21a0:	d4 2e       	mov	r13, r20
    21a2:	26 2f       	mov	r18, r22
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	f9 01       	movw	r30, r18
    21a8:	ea 5f       	subi	r30, 0xFA	; 250
    21aa:	f9 4f       	sbci	r31, 0xF9	; 249
    21ac:	e4 91       	lpm	r30, Z+
    21ae:	d7 01       	movw	r26, r14
    21b0:	12 96       	adiw	r26, 0x02	; 2
    21b2:	ec 93       	st	X, r30
    21b4:	12 97       	sbiw	r26, 0x02	; 2
    21b6:	2e 50       	subi	r18, 0x0E	; 14
    21b8:	3a 4f       	sbci	r19, 0xFA	; 250
    21ba:	f9 01       	movw	r30, r18
    21bc:	04 91       	lpm	r16, Z+
    21be:	10 e0       	ldi	r17, 0x00	; 0
    21c0:	00 0f       	add	r16, r16
    21c2:	11 1f       	adc	r17, r17
    21c4:	f8 01       	movw	r30, r16
    21c6:	e8 51       	subi	r30, 0x18	; 24
    21c8:	fa 4f       	sbci	r31, 0xFA	; 250
    21ca:	25 91       	lpm	r18, Z+
    21cc:	34 91       	lpm	r19, Z+
    21ce:	14 96       	adiw	r26, 0x04	; 4
    21d0:	3c 93       	st	X, r19
    21d2:	2e 93       	st	-X, r18
    21d4:	13 97       	sbiw	r26, 0x03	; 3
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	0e 94 24 1c 	call	0x3848	; 0x3848 <pinMode>
    21dc:	f8 01       	movw	r30, r16
    21de:	e2 52       	subi	r30, 0x22	; 34
    21e0:	fa 4f       	sbci	r31, 0xFA	; 250
    21e2:	a5 91       	lpm	r26, Z+
    21e4:	b4 91       	lpm	r27, Z+
    21e6:	f7 01       	movw	r30, r14
    21e8:	22 81       	ldd	r18, Z+2	; 0x02
    21ea:	dd 20       	and	r13, r13
    21ec:	29 f0       	breq	.+10     	; 0x21f8 <DigitalInputArduinoPin::initialize(unsigned char, bool)+0x66>
    21ee:	9f b7       	in	r25, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	8c 91       	ld	r24, X
    21f4:	82 2b       	or	r24, r18
    21f6:	05 c0       	rjmp	.+10     	; 0x2202 <DigitalInputArduinoPin::initialize(unsigned char, bool)+0x70>
    21f8:	9f b7       	in	r25, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	8c 91       	ld	r24, X
    21fe:	20 95       	com	r18
    2200:	82 23       	and	r24, r18
    2202:	8c 93       	st	X, r24
    2204:	9f bf       	out	0x3f, r25	; 63
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	df 90       	pop	r13
    2210:	08 95       	ret

00002212 <RotaryEncoderState::setValue_unsafe(long)>:
    2212:	8f 92       	push	r8
    2214:	9f 92       	push	r9
    2216:	af 92       	push	r10
    2218:	bf 92       	push	r11
    221a:	cf 92       	push	r12
    221c:	df 92       	push	r13
    221e:	ef 92       	push	r14
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	fc 01       	movw	r30, r24
    2228:	85 85       	ldd	r24, Z+13	; 0x0d
    222a:	80 80       	ld	r8, Z
    222c:	91 80       	ldd	r9, Z+1	; 0x01
    222e:	a2 80       	ldd	r10, Z+2	; 0x02
    2230:	b3 80       	ldd	r11, Z+3	; 0x03
    2232:	88 23       	and	r24, r24
    2234:	d1 f1       	breq	.+116    	; 0x22aa <RotaryEncoderState::setValue_unsafe(long)+0x98>
    2236:	84 81       	ldd	r24, Z+4	; 0x04
    2238:	95 81       	ldd	r25, Z+5	; 0x05
    223a:	a6 81       	ldd	r26, Z+6	; 0x06
    223c:	b7 81       	ldd	r27, Z+7	; 0x07
    223e:	01 96       	adiw	r24, 0x01	; 1
    2240:	a1 1d       	adc	r26, r1
    2242:	b1 1d       	adc	r27, r1
    2244:	8c 01       	movw	r16, r24
    2246:	9d 01       	movw	r18, r26
    2248:	08 19       	sub	r16, r8
    224a:	19 09       	sbc	r17, r9
    224c:	2a 09       	sbc	r18, r10
    224e:	3b 09       	sbc	r19, r11
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	a1 09       	sbc	r26, r1
    2254:	b1 09       	sbc	r27, r1
    2256:	10 16       	cp	r1, r16
    2258:	11 06       	cpc	r1, r17
    225a:	12 06       	cpc	r1, r18
    225c:	13 06       	cpc	r1, r19
    225e:	54 f0       	brlt	.+20     	; 0x2274 <RotaryEncoderState::setValue_unsafe(long)+0x62>
    2260:	01 e0       	ldi	r16, 0x01	; 1
    2262:	10 e0       	ldi	r17, 0x00	; 0
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	05 c0       	rjmp	.+10     	; 0x2274 <RotaryEncoderState::setValue_unsafe(long)+0x62>
    226a:	4c 0d       	add	r20, r12
    226c:	5d 1d       	adc	r21, r13
    226e:	6e 1d       	adc	r22, r14
    2270:	7f 1d       	adc	r23, r15
    2272:	07 c0       	rjmp	.+14     	; 0x2282 <RotaryEncoderState::setValue_unsafe(long)+0x70>
    2274:	cc 24       	eor	r12, r12
    2276:	dd 24       	eor	r13, r13
    2278:	76 01       	movw	r14, r12
    227a:	c0 1a       	sub	r12, r16
    227c:	d1 0a       	sbc	r13, r17
    227e:	e2 0a       	sbc	r14, r18
    2280:	f3 0a       	sbc	r15, r19
    2282:	84 17       	cp	r24, r20
    2284:	95 07       	cpc	r25, r21
    2286:	a6 07       	cpc	r26, r22
    2288:	b7 07       	cpc	r27, r23
    228a:	7c f3       	brlt	.-34     	; 0x226a <RotaryEncoderState::setValue_unsafe(long)+0x58>
    228c:	04 c0       	rjmp	.+8      	; 0x2296 <RotaryEncoderState::setValue_unsafe(long)+0x84>
    228e:	40 0f       	add	r20, r16
    2290:	51 1f       	adc	r21, r17
    2292:	62 1f       	adc	r22, r18
    2294:	73 1f       	adc	r23, r19
    2296:	48 15       	cp	r20, r8
    2298:	59 05       	cpc	r21, r9
    229a:	6a 05       	cpc	r22, r10
    229c:	7b 05       	cpc	r23, r11
    229e:	bc f3       	brlt	.-18     	; 0x228e <RotaryEncoderState::setValue_unsafe(long)+0x7c>
    22a0:	40 87       	std	Z+8, r20	; 0x08
    22a2:	51 87       	std	Z+9, r21	; 0x09
    22a4:	62 87       	std	Z+10, r22	; 0x0a
    22a6:	73 87       	std	Z+11, r23	; 0x0b
    22a8:	18 c0       	rjmp	.+48     	; 0x22da <RotaryEncoderState::setValue_unsafe(long)+0xc8>
    22aa:	d5 01       	movw	r26, r10
    22ac:	c4 01       	movw	r24, r8
    22ae:	48 15       	cp	r20, r8
    22b0:	59 05       	cpc	r21, r9
    22b2:	6a 05       	cpc	r22, r10
    22b4:	7b 05       	cpc	r23, r11
    22b6:	6c f0       	brlt	.+26     	; 0x22d2 <RotaryEncoderState::setValue_unsafe(long)+0xc0>
    22b8:	04 81       	ldd	r16, Z+4	; 0x04
    22ba:	15 81       	ldd	r17, Z+5	; 0x05
    22bc:	26 81       	ldd	r18, Z+6	; 0x06
    22be:	37 81       	ldd	r19, Z+7	; 0x07
    22c0:	db 01       	movw	r26, r22
    22c2:	ca 01       	movw	r24, r20
    22c4:	04 17       	cp	r16, r20
    22c6:	15 07       	cpc	r17, r21
    22c8:	26 07       	cpc	r18, r22
    22ca:	37 07       	cpc	r19, r23
    22cc:	14 f4       	brge	.+4      	; 0x22d2 <RotaryEncoderState::setValue_unsafe(long)+0xc0>
    22ce:	d9 01       	movw	r26, r18
    22d0:	c8 01       	movw	r24, r16
    22d2:	80 87       	std	Z+8, r24	; 0x08
    22d4:	91 87       	std	Z+9, r25	; 0x09
    22d6:	a2 87       	std	Z+10, r26	; 0x0a
    22d8:	b3 87       	std	Z+11, r27	; 0x0b
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	86 87       	std	Z+14, r24	; 0x0e
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	08 95       	ret

000022f4 <RotaryEncoderState::setMinMax(long, long)>:
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	fc 01       	movw	r30, r24
    22fc:	ff b6       	in	r15, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	40 83       	st	Z, r20
    2302:	51 83       	std	Z+1, r21	; 0x01
    2304:	62 83       	std	Z+2, r22	; 0x02
    2306:	73 83       	std	Z+3, r23	; 0x03
    2308:	04 83       	std	Z+4, r16	; 0x04
    230a:	15 83       	std	Z+5, r17	; 0x05
    230c:	26 83       	std	Z+6, r18	; 0x06
    230e:	37 83       	std	Z+7, r19	; 0x07
    2310:	40 85       	ldd	r20, Z+8	; 0x08
    2312:	51 85       	ldd	r21, Z+9	; 0x09
    2314:	62 85       	ldd	r22, Z+10	; 0x0a
    2316:	73 85       	ldd	r23, Z+11	; 0x0b
    2318:	0e 94 09 11 	call	0x2212	; 0x2212 <RotaryEncoderState::setValue_unsafe(long)>
    231c:	ff be       	out	0x3f, r15	; 63
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	08 95       	ret

00002326 <RotaryEncoderAcceleration::update()>:
    2326:	6f 92       	push	r6
    2328:	7f 92       	push	r7
    232a:	8f 92       	push	r8
    232c:	9f 92       	push	r9
    232e:	af 92       	push	r10
    2330:	bf 92       	push	r11
    2332:	cf 92       	push	r12
    2334:	df 92       	push	r13
    2336:	ef 92       	push	r14
    2338:	ff 92       	push	r15
    233a:	0f 93       	push	r16
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	4c 01       	movw	r8, r24
    2344:	41 96       	adiw	r24, 0x11	; 17
    2346:	0e 94 be 0c 	call	0x197c	; 0x197c <Button::update()>
    234a:	c4 01       	movw	r24, r8
    234c:	4b 96       	adiw	r24, 0x1b	; 27
    234e:	0e 94 be 0c 	call	0x197c	; 0x197c <Button::update()>
    2352:	d4 01       	movw	r26, r8
    2354:	1f 96       	adiw	r26, 0x0f	; 15
    2356:	ed 91       	ld	r30, X+
    2358:	fc 91       	ld	r31, X
    235a:	50 97       	sbiw	r26, 0x10	; 16
    235c:	84 85       	ldd	r24, Z+12	; 0x0c
    235e:	88 23       	and	r24, r24
    2360:	09 f4       	brne	.+2      	; 0x2364 <RotaryEncoderAcceleration::update()+0x3e>
    2362:	88 c0       	rjmp	.+272    	; 0x2474 <RotaryEncoderAcceleration::update()+0x14e>
    2364:	54 96       	adiw	r26, 0x14	; 20
    2366:	8c 91       	ld	r24, X
    2368:	54 97       	sbiw	r26, 0x14	; 20
    236a:	88 23       	and	r24, r24
    236c:	09 f0       	breq	.+2      	; 0x2370 <RotaryEncoderAcceleration::update()+0x4a>
    236e:	82 c0       	rjmp	.+260    	; 0x2474 <RotaryEncoderAcceleration::update()+0x14e>
    2370:	53 96       	adiw	r26, 0x13	; 19
    2372:	8c 91       	ld	r24, X
    2374:	88 23       	and	r24, r24
    2376:	09 f4       	brne	.+2      	; 0x237a <RotaryEncoderAcceleration::update()+0x54>
    2378:	7d c0       	rjmp	.+250    	; 0x2474 <RotaryEncoderAcceleration::update()+0x14e>
    237a:	e4 01       	movw	r28, r8
    237c:	a5 96       	adiw	r28, 0x25	; 37
    237e:	ce 01       	movw	r24, r28
    2380:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <TicksPerSecond::tick()>
    2384:	ce 01       	movw	r24, r28
    2386:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <TicksPerSecond::update()>
    238a:	ce 01       	movw	r24, r28
    238c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <TicksPerSecond::getIntTPS_unsafe()>
    2390:	05 97       	sbiw	r24, 0x05	; 5
    2392:	1c f4       	brge	.+6      	; 0x239a <RotaryEncoderAcceleration::update()+0x74>
    2394:	c0 e0       	ldi	r28, 0x00	; 0
    2396:	d0 e0       	ldi	r29, 0x00	; 0
    2398:	0d c0       	rjmp	.+26     	; 0x23b4 <RotaryEncoderAcceleration::update()+0x8e>
    239a:	ce 01       	movw	r24, r28
    239c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <TicksPerSecond::getIntTPS_unsafe()>
    23a0:	4f 97       	sbiw	r24, 0x1f	; 31
    23a2:	1c f0       	brlt	.+6      	; 0x23aa <RotaryEncoderAcceleration::update()+0x84>
    23a4:	c9 e1       	ldi	r28, 0x19	; 25
    23a6:	d0 e0       	ldi	r29, 0x00	; 0
    23a8:	05 c0       	rjmp	.+10     	; 0x23b4 <RotaryEncoderAcceleration::update()+0x8e>
    23aa:	ce 01       	movw	r24, r28
    23ac:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <TicksPerSecond::getIntTPS_unsafe()>
    23b0:	ec 01       	movw	r28, r24
    23b2:	25 97       	sbiw	r28, 0x05	; 5
    23b4:	f4 01       	movw	r30, r8
    23b6:	67 84       	ldd	r6, Z+15	; 0x0f
    23b8:	70 88       	ldd	r7, Z+16	; 0x10
    23ba:	d3 01       	movw	r26, r6
    23bc:	14 96       	adiw	r26, 0x04	; 4
    23be:	2d 91       	ld	r18, X+
    23c0:	3d 91       	ld	r19, X+
    23c2:	4d 91       	ld	r20, X+
    23c4:	5c 91       	ld	r21, X
    23c6:	17 97       	sbiw	r26, 0x07	; 7
    23c8:	8d 91       	ld	r24, X+
    23ca:	9d 91       	ld	r25, X+
    23cc:	0d 90       	ld	r0, X+
    23ce:	bc 91       	ld	r27, X
    23d0:	a0 2d       	mov	r26, r0
    23d2:	28 1b       	sub	r18, r24
    23d4:	39 0b       	sbc	r19, r25
    23d6:	4a 0b       	sbc	r20, r26
    23d8:	5b 0b       	sbc	r21, r27
    23da:	24 36       	cpi	r18, 0x64	; 100
    23dc:	31 05       	cpc	r19, r1
    23de:	41 05       	cpc	r20, r1
    23e0:	51 05       	cpc	r21, r1
    23e2:	34 f4       	brge	.+12     	; 0x23f0 <RotaryEncoderAcceleration::update()+0xca>
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	a8 2e       	mov	r10, r24
    23e8:	b1 2c       	mov	r11, r1
    23ea:	c1 2c       	mov	r12, r1
    23ec:	d1 2c       	mov	r13, r1
    23ee:	0c c0       	rjmp	.+24     	; 0x2408 <RotaryEncoderAcceleration::update()+0xe2>
    23f0:	ca 01       	movw	r24, r20
    23f2:	b9 01       	movw	r22, r18
    23f4:	24 e6       	ldi	r18, 0x64	; 100
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	0e 94 95 22 	call	0x452a	; 0x452a <__divmodsi4>
    2400:	c9 01       	movw	r24, r18
    2402:	da 01       	movw	r26, r20
    2404:	5c 01       	movw	r10, r24
    2406:	6d 01       	movw	r12, r26
    2408:	7e 01       	movw	r14, r28
    240a:	00 27       	eor	r16, r16
    240c:	f7 fc       	sbrc	r15, 7
    240e:	00 95       	com	r16
    2410:	10 2f       	mov	r17, r16
    2412:	c8 01       	movw	r24, r16
    2414:	b7 01       	movw	r22, r14
    2416:	a8 01       	movw	r20, r16
    2418:	97 01       	movw	r18, r14
    241a:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    241e:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    2422:	a6 01       	movw	r20, r12
    2424:	95 01       	movw	r18, r10
    2426:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    242a:	29 e0       	ldi	r18, 0x09	; 9
    242c:	3d e3       	ldi	r19, 0x3D	; 61
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	0e 94 95 22 	call	0x452a	; 0x452a <__divmodsi4>
    2436:	2f 5f       	subi	r18, 0xFF	; 255
    2438:	3f 4f       	sbci	r19, 0xFF	; 255
    243a:	4f 4f       	sbci	r20, 0xFF	; 255
    243c:	5f 4f       	sbci	r21, 0xFF	; 255
    243e:	f3 01       	movw	r30, r6
    2440:	e0 84       	ldd	r14, Z+8	; 0x08
    2442:	f1 84       	ldd	r15, Z+9	; 0x09
    2444:	02 85       	ldd	r16, Z+10	; 0x0a
    2446:	13 85       	ldd	r17, Z+11	; 0x0b
    2448:	d4 01       	movw	r26, r8
    244a:	5e 96       	adiw	r26, 0x1e	; 30
    244c:	8c 91       	ld	r24, X
    244e:	88 23       	and	r24, r24
    2450:	39 f4       	brne	.+14     	; 0x2460 <RotaryEncoderAcceleration::update()+0x13a>
    2452:	50 95       	com	r21
    2454:	40 95       	com	r20
    2456:	30 95       	com	r19
    2458:	21 95       	neg	r18
    245a:	3f 4f       	sbci	r19, 0xFF	; 255
    245c:	4f 4f       	sbci	r20, 0xFF	; 255
    245e:	5f 4f       	sbci	r21, 0xFF	; 255
    2460:	2e 0d       	add	r18, r14
    2462:	3f 1d       	adc	r19, r15
    2464:	40 1f       	adc	r20, r16
    2466:	51 1f       	adc	r21, r17
    2468:	c3 01       	movw	r24, r6
    246a:	ba 01       	movw	r22, r20
    246c:	a9 01       	movw	r20, r18
    246e:	0e 94 09 11 	call	0x2212	; 0x2212 <RotaryEncoderState::setValue_unsafe(long)>
    2472:	04 c0       	rjmp	.+8      	; 0x247c <RotaryEncoderAcceleration::update()+0x156>
    2474:	c4 01       	movw	r24, r8
    2476:	85 96       	adiw	r24, 0x25	; 37
    2478:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <TicksPerSecond::update()>
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	9f 90       	pop	r9
    2492:	8f 90       	pop	r8
    2494:	7f 90       	pop	r7
    2496:	6f 90       	pop	r6
    2498:	08 95       	ret

0000249a <RotaryEncoderAcceleration::initialize(DigitalInputPin*, DigitalInputPin*)>:
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	8c 01       	movw	r16, r24
    24a4:	7a 01       	movw	r14, r20
    24a6:	fc 01       	movw	r30, r24
    24a8:	15 86       	std	Z+13, r1	; 0x0d
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	86 87       	std	Z+14, r24	; 0x0e
    24ae:	84 87       	std	Z+12, r24	; 0x0c
    24b0:	10 86       	std	Z+8, r1	; 0x08
    24b2:	11 86       	std	Z+9, r1	; 0x09
    24b4:	12 86       	std	Z+10, r1	; 0x0a
    24b6:	13 86       	std	Z+11, r1	; 0x0b
    24b8:	10 82       	st	Z, r1
    24ba:	11 82       	std	Z+1, r1	; 0x01
    24bc:	12 82       	std	Z+2, r1	; 0x02
    24be:	13 82       	std	Z+3, r1	; 0x03
    24c0:	88 ee       	ldi	r24, 0xE8	; 232
    24c2:	93 e0       	ldi	r25, 0x03	; 3
    24c4:	a0 e0       	ldi	r26, 0x00	; 0
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	84 83       	std	Z+4, r24	; 0x04
    24ca:	95 83       	std	Z+5, r25	; 0x05
    24cc:	a6 83       	std	Z+6, r26	; 0x06
    24ce:	b7 83       	std	Z+7, r27	; 0x07
    24d0:	10 8b       	std	Z+16, r17	; 0x10
    24d2:	07 87       	std	Z+15, r16	; 0x0f
    24d4:	c8 01       	movw	r24, r16
    24d6:	41 96       	adiw	r24, 0x11	; 17
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Button::initialize(DigitalInputPin*, unsigned int)>
    24e0:	c8 01       	movw	r24, r16
    24e2:	4b 96       	adiw	r24, 0x1b	; 27
    24e4:	b7 01       	movw	r22, r14
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Button::initialize(DigitalInputPin*, unsigned int)>
    24ee:	c8 01       	movw	r24, r16
    24f0:	85 96       	adiw	r24, 0x25	; 37
    24f2:	64 ef       	ldi	r22, 0xF4	; 244
    24f4:	71 e0       	ldi	r23, 0x01	; 1
    24f6:	0e 94 2a 18 	call	0x3054	; 0x3054 <TicksPerSecond::initialize(unsigned int)>
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	08 95       	ret

00002504 <SerialReader::readln()>:
    2504:	fc 01       	movw	r30, r24
    2506:	86 81       	ldd	r24, Z+6	; 0x06
    2508:	88 23       	and	r24, r24
    250a:	19 f4       	brne	.+6      	; 0x2512 <SerialReader::readln()+0xe>
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	05 c0       	rjmp	.+10     	; 0x251c <SerialReader::readln()+0x18>
    2512:	16 82       	std	Z+6, r1	; 0x06
    2514:	13 82       	std	Z+3, r1	; 0x03
    2516:	12 82       	std	Z+2, r1	; 0x02
    2518:	24 81       	ldd	r18, Z+4	; 0x04
    251a:	35 81       	ldd	r19, Z+5	; 0x05
    251c:	c9 01       	movw	r24, r18
    251e:	08 95       	ret

00002520 <SerialReader::update()>:
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	ec 01       	movw	r28, r24
    2526:	8e 81       	ldd	r24, Y+6	; 0x06
    2528:	88 23       	and	r24, r24
    252a:	e1 f0       	breq	.+56     	; 0x2564 <SerialReader::update()+0x44>
    252c:	3c c0       	rjmp	.+120    	; 0x25a6 <SerialReader::update()+0x86>
    252e:	2d 30       	cpi	r18, 0x0D	; 13
    2530:	51 f4       	brne	.+20     	; 0x2546 <SerialReader::update()+0x26>
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	8e 83       	std	Y+6, r24	; 0x06
    2536:	ec 81       	ldd	r30, Y+4	; 0x04
    2538:	fd 81       	ldd	r31, Y+5	; 0x05
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	e8 0f       	add	r30, r24
    2540:	f9 1f       	adc	r31, r25
    2542:	10 82       	st	Z, r1
    2544:	26 c0       	rjmp	.+76     	; 0x2592 <SerialReader::update()+0x72>
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	9b 81       	ldd	r25, Y+3	; 0x03
    254a:	ec 81       	ldd	r30, Y+4	; 0x04
    254c:	fd 81       	ldd	r31, Y+5	; 0x05
    254e:	e8 0f       	add	r30, r24
    2550:	f9 1f       	adc	r31, r25
    2552:	20 83       	st	Z, r18
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	9b 83       	std	Y+3, r25	; 0x03
    2558:	8a 83       	std	Y+2, r24	; 0x02
    255a:	ec 81       	ldd	r30, Y+4	; 0x04
    255c:	fd 81       	ldd	r31, Y+5	; 0x05
    255e:	e8 0f       	add	r30, r24
    2560:	f9 1f       	adc	r31, r25
    2562:	10 82       	st	Z, r1
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	28 81       	ld	r18, Y
    256c:	39 81       	ldd	r19, Y+1	; 0x01
    256e:	82 17       	cp	r24, r18
    2570:	93 07       	cpc	r25, r19
    2572:	7c f4       	brge	.+30     	; 0x2592 <SerialReader::update()+0x72>
    2574:	80 ea       	ldi	r24, 0xA0	; 160
    2576:	93 e0       	ldi	r25, 0x03	; 3
    2578:	0e 94 1f 19 	call	0x323e	; 0x323e <HardwareSerial::available()>
    257c:	18 16       	cp	r1, r24
    257e:	19 06       	cpc	r1, r25
    2580:	44 f4       	brge	.+16     	; 0x2592 <SerialReader::update()+0x72>
    2582:	80 ea       	ldi	r24, 0xA0	; 160
    2584:	93 e0       	ldi	r25, 0x03	; 3
    2586:	0e 94 4a 19 	call	0x3294	; 0x3294 <HardwareSerial::read()>
    258a:	28 2f       	mov	r18, r24
    258c:	8a 30       	cpi	r24, 0x0A	; 10
    258e:	79 f6       	brne	.-98     	; 0x252e <SerialReader::update()+0xe>
    2590:	d0 cf       	rjmp	.-96     	; 0x2532 <SerialReader::update()+0x12>
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	28 81       	ld	r18, Y
    259a:	39 81       	ldd	r19, Y+1	; 0x01
    259c:	82 17       	cp	r24, r18
    259e:	93 07       	cpc	r25, r19
    25a0:	14 f0       	brlt	.+4      	; 0x25a6 <SerialReader::update()+0x86>
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	8e 83       	std	Y+6, r24	; 0x06
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	08 95       	ret

000025ac <SerialReader::initialize(long, int, char*)>:
    25ac:	cf 92       	push	r12
    25ae:	df 92       	push	r13
    25b0:	ef 92       	push	r14
    25b2:	ff 92       	push	r15
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	7c 01       	movw	r14, r24
    25ba:	69 01       	movw	r12, r18
    25bc:	80 ea       	ldi	r24, 0xA0	; 160
    25be:	93 e0       	ldi	r25, 0x03	; 3
    25c0:	0e 94 b9 18 	call	0x3172	; 0x3172 <HardwareSerial::begin(long)>
    25c4:	f7 01       	movw	r30, r14
    25c6:	13 82       	std	Z+3, r1	; 0x03
    25c8:	12 82       	std	Z+2, r1	; 0x02
    25ca:	d1 82       	std	Z+1, r13	; 0x01
    25cc:	c0 82       	st	Z, r12
    25ce:	15 83       	std	Z+5, r17	; 0x05
    25d0:	04 83       	std	Z+4, r16	; 0x04
    25d2:	f8 01       	movw	r30, r16
    25d4:	10 82       	st	Z, r1
    25d6:	f7 01       	movw	r30, r14
    25d8:	16 82       	std	Z+6, r1	; 0x06
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	ff 90       	pop	r15
    25e0:	ef 90       	pop	r14
    25e2:	df 90       	pop	r13
    25e4:	cf 90       	pop	r12
    25e6:	08 95       	ret

000025e8 <StateLed::setState(short)>:
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	ec 01       	movw	r28, r24
    25ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    25f0:	f8 89       	ldd	r31, Y+16	; 0x10
    25f2:	6e 17       	cp	r22, r30
    25f4:	7f 07       	cpc	r23, r31
    25f6:	2c f0       	brlt	.+10     	; 0x2602 <StateLed::setState(short)+0x1a>
    25f8:	cb 01       	movw	r24, r22
    25fa:	bf 01       	movw	r22, r30
    25fc:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodhi4>
    2600:	bc 01       	movw	r22, r24
    2602:	77 ff       	sbrs	r23, 7
    2604:	09 c0       	rjmp	.+18     	; 0x2618 <StateLed::setState(short)+0x30>
    2606:	cb 01       	movw	r24, r22
    2608:	bf 01       	movw	r22, r30
    260a:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodhi4>
    260e:	bf 01       	movw	r22, r30
    2610:	61 50       	subi	r22, 0x01	; 1
    2612:	70 40       	sbci	r23, 0x00	; 0
    2614:	68 0f       	add	r22, r24
    2616:	79 1f       	adc	r23, r25
    2618:	8d 85       	ldd	r24, Y+13	; 0x0d
    261a:	9e 85       	ldd	r25, Y+14	; 0x0e
    261c:	86 17       	cp	r24, r22
    261e:	97 07       	cpc	r25, r23
    2620:	21 f4       	brne	.+8      	; 0x262a <StateLed::setState(short)+0x42>
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	89 2b       	or	r24, r25
    2628:	a9 f4       	brne	.+42     	; 0x2654 <StateLed::setState(short)+0x6c>
    262a:	7e 87       	std	Y+14, r23	; 0x0e
    262c:	6d 87       	std	Y+13, r22	; 0x0d
    262e:	66 0f       	add	r22, r22
    2630:	77 1f       	adc	r23, r23
    2632:	e9 89       	ldd	r30, Y+17	; 0x11
    2634:	fa 89       	ldd	r31, Y+18	; 0x12
    2636:	e6 0f       	add	r30, r22
    2638:	f7 1f       	adc	r31, r23
    263a:	65 91       	lpm	r22, Z+
    263c:	74 91       	lpm	r23, Z+
    263e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2640:	88 23       	and	r24, r24
    2642:	19 f4       	brne	.+6      	; 0x264a <StateLed::setState(short)+0x62>
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	02 c0       	rjmp	.+4      	; 0x264e <StateLed::setState(short)+0x66>
    264a:	4f ef       	ldi	r20, 0xFF	; 255
    264c:	5f ef       	ldi	r21, 0xFF	; 255
    264e:	ce 01       	movw	r24, r28
    2650:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <BlinkingLed::playBlink(unsigned int const*, short)>
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	08 95       	ret

0000265a <StateLed::initialize(DigitalOutputPin*, unsigned int const**, short, bool)>:
    265a:	ef 92       	push	r14
    265c:	ff 92       	push	r15
    265e:	0f 93       	push	r16
    2660:	7c 01       	movw	r14, r24
    2662:	fc 01       	movw	r30, r24
    2664:	04 87       	std	Z+12, r16	; 0x0c
    2666:	30 8b       	std	Z+16, r19	; 0x10
    2668:	27 87       	std	Z+15, r18	; 0x0f
    266a:	52 8b       	std	Z+18, r21	; 0x12
    266c:	41 8b       	std	Z+17, r20	; 0x11
    266e:	0e 94 c5 0b 	call	0x178a	; 0x178a <BlinkingLed::initialize(DigitalOutputPin*)>
    2672:	c7 01       	movw	r24, r14
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <StateLed::setState(short)>
    267c:	0f 91       	pop	r16
    267e:	ff 90       	pop	r15
    2680:	ef 90       	pop	r14
    2682:	08 95       	ret

00002684 <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>:
    2684:	ef 92       	push	r14
    2686:	ff 92       	push	r15
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	dc 01       	movw	r26, r24
    268e:	14 96       	adiw	r26, 0x04	; 4
    2690:	5c 93       	st	X, r21
    2692:	4e 93       	st	-X, r20
    2694:	13 97       	sbiw	r26, 0x03	; 3
    2696:	16 96       	adiw	r26, 0x06	; 6
    2698:	3c 93       	st	X, r19
    269a:	2e 93       	st	-X, r18
    269c:	15 97       	sbiw	r26, 0x05	; 5
    269e:	18 96       	adiw	r26, 0x08	; 8
    26a0:	1c 93       	st	X, r17
    26a2:	0e 93       	st	-X, r16
    26a4:	17 97       	sbiw	r26, 0x07	; 7
    26a6:	1a 96       	adiw	r26, 0x0a	; 10
    26a8:	fc 92       	st	X, r15
    26aa:	ee 92       	st	-X, r14
    26ac:	19 97       	sbiw	r26, 0x09	; 9
    26ae:	12 96       	adiw	r26, 0x02	; 2
    26b0:	6c 93       	st	X, r22
    26b2:	12 97       	sbiw	r26, 0x02	; 2
    26b4:	ed 91       	ld	r30, X+
    26b6:	fc 91       	ld	r31, X
    26b8:	02 80       	ldd	r0, Z+2	; 0x02
    26ba:	f3 81       	ldd	r31, Z+3	; 0x03
    26bc:	e0 2d       	mov	r30, r0
    26be:	09 95       	icall
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	08 95       	ret

000026ca <StepperMotorMosfetHBridge::setState(unsigned char)>:
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	7c 01       	movw	r14, r24
    26d4:	06 2f       	mov	r16, r22
    26d6:	fc 01       	movw	r30, r24
    26d8:	a3 81       	ldd	r26, Z+3	; 0x03
    26da:	b4 81       	ldd	r27, Z+4	; 0x04
    26dc:	10 e0       	ldi	r17, 0x00	; 0
    26de:	ed 91       	ld	r30, X+
    26e0:	fc 91       	ld	r31, X
    26e2:	11 97       	sbiw	r26, 0x01	; 1
    26e4:	b8 01       	movw	r22, r16
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	76 95       	lsr	r23
    26ea:	67 95       	ror	r22
    26ec:	8a 95       	dec	r24
    26ee:	e1 f7       	brne	.-8      	; 0x26e8 <StepperMotorMosfetHBridge::setState(unsigned char)+0x1e>
    26f0:	61 70       	andi	r22, 0x01	; 1
    26f2:	02 80       	ldd	r0, Z+2	; 0x02
    26f4:	f3 81       	ldd	r31, Z+3	; 0x03
    26f6:	e0 2d       	mov	r30, r0
    26f8:	cd 01       	movw	r24, r26
    26fa:	09 95       	icall
    26fc:	f7 01       	movw	r30, r14
    26fe:	a5 81       	ldd	r26, Z+5	; 0x05
    2700:	b6 81       	ldd	r27, Z+6	; 0x06
    2702:	ed 91       	ld	r30, X+
    2704:	fc 91       	ld	r31, X
    2706:	11 97       	sbiw	r26, 0x01	; 1
    2708:	b8 01       	movw	r22, r16
    270a:	76 95       	lsr	r23
    270c:	67 95       	ror	r22
    270e:	76 95       	lsr	r23
    2710:	67 95       	ror	r22
    2712:	61 70       	andi	r22, 0x01	; 1
    2714:	02 80       	ldd	r0, Z+2	; 0x02
    2716:	f3 81       	ldd	r31, Z+3	; 0x03
    2718:	e0 2d       	mov	r30, r0
    271a:	cd 01       	movw	r24, r26
    271c:	09 95       	icall
    271e:	f7 01       	movw	r30, r14
    2720:	a7 81       	ldd	r26, Z+7	; 0x07
    2722:	b0 85       	ldd	r27, Z+8	; 0x08
    2724:	ed 91       	ld	r30, X+
    2726:	fc 91       	ld	r31, X
    2728:	11 97       	sbiw	r26, 0x01	; 1
    272a:	b8 01       	movw	r22, r16
    272c:	76 95       	lsr	r23
    272e:	67 95       	ror	r22
    2730:	61 70       	andi	r22, 0x01	; 1
    2732:	02 80       	ldd	r0, Z+2	; 0x02
    2734:	f3 81       	ldd	r31, Z+3	; 0x03
    2736:	e0 2d       	mov	r30, r0
    2738:	cd 01       	movw	r24, r26
    273a:	09 95       	icall
    273c:	f7 01       	movw	r30, r14
    273e:	a1 85       	ldd	r26, Z+9	; 0x09
    2740:	b2 85       	ldd	r27, Z+10	; 0x0a
    2742:	ed 91       	ld	r30, X+
    2744:	fc 91       	ld	r31, X
    2746:	11 97       	sbiw	r26, 0x01	; 1
    2748:	01 70       	andi	r16, 0x01	; 1
    274a:	10 70       	andi	r17, 0x00	; 0
    274c:	02 80       	ldd	r0, Z+2	; 0x02
    274e:	f3 81       	ldd	r31, Z+3	; 0x03
    2750:	e0 2d       	mov	r30, r0
    2752:	cd 01       	movw	r24, r26
    2754:	60 2f       	mov	r22, r16
    2756:	09 95       	icall
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	ff 90       	pop	r15
    275e:	ef 90       	pop	r14
    2760:	08 95       	ret

00002762 <StepperMotorMosfetHBridge::step(bool)>:
    2762:	dc 01       	movw	r26, r24
    2764:	12 96       	adiw	r26, 0x02	; 2
    2766:	8c 91       	ld	r24, X
    2768:	12 97       	sbiw	r26, 0x02	; 2
    276a:	28 2f       	mov	r18, r24
    276c:	23 70       	andi	r18, 0x03	; 3
    276e:	86 95       	lsr	r24
    2770:	86 95       	lsr	r24
    2772:	22 30       	cpi	r18, 0x02	; 2
    2774:	11 f0       	breq	.+4      	; 0x277a <StepperMotorMosfetHBridge::step(bool)+0x18>
    2776:	94 e0       	ldi	r25, 0x04	; 4
    2778:	01 c0       	rjmp	.+2      	; 0x277c <StepperMotorMosfetHBridge::step(bool)+0x1a>
    277a:	98 e0       	ldi	r25, 0x08	; 8
    277c:	66 23       	and	r22, r22
    277e:	29 f0       	breq	.+10     	; 0x278a <StepperMotorMosfetHBridge::step(bool)+0x28>
    2780:	8f 5f       	subi	r24, 0xFF	; 255
    2782:	89 17       	cp	r24, r25
    2784:	34 f0       	brlt	.+12     	; 0x2792 <StepperMotorMosfetHBridge::step(bool)+0x30>
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <StepperMotorMosfetHBridge::step(bool)+0x30>
    278a:	81 50       	subi	r24, 0x01	; 1
    278c:	10 f4       	brcc	.+4      	; 0x2792 <StepperMotorMosfetHBridge::step(bool)+0x30>
    278e:	89 2f       	mov	r24, r25
    2790:	81 50       	subi	r24, 0x01	; 1
    2792:	e8 2f       	mov	r30, r24
    2794:	ff 27       	eor	r31, r31
    2796:	e7 fd       	sbrc	r30, 7
    2798:	f0 95       	com	r31
    279a:	cf 01       	movw	r24, r30
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	82 2b       	or	r24, r18
    27a6:	12 96       	adiw	r26, 0x02	; 2
    27a8:	8c 93       	st	X, r24
    27aa:	12 97       	sbiw	r26, 0x02	; 2
    27ac:	21 30       	cpi	r18, 0x01	; 1
    27ae:	29 f0       	breq	.+10     	; 0x27ba <StepperMotorMosfetHBridge::step(bool)+0x58>
    27b0:	22 30       	cpi	r18, 0x02	; 2
    27b2:	31 f4       	brne	.+12     	; 0x27c0 <StepperMotorMosfetHBridge::step(bool)+0x5e>
    27b4:	ea 57       	subi	r30, 0x7A	; 122
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <StepperMotorMosfetHBridge::step(bool)+0x62>
    27ba:	e2 57       	subi	r30, 0x72	; 114
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <StepperMotorMosfetHBridge::step(bool)+0x62>
    27c0:	ee 56       	subi	r30, 0x6E	; 110
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 65 13 	call	0x26ca	; 0x26ca <StepperMotorMosfetHBridge::setState(unsigned char)>
    27cc:	08 95       	ret

000027ce <StepperMotorMosfetHBridge::stop()>:
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	0e 94 65 13 	call	0x26ca	; 0x26ca <StepperMotorMosfetHBridge::setState(unsigned char)>
    27d4:	08 95       	ret

000027d6 <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>:
    27d6:	fc 01       	movw	r30, r24
    27d8:	73 87       	std	Z+11, r23	; 0x0b
    27da:	62 87       	std	Z+10, r22	; 0x0a
    27dc:	51 8b       	std	Z+17, r21	; 0x11
    27de:	40 8b       	std	Z+16, r20	; 0x10
    27e0:	33 8b       	std	Z+19, r19	; 0x13
    27e2:	22 8b       	std	Z+18, r18	; 0x12
    27e4:	14 86       	std	Z+12, r1	; 0x0c
    27e6:	15 86       	std	Z+13, r1	; 0x0d
    27e8:	16 86       	std	Z+14, r1	; 0x0e
    27ea:	17 86       	std	Z+15, r1	; 0x0f
    27ec:	14 8a       	std	Z+20, r1	; 0x14
    27ee:	20 ed       	ldi	r18, 0xD0	; 208
    27f0:	37 e0       	ldi	r19, 0x07	; 7
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	25 8b       	std	Z+21, r18	; 0x15
    27f8:	36 8b       	std	Z+22, r19	; 0x16
    27fa:	47 8b       	std	Z+23, r20	; 0x17
    27fc:	50 8f       	std	Z+24, r21	; 0x18
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e8       	ldi	r25, 0x80	; 128
    2802:	95 83       	std	Z+5, r25	; 0x05
    2804:	84 83       	std	Z+4, r24	; 0x04
    2806:	26 83       	std	Z+6, r18	; 0x06
    2808:	37 83       	std	Z+7, r19	; 0x07
    280a:	40 87       	std	Z+8, r20	; 0x08
    280c:	51 87       	std	Z+9, r21	; 0x09
    280e:	88 ee       	ldi	r24, 0xE8	; 232
    2810:	93 e0       	ldi	r25, 0x03	; 3
    2812:	93 83       	std	Z+3, r25	; 0x03
    2814:	82 83       	std	Z+2, r24	; 0x02
    2816:	10 82       	st	Z, r1
    2818:	08 95       	ret

0000281a <StepperMotorAxis::initializePosition()>:
    281a:	fc 01       	movw	r30, r24
    281c:	83 e0       	ldi	r24, 0x03	; 3
    281e:	80 83       	st	Z, r24
    2820:	11 82       	std	Z+1, r1	; 0x01
    2822:	08 95       	ret

00002824 <StepperMotorAxis::getAbsolutePositionMicroM()>:
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	8c 01       	movw	r16, r24
    282a:	fc 01       	movw	r30, r24
    282c:	64 85       	ldd	r22, Z+12	; 0x0c
    282e:	75 85       	ldd	r23, Z+13	; 0x0d
    2830:	86 85       	ldd	r24, Z+14	; 0x0e
    2832:	97 85       	ldd	r25, Z+15	; 0x0f
    2834:	28 ee       	ldi	r18, 0xE8	; 232
    2836:	33 e0       	ldi	r19, 0x03	; 3
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    2840:	f8 01       	movw	r30, r16
    2842:	22 81       	ldd	r18, Z+2	; 0x02
    2844:	33 81       	ldd	r19, Z+3	; 0x03
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	0e 94 95 22 	call	0x452a	; 0x452a <__divmodsi4>
    284e:	ca 01       	movw	r24, r20
    2850:	b9 01       	movw	r22, r18
    2852:	24 e6       	ldi	r18, 0x64	; 100
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	08 95       	ret

00002864 <StepperMotorAxis::stop()>:
    2864:	fc 01       	movw	r30, r24
    2866:	84 89       	ldd	r24, Z+20	; 0x14
    2868:	88 23       	and	r24, r24
    286a:	11 f0       	breq	.+4      	; 0x2870 <StepperMotorAxis::stop()+0xc>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	84 8b       	std	Z+20, r24	; 0x14
    2870:	10 82       	st	Z, r1
    2872:	08 95       	ret

00002874 <StepperMotorControlWithButtons::debugPrint()>:
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	ec 01       	movw	r28, r24
    287a:	80 ea       	ldi	r24, 0xA0	; 160
    287c:	93 e0       	ldi	r25, 0x03	; 3
    287e:	63 ec       	ldi	r22, 0xC3	; 195
    2880:	75 e0       	ldi	r23, 0x05	; 5
    2882:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    2886:	8a 85       	ldd	r24, Y+10	; 0x0a
    2888:	88 23       	and	r24, r24
    288a:	11 f4       	brne	.+4      	; 0x2890 <StepperMotorControlWithButtons::debugPrint()+0x1c>
    288c:	66 e4       	ldi	r22, 0x46	; 70
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <StepperMotorControlWithButtons::debugPrint()+0x1e>
    2890:	64 e5       	ldi	r22, 0x54	; 84
    2892:	80 ea       	ldi	r24, 0xA0	; 160
    2894:	93 e0       	ldi	r25, 0x03	; 3
    2896:	40 e0       	ldi	r20, 0x00	; 0
    2898:	50 e0       	ldi	r21, 0x00	; 0
    289a:	0e 94 8d 1b 	call	0x371a	; 0x371a <Print::println(char, int)>
    289e:	80 ea       	ldi	r24, 0xA0	; 160
    28a0:	93 e0       	ldi	r25, 0x03	; 3
    28a2:	62 eb       	ldi	r22, 0xB2	; 178
    28a4:	75 e0       	ldi	r23, 0x05	; 5
    28a6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    28aa:	6b 89       	ldd	r22, Y+19	; 0x13
    28ac:	7c 89       	ldd	r23, Y+20	; 0x14
    28ae:	80 ea       	ldi	r24, 0xA0	; 160
    28b0:	93 e0       	ldi	r25, 0x03	; 3
    28b2:	4a e0       	ldi	r20, 0x0A	; 10
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	0e 94 38 1b 	call	0x3670	; 0x3670 <Print::println(unsigned int, int)>
    28ba:	80 ea       	ldi	r24, 0xA0	; 160
    28bc:	93 e0       	ldi	r25, 0x03	; 3
    28be:	61 ea       	ldi	r22, 0xA1	; 161
    28c0:	75 e0       	ldi	r23, 0x05	; 5
    28c2:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    28c6:	4a 81       	ldd	r20, Y+2	; 0x02
    28c8:	5b 81       	ldd	r21, Y+3	; 0x03
    28ca:	6c 81       	ldd	r22, Y+4	; 0x04
    28cc:	7d 81       	ldd	r23, Y+5	; 0x05
    28ce:	80 ea       	ldi	r24, 0xA0	; 160
    28d0:	93 e0       	ldi	r25, 0x03	; 3
    28d2:	2a e0       	ldi	r18, 0x0A	; 10
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	0e 94 67 1b 	call	0x36ce	; 0x36ce <Print::println(long, int)>
    28da:	80 ea       	ldi	r24, 0xA0	; 160
    28dc:	93 e0       	ldi	r25, 0x03	; 3
    28de:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    28e2:	80 ea       	ldi	r24, 0xA0	; 160
    28e4:	93 e0       	ldi	r25, 0x03	; 3
    28e6:	60 e9       	ldi	r22, 0x90	; 144
    28e8:	75 e0       	ldi	r23, 0x05	; 5
    28ea:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    28ee:	ae 81       	ldd	r26, Y+6	; 0x06
    28f0:	bf 81       	ldd	r27, Y+7	; 0x07
    28f2:	ed 91       	ld	r30, X+
    28f4:	fc 91       	ld	r31, X
    28f6:	11 97       	sbiw	r26, 0x01	; 1
    28f8:	01 90       	ld	r0, Z+
    28fa:	f0 81       	ld	r31, Z
    28fc:	e0 2d       	mov	r30, r0
    28fe:	cd 01       	movw	r24, r26
    2900:	09 95       	icall
    2902:	88 23       	and	r24, r24
    2904:	19 f4       	brne	.+6      	; 0x290c <StepperMotorControlWithButtons::debugPrint()+0x98>
    2906:	67 e4       	ldi	r22, 0x47	; 71
    2908:	75 e0       	ldi	r23, 0x05	; 5
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <StepperMotorControlWithButtons::debugPrint()+0x9c>
    290c:	64 e4       	ldi	r22, 0x44	; 68
    290e:	75 e0       	ldi	r23, 0x05	; 5
    2910:	80 ea       	ldi	r24, 0xA0	; 160
    2912:	93 e0       	ldi	r25, 0x03	; 3
    2914:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
    2918:	80 ea       	ldi	r24, 0xA0	; 160
    291a:	93 e0       	ldi	r25, 0x03	; 3
    291c:	6f e7       	ldi	r22, 0x7F	; 127
    291e:	75 e0       	ldi	r23, 0x05	; 5
    2920:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    2924:	e8 85       	ldd	r30, Y+8	; 0x08
    2926:	f9 85       	ldd	r31, Y+9	; 0x09
    2928:	a0 81       	ld	r26, Z
    292a:	b1 81       	ldd	r27, Z+1	; 0x01
    292c:	2d 91       	ld	r18, X+
    292e:	3c 91       	ld	r19, X
    2930:	cf 01       	movw	r24, r30
    2932:	f9 01       	movw	r30, r18
    2934:	09 95       	icall
    2936:	88 23       	and	r24, r24
    2938:	19 f4       	brne	.+6      	; 0x2940 <StepperMotorControlWithButtons::debugPrint()+0xcc>
    293a:	67 e4       	ldi	r22, 0x47	; 71
    293c:	75 e0       	ldi	r23, 0x05	; 5
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <StepperMotorControlWithButtons::debugPrint()+0xd0>
    2940:	64 e4       	ldi	r22, 0x44	; 68
    2942:	75 e0       	ldi	r23, 0x05	; 5
    2944:	80 ea       	ldi	r24, 0xA0	; 160
    2946:	93 e0       	ldi	r25, 0x03	; 3
    2948:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
    294c:	80 ea       	ldi	r24, 0xA0	; 160
    294e:	93 e0       	ldi	r25, 0x03	; 3
    2950:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    2954:	80 ea       	ldi	r24, 0xA0	; 160
    2956:	93 e0       	ldi	r25, 0x03	; 3
    2958:	6e e6       	ldi	r22, 0x6E	; 110
    295a:	75 e0       	ldi	r23, 0x05	; 5
    295c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    2960:	6a 85       	ldd	r22, Y+10	; 0x0a
    2962:	80 ea       	ldi	r24, 0xA0	; 160
    2964:	93 e0       	ldi	r25, 0x03	; 3
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	4a e0       	ldi	r20, 0x0A	; 10
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <Print::println(int, int)>
    2970:	80 ea       	ldi	r24, 0xA0	; 160
    2972:	93 e0       	ldi	r25, 0x03	; 3
    2974:	6d e5       	ldi	r22, 0x5D	; 93
    2976:	75 e0       	ldi	r23, 0x05	; 5
    2978:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    297c:	4f 85       	ldd	r20, Y+15	; 0x0f
    297e:	58 89       	ldd	r21, Y+16	; 0x10
    2980:	69 89       	ldd	r22, Y+17	; 0x11
    2982:	7a 89       	ldd	r23, Y+18	; 0x12
    2984:	80 ea       	ldi	r24, 0xA0	; 160
    2986:	93 e0       	ldi	r25, 0x03	; 3
    2988:	2a e0       	ldi	r18, 0x0A	; 10
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	0e 94 2d 1b 	call	0x365a	; 0x365a <Print::println(unsigned long, int)>
    2990:	80 ea       	ldi	r24, 0xA0	; 160
    2992:	93 e0       	ldi	r25, 0x03	; 3
    2994:	6c e4       	ldi	r22, 0x4C	; 76
    2996:	75 e0       	ldi	r23, 0x05	; 5
    2998:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    299c:	4b 85       	ldd	r20, Y+11	; 0x0b
    299e:	5c 85       	ldd	r21, Y+12	; 0x0c
    29a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    29a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    29a4:	80 ea       	ldi	r24, 0xA0	; 160
    29a6:	93 e0       	ldi	r25, 0x03	; 3
    29a8:	2a e0       	ldi	r18, 0x0A	; 10
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	0e 94 2d 1b 	call	0x365a	; 0x365a <Print::println(unsigned long, int)>
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <StepperMotorAxis::debugPrint()>:
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	7c 01       	movw	r14, r24
    29c0:	00 ea       	ldi	r16, 0xA0	; 160
    29c2:	13 e0       	ldi	r17, 0x03	; 3
    29c4:	c8 01       	movw	r24, r16
    29c6:	69 e3       	ldi	r22, 0x39	; 57
    29c8:	75 e0       	ldi	r23, 0x05	; 5
    29ca:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Print::pgm_println(char const*)>
    29ce:	c8 01       	movw	r24, r16
    29d0:	68 e2       	ldi	r22, 0x28	; 40
    29d2:	75 e0       	ldi	r23, 0x05	; 5
    29d4:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    29d8:	f7 01       	movw	r30, r14
    29da:	60 81       	ld	r22, Z
    29dc:	c8 01       	movw	r24, r16
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	4a e0       	ldi	r20, 0x0A	; 10
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <Print::print(int, int)>
    29e8:	c8 01       	movw	r24, r16
    29ea:	6f e2       	ldi	r22, 0x2F	; 47
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	0e 94 04 1b 	call	0x3608	; 0x3608 <Print::print(char, int)>
    29f4:	f7 01       	movw	r30, r14
    29f6:	61 81       	ldd	r22, Z+1	; 0x01
    29f8:	c8 01       	movw	r24, r16
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	4a e0       	ldi	r20, 0x0A	; 10
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <Print::println(int, int)>
    2a04:	c8 01       	movw	r24, r16
    2a06:	67 e1       	ldi	r22, 0x17	; 23
    2a08:	75 e0       	ldi	r23, 0x05	; 5
    2a0a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    2a0e:	c7 01       	movw	r24, r14
    2a10:	0e 94 12 14 	call	0x2824	; 0x2824 <StepperMotorAxis::getAbsolutePositionMicroM()>
    2a14:	ab 01       	movw	r20, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	c8 01       	movw	r24, r16
    2a1a:	2a e0       	ldi	r18, 0x0A	; 10
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	0e 94 67 1b 	call	0x36ce	; 0x36ce <Print::println(long, int)>
    2a22:	c8 01       	movw	r24, r16
    2a24:	66 e0       	ldi	r22, 0x06	; 6
    2a26:	75 e0       	ldi	r23, 0x05	; 5
    2a28:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    2a2c:	f7 01       	movw	r30, r14
    2a2e:	22 81       	ldd	r18, Z+2	; 0x02
    2a30:	33 81       	ldd	r19, Z+3	; 0x03
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	77 e8       	ldi	r23, 0x87	; 135
    2a3a:	83 e9       	ldi	r24, 0x93	; 147
    2a3c:	93 e0       	ldi	r25, 0x03	; 3
    2a3e:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
    2a42:	ca 01       	movw	r24, r20
    2a44:	b9 01       	movw	r22, r18
    2a46:	24 e6       	ldi	r18, 0x64	; 100
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    2a52:	f7 01       	movw	r30, r14
    2a54:	25 89       	ldd	r18, Z+21	; 0x15
    2a56:	36 89       	ldd	r19, Z+22	; 0x16
    2a58:	47 89       	ldd	r20, Z+23	; 0x17
    2a5a:	50 8d       	ldd	r21, Z+24	; 0x18
    2a5c:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
    2a60:	c8 01       	movw	r24, r16
    2a62:	b9 01       	movw	r22, r18
    2a64:	4a e0       	ldi	r20, 0x0A	; 10
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	0e 94 38 1b 	call	0x3670	; 0x3670 <Print::println(unsigned int, int)>
    2a6c:	c8 01       	movw	r24, r16
    2a6e:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    2a72:	c7 01       	movw	r24, r14
    2a74:	0a 96       	adiw	r24, 0x0a	; 10
    2a76:	0e 94 3a 14 	call	0x2874	; 0x2874 <StepperMotorControlWithButtons::debugPrint()>
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	6b ee       	ldi	r22, 0xEB	; 235
    2a7e:	74 e0       	ldi	r23, 0x04	; 4
    2a80:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    2a84:	f7 01       	movw	r30, r14
    2a86:	46 81       	ldd	r20, Z+6	; 0x06
    2a88:	57 81       	ldd	r21, Z+7	; 0x07
    2a8a:	60 85       	ldd	r22, Z+8	; 0x08
    2a8c:	71 85       	ldd	r23, Z+9	; 0x09
    2a8e:	c8 01       	movw	r24, r16
    2a90:	2a e0       	ldi	r18, 0x0A	; 10
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	0e 94 2d 1b 	call	0x365a	; 0x365a <Print::println(unsigned long, int)>
    2a98:	c8 01       	movw	r24, r16
    2a9a:	6a ed       	ldi	r22, 0xDA	; 218
    2a9c:	74 e0       	ldi	r23, 0x04	; 4
    2a9e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    2aa2:	f7 01       	movw	r30, r14
    2aa4:	62 81       	ldd	r22, Z+2	; 0x02
    2aa6:	73 81       	ldd	r23, Z+3	; 0x03
    2aa8:	c8 01       	movw	r24, r16
    2aaa:	4a e0       	ldi	r20, 0x0A	; 10
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	0e 94 38 1b 	call	0x3670	; 0x3670 <Print::println(unsigned int, int)>
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	69 ec       	ldi	r22, 0xC9	; 201
    2ab6:	74 e0       	ldi	r23, 0x04	; 4
    2ab8:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    2abc:	f7 01       	movw	r30, r14
    2abe:	64 81       	ldd	r22, Z+4	; 0x04
    2ac0:	75 81       	ldd	r23, Z+5	; 0x05
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	4a e0       	ldi	r20, 0x0A	; 10
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <Print::println(int, int)>
    2acc:	c8 01       	movw	r24, r16
    2ace:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	ff 90       	pop	r15
    2ad8:	ef 90       	pop	r14
    2ada:	08 95       	ret

00002adc <StepperMotorControlWithButtons::rotate(bool)>:
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	ec 01       	movw	r28, r24
    2ae2:	66 23       	and	r22, r22
    2ae4:	11 f4       	brne	.+4      	; 0x2aea <StepperMotorControlWithButtons::rotate(bool)+0xe>
    2ae6:	85 e0       	ldi	r24, 0x05	; 5
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <StepperMotorControlWithButtons::rotate(bool)+0x10>
    2aea:	84 e0       	ldi	r24, 0x04	; 4
    2aec:	8a 87       	std	Y+10, r24	; 0x0a
    2aee:	0e 94 be 03 	call	0x77c	; 0x77c <micros>
    2af2:	2b 85       	ldd	r18, Y+11	; 0x0b
    2af4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2af6:	4d 85       	ldd	r20, Y+13	; 0x0d
    2af8:	5e 85       	ldd	r21, Y+14	; 0x0e
    2afa:	62 1b       	sub	r22, r18
    2afc:	73 0b       	sbc	r23, r19
    2afe:	84 0b       	sbc	r24, r20
    2b00:	95 0b       	sbc	r25, r21
    2b02:	6f 87       	std	Y+15, r22	; 0x0f
    2b04:	78 8b       	std	Y+16, r23	; 0x10
    2b06:	89 8b       	std	Y+17, r24	; 0x11
    2b08:	9a 8b       	std	Y+18, r25	; 0x12
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	08 95       	ret

00002b10 <StepperMotorAxis::doInitializePosition()>:
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	ec 01       	movw	r28, r24
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	88 23       	and	r24, r24
    2b1a:	19 f0       	breq	.+6      	; 0x2b22 <StepperMotorAxis::doInitializePosition()+0x12>
    2b1c:	81 30       	cpi	r24, 0x01	; 1
    2b1e:	c9 f4       	brne	.+50     	; 0x2b52 <StepperMotorAxis::doInitializePosition()+0x42>
    2b20:	10 c0       	rjmp	.+32     	; 0x2b42 <StepperMotorAxis::doInitializePosition()+0x32>
    2b22:	8e 81       	ldd	r24, Y+6	; 0x06
    2b24:	9f 81       	ldd	r25, Y+7	; 0x07
    2b26:	a8 85       	ldd	r26, Y+8	; 0x08
    2b28:	b9 85       	ldd	r27, Y+9	; 0x09
    2b2a:	8d 8b       	std	Y+21, r24	; 0x15
    2b2c:	9e 8b       	std	Y+22, r25	; 0x16
    2b2e:	af 8b       	std	Y+23, r26	; 0x17
    2b30:	b8 8f       	std	Y+24, r27	; 0x18
    2b32:	ce 01       	movw	r24, r28
    2b34:	0a 96       	adiw	r24, 0x0a	; 10
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <StepperMotorAxis::doInitializePosition()+0x42>
    2b42:	8c 89       	ldd	r24, Y+20	; 0x14
    2b44:	88 23       	and	r24, r24
    2b46:	29 f4       	brne	.+10     	; 0x2b52 <StepperMotorAxis::doInitializePosition()+0x42>
    2b48:	1c 86       	std	Y+12, r1	; 0x0c
    2b4a:	1d 86       	std	Y+13, r1	; 0x0d
    2b4c:	1e 86       	std	Y+14, r1	; 0x0e
    2b4e:	1f 86       	std	Y+15, r1	; 0x0f
    2b50:	18 82       	st	Y, r1
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

00002b58 <StepperMotorAxis::doDetermineAvailableSteps()>:
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	81 30       	cpi	r24, 0x01	; 1
    2b62:	a1 f0       	breq	.+40     	; 0x2b8c <StepperMotorAxis::doDetermineAvailableSteps()+0x34>
    2b64:	81 30       	cpi	r24, 0x01	; 1
    2b66:	18 f0       	brcs	.+6      	; 0x2b6e <StepperMotorAxis::doDetermineAvailableSteps()+0x16>
    2b68:	82 30       	cpi	r24, 0x02	; 2
    2b6a:	f9 f4       	brne	.+62     	; 0x2baa <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2b6c:	1a c0       	rjmp	.+52     	; 0x2ba2 <StepperMotorAxis::doDetermineAvailableSteps()+0x4a>
    2b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b70:	9f 81       	ldd	r25, Y+7	; 0x07
    2b72:	a8 85       	ldd	r26, Y+8	; 0x08
    2b74:	b9 85       	ldd	r27, Y+9	; 0x09
    2b76:	8d 8b       	std	Y+21, r24	; 0x15
    2b78:	9e 8b       	std	Y+22, r25	; 0x16
    2b7a:	af 8b       	std	Y+23, r26	; 0x17
    2b7c:	b8 8f       	std	Y+24, r27	; 0x18
    2b7e:	ce 01       	movw	r24, r28
    2b80:	0a 96       	adiw	r24, 0x0a	; 10
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	09 c0       	rjmp	.+18     	; 0x2b9e <StepperMotorAxis::doDetermineAvailableSteps()+0x46>
    2b8c:	8c 89       	ldd	r24, Y+20	; 0x14
    2b8e:	88 23       	and	r24, r24
    2b90:	61 f4       	brne	.+24     	; 0x2baa <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2b92:	ce 01       	movw	r24, r28
    2b94:	0a 96       	adiw	r24, 0x0a	; 10
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	0e 94 6e 15 	call	0x2adc	; 0x2adc <StepperMotorControlWithButtons::rotate(bool)>
    2b9c:	82 e0       	ldi	r24, 0x02	; 2
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	04 c0       	rjmp	.+8      	; 0x2baa <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2ba2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ba4:	88 23       	and	r24, r24
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <StepperMotorAxis::doDetermineAvailableSteps()+0x52>
    2ba8:	18 82       	st	Y, r1
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <StepperMotorControlWithButtons::gotoStep(long)>:
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	ec 01       	movw	r28, r24
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bba:	ac 81       	ldd	r26, Y+4	; 0x04
    2bbc:	bd 81       	ldd	r27, Y+5	; 0x05
    2bbe:	48 1b       	sub	r20, r24
    2bc0:	59 0b       	sbc	r21, r25
    2bc2:	6a 0b       	sbc	r22, r26
    2bc4:	7b 0b       	sbc	r23, r27
    2bc6:	77 fd       	sbrc	r23, 7
    2bc8:	05 c0       	rjmp	.+10     	; 0x2bd4 <StepperMotorControlWithButtons::gotoStep(long)+0x24>
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	8a 87       	std	Y+10, r24	; 0x0a
    2bce:	5c 8b       	std	Y+20, r21	; 0x14
    2bd0:	4b 8b       	std	Y+19, r20	; 0x13
    2bd2:	08 c0       	rjmp	.+16     	; 0x2be4 <StepperMotorControlWithButtons::gotoStep(long)+0x34>
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	8a 87       	std	Y+10, r24	; 0x0a
    2bd8:	88 27       	eor	r24, r24
    2bda:	99 27       	eor	r25, r25
    2bdc:	84 1b       	sub	r24, r20
    2bde:	95 0b       	sbc	r25, r21
    2be0:	9c 8b       	std	Y+20, r25	; 0x14
    2be2:	8b 8b       	std	Y+19, r24	; 0x13
    2be4:	0e 94 be 03 	call	0x77c	; 0x77c <micros>
    2be8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bea:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bec:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bee:	5e 85       	ldd	r21, Y+14	; 0x0e
    2bf0:	62 1b       	sub	r22, r18
    2bf2:	73 0b       	sbc	r23, r19
    2bf4:	84 0b       	sbc	r24, r20
    2bf6:	95 0b       	sbc	r25, r21
    2bf8:	6f 87       	std	Y+15, r22	; 0x0f
    2bfa:	78 8b       	std	Y+16, r23	; 0x10
    2bfc:	89 8b       	std	Y+17, r24	; 0x11
    2bfe:	9a 8b       	std	Y+18, r25	; 0x12
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	08 95       	ret

00002c06 <StepperMotorAxis::moveToPositionMicroMFast(long)>:
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	8c 01       	movw	r16, r24
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	86 81       	ldd	r24, Z+6	; 0x06
    2c10:	97 81       	ldd	r25, Z+7	; 0x07
    2c12:	a0 85       	ldd	r26, Z+8	; 0x08
    2c14:	b1 85       	ldd	r27, Z+9	; 0x09
    2c16:	85 8b       	std	Z+21, r24	; 0x15
    2c18:	96 8b       	std	Z+22, r25	; 0x16
    2c1a:	a7 8b       	std	Z+23, r26	; 0x17
    2c1c:	b0 8f       	std	Z+24, r27	; 0x18
    2c1e:	cb 01       	movw	r24, r22
    2c20:	ba 01       	movw	r22, r20
    2c22:	24 e6       	ldi	r18, 0x64	; 100
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	0e 94 95 22 	call	0x452a	; 0x452a <__divmodsi4>
    2c2e:	ca 01       	movw	r24, r20
    2c30:	b9 01       	movw	r22, r18
    2c32:	f8 01       	movw	r30, r16
    2c34:	22 81       	ldd	r18, Z+2	; 0x02
    2c36:	33 81       	ldd	r19, Z+3	; 0x03
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    2c40:	28 ee       	ldi	r18, 0xE8	; 232
    2c42:	33 e0       	ldi	r19, 0x03	; 3
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	50 e0       	ldi	r21, 0x00	; 0
    2c48:	0e 94 95 22 	call	0x452a	; 0x452a <__divmodsi4>
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	0a 96       	adiw	r24, 0x0a	; 10
    2c50:	ba 01       	movw	r22, r20
    2c52:	a9 01       	movw	r20, r18
    2c54:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <StepperMotorControlWithButtons::gotoStep(long)>
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	08 95       	ret

00002c5e <StepperMotorControlWithButtons::moveTo(long, unsigned long)>:
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	ec 01       	movw	r28, r24
    2c6c:	78 01       	movw	r14, r16
    2c6e:	89 01       	movw	r16, r18
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	9b 81       	ldd	r25, Y+3	; 0x03
    2c74:	ac 81       	ldd	r26, Y+4	; 0x04
    2c76:	bd 81       	ldd	r27, Y+5	; 0x05
    2c78:	48 1b       	sub	r20, r24
    2c7a:	59 0b       	sbc	r21, r25
    2c7c:	6a 0b       	sbc	r22, r26
    2c7e:	7b 0b       	sbc	r23, r27
    2c80:	77 fd       	sbrc	r23, 7
    2c82:	05 c0       	rjmp	.+10     	; 0x2c8e <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x30>
    2c84:	82 e0       	ldi	r24, 0x02	; 2
    2c86:	8a 87       	std	Y+10, r24	; 0x0a
    2c88:	5c 8b       	std	Y+20, r21	; 0x14
    2c8a:	4b 8b       	std	Y+19, r20	; 0x13
    2c8c:	08 c0       	rjmp	.+16     	; 0x2c9e <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x40>
    2c8e:	83 e0       	ldi	r24, 0x03	; 3
    2c90:	8a 87       	std	Y+10, r24	; 0x0a
    2c92:	88 27       	eor	r24, r24
    2c94:	99 27       	eor	r25, r25
    2c96:	84 1b       	sub	r24, r20
    2c98:	95 0b       	sbc	r25, r21
    2c9a:	9c 8b       	std	Y+20, r25	; 0x14
    2c9c:	8b 8b       	std	Y+19, r24	; 0x13
    2c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca2:	9c 01       	movw	r18, r24
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	2b 87       	std	Y+11, r18	; 0x0b
    2caa:	3c 87       	std	Y+12, r19	; 0x0c
    2cac:	4d 87       	std	Y+13, r20	; 0x0d
    2cae:	5e 87       	std	Y+14, r21	; 0x0e
    2cb0:	03 97       	sbiw	r24, 0x03	; 3
    2cb2:	40 f4       	brcc	.+16     	; 0x2cc4 <StepperMotorControlWithButtons::moveTo(long, unsigned long)+0x66>
    2cb4:	2f 5f       	subi	r18, 0xFF	; 255
    2cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cba:	5f 4f       	sbci	r21, 0xFF	; 255
    2cbc:	2b 87       	std	Y+11, r18	; 0x0b
    2cbe:	3c 87       	std	Y+12, r19	; 0x0c
    2cc0:	4d 87       	std	Y+13, r20	; 0x0d
    2cc2:	5e 87       	std	Y+14, r21	; 0x0e
    2cc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cc8:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cca:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ccc:	c8 01       	movw	r24, r16
    2cce:	b7 01       	movw	r22, r14
    2cd0:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
    2cd4:	2b 87       	std	Y+11, r18	; 0x0b
    2cd6:	3c 87       	std	Y+12, r19	; 0x0c
    2cd8:	4d 87       	std	Y+13, r20	; 0x0d
    2cda:	5e 87       	std	Y+14, r21	; 0x0e
    2cdc:	0e 94 be 03 	call	0x77c	; 0x77c <micros>
    2ce0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ce2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ce4:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ce6:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ce8:	62 1b       	sub	r22, r18
    2cea:	73 0b       	sbc	r23, r19
    2cec:	84 0b       	sbc	r24, r20
    2cee:	95 0b       	sbc	r25, r21
    2cf0:	6f 87       	std	Y+15, r22	; 0x0f
    2cf2:	78 8b       	std	Y+16, r23	; 0x10
    2cf4:	89 8b       	std	Y+17, r24	; 0x11
    2cf6:	9a 8b       	std	Y+18, r25	; 0x12
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	ff 90       	pop	r15
    2d02:	ef 90       	pop	r14
    2d04:	08 95       	ret

00002d06 <StepperMotorAxis::moveToPositionMicroM(long, unsigned long)>:
    2d06:	cf 92       	push	r12
    2d08:	df 92       	push	r13
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	6c 01       	movw	r12, r24
    2d14:	78 01       	movw	r14, r16
    2d16:	89 01       	movw	r16, r18
    2d18:	cb 01       	movw	r24, r22
    2d1a:	ba 01       	movw	r22, r20
    2d1c:	24 e6       	ldi	r18, 0x64	; 100
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e0       	ldi	r20, 0x00	; 0
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	0e 94 95 22 	call	0x452a	; 0x452a <__divmodsi4>
    2d28:	ca 01       	movw	r24, r20
    2d2a:	b9 01       	movw	r22, r18
    2d2c:	f6 01       	movw	r30, r12
    2d2e:	22 81       	ldd	r18, Z+2	; 0x02
    2d30:	33 81       	ldd	r19, Z+3	; 0x03
    2d32:	40 e0       	ldi	r20, 0x00	; 0
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    2d3a:	28 ee       	ldi	r18, 0xE8	; 232
    2d3c:	33 e0       	ldi	r19, 0x03	; 3
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	0e 94 95 22 	call	0x452a	; 0x452a <__divmodsi4>
    2d46:	c6 01       	movw	r24, r12
    2d48:	0a 96       	adiw	r24, 0x0a	; 10
    2d4a:	ba 01       	movw	r22, r20
    2d4c:	a9 01       	movw	r20, r18
    2d4e:	98 01       	movw	r18, r16
    2d50:	87 01       	movw	r16, r14
    2d52:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <StepperMotorControlWithButtons::moveTo(long, unsigned long)>
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	df 90       	pop	r13
    2d60:	cf 90       	pop	r12
    2d62:	08 95       	ret

00002d64 <StepperMotorControlWithButtons::update()>:
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	ec 01       	movw	r28, r24
    2d74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d76:	83 30       	cpi	r24, 0x03	; 3
    2d78:	41 f0       	breq	.+16     	; 0x2d8a <StepperMotorControlWithButtons::update()+0x26>
    2d7a:	85 30       	cpi	r24, 0x05	; 5
    2d7c:	31 f0       	breq	.+12     	; 0x2d8a <StepperMotorControlWithButtons::update()+0x26>
    2d7e:	88 23       	and	r24, r24
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <StepperMotorControlWithButtons::update()+0x20>
    2d82:	97 c0       	rjmp	.+302    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2d84:	dd 24       	eor	r13, r13
    2d86:	d3 94       	inc	r13
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <StepperMotorControlWithButtons::update()+0x28>
    2d8a:	dd 24       	eor	r13, r13
    2d8c:	0e 94 be 03 	call	0x77c	; 0x77c <micros>
    2d90:	7b 01       	movw	r14, r22
    2d92:	8c 01       	movw	r16, r24
    2d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d96:	98 89       	ldd	r25, Y+16	; 0x10
    2d98:	a9 89       	ldd	r26, Y+17	; 0x11
    2d9a:	ba 89       	ldd	r27, Y+18	; 0x12
    2d9c:	e8 1a       	sub	r14, r24
    2d9e:	f9 0a       	sbc	r15, r25
    2da0:	0a 0b       	sbc	r16, r26
    2da2:	1b 0b       	sbc	r17, r27
    2da4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da6:	81 30       	cpi	r24, 0x01	; 1
    2da8:	89 f0       	breq	.+34     	; 0x2dcc <StepperMotorControlWithButtons::update()+0x68>
    2daa:	dd 20       	and	r13, r13
    2dac:	19 f0       	breq	.+6      	; 0x2db4 <StepperMotorControlWithButtons::update()+0x50>
    2dae:	e8 85       	ldd	r30, Y+8	; 0x08
    2db0:	f9 85       	ldd	r31, Y+9	; 0x09
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <StepperMotorControlWithButtons::update()+0x54>
    2db4:	ee 81       	ldd	r30, Y+6	; 0x06
    2db6:	ff 81       	ldd	r31, Y+7	; 0x07
    2db8:	a0 81       	ld	r26, Z
    2dba:	b1 81       	ldd	r27, Z+1	; 0x01
    2dbc:	2d 91       	ld	r18, X+
    2dbe:	3c 91       	ld	r19, X
    2dc0:	cf 01       	movw	r24, r30
    2dc2:	f9 01       	movw	r30, r18
    2dc4:	09 95       	icall
    2dc6:	88 23       	and	r24, r24
    2dc8:	09 f0       	breq	.+2      	; 0x2dcc <StepperMotorControlWithButtons::update()+0x68>
    2dca:	68 c0       	rjmp	.+208    	; 0x2e9c <StepperMotorControlWithButtons::update()+0x138>
    2dcc:	88 e8       	ldi	r24, 0x88	; 136
    2dce:	e8 16       	cp	r14, r24
    2dd0:	83 e1       	ldi	r24, 0x13	; 19
    2dd2:	f8 06       	cpc	r15, r24
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	08 07       	cpc	r16, r24
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	18 07       	cpc	r17, r24
    2ddc:	08 f4       	brcc	.+2      	; 0x2de0 <StepperMotorControlWithButtons::update()+0x7c>
    2dde:	69 c0       	rjmp	.+210    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2de0:	e8 81       	ld	r30, Y
    2de2:	f9 81       	ldd	r31, Y+1	; 0x01
    2de4:	a0 81       	ld	r26, Z
    2de6:	b1 81       	ldd	r27, Z+1	; 0x01
    2de8:	12 96       	adiw	r26, 0x02	; 2
    2dea:	2d 91       	ld	r18, X+
    2dec:	3c 91       	ld	r19, X
    2dee:	13 97       	sbiw	r26, 0x03	; 3
    2df0:	cf 01       	movw	r24, r30
    2df2:	f9 01       	movw	r30, r18
    2df4:	09 95       	icall
    2df6:	1a 86       	std	Y+10, r1	; 0x0a
    2df8:	5c c0       	rjmp	.+184    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2dfa:	88 e8       	ldi	r24, 0x88	; 136
    2dfc:	e8 16       	cp	r14, r24
    2dfe:	83 e1       	ldi	r24, 0x13	; 19
    2e00:	f8 06       	cpc	r15, r24
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	08 07       	cpc	r16, r24
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	18 07       	cpc	r17, r24
    2e0a:	08 f4       	brcc	.+2      	; 0x2e0e <StepperMotorControlWithButtons::update()+0xaa>
    2e0c:	52 c0       	rjmp	.+164    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2e0e:	e8 81       	ld	r30, Y
    2e10:	f9 81       	ldd	r31, Y+1	; 0x01
    2e12:	a0 81       	ld	r26, Z
    2e14:	b1 81       	ldd	r27, Z+1	; 0x01
    2e16:	12 96       	adiw	r26, 0x02	; 2
    2e18:	2d 91       	ld	r18, X+
    2e1a:	3c 91       	ld	r19, X
    2e1c:	13 97       	sbiw	r26, 0x03	; 3
    2e1e:	cf 01       	movw	r24, r30
    2e20:	f9 01       	movw	r30, r18
    2e22:	09 95       	icall
    2e24:	46 c0       	rjmp	.+140    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2e26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e28:	82 50       	subi	r24, 0x02	; 2
    2e2a:	82 30       	cpi	r24, 0x02	; 2
    2e2c:	50 f4       	brcc	.+20     	; 0x2e42 <StepperMotorControlWithButtons::update()+0xde>
    2e2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e30:	9c 89       	ldd	r25, Y+20	; 0x14
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	19 f4       	brne	.+6      	; 0x2e3c <StepperMotorControlWithButtons::update()+0xd8>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	8a 87       	std	Y+10, r24	; 0x0a
    2e3a:	3b c0       	rjmp	.+118    	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	9c 8b       	std	Y+20, r25	; 0x14
    2e40:	8b 8b       	std	Y+19, r24	; 0x13
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	ac 81       	ldd	r26, Y+4	; 0x04
    2e48:	bd 81       	ldd	r27, Y+5	; 0x05
    2e4a:	dd 20       	and	r13, r13
    2e4c:	21 f0       	breq	.+8      	; 0x2e56 <StepperMotorControlWithButtons::update()+0xf2>
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	a1 1d       	adc	r26, r1
    2e52:	b1 1d       	adc	r27, r1
    2e54:	03 c0       	rjmp	.+6      	; 0x2e5c <StepperMotorControlWithButtons::update()+0xf8>
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	a1 09       	sbc	r26, r1
    2e5a:	b1 09       	sbc	r27, r1
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	9b 83       	std	Y+3, r25	; 0x03
    2e60:	ac 83       	std	Y+4, r26	; 0x04
    2e62:	bd 83       	std	Y+5, r27	; 0x05
    2e64:	a8 81       	ld	r26, Y
    2e66:	b9 81       	ldd	r27, Y+1	; 0x01
    2e68:	ed 91       	ld	r30, X+
    2e6a:	fc 91       	ld	r31, X
    2e6c:	11 97       	sbiw	r26, 0x01	; 1
    2e6e:	01 90       	ld	r0, Z+
    2e70:	f0 81       	ld	r31, Z
    2e72:	e0 2d       	mov	r30, r0
    2e74:	cd 01       	movw	r24, r26
    2e76:	6d 2d       	mov	r22, r13
    2e78:	09 95       	icall
    2e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e7c:	98 89       	ldd	r25, Y+16	; 0x10
    2e7e:	a9 89       	ldd	r26, Y+17	; 0x11
    2e80:	ba 89       	ldd	r27, Y+18	; 0x12
    2e82:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e84:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e86:	4d 85       	ldd	r20, Y+13	; 0x0d
    2e88:	5e 85       	ldd	r21, Y+14	; 0x0e
    2e8a:	82 0f       	add	r24, r18
    2e8c:	93 1f       	adc	r25, r19
    2e8e:	a4 1f       	adc	r26, r20
    2e90:	b5 1f       	adc	r27, r21
    2e92:	8f 87       	std	Y+15, r24	; 0x0f
    2e94:	98 8b       	std	Y+16, r25	; 0x10
    2e96:	a9 8b       	std	Y+17, r26	; 0x11
    2e98:	ba 8b       	std	Y+18, r27	; 0x12
    2e9a:	0b c0       	rjmp	.+22     	; 0x2eb2 <StepperMotorControlWithButtons::update()+0x14e>
    2e9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ea0:	ad 85       	ldd	r26, Y+13	; 0x0d
    2ea2:	be 85       	ldd	r27, Y+14	; 0x0e
    2ea4:	e8 16       	cp	r14, r24
    2ea6:	f9 06       	cpc	r15, r25
    2ea8:	0a 07       	cpc	r16, r26
    2eaa:	1b 07       	cpc	r17, r27
    2eac:	08 f4       	brcc	.+2      	; 0x2eb0 <StepperMotorControlWithButtons::update()+0x14c>
    2eae:	a5 cf       	rjmp	.-182    	; 0x2dfa <StepperMotorControlWithButtons::update()+0x96>
    2eb0:	ba cf       	rjmp	.-140    	; 0x2e26 <StepperMotorControlWithButtons::update()+0xc2>
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	1f 91       	pop	r17
    2eb8:	0f 91       	pop	r16
    2eba:	ff 90       	pop	r15
    2ebc:	ef 90       	pop	r14
    2ebe:	df 90       	pop	r13
    2ec0:	08 95       	ret

00002ec2 <StepperMotorAxis::update()>:
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	ec 01       	movw	r28, r24
    2ec8:	0a 96       	adiw	r24, 0x0a	; 10
    2eca:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <StepperMotorControlWithButtons::update()>
    2ece:	88 81       	ld	r24, Y
    2ed0:	83 30       	cpi	r24, 0x03	; 3
    2ed2:	19 f0       	breq	.+6      	; 0x2eda <StepperMotorAxis::update()+0x18>
    2ed4:	8a 30       	cpi	r24, 0x0A	; 10
    2ed6:	49 f4       	brne	.+18     	; 0x2eea <StepperMotorAxis::update()+0x28>
    2ed8:	04 c0       	rjmp	.+8      	; 0x2ee2 <StepperMotorAxis::update()+0x20>
    2eda:	ce 01       	movw	r24, r28
    2edc:	0e 94 88 15 	call	0x2b10	; 0x2b10 <StepperMotorAxis::doInitializePosition()>
    2ee0:	05 c0       	rjmp	.+10     	; 0x2eec <StepperMotorAxis::update()+0x2a>
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <StepperMotorAxis::doDetermineAvailableSteps()>
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <StepperMotorAxis::update()+0x2a>
    2eea:	19 82       	std	Y+1, r1	; 0x01
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	08 95       	ret

00002ef2 <TicksPerSecond::tick()>:
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	80 81       	ld	r24, Z
    2ef6:	91 81       	ldd	r25, Z+1	; 0x01
    2ef8:	a2 81       	ldd	r26, Z+2	; 0x02
    2efa:	b3 81       	ldd	r27, Z+3	; 0x03
    2efc:	01 96       	adiw	r24, 0x01	; 1
    2efe:	a1 1d       	adc	r26, r1
    2f00:	b1 1d       	adc	r27, r1
    2f02:	80 83       	st	Z, r24
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	a2 83       	std	Z+2, r26	; 0x02
    2f08:	b3 83       	std	Z+3, r27	; 0x03
    2f0a:	84 81       	ldd	r24, Z+4	; 0x04
    2f0c:	95 81       	ldd	r25, Z+5	; 0x05
    2f0e:	a6 81       	ldd	r26, Z+6	; 0x06
    2f10:	b7 81       	ldd	r27, Z+7	; 0x07
    2f12:	01 96       	adiw	r24, 0x01	; 1
    2f14:	a1 1d       	adc	r26, r1
    2f16:	b1 1d       	adc	r27, r1
    2f18:	84 83       	std	Z+4, r24	; 0x04
    2f1a:	95 83       	std	Z+5, r25	; 0x05
    2f1c:	a6 83       	std	Z+6, r26	; 0x06
    2f1e:	b7 83       	std	Z+7, r27	; 0x07
    2f20:	80 85       	ldd	r24, Z+8	; 0x08
    2f22:	91 85       	ldd	r25, Z+9	; 0x09
    2f24:	a2 85       	ldd	r26, Z+10	; 0x0a
    2f26:	b3 85       	ldd	r27, Z+11	; 0x0b
    2f28:	01 96       	adiw	r24, 0x01	; 1
    2f2a:	a1 1d       	adc	r26, r1
    2f2c:	b1 1d       	adc	r27, r1
    2f2e:	80 87       	std	Z+8, r24	; 0x08
    2f30:	91 87       	std	Z+9, r25	; 0x09
    2f32:	a2 87       	std	Z+10, r26	; 0x0a
    2f34:	b3 87       	std	Z+11, r27	; 0x0b
    2f36:	08 95       	ret

00002f38 <TicksPerSecond::getIntTPS_unsafe()>:
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	8c 01       	movw	r16, r24
    2f3e:	dc 01       	movw	r26, r24
    2f40:	58 96       	adiw	r26, 0x18	; 24
    2f42:	ec 91       	ld	r30, X
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	ee 0f       	add	r30, r30
    2f48:	ff 1f       	adc	r31, r31
    2f4a:	ee 0f       	add	r30, r30
    2f4c:	ff 1f       	adc	r31, r31
    2f4e:	e0 0f       	add	r30, r16
    2f50:	f1 1f       	adc	r31, r17
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	28 ee       	ldi	r18, 0xE8	; 232
    2f5c:	33 e0       	ldi	r19, 0x03	; 3
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    2f66:	f8 01       	movw	r30, r16
    2f68:	25 8d       	ldd	r18, Z+29	; 0x1d
    2f6a:	36 8d       	ldd	r19, Z+30	; 0x1e
    2f6c:	47 8d       	ldd	r20, Z+31	; 0x1f
    2f6e:	50 a1       	ldd	r21, Z+32	; 0x20
    2f70:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
    2f74:	c9 01       	movw	r24, r18
    2f76:	1f 91       	pop	r17
    2f78:	0f 91       	pop	r16
    2f7a:	08 95       	ret

00002f7c <TicksPerSecond::update()>:
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	ec 01       	movw	r28, r24
    2f8a:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    2f8e:	7b 01       	movw	r14, r22
    2f90:	8c 01       	movw	r16, r24
    2f92:	89 8d       	ldd	r24, Y+25	; 0x19
    2f94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f96:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2f98:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2f9a:	a8 01       	movw	r20, r16
    2f9c:	97 01       	movw	r18, r14
    2f9e:	28 1b       	sub	r18, r24
    2fa0:	39 0b       	sbc	r19, r25
    2fa2:	4a 0b       	sbc	r20, r26
    2fa4:	5b 0b       	sbc	r21, r27
    2fa6:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa8:	9a a1       	ldd	r25, Y+34	; 0x22
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	28 17       	cp	r18, r24
    2fb0:	39 07       	cpc	r19, r25
    2fb2:	4a 07       	cpc	r20, r26
    2fb4:	5b 07       	cpc	r21, r27
    2fb6:	18 f1       	brcs	.+70     	; 0x2ffe <TicksPerSecond::update()+0x82>
    2fb8:	88 8d       	ldd	r24, Y+24	; 0x18
    2fba:	a8 2f       	mov	r26, r24
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	fd 01       	movw	r30, r26
    2fc0:	ee 0f       	add	r30, r30
    2fc2:	ff 1f       	adc	r31, r31
    2fc4:	ee 0f       	add	r30, r30
    2fc6:	ff 1f       	adc	r31, r31
    2fc8:	ec 0f       	add	r30, r28
    2fca:	fd 1f       	adc	r31, r29
    2fcc:	10 82       	st	Z, r1
    2fce:	11 82       	std	Z+1, r1	; 0x01
    2fd0:	12 82       	std	Z+2, r1	; 0x02
    2fd2:	13 82       	std	Z+3, r1	; 0x03
    2fd4:	13 96       	adiw	r26, 0x03	; 3
    2fd6:	aa 0f       	add	r26, r26
    2fd8:	bb 1f       	adc	r27, r27
    2fda:	aa 0f       	add	r26, r26
    2fdc:	bb 1f       	adc	r27, r27
    2fde:	ac 0f       	add	r26, r28
    2fe0:	bd 1f       	adc	r27, r29
    2fe2:	ed 92       	st	X+, r14
    2fe4:	fd 92       	st	X+, r15
    2fe6:	0d 93       	st	X+, r16
    2fe8:	1c 93       	st	X, r17
    2fea:	13 97       	sbiw	r26, 0x03	; 3
    2fec:	e9 8e       	std	Y+25, r14	; 0x19
    2fee:	fa 8e       	std	Y+26, r15	; 0x1a
    2ff0:	0b 8f       	std	Y+27, r16	; 0x1b
    2ff2:	1c 8f       	std	Y+28, r17	; 0x1c
    2ff4:	8f 5f       	subi	r24, 0xFF	; 255
    2ff6:	88 8f       	std	Y+24, r24	; 0x18
    2ff8:	83 30       	cpi	r24, 0x03	; 3
    2ffa:	08 f0       	brcs	.+2      	; 0x2ffe <TicksPerSecond::update()+0x82>
    2ffc:	18 8e       	std	Y+24, r1	; 0x18
    2ffe:	e8 8d       	ldd	r30, Y+24	; 0x18
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	33 96       	adiw	r30, 0x03	; 3
    3004:	ee 0f       	add	r30, r30
    3006:	ff 1f       	adc	r31, r31
    3008:	ee 0f       	add	r30, r30
    300a:	ff 1f       	adc	r31, r31
    300c:	ec 0f       	add	r30, r28
    300e:	fd 1f       	adc	r31, r29
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	a2 81       	ldd	r26, Z+2	; 0x02
    3016:	b3 81       	ldd	r27, Z+3	; 0x03
    3018:	a8 01       	movw	r20, r16
    301a:	97 01       	movw	r18, r14
    301c:	28 1b       	sub	r18, r24
    301e:	39 0b       	sbc	r19, r25
    3020:	4a 0b       	sbc	r20, r26
    3022:	5b 0b       	sbc	r21, r27
    3024:	2d 8f       	std	Y+29, r18	; 0x1d
    3026:	3e 8f       	std	Y+30, r19	; 0x1e
    3028:	4f 8f       	std	Y+31, r20	; 0x1f
    302a:	58 a3       	std	Y+32, r21	; 0x20
    302c:	21 15       	cp	r18, r1
    302e:	31 05       	cpc	r19, r1
    3030:	41 05       	cpc	r20, r1
    3032:	51 05       	cpc	r21, r1
    3034:	41 f4       	brne	.+16     	; 0x3046 <TicksPerSecond::update()+0xca>
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	a0 e0       	ldi	r26, 0x00	; 0
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	8d 8f       	std	Y+29, r24	; 0x1d
    3040:	9e 8f       	std	Y+30, r25	; 0x1e
    3042:	af 8f       	std	Y+31, r26	; 0x1f
    3044:	b8 a3       	std	Y+32, r27	; 0x20
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	08 95       	ret

00003054 <TicksPerSecond::initialize(unsigned int)>:
    3054:	ef 92       	push	r14
    3056:	ff 92       	push	r15
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	8c 01       	movw	r16, r24
    305e:	7b 01       	movw	r14, r22
    3060:	0e 94 b0 03 	call	0x760	; 0x760 <millis>
    3064:	f8 01       	movw	r30, r16
    3066:	61 8f       	std	Z+25, r22	; 0x19
    3068:	72 8f       	std	Z+26, r23	; 0x1a
    306a:	83 8f       	std	Z+27, r24	; 0x1b
    306c:	94 8f       	std	Z+28, r25	; 0x1c
    306e:	10 82       	st	Z, r1
    3070:	11 82       	std	Z+1, r1	; 0x01
    3072:	12 82       	std	Z+2, r1	; 0x02
    3074:	13 82       	std	Z+3, r1	; 0x03
    3076:	64 87       	std	Z+12, r22	; 0x0c
    3078:	75 87       	std	Z+13, r23	; 0x0d
    307a:	86 87       	std	Z+14, r24	; 0x0e
    307c:	97 87       	std	Z+15, r25	; 0x0f
    307e:	14 82       	std	Z+4, r1	; 0x04
    3080:	15 82       	std	Z+5, r1	; 0x05
    3082:	16 82       	std	Z+6, r1	; 0x06
    3084:	17 82       	std	Z+7, r1	; 0x07
    3086:	60 8b       	std	Z+16, r22	; 0x10
    3088:	71 8b       	std	Z+17, r23	; 0x11
    308a:	82 8b       	std	Z+18, r24	; 0x12
    308c:	93 8b       	std	Z+19, r25	; 0x13
    308e:	10 86       	std	Z+8, r1	; 0x08
    3090:	11 86       	std	Z+9, r1	; 0x09
    3092:	12 86       	std	Z+10, r1	; 0x0a
    3094:	13 86       	std	Z+11, r1	; 0x0b
    3096:	64 8b       	std	Z+20, r22	; 0x14
    3098:	75 8b       	std	Z+21, r23	; 0x15
    309a:	86 8b       	std	Z+22, r24	; 0x16
    309c:	97 8b       	std	Z+23, r25	; 0x17
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a0 e0       	ldi	r26, 0x00	; 0
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	85 8f       	std	Z+29, r24	; 0x1d
    30a8:	96 8f       	std	Z+30, r25	; 0x1e
    30aa:	a7 8f       	std	Z+31, r26	; 0x1f
    30ac:	b0 a3       	std	Z+32, r27	; 0x20
    30ae:	10 8e       	std	Z+24, r1	; 0x18
    30b0:	c7 01       	movw	r24, r14
    30b2:	63 e0       	ldi	r22, 0x03	; 3
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodhi4>
    30ba:	72 a3       	std	Z+34, r23	; 0x22
    30bc:	61 a3       	std	Z+33, r22	; 0x21
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	08 95       	ret

000030c8 <__vector_18>:
    30c8:	1f 92       	push	r1
    30ca:	0f 92       	push	r0
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	0f 92       	push	r0
    30d0:	11 24       	eor	r1, r1
    30d2:	2f 93       	push	r18
    30d4:	8f 93       	push	r24
    30d6:	9f 93       	push	r25
    30d8:	ef 93       	push	r30
    30da:	ff 93       	push	r31
    30dc:	20 91 c6 00 	lds	r18, 0x00C6
    30e0:	e0 91 5c 03 	lds	r30, 0x035C
    30e4:	9e 2f       	mov	r25, r30
    30e6:	9f 5f       	subi	r25, 0xFF	; 255
    30e8:	90 34       	cpi	r25, 0x40	; 64
    30ea:	08 f0       	brcs	.+2      	; 0x30ee <__vector_18+0x26>
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	80 91 5d 03 	lds	r24, 0x035D
    30f2:	98 17       	cp	r25, r24
    30f4:	31 f0       	breq	.+12     	; 0x3102 <__vector_18+0x3a>
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	e4 5e       	subi	r30, 0xE4	; 228
    30fa:	fc 4f       	sbci	r31, 0xFC	; 252
    30fc:	20 83       	st	Z, r18
    30fe:	90 93 5c 03 	sts	0x035C, r25
    3102:	ff 91       	pop	r31
    3104:	ef 91       	pop	r30
    3106:	9f 91       	pop	r25
    3108:	8f 91       	pop	r24
    310a:	2f 91       	pop	r18
    310c:	0f 90       	pop	r0
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	0f 90       	pop	r0
    3112:	1f 90       	pop	r1
    3114:	18 95       	reti

00003116 <__vector_19>:
    3116:	1f 92       	push	r1
    3118:	0f 92       	push	r0
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	0f 92       	push	r0
    311e:	11 24       	eor	r1, r1
    3120:	8f 93       	push	r24
    3122:	9f 93       	push	r25
    3124:	ef 93       	push	r30
    3126:	ff 93       	push	r31
    3128:	90 91 9f 03 	lds	r25, 0x039F
    312c:	80 91 9e 03 	lds	r24, 0x039E
    3130:	89 17       	cp	r24, r25
    3132:	31 f4       	brne	.+12     	; 0x3140 <__vector_19+0x2a>
    3134:	80 91 c1 00 	lds	r24, 0x00C1
    3138:	8f 7d       	andi	r24, 0xDF	; 223
    313a:	80 93 c1 00 	sts	0x00C1, r24
    313e:	10 c0       	rjmp	.+32     	; 0x3160 <__vector_19+0x4a>
    3140:	e0 91 9f 03 	lds	r30, 0x039F
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	e2 5a       	subi	r30, 0xA2	; 162
    3148:	fc 4f       	sbci	r31, 0xFC	; 252
    314a:	e0 81       	ld	r30, Z
    314c:	80 91 9f 03 	lds	r24, 0x039F
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	80 34       	cpi	r24, 0x40	; 64
    3154:	08 f0       	brcs	.+2      	; 0x3158 <__vector_19+0x42>
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	80 93 9f 03 	sts	0x039F, r24
    315c:	e0 93 c6 00 	sts	0x00C6, r30
    3160:	ff 91       	pop	r31
    3162:	ef 91       	pop	r30
    3164:	9f 91       	pop	r25
    3166:	8f 91       	pop	r24
    3168:	0f 90       	pop	r0
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	0f 90       	pop	r0
    316e:	1f 90       	pop	r1
    3170:	18 95       	reti

00003172 <HardwareSerial::begin(long)>:
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	ec 01       	movw	r28, r24
    3178:	9a 01       	movw	r18, r20
    317a:	ab 01       	movw	r20, r22
    317c:	ea 85       	ldd	r30, Y+10	; 0x0a
    317e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3180:	20 30       	cpi	r18, 0x00	; 0
    3182:	81 ee       	ldi	r24, 0xE1	; 225
    3184:	38 07       	cpc	r19, r24
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	48 07       	cpc	r20, r24
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	58 07       	cpc	r21, r24
    318e:	09 f4       	brne	.+2      	; 0x3192 <HardwareSerial::begin(long)+0x20>
    3190:	52 c0       	rjmp	.+164    	; 0x3236 <HardwareSerial::begin(long)+0xc4>
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	0c 88       	ldd	r0, Y+20	; 0x14
    3198:	02 c0       	rjmp	.+4      	; 0x319e <HardwareSerial::begin(long)+0x2c>
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	0a 94       	dec	r0
    31a0:	e2 f7       	brpl	.-8      	; 0x319a <HardwareSerial::begin(long)+0x28>
    31a2:	80 83       	st	Z, r24
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	79 e0       	ldi	r23, 0x09	; 9
    31a8:	8d e3       	ldi	r24, 0x3D	; 61
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
    31b0:	21 50       	subi	r18, 0x01	; 1
    31b2:	30 40       	sbci	r19, 0x00	; 0
    31b4:	40 40       	sbci	r20, 0x00	; 0
    31b6:	50 40       	sbci	r21, 0x00	; 0
    31b8:	56 95       	lsr	r21
    31ba:	47 95       	ror	r20
    31bc:	37 95       	ror	r19
    31be:	27 95       	ror	r18
    31c0:	ee 81       	ldd	r30, Y+6	; 0x06
    31c2:	ff 81       	ldd	r31, Y+7	; 0x07
    31c4:	30 83       	st	Z, r19
    31c6:	e8 85       	ldd	r30, Y+8	; 0x08
    31c8:	f9 85       	ldd	r31, Y+9	; 0x09
    31ca:	20 83       	st	Z, r18
    31cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    31ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    31d0:	40 81       	ld	r20, Z
    31d2:	21 e0       	ldi	r18, 0x01	; 1
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	c9 01       	movw	r24, r18
    31d8:	08 88       	ldd	r0, Y+16	; 0x10
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <HardwareSerial::begin(long)+0x6e>
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	0a 94       	dec	r0
    31e2:	e2 f7       	brpl	.-8      	; 0x31dc <HardwareSerial::begin(long)+0x6a>
    31e4:	48 2b       	or	r20, r24
    31e6:	40 83       	st	Z, r20
    31e8:	ec 85       	ldd	r30, Y+12	; 0x0c
    31ea:	fd 85       	ldd	r31, Y+13	; 0x0d
    31ec:	40 81       	ld	r20, Z
    31ee:	c9 01       	movw	r24, r18
    31f0:	09 88       	ldd	r0, Y+17	; 0x11
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <HardwareSerial::begin(long)+0x86>
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	0a 94       	dec	r0
    31fa:	e2 f7       	brpl	.-8      	; 0x31f4 <HardwareSerial::begin(long)+0x82>
    31fc:	48 2b       	or	r20, r24
    31fe:	40 83       	st	Z, r20
    3200:	ec 85       	ldd	r30, Y+12	; 0x0c
    3202:	fd 85       	ldd	r31, Y+13	; 0x0d
    3204:	40 81       	ld	r20, Z
    3206:	c9 01       	movw	r24, r18
    3208:	0a 88       	ldd	r0, Y+18	; 0x12
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <HardwareSerial::begin(long)+0x9e>
    320c:	88 0f       	add	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	0a 94       	dec	r0
    3212:	e2 f7       	brpl	.-8      	; 0x320c <HardwareSerial::begin(long)+0x9a>
    3214:	48 2b       	or	r20, r24
    3216:	40 83       	st	Z, r20
    3218:	ec 85       	ldd	r30, Y+12	; 0x0c
    321a:	fd 85       	ldd	r31, Y+13	; 0x0d
    321c:	80 81       	ld	r24, Z
    321e:	0d 88       	ldd	r0, Y+21	; 0x15
    3220:	02 c0       	rjmp	.+4      	; 0x3226 <HardwareSerial::begin(long)+0xb4>
    3222:	22 0f       	add	r18, r18
    3224:	33 1f       	adc	r19, r19
    3226:	0a 94       	dec	r0
    3228:	e2 f7       	brpl	.-8      	; 0x3222 <HardwareSerial::begin(long)+0xb0>
    322a:	20 95       	com	r18
    322c:	28 23       	and	r18, r24
    322e:	20 83       	st	Z, r18
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	08 95       	ret
    3236:	10 82       	st	Z, r1
    3238:	20 e1       	ldi	r18, 0x10	; 16
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	c1 cf       	rjmp	.-126    	; 0x31c0 <HardwareSerial::begin(long)+0x4e>

0000323e <HardwareSerial::available()>:
    323e:	dc 01       	movw	r26, r24
    3240:	12 96       	adiw	r26, 0x02	; 2
    3242:	ed 91       	ld	r30, X+
    3244:	fc 91       	ld	r31, X
    3246:	13 97       	sbiw	r26, 0x03	; 3
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	df 01       	movw	r26, r30
    324e:	af 5b       	subi	r26, 0xBF	; 191
    3250:	bf 4f       	sbci	r27, 0xFF	; 255
    3252:	e0 5c       	subi	r30, 0xC0	; 192
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	90 81       	ld	r25, Z
    3258:	8c 91       	ld	r24, X
    325a:	98 17       	cp	r25, r24
    325c:	11 f0       	breq	.+4      	; 0x3262 <HardwareSerial::available()+0x24>
    325e:	21 e0       	ldi	r18, 0x01	; 1
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	c9 01       	movw	r24, r18
    3264:	08 95       	ret

00003266 <HardwareSerial::peek()>:
    3266:	dc 01       	movw	r26, r24
    3268:	12 96       	adiw	r26, 0x02	; 2
    326a:	ed 91       	ld	r30, X+
    326c:	fc 91       	ld	r31, X
    326e:	13 97       	sbiw	r26, 0x03	; 3
    3270:	ef 5b       	subi	r30, 0xBF	; 191
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	90 81       	ld	r25, Z
    3276:	82 91       	ld	r24, -Z
    3278:	e0 54       	subi	r30, 0x40	; 64
    327a:	f0 40       	sbci	r31, 0x00	; 0
    327c:	89 17       	cp	r24, r25
    327e:	19 f4       	brne	.+6      	; 0x3286 <HardwareSerial::peek()+0x20>
    3280:	2f ef       	ldi	r18, 0xFF	; 255
    3282:	3f ef       	ldi	r19, 0xFF	; 255
    3284:	05 c0       	rjmp	.+10     	; 0x3290 <HardwareSerial::peek()+0x2a>
    3286:	e9 0f       	add	r30, r25
    3288:	f1 1d       	adc	r31, r1
    328a:	80 81       	ld	r24, Z
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	c9 01       	movw	r24, r18
    3292:	08 95       	ret

00003294 <HardwareSerial::read()>:
    3294:	fc 01       	movw	r30, r24
    3296:	a2 81       	ldd	r26, Z+2	; 0x02
    3298:	b3 81       	ldd	r27, Z+3	; 0x03
    329a:	af 5b       	subi	r26, 0xBF	; 191
    329c:	bf 4f       	sbci	r27, 0xFF	; 255
    329e:	2c 91       	ld	r18, X
    32a0:	8e 91       	ld	r24, -X
    32a2:	a0 54       	subi	r26, 0x40	; 64
    32a4:	b0 40       	sbci	r27, 0x00	; 0
    32a6:	82 17       	cp	r24, r18
    32a8:	19 f4       	brne	.+6      	; 0x32b0 <HardwareSerial::read()+0x1c>
    32aa:	ef ef       	ldi	r30, 0xFF	; 255
    32ac:	ff ef       	ldi	r31, 0xFF	; 255
    32ae:	0d c0       	rjmp	.+26     	; 0x32ca <HardwareSerial::read()+0x36>
    32b0:	fd 01       	movw	r30, r26
    32b2:	e2 0f       	add	r30, r18
    32b4:	f1 1d       	adc	r31, r1
    32b6:	80 81       	ld	r24, Z
    32b8:	2f 5f       	subi	r18, 0xFF	; 255
    32ba:	20 34       	cpi	r18, 0x40	; 64
    32bc:	08 f0       	brcs	.+2      	; 0x32c0 <HardwareSerial::read()+0x2c>
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	af 5b       	subi	r26, 0xBF	; 191
    32c2:	bf 4f       	sbci	r27, 0xFF	; 255
    32c4:	2c 93       	st	X, r18
    32c6:	e8 2f       	mov	r30, r24
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	cf 01       	movw	r24, r30
    32cc:	08 95       	ret

000032ce <HardwareSerial::flush()>:
    32ce:	dc 01       	movw	r26, r24
    32d0:	12 96       	adiw	r26, 0x02	; 2
    32d2:	ed 91       	ld	r30, X+
    32d4:	fc 91       	ld	r31, X
    32d6:	13 97       	sbiw	r26, 0x03	; 3
    32d8:	ef 5b       	subi	r30, 0xBF	; 191
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 81       	ld	r24, Z
    32de:	82 93       	st	-Z, r24
    32e0:	08 95       	ret

000032e2 <HardwareSerial::write(unsigned char)>:
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	ec 01       	movw	r28, r24
    32e8:	ec 81       	ldd	r30, Y+4	; 0x04
    32ea:	fd 81       	ldd	r31, Y+5	; 0x05
    32ec:	e0 5c       	subi	r30, 0xC0	; 192
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	20 81       	ld	r18, Z
    32f2:	e0 54       	subi	r30, 0x40	; 64
    32f4:	f0 40       	sbci	r31, 0x00	; 0
    32f6:	92 2f       	mov	r25, r18
    32f8:	9f 5f       	subi	r25, 0xFF	; 255
    32fa:	90 34       	cpi	r25, 0x40	; 64
    32fc:	08 f0       	brcs	.+2      	; 0x3300 <HardwareSerial::write(unsigned char)+0x1e>
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	df 01       	movw	r26, r30
    3302:	af 5b       	subi	r26, 0xBF	; 191
    3304:	bf 4f       	sbci	r27, 0xFF	; 255
    3306:	8c 91       	ld	r24, X
    3308:	98 17       	cp	r25, r24
    330a:	e9 f3       	breq	.-6      	; 0x3306 <HardwareSerial::write(unsigned char)+0x24>
    330c:	e2 0f       	add	r30, r18
    330e:	f1 1d       	adc	r31, r1
    3310:	60 83       	st	Z, r22
    3312:	ec 81       	ldd	r30, Y+4	; 0x04
    3314:	fd 81       	ldd	r31, Y+5	; 0x05
    3316:	e0 5c       	subi	r30, 0xC0	; 192
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	90 83       	st	Z, r25
    331c:	ec 85       	ldd	r30, Y+12	; 0x0c
    331e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3320:	20 81       	ld	r18, Z
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0d 88       	ldd	r0, Y+21	; 0x15
    3328:	02 c0       	rjmp	.+4      	; 0x332e <HardwareSerial::write(unsigned char)+0x4c>
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	0a 94       	dec	r0
    3330:	e2 f7       	brpl	.-8      	; 0x332a <HardwareSerial::write(unsigned char)+0x48>
    3332:	28 2b       	or	r18, r24
    3334:	20 83       	st	Z, r18
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	08 95       	ret

0000333c <global constructors keyed to rx_buffer>:
    333c:	8a e9       	ldi	r24, 0x9A	; 154
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	90 93 a1 03 	sts	0x03A1, r25
    3344:	80 93 a0 03 	sts	0x03A0, r24
    3348:	8c e1       	ldi	r24, 0x1C	; 28
    334a:	93 e0       	ldi	r25, 0x03	; 3
    334c:	90 93 a3 03 	sts	0x03A3, r25
    3350:	80 93 a2 03 	sts	0x03A2, r24
    3354:	85 ec       	ldi	r24, 0xC5	; 197
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	90 93 a7 03 	sts	0x03A7, r25
    335c:	80 93 a6 03 	sts	0x03A6, r24
    3360:	84 ec       	ldi	r24, 0xC4	; 196
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	90 93 a9 03 	sts	0x03A9, r25
    3368:	80 93 a8 03 	sts	0x03A8, r24
    336c:	80 ec       	ldi	r24, 0xC0	; 192
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	90 93 ab 03 	sts	0x03AB, r25
    3374:	80 93 aa 03 	sts	0x03AA, r24
    3378:	81 ec       	ldi	r24, 0xC1	; 193
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	90 93 ad 03 	sts	0x03AD, r25
    3380:	80 93 ac 03 	sts	0x03AC, r24
    3384:	86 ec       	ldi	r24, 0xC6	; 198
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	90 93 af 03 	sts	0x03AF, r25
    338c:	80 93 ae 03 	sts	0x03AE, r24
    3390:	84 e0       	ldi	r24, 0x04	; 4
    3392:	80 93 b0 03 	sts	0x03B0, r24
    3396:	83 e0       	ldi	r24, 0x03	; 3
    3398:	80 93 b1 03 	sts	0x03B1, r24
    339c:	87 e0       	ldi	r24, 0x07	; 7
    339e:	80 93 b2 03 	sts	0x03B2, r24
    33a2:	25 e0       	ldi	r18, 0x05	; 5
    33a4:	20 93 b3 03 	sts	0x03B3, r18
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	80 93 b4 03 	sts	0x03B4, r24
    33ae:	8e e5       	ldi	r24, 0x5E	; 94
    33b0:	93 e0       	ldi	r25, 0x03	; 3
    33b2:	90 93 a5 03 	sts	0x03A5, r25
    33b6:	80 93 a4 03 	sts	0x03A4, r24
    33ba:	20 93 b5 03 	sts	0x03B5, r18
    33be:	08 95       	ret

000033c0 <Print::write(char const*)>:
    33c0:	0f 93       	push	r16
    33c2:	1f 93       	push	r17
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	8c 01       	movw	r16, r24
    33ca:	eb 01       	movw	r28, r22
    33cc:	09 c0       	rjmp	.+18     	; 0x33e0 <Print::write(char const*)+0x20>
    33ce:	21 96       	adiw	r28, 0x01	; 1
    33d0:	d8 01       	movw	r26, r16
    33d2:	ed 91       	ld	r30, X+
    33d4:	fc 91       	ld	r31, X
    33d6:	01 90       	ld	r0, Z+
    33d8:	f0 81       	ld	r31, Z
    33da:	e0 2d       	mov	r30, r0
    33dc:	c8 01       	movw	r24, r16
    33de:	09 95       	icall
    33e0:	68 81       	ld	r22, Y
    33e2:	66 23       	and	r22, r22
    33e4:	a1 f7       	brne	.-24     	; 0x33ce <Print::write(char const*)+0xe>
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	08 95       	ret

000033f0 <Print::pgm_print(char const*)>:
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
    33f6:	df 93       	push	r29
    33f8:	8c 01       	movw	r16, r24
    33fa:	eb 01       	movw	r28, r22
    33fc:	fe 01       	movw	r30, r28
    33fe:	21 96       	adiw	r28, 0x01	; 1
    3400:	64 91       	lpm	r22, Z+
    3402:	66 23       	and	r22, r22
    3404:	49 f0       	breq	.+18     	; 0x3418 <Print::pgm_print(char const*)+0x28>
    3406:	d8 01       	movw	r26, r16
    3408:	ed 91       	ld	r30, X+
    340a:	fc 91       	ld	r31, X
    340c:	01 90       	ld	r0, Z+
    340e:	f0 81       	ld	r31, Z
    3410:	e0 2d       	mov	r30, r0
    3412:	c8 01       	movw	r24, r16
    3414:	09 95       	icall
    3416:	f2 cf       	rjmp	.-28     	; 0x33fc <Print::pgm_print(char const*)+0xc>
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	08 95       	ret

00003422 <Print::print(char const*)>:
    3422:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <Print::write(char const*)>
    3426:	08 95       	ret

00003428 <Print::printNumber(unsigned long, unsigned char)>:
    3428:	2f 92       	push	r2
    342a:	3f 92       	push	r3
    342c:	4f 92       	push	r4
    342e:	5f 92       	push	r5
    3430:	6f 92       	push	r6
    3432:	7f 92       	push	r7
    3434:	8f 92       	push	r8
    3436:	9f 92       	push	r9
    3438:	af 92       	push	r10
    343a:	bf 92       	push	r11
    343c:	cf 92       	push	r12
    343e:	df 92       	push	r13
    3440:	ef 92       	push	r14
    3442:	ff 92       	push	r15
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	a0 97       	sbiw	r28, 0x20	; 32
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	1c 01       	movw	r2, r24
    345e:	6a 01       	movw	r12, r20
    3460:	7b 01       	movw	r14, r22
    3462:	41 15       	cp	r20, r1
    3464:	51 05       	cpc	r21, r1
    3466:	61 05       	cpc	r22, r1
    3468:	71 05       	cpc	r23, r1
    346a:	49 f4       	brne	.+18     	; 0x347e <Print::printNumber(unsigned long, unsigned char)+0x56>
    346c:	40 e3       	ldi	r20, 0x30	; 48
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	70 e0       	ldi	r23, 0x00	; 0
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    347c:	54 c0       	rjmp	.+168    	; 0x3526 <Print::printNumber(unsigned long, unsigned char)+0xfe>
    347e:	88 24       	eor	r8, r8
    3480:	99 24       	eor	r9, r9
    3482:	54 01       	movw	r10, r8
    3484:	42 2e       	mov	r4, r18
    3486:	55 24       	eor	r5, r5
    3488:	66 24       	eor	r6, r6
    348a:	77 24       	eor	r7, r7
    348c:	01 e0       	ldi	r16, 0x01	; 1
    348e:	10 e0       	ldi	r17, 0x00	; 0
    3490:	0c 0f       	add	r16, r28
    3492:	1d 1f       	adc	r17, r29
    3494:	08 0d       	add	r16, r8
    3496:	19 1d       	adc	r17, r9
    3498:	c7 01       	movw	r24, r14
    349a:	b6 01       	movw	r22, r12
    349c:	a3 01       	movw	r20, r6
    349e:	92 01       	movw	r18, r4
    34a0:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
    34a4:	f8 01       	movw	r30, r16
    34a6:	60 83       	st	Z, r22
    34a8:	08 94       	sec
    34aa:	81 1c       	adc	r8, r1
    34ac:	91 1c       	adc	r9, r1
    34ae:	a1 1c       	adc	r10, r1
    34b0:	b1 1c       	adc	r11, r1
    34b2:	c7 01       	movw	r24, r14
    34b4:	b6 01       	movw	r22, r12
    34b6:	a3 01       	movw	r20, r6
    34b8:	92 01       	movw	r18, r4
    34ba:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__udivmodsi4>
    34be:	c9 01       	movw	r24, r18
    34c0:	da 01       	movw	r26, r20
    34c2:	6c 01       	movw	r12, r24
    34c4:	7d 01       	movw	r14, r26
    34c6:	c1 14       	cp	r12, r1
    34c8:	d1 04       	cpc	r13, r1
    34ca:	e1 04       	cpc	r14, r1
    34cc:	f1 04       	cpc	r15, r1
    34ce:	f1 f6       	brne	.-68     	; 0x348c <Print::printNumber(unsigned long, unsigned char)+0x64>
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	e8 2e       	mov	r14, r24
    34d4:	f1 2c       	mov	r15, r1
    34d6:	ec 0e       	add	r14, r28
    34d8:	fd 1e       	adc	r15, r29
    34da:	e8 0c       	add	r14, r8
    34dc:	f9 1c       	adc	r15, r9
    34de:	3e 01       	movw	r6, r28
    34e0:	08 94       	sec
    34e2:	61 1c       	adc	r6, r1
    34e4:	71 1c       	adc	r7, r1
    34e6:	d5 01       	movw	r26, r10
    34e8:	c4 01       	movw	r24, r8
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	a1 09       	sbc	r26, r1
    34ee:	b1 09       	sbc	r27, r1
    34f0:	6c 01       	movw	r12, r24
    34f2:	c8 18       	sub	r12, r8
    34f4:	d9 08       	sbc	r13, r9
    34f6:	14 c0       	rjmp	.+40     	; 0x3520 <Print::printNumber(unsigned long, unsigned char)+0xf8>
    34f8:	f6 01       	movw	r30, r12
    34fa:	ee 0d       	add	r30, r14
    34fc:	ff 1d       	adc	r31, r15
    34fe:	40 81       	ld	r20, Z
    3500:	4a 30       	cpi	r20, 0x0A	; 10
    3502:	10 f4       	brcc	.+4      	; 0x3508 <Print::printNumber(unsigned long, unsigned char)+0xe0>
    3504:	40 5d       	subi	r20, 0xD0	; 208
    3506:	01 c0       	rjmp	.+2      	; 0x350a <Print::printNumber(unsigned long, unsigned char)+0xe2>
    3508:	49 5c       	subi	r20, 0xC9	; 201
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	60 e0       	ldi	r22, 0x00	; 0
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	c1 01       	movw	r24, r2
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    351a:	08 94       	sec
    351c:	e1 08       	sbc	r14, r1
    351e:	f1 08       	sbc	r15, r1
    3520:	6e 14       	cp	r6, r14
    3522:	7f 04       	cpc	r7, r15
    3524:	49 f7       	brne	.-46     	; 0x34f8 <Print::printNumber(unsigned long, unsigned char)+0xd0>
    3526:	a0 96       	adiw	r28, 0x20	; 32
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	f8 94       	cli
    352c:	de bf       	out	0x3e, r29	; 62
    352e:	0f be       	out	0x3f, r0	; 63
    3530:	cd bf       	out	0x3d, r28	; 61
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	1f 91       	pop	r17
    3538:	0f 91       	pop	r16
    353a:	ff 90       	pop	r15
    353c:	ef 90       	pop	r14
    353e:	df 90       	pop	r13
    3540:	cf 90       	pop	r12
    3542:	bf 90       	pop	r11
    3544:	af 90       	pop	r10
    3546:	9f 90       	pop	r9
    3548:	8f 90       	pop	r8
    354a:	7f 90       	pop	r7
    354c:	6f 90       	pop	r6
    354e:	5f 90       	pop	r5
    3550:	4f 90       	pop	r4
    3552:	3f 90       	pop	r3
    3554:	2f 90       	pop	r2
    3556:	08 95       	ret

00003558 <Print::print(unsigned long, int)>:
    3558:	dc 01       	movw	r26, r24
    355a:	21 15       	cp	r18, r1
    355c:	31 05       	cpc	r19, r1
    355e:	41 f4       	brne	.+16     	; 0x3570 <Print::print(unsigned long, int)+0x18>
    3560:	ed 91       	ld	r30, X+
    3562:	fc 91       	ld	r31, X
    3564:	01 90       	ld	r0, Z+
    3566:	f0 81       	ld	r31, Z
    3568:	e0 2d       	mov	r30, r0
    356a:	64 2f       	mov	r22, r20
    356c:	09 95       	icall
    356e:	08 95       	ret
    3570:	0e 94 14 1a 	call	0x3428	; 0x3428 <Print::printNumber(unsigned long, unsigned char)>
    3574:	08 95       	ret

00003576 <Print::print(long, int)>:
    3576:	ef 92       	push	r14
    3578:	ff 92       	push	r15
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	ec 01       	movw	r28, r24
    3584:	7a 01       	movw	r14, r20
    3586:	8b 01       	movw	r16, r22
    3588:	21 15       	cp	r18, r1
    358a:	31 05       	cpc	r19, r1
    358c:	41 f4       	brne	.+16     	; 0x359e <Print::print(long, int)+0x28>
    358e:	e8 81       	ld	r30, Y
    3590:	f9 81       	ldd	r31, Y+1	; 0x01
    3592:	01 90       	ld	r0, Z+
    3594:	f0 81       	ld	r31, Z
    3596:	e0 2d       	mov	r30, r0
    3598:	64 2f       	mov	r22, r20
    359a:	09 95       	icall
    359c:	1b c0       	rjmp	.+54     	; 0x35d4 <Print::print(long, int)+0x5e>
    359e:	2a 30       	cpi	r18, 0x0A	; 10
    35a0:	31 05       	cpc	r19, r1
    35a2:	b1 f4       	brne	.+44     	; 0x35d0 <Print::print(long, int)+0x5a>
    35a4:	77 ff       	sbrs	r23, 7
    35a6:	10 c0       	rjmp	.+32     	; 0x35c8 <Print::print(long, int)+0x52>
    35a8:	4d e2       	ldi	r20, 0x2D	; 45
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	70 e0       	ldi	r23, 0x00	; 0
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    35b8:	10 95       	com	r17
    35ba:	00 95       	com	r16
    35bc:	f0 94       	com	r15
    35be:	e0 94       	com	r14
    35c0:	e1 1c       	adc	r14, r1
    35c2:	f1 1c       	adc	r15, r1
    35c4:	01 1d       	adc	r16, r1
    35c6:	11 1d       	adc	r17, r1
    35c8:	ce 01       	movw	r24, r28
    35ca:	b8 01       	movw	r22, r16
    35cc:	a7 01       	movw	r20, r14
    35ce:	2a e0       	ldi	r18, 0x0A	; 10
    35d0:	0e 94 14 1a 	call	0x3428	; 0x3428 <Print::printNumber(unsigned long, unsigned char)>
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    35dc:	ff 90       	pop	r15
    35de:	ef 90       	pop	r14
    35e0:	08 95       	ret

000035e2 <Print::print(int, int)>:
    35e2:	ef 92       	push	r14
    35e4:	ff 92       	push	r15
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
    35ea:	7b 01       	movw	r14, r22
    35ec:	9a 01       	movw	r18, r20
    35ee:	00 27       	eor	r16, r16
    35f0:	f7 fc       	sbrc	r15, 7
    35f2:	00 95       	com	r16
    35f4:	10 2f       	mov	r17, r16
    35f6:	b8 01       	movw	r22, r16
    35f8:	a7 01       	movw	r20, r14
    35fa:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	ff 90       	pop	r15
    3604:	ef 90       	pop	r14
    3606:	08 95       	ret

00003608 <Print::print(char, int)>:
    3608:	ef 92       	push	r14
    360a:	ff 92       	push	r15
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	9a 01       	movw	r18, r20
    3612:	e6 2e       	mov	r14, r22
    3614:	ff 24       	eor	r15, r15
    3616:	00 e0       	ldi	r16, 0x00	; 0
    3618:	10 e0       	ldi	r17, 0x00	; 0
    361a:	b8 01       	movw	r22, r16
    361c:	a7 01       	movw	r20, r14
    361e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    3622:	1f 91       	pop	r17
    3624:	0f 91       	pop	r16
    3626:	ff 90       	pop	r15
    3628:	ef 90       	pop	r14
    362a:	08 95       	ret

0000362c <Print::println()>:
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	8c 01       	movw	r16, r24
    3632:	4d e0       	ldi	r20, 0x0D	; 13
    3634:	50 e0       	ldi	r21, 0x00	; 0
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	70 e0       	ldi	r23, 0x00	; 0
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    3642:	c8 01       	movw	r24, r16
    3644:	4a e0       	ldi	r20, 0x0A	; 10
    3646:	50 e0       	ldi	r21, 0x00	; 0
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	70 e0       	ldi	r23, 0x00	; 0
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	08 95       	ret

0000365a <Print::println(unsigned long, int)>:
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	8c 01       	movw	r16, r24
    3660:	0e 94 ac 1a 	call	0x3558	; 0x3558 <Print::print(unsigned long, int)>
    3664:	c8 01       	movw	r24, r16
    3666:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	08 95       	ret

00003670 <Print::println(unsigned int, int)>:
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	8c 01       	movw	r16, r24
    367e:	9a 01       	movw	r18, r20
    3680:	6b 01       	movw	r12, r22
    3682:	ee 24       	eor	r14, r14
    3684:	ff 24       	eor	r15, r15
    3686:	b7 01       	movw	r22, r14
    3688:	a6 01       	movw	r20, r12
    368a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <Print::print(unsigned long, int)>
    368e:	c8 01       	movw	r24, r16
    3690:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	ff 90       	pop	r15
    369a:	ef 90       	pop	r14
    369c:	df 90       	pop	r13
    369e:	cf 90       	pop	r12
    36a0:	08 95       	ret

000036a2 <Print::println(char const*)>:
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
    36a6:	8c 01       	movw	r16, r24
    36a8:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <Print::write(char const*)>
    36ac:	c8 01       	movw	r24, r16
    36ae:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	08 95       	ret

000036b8 <Print::pgm_println(char const*)>:
    36b8:	0f 93       	push	r16
    36ba:	1f 93       	push	r17
    36bc:	8c 01       	movw	r16, r24
    36be:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <Print::pgm_print(char const*)>
    36c2:	c8 01       	movw	r24, r16
    36c4:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    36c8:	1f 91       	pop	r17
    36ca:	0f 91       	pop	r16
    36cc:	08 95       	ret

000036ce <Print::println(long, int)>:
    36ce:	0f 93       	push	r16
    36d0:	1f 93       	push	r17
    36d2:	8c 01       	movw	r16, r24
    36d4:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    36d8:	c8 01       	movw	r24, r16
    36da:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	08 95       	ret

000036e4 <Print::println(int, int)>:
    36e4:	cf 92       	push	r12
    36e6:	df 92       	push	r13
    36e8:	ef 92       	push	r14
    36ea:	ff 92       	push	r15
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	8c 01       	movw	r16, r24
    36f2:	6b 01       	movw	r12, r22
    36f4:	9a 01       	movw	r18, r20
    36f6:	ee 24       	eor	r14, r14
    36f8:	d7 fc       	sbrc	r13, 7
    36fa:	e0 94       	com	r14
    36fc:	fe 2c       	mov	r15, r14
    36fe:	b7 01       	movw	r22, r14
    3700:	a6 01       	movw	r20, r12
    3702:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    3706:	c8 01       	movw	r24, r16
    3708:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	ff 90       	pop	r15
    3712:	ef 90       	pop	r14
    3714:	df 90       	pop	r13
    3716:	cf 90       	pop	r12
    3718:	08 95       	ret

0000371a <Print::println(char, int)>:
    371a:	cf 92       	push	r12
    371c:	df 92       	push	r13
    371e:	ef 92       	push	r14
    3720:	ff 92       	push	r15
    3722:	0f 93       	push	r16
    3724:	1f 93       	push	r17
    3726:	8c 01       	movw	r16, r24
    3728:	9a 01       	movw	r18, r20
    372a:	c6 2e       	mov	r12, r22
    372c:	dd 24       	eor	r13, r13
    372e:	ee 24       	eor	r14, r14
    3730:	ff 24       	eor	r15, r15
    3732:	b7 01       	movw	r22, r14
    3734:	a6 01       	movw	r20, r12
    3736:	0e 94 bb 1a 	call	0x3576	; 0x3576 <Print::print(long, int)>
    373a:	c8 01       	movw	r24, r16
    373c:	0e 94 16 1b 	call	0x362c	; 0x362c <Print::println()>
    3740:	1f 91       	pop	r17
    3742:	0f 91       	pop	r16
    3744:	ff 90       	pop	r15
    3746:	ef 90       	pop	r14
    3748:	df 90       	pop	r13
    374a:	cf 90       	pop	r12
    374c:	08 95       	ret

0000374e <attachInterrupt>:
    374e:	82 30       	cpi	r24, 0x02	; 2
    3750:	00 f5       	brcc	.+64     	; 0x3792 <attachInterrupt+0x44>
    3752:	e8 2f       	mov	r30, r24
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	ee 0f       	add	r30, r30
    3758:	ff 1f       	adc	r31, r31
    375a:	ea 54       	subi	r30, 0x4A	; 74
    375c:	fc 4f       	sbci	r31, 0xFC	; 252
    375e:	71 83       	std	Z+1, r23	; 0x01
    3760:	60 83       	st	Z, r22
    3762:	88 23       	and	r24, r24
    3764:	19 f0       	breq	.+6      	; 0x376c <attachInterrupt+0x1e>
    3766:	81 30       	cpi	r24, 0x01	; 1
    3768:	a1 f4       	brne	.+40     	; 0x3792 <attachInterrupt+0x44>
    376a:	08 c0       	rjmp	.+16     	; 0x377c <attachInterrupt+0x2e>
    376c:	80 91 69 00 	lds	r24, 0x0069
    3770:	8c 7f       	andi	r24, 0xFC	; 252
    3772:	84 2b       	or	r24, r20
    3774:	80 93 69 00 	sts	0x0069, r24
    3778:	e8 9a       	sbi	0x1d, 0	; 29
    377a:	08 95       	ret
    377c:	80 91 69 00 	lds	r24, 0x0069
    3780:	44 0f       	add	r20, r20
    3782:	55 1f       	adc	r21, r21
    3784:	44 0f       	add	r20, r20
    3786:	55 1f       	adc	r21, r21
    3788:	83 7f       	andi	r24, 0xF3	; 243
    378a:	84 2b       	or	r24, r20
    378c:	80 93 69 00 	sts	0x0069, r24
    3790:	e9 9a       	sbi	0x1d, 1	; 29
    3792:	08 95       	ret

00003794 <__vector_1>:
    3794:	1f 92       	push	r1
    3796:	0f 92       	push	r0
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	0f 92       	push	r0
    379c:	11 24       	eor	r1, r1
    379e:	2f 93       	push	r18
    37a0:	3f 93       	push	r19
    37a2:	4f 93       	push	r20
    37a4:	5f 93       	push	r21
    37a6:	6f 93       	push	r22
    37a8:	7f 93       	push	r23
    37aa:	8f 93       	push	r24
    37ac:	9f 93       	push	r25
    37ae:	af 93       	push	r26
    37b0:	bf 93       	push	r27
    37b2:	ef 93       	push	r30
    37b4:	ff 93       	push	r31
    37b6:	80 91 b6 03 	lds	r24, 0x03B6
    37ba:	90 91 b7 03 	lds	r25, 0x03B7
    37be:	89 2b       	or	r24, r25
    37c0:	29 f0       	breq	.+10     	; 0x37cc <__vector_1+0x38>
    37c2:	e0 91 b6 03 	lds	r30, 0x03B6
    37c6:	f0 91 b7 03 	lds	r31, 0x03B7
    37ca:	09 95       	icall
    37cc:	ff 91       	pop	r31
    37ce:	ef 91       	pop	r30
    37d0:	bf 91       	pop	r27
    37d2:	af 91       	pop	r26
    37d4:	9f 91       	pop	r25
    37d6:	8f 91       	pop	r24
    37d8:	7f 91       	pop	r23
    37da:	6f 91       	pop	r22
    37dc:	5f 91       	pop	r21
    37de:	4f 91       	pop	r20
    37e0:	3f 91       	pop	r19
    37e2:	2f 91       	pop	r18
    37e4:	0f 90       	pop	r0
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	0f 90       	pop	r0
    37ea:	1f 90       	pop	r1
    37ec:	18 95       	reti

000037ee <__vector_2>:
    37ee:	1f 92       	push	r1
    37f0:	0f 92       	push	r0
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	0f 92       	push	r0
    37f6:	11 24       	eor	r1, r1
    37f8:	2f 93       	push	r18
    37fa:	3f 93       	push	r19
    37fc:	4f 93       	push	r20
    37fe:	5f 93       	push	r21
    3800:	6f 93       	push	r22
    3802:	7f 93       	push	r23
    3804:	8f 93       	push	r24
    3806:	9f 93       	push	r25
    3808:	af 93       	push	r26
    380a:	bf 93       	push	r27
    380c:	ef 93       	push	r30
    380e:	ff 93       	push	r31
    3810:	80 91 b8 03 	lds	r24, 0x03B8
    3814:	90 91 b9 03 	lds	r25, 0x03B9
    3818:	89 2b       	or	r24, r25
    381a:	29 f0       	breq	.+10     	; 0x3826 <__vector_2+0x38>
    381c:	e0 91 b8 03 	lds	r30, 0x03B8
    3820:	f0 91 b9 03 	lds	r31, 0x03B9
    3824:	09 95       	icall
    3826:	ff 91       	pop	r31
    3828:	ef 91       	pop	r30
    382a:	bf 91       	pop	r27
    382c:	af 91       	pop	r26
    382e:	9f 91       	pop	r25
    3830:	8f 91       	pop	r24
    3832:	7f 91       	pop	r23
    3834:	6f 91       	pop	r22
    3836:	5f 91       	pop	r21
    3838:	4f 91       	pop	r20
    383a:	3f 91       	pop	r19
    383c:	2f 91       	pop	r18
    383e:	0f 90       	pop	r0
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	0f 90       	pop	r0
    3844:	1f 90       	pop	r1
    3846:	18 95       	reti

00003848 <pinMode>:
    3848:	48 2f       	mov	r20, r24
    384a:	50 e0       	ldi	r21, 0x00	; 0
    384c:	ca 01       	movw	r24, r20
    384e:	8a 5f       	subi	r24, 0xFA	; 250
    3850:	99 4f       	sbci	r25, 0xF9	; 249
    3852:	fc 01       	movw	r30, r24
    3854:	24 91       	lpm	r18, Z+
    3856:	4e 50       	subi	r20, 0x0E	; 14
    3858:	5a 4f       	sbci	r21, 0xFA	; 250
    385a:	fa 01       	movw	r30, r20
    385c:	84 91       	lpm	r24, Z+
    385e:	88 23       	and	r24, r24
    3860:	c1 f0       	breq	.+48     	; 0x3892 <pinMode+0x4a>
    3862:	e8 2f       	mov	r30, r24
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	ee 0f       	add	r30, r30
    3868:	ff 1f       	adc	r31, r31
    386a:	ec 52       	subi	r30, 0x2C	; 44
    386c:	fa 4f       	sbci	r31, 0xFA	; 250
    386e:	a5 91       	lpm	r26, Z+
    3870:	b4 91       	lpm	r27, Z+
    3872:	66 23       	and	r22, r22
    3874:	41 f4       	brne	.+16     	; 0x3886 <pinMode+0x3e>
    3876:	9f b7       	in	r25, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	8c 91       	ld	r24, X
    387c:	20 95       	com	r18
    387e:	82 23       	and	r24, r18
    3880:	8c 93       	st	X, r24
    3882:	9f bf       	out	0x3f, r25	; 63
    3884:	08 95       	ret
    3886:	9f b7       	in	r25, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	8c 91       	ld	r24, X
    388c:	82 2b       	or	r24, r18
    388e:	8c 93       	st	X, r24
    3890:	9f bf       	out	0x3f, r25	; 63
    3892:	08 95       	ret

00003894 <RepRapPCB::doInitializePositionXY()>:
    3894:	cf 93       	push	r28
    3896:	df 93       	push	r29
    3898:	ec 01       	movw	r28, r24
    389a:	8c a1       	ldd	r24, Y+36	; 0x24
    389c:	88 23       	and	r24, r24
    389e:	19 f0       	breq	.+6      	; 0x38a6 <RepRapPCB::doInitializePositionXY()+0x12>
    38a0:	81 30       	cpi	r24, 0x01	; 1
    38a2:	59 f5       	brne	.+86     	; 0x38fa <RepRapPCB::doInitializePositionXY()+0x66>
    38a4:	0d c0       	rjmp	.+26     	; 0x38c0 <RepRapPCB::doInitializePositionXY()+0x2c>
    38a6:	ce 01       	movw	r24, r28
    38a8:	85 51       	subi	r24, 0x15	; 21
    38aa:	9f 4f       	sbci	r25, 0xFF	; 255
    38ac:	0e 94 0d 14 	call	0x281a	; 0x281a <StepperMotorAxis::initializePosition()>
    38b0:	ce 01       	movw	r24, r28
    38b2:	86 5f       	subi	r24, 0xF6	; 246
    38b4:	9e 4f       	sbci	r25, 0xFE	; 254
    38b6:	0e 94 0d 14 	call	0x281a	; 0x281a <StepperMotorAxis::initializePosition()>
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	8c a3       	std	Y+36, r24	; 0x24
    38be:	1d c0       	rjmp	.+58     	; 0x38fa <RepRapPCB::doInitializePositionXY()+0x66>
    38c0:	c5 51       	subi	r28, 0x15	; 21
    38c2:	df 4f       	sbci	r29, 0xFF	; 255
    38c4:	88 81       	ld	r24, Y
    38c6:	cb 5e       	subi	r28, 0xEB	; 235
    38c8:	d0 40       	sbci	r29, 0x00	; 0
    38ca:	88 23       	and	r24, r24
    38cc:	b1 f4       	brne	.+44     	; 0x38fa <RepRapPCB::doInitializePositionXY()+0x66>
    38ce:	c1 50       	subi	r28, 0x01	; 1
    38d0:	df 4f       	sbci	r29, 0xFF	; 255
    38d2:	88 81       	ld	r24, Y
    38d4:	cf 5f       	subi	r28, 0xFF	; 255
    38d6:	d0 40       	sbci	r29, 0x00	; 0
    38d8:	88 23       	and	r24, r24
    38da:	79 f4       	brne	.+30     	; 0x38fa <RepRapPCB::doInitializePositionXY()+0x66>
    38dc:	c6 5f       	subi	r28, 0xF6	; 246
    38de:	de 4f       	sbci	r29, 0xFE	; 254
    38e0:	88 81       	ld	r24, Y
    38e2:	ca 50       	subi	r28, 0x0A	; 10
    38e4:	d1 40       	sbci	r29, 0x01	; 1
    38e6:	88 23       	and	r24, r24
    38e8:	41 f4       	brne	.+16     	; 0x38fa <RepRapPCB::doInitializePositionXY()+0x66>
    38ea:	c2 5e       	subi	r28, 0xE2	; 226
    38ec:	de 4f       	sbci	r29, 0xFE	; 254
    38ee:	88 81       	ld	r24, Y
    38f0:	ce 51       	subi	r28, 0x1E	; 30
    38f2:	d1 40       	sbci	r29, 0x01	; 1
    38f4:	88 23       	and	r24, r24
    38f6:	09 f4       	brne	.+2      	; 0x38fa <RepRapPCB::doInitializePositionXY()+0x66>
    38f8:	1b a2       	std	Y+35, r1	; 0x23
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	08 95       	ret

00003900 <RepRapPCB::doInitializePosition()>:
    3900:	0f 93       	push	r16
    3902:	1f 93       	push	r17
    3904:	cf 93       	push	r28
    3906:	df 93       	push	r29
    3908:	ec 01       	movw	r28, r24
    390a:	8c a1       	ldd	r24, Y+36	; 0x24
    390c:	81 30       	cpi	r24, 0x01	; 1
    390e:	c9 f0       	breq	.+50     	; 0x3942 <RepRapPCB::doInitializePosition()+0x42>
    3910:	81 30       	cpi	r24, 0x01	; 1
    3912:	30 f0       	brcs	.+12     	; 0x3920 <RepRapPCB::doInitializePosition()+0x20>
    3914:	82 30       	cpi	r24, 0x02	; 2
    3916:	91 f1       	breq	.+100    	; 0x397c <RepRapPCB::doInitializePosition()+0x7c>
    3918:	83 30       	cpi	r24, 0x03	; 3
    391a:	09 f0       	breq	.+2      	; 0x391e <RepRapPCB::doInitializePosition()+0x1e>
    391c:	61 c0       	rjmp	.+194    	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    391e:	51 c0       	rjmp	.+162    	; 0x39c2 <RepRapPCB::doInitializePosition()+0xc2>
    3920:	8e 01       	movw	r16, r28
    3922:	07 5d       	subi	r16, 0xD7	; 215
    3924:	1e 4f       	sbci	r17, 0xFE	; 254
    3926:	c8 01       	movw	r24, r16
    3928:	0e 94 12 14 	call	0x2824	; 0x2824 <StepperMotorAxis::getAbsolutePositionMicroM()>
    392c:	ab 01       	movw	r20, r22
    392e:	bc 01       	movw	r22, r24
    3930:	48 57       	subi	r20, 0x78	; 120
    3932:	5c 4e       	sbci	r21, 0xEC	; 236
    3934:	6f 4f       	sbci	r22, 0xFF	; 255
    3936:	7f 4f       	sbci	r23, 0xFF	; 255
    3938:	c8 01       	movw	r24, r16
    393a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <StepperMotorAxis::moveToPositionMicroMFast(long)>
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	1b c0       	rjmp	.+54     	; 0x3978 <RepRapPCB::doInitializePosition()+0x78>
    3942:	c7 5d       	subi	r28, 0xD7	; 215
    3944:	de 4f       	sbci	r29, 0xFE	; 254
    3946:	88 81       	ld	r24, Y
    3948:	c9 52       	subi	r28, 0x29	; 41
    394a:	d1 40       	sbci	r29, 0x01	; 1
    394c:	88 23       	and	r24, r24
    394e:	09 f0       	breq	.+2      	; 0x3952 <RepRapPCB::doInitializePosition()+0x52>
    3950:	47 c0       	rjmp	.+142    	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    3952:	c3 5c       	subi	r28, 0xC3	; 195
    3954:	de 4f       	sbci	r29, 0xFE	; 254
    3956:	88 81       	ld	r24, Y
    3958:	cd 53       	subi	r28, 0x3D	; 61
    395a:	d1 40       	sbci	r29, 0x01	; 1
    395c:	88 23       	and	r24, r24
    395e:	09 f0       	breq	.+2      	; 0x3962 <RepRapPCB::doInitializePosition()+0x62>
    3960:	3f c0       	rjmp	.+126    	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    3962:	ce 01       	movw	r24, r28
    3964:	85 51       	subi	r24, 0x15	; 21
    3966:	9f 4f       	sbci	r25, 0xFF	; 255
    3968:	0e 94 0d 14 	call	0x281a	; 0x281a <StepperMotorAxis::initializePosition()>
    396c:	ce 01       	movw	r24, r28
    396e:	86 5f       	subi	r24, 0xF6	; 246
    3970:	9e 4f       	sbci	r25, 0xFE	; 254
    3972:	0e 94 0d 14 	call	0x281a	; 0x281a <StepperMotorAxis::initializePosition()>
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	8c a3       	std	Y+36, r24	; 0x24
    397a:	32 c0       	rjmp	.+100    	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    397c:	c5 51       	subi	r28, 0x15	; 21
    397e:	df 4f       	sbci	r29, 0xFF	; 255
    3980:	88 81       	ld	r24, Y
    3982:	cb 5e       	subi	r28, 0xEB	; 235
    3984:	d0 40       	sbci	r29, 0x00	; 0
    3986:	88 23       	and	r24, r24
    3988:	59 f5       	brne	.+86     	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    398a:	c1 50       	subi	r28, 0x01	; 1
    398c:	df 4f       	sbci	r29, 0xFF	; 255
    398e:	88 81       	ld	r24, Y
    3990:	cf 5f       	subi	r28, 0xFF	; 255
    3992:	d0 40       	sbci	r29, 0x00	; 0
    3994:	88 23       	and	r24, r24
    3996:	21 f5       	brne	.+72     	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    3998:	c6 5f       	subi	r28, 0xF6	; 246
    399a:	de 4f       	sbci	r29, 0xFE	; 254
    399c:	88 81       	ld	r24, Y
    399e:	ca 50       	subi	r28, 0x0A	; 10
    39a0:	d1 40       	sbci	r29, 0x01	; 1
    39a2:	88 23       	and	r24, r24
    39a4:	e9 f4       	brne	.+58     	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    39a6:	c2 5e       	subi	r28, 0xE2	; 226
    39a8:	de 4f       	sbci	r29, 0xFE	; 254
    39aa:	88 81       	ld	r24, Y
    39ac:	ce 51       	subi	r28, 0x1E	; 30
    39ae:	d1 40       	sbci	r29, 0x01	; 1
    39b0:	88 23       	and	r24, r24
    39b2:	b1 f4       	brne	.+44     	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    39b4:	ce 01       	movw	r24, r28
    39b6:	87 5d       	subi	r24, 0xD7	; 215
    39b8:	9e 4f       	sbci	r25, 0xFE	; 254
    39ba:	0e 94 0d 14 	call	0x281a	; 0x281a <StepperMotorAxis::initializePosition()>
    39be:	83 e0       	ldi	r24, 0x03	; 3
    39c0:	db cf       	rjmp	.-74     	; 0x3978 <RepRapPCB::doInitializePosition()+0x78>
    39c2:	c7 5d       	subi	r28, 0xD7	; 215
    39c4:	de 4f       	sbci	r29, 0xFE	; 254
    39c6:	88 81       	ld	r24, Y
    39c8:	c9 52       	subi	r28, 0x29	; 41
    39ca:	d1 40       	sbci	r29, 0x01	; 1
    39cc:	88 23       	and	r24, r24
    39ce:	41 f4       	brne	.+16     	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    39d0:	c3 5c       	subi	r28, 0xC3	; 195
    39d2:	de 4f       	sbci	r29, 0xFE	; 254
    39d4:	88 81       	ld	r24, Y
    39d6:	cd 53       	subi	r28, 0x3D	; 61
    39d8:	d1 40       	sbci	r29, 0x01	; 1
    39da:	88 23       	and	r24, r24
    39dc:	09 f4       	brne	.+2      	; 0x39e0 <RepRapPCB::doInitializePosition()+0xe0>
    39de:	1b a2       	std	Y+35, r1	; 0x23
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	1f 91       	pop	r17
    39e6:	0f 91       	pop	r16
    39e8:	08 95       	ret

000039ea <RepRapPCB::update()>:
    39ea:	cf 93       	push	r28
    39ec:	df 93       	push	r29
    39ee:	ec 01       	movw	r28, r24
    39f0:	87 57       	subi	r24, 0x77	; 119
    39f2:	9f 4f       	sbci	r25, 0xFF	; 255
    39f4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <DigitalInputShiftRegister_74HC166::update()>
    39f8:	ce 01       	movw	r24, r28
    39fa:	85 51       	subi	r24, 0x15	; 21
    39fc:	9f 4f       	sbci	r25, 0xFF	; 255
    39fe:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <StepperMotorAxis::update()>
    3a02:	ce 01       	movw	r24, r28
    3a04:	86 5f       	subi	r24, 0xF6	; 246
    3a06:	9e 4f       	sbci	r25, 0xFE	; 254
    3a08:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <StepperMotorAxis::update()>
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	87 5d       	subi	r24, 0xD7	; 215
    3a10:	9e 4f       	sbci	r25, 0xFE	; 254
    3a12:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <StepperMotorAxis::update()>
    3a16:	ce 01       	movw	r24, r28
    3a18:	88 5b       	subi	r24, 0xB8	; 184
    3a1a:	9e 4f       	sbci	r25, 0xFE	; 254
    3a1c:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <StepperMotorAxis::update()>
    3a20:	ce 01       	movw	r24, r28
    3a22:	85 96       	adiw	r24, 0x25	; 37
    3a24:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DigitalOutputShiftRegister_74HC595::update()>
    3a28:	8b a1       	ldd	r24, Y+35	; 0x23
    3a2a:	82 30       	cpi	r24, 0x02	; 2
    3a2c:	19 f0       	breq	.+6      	; 0x3a34 <RepRapPCB::update()+0x4a>
    3a2e:	83 30       	cpi	r24, 0x03	; 3
    3a30:	41 f4       	brne	.+16     	; 0x3a42 <RepRapPCB::update()+0x58>
    3a32:	04 c0       	rjmp	.+8      	; 0x3a3c <RepRapPCB::update()+0x52>
    3a34:	ce 01       	movw	r24, r28
    3a36:	0e 94 80 1c 	call	0x3900	; 0x3900 <RepRapPCB::doInitializePosition()>
    3a3a:	03 c0       	rjmp	.+6      	; 0x3a42 <RepRapPCB::update()+0x58>
    3a3c:	ce 01       	movw	r24, r28
    3a3e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <RepRapPCB::doInitializePositionXY()>
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	08 95       	ret

00003a48 <RepRapPCB::initialize()>:
    3a48:	2f 92       	push	r2
    3a4a:	3f 92       	push	r3
    3a4c:	4f 92       	push	r4
    3a4e:	5f 92       	push	r5
    3a50:	6f 92       	push	r6
    3a52:	7f 92       	push	r7
    3a54:	8f 92       	push	r8
    3a56:	9f 92       	push	r9
    3a58:	af 92       	push	r10
    3a5a:	bf 92       	push	r11
    3a5c:	cf 92       	push	r12
    3a5e:	df 92       	push	r13
    3a60:	ef 92       	push	r14
    3a62:	ff 92       	push	r15
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	00 d0       	rcall	.+0      	; 0x3a6e <RepRapPCB::initialize()+0x26>
    3a6e:	00 d0       	rcall	.+0      	; 0x3a70 <RepRapPCB::initialize()+0x28>
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <RepRapPCB::initialize()+0x2a>
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	6c 01       	movw	r12, r24
    3a78:	fc 01       	movw	r30, r24
    3a7a:	13 a2       	std	Z+35, r1	; 0x23
    3a7c:	14 a2       	std	Z+36, r1	; 0x24
    3a7e:	6c e0       	ldi	r22, 0x0C	; 12
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	0e 94 99 10 	call	0x2132	; 0x2132 <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3a86:	86 01       	movw	r16, r12
    3a88:	0a 5f       	subi	r16, 0xFA	; 250
    3a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8c:	c8 01       	movw	r24, r16
    3a8e:	6d e0       	ldi	r22, 0x0D	; 13
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	0e 94 99 10 	call	0x2132	; 0x2132 <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3a96:	ac e0       	ldi	r26, 0x0C	; 12
    3a98:	ea 2e       	mov	r14, r26
    3a9a:	f1 2c       	mov	r15, r1
    3a9c:	ec 0c       	add	r14, r12
    3a9e:	fd 1c       	adc	r15, r13
    3aa0:	c7 01       	movw	r24, r14
    3aa2:	6b e0       	ldi	r22, 0x0B	; 11
    3aa4:	40 e0       	ldi	r20, 0x00	; 0
    3aa6:	0e 94 99 10 	call	0x2132	; 0x2132 <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3aaa:	f5 e2       	ldi	r31, 0x25	; 37
    3aac:	af 2e       	mov	r10, r31
    3aae:	b1 2c       	mov	r11, r1
    3ab0:	ac 0c       	add	r10, r12
    3ab2:	bd 1c       	adc	r11, r13
    3ab4:	c5 01       	movw	r24, r10
    3ab6:	61 e1       	ldi	r22, 0x11	; 17
    3ab8:	43 e0       	ldi	r20, 0x03	; 3
    3aba:	96 01       	movw	r18, r12
    3abc:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DigitalOutputShiftRegister_74HC595::initialize(unsigned char, DigitalOutputShiftRegister_74HC595::WriteOutputMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3ac0:	e2 e1       	ldi	r30, 0x12	; 18
    3ac2:	6e 2e       	mov	r6, r30
    3ac4:	71 2c       	mov	r7, r1
    3ac6:	6c 0c       	add	r6, r12
    3ac8:	7d 1c       	adc	r7, r13
    3aca:	c3 01       	movw	r24, r6
    3acc:	69 e0       	ldi	r22, 0x09	; 9
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	0e 94 99 10 	call	0x2132	; 0x2132 <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3ad4:	78 e1       	ldi	r23, 0x18	; 24
    3ad6:	e7 2e       	mov	r14, r23
    3ad8:	f1 2c       	mov	r15, r1
    3ada:	ec 0c       	add	r14, r12
    3adc:	fd 1c       	adc	r15, r13
    3ade:	c7 01       	movw	r24, r14
    3ae0:	68 e0       	ldi	r22, 0x08	; 8
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	0e 94 99 10 	call	0x2132	; 0x2132 <DigitalOutputArduinoPin::initialize(unsigned char, bool)>
    3ae8:	86 01       	movw	r16, r12
    3aea:	02 5e       	subi	r16, 0xE2	; 226
    3aec:	1f 4f       	sbci	r17, 0xFF	; 255
    3aee:	c8 01       	movw	r24, r16
    3af0:	6a e0       	ldi	r22, 0x0A	; 10
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	0e 94 c9 10 	call	0x2192	; 0x2192 <DigitalInputArduinoPin::initialize(unsigned char, bool)>
    3af8:	69 e8       	ldi	r22, 0x89	; 137
    3afa:	86 2e       	mov	r8, r22
    3afc:	91 2c       	mov	r9, r1
    3afe:	8c 0c       	add	r8, r12
    3b00:	9d 1c       	adc	r9, r13
    3b02:	c4 01       	movw	r24, r8
    3b04:	69 e0       	ldi	r22, 0x09	; 9
    3b06:	a3 01       	movw	r20, r6
    3b08:	97 01       	movw	r18, r14
    3b0a:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <DigitalInputShiftRegister_74HC166::initialize(unsigned char, DigitalOutputPin*, DigitalOutputPin*, DigitalInputPin*)>
    3b0e:	c5 01       	movw	r24, r10
    3b10:	60 e0       	ldi	r22, 0x00	; 0
    3b12:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b16:	2c 01       	movw	r4, r24
    3b18:	c5 01       	movw	r24, r10
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b20:	3c 01       	movw	r6, r24
    3b22:	c5 01       	movw	r24, r10
    3b24:	62 e0       	ldi	r22, 0x02	; 2
    3b26:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b2a:	8c 01       	movw	r16, r24
    3b2c:	c5 01       	movw	r24, r10
    3b2e:	63 e0       	ldi	r22, 0x03	; 3
    3b30:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b34:	7c 01       	movw	r14, r24
    3b36:	96 01       	movw	r18, r12
    3b38:	21 54       	subi	r18, 0x41	; 65
    3b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b3c:	3a 83       	std	Y+2, r19	; 0x02
    3b3e:	29 83       	std	Y+1, r18	; 0x01
    3b40:	c9 01       	movw	r24, r18
    3b42:	60 e0       	ldi	r22, 0x00	; 0
    3b44:	a2 01       	movw	r20, r4
    3b46:	93 01       	movw	r18, r6
    3b48:	0e 94 42 13 	call	0x2684	; 0x2684 <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3b4c:	c5 01       	movw	r24, r10
    3b4e:	64 e0       	ldi	r22, 0x04	; 4
    3b50:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b54:	2c 01       	movw	r4, r24
    3b56:	c5 01       	movw	r24, r10
    3b58:	65 e0       	ldi	r22, 0x05	; 5
    3b5a:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b5e:	3c 01       	movw	r6, r24
    3b60:	c5 01       	movw	r24, r10
    3b62:	66 e0       	ldi	r22, 0x06	; 6
    3b64:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b68:	8c 01       	movw	r16, r24
    3b6a:	c5 01       	movw	r24, r10
    3b6c:	67 e0       	ldi	r22, 0x07	; 7
    3b6e:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b72:	7c 01       	movw	r14, r24
    3b74:	b6 01       	movw	r22, r12
    3b76:	66 53       	subi	r22, 0x36	; 54
    3b78:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7a:	7c 83       	std	Y+4, r23	; 0x04
    3b7c:	6b 83       	std	Y+3, r22	; 0x03
    3b7e:	cb 01       	movw	r24, r22
    3b80:	60 e0       	ldi	r22, 0x00	; 0
    3b82:	a2 01       	movw	r20, r4
    3b84:	93 01       	movw	r18, r6
    3b86:	0e 94 42 13 	call	0x2684	; 0x2684 <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3b8a:	c5 01       	movw	r24, r10
    3b8c:	68 e0       	ldi	r22, 0x08	; 8
    3b8e:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b92:	2c 01       	movw	r4, r24
    3b94:	c5 01       	movw	r24, r10
    3b96:	69 e0       	ldi	r22, 0x09	; 9
    3b98:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3b9c:	3c 01       	movw	r6, r24
    3b9e:	c5 01       	movw	r24, r10
    3ba0:	6a e0       	ldi	r22, 0x0A	; 10
    3ba2:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3ba6:	8c 01       	movw	r16, r24
    3ba8:	c5 01       	movw	r24, r10
    3baa:	6b e0       	ldi	r22, 0x0B	; 11
    3bac:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3bb0:	7c 01       	movw	r14, r24
    3bb2:	c6 01       	movw	r24, r12
    3bb4:	8b 52       	subi	r24, 0x2B	; 43
    3bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb8:	9e 83       	std	Y+6, r25	; 0x06
    3bba:	8d 83       	std	Y+5, r24	; 0x05
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	a2 01       	movw	r20, r4
    3bc0:	93 01       	movw	r18, r6
    3bc2:	0e 94 42 13 	call	0x2684	; 0x2684 <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3bc6:	c5 01       	movw	r24, r10
    3bc8:	6c e0       	ldi	r22, 0x0C	; 12
    3bca:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3bce:	2c 01       	movw	r4, r24
    3bd0:	c5 01       	movw	r24, r10
    3bd2:	6d e0       	ldi	r22, 0x0D	; 13
    3bd4:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3bd8:	3c 01       	movw	r6, r24
    3bda:	c5 01       	movw	r24, r10
    3bdc:	6e e0       	ldi	r22, 0x0E	; 14
    3bde:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3be2:	8c 01       	movw	r16, r24
    3be4:	c5 01       	movw	r24, r10
    3be6:	6f e0       	ldi	r22, 0x0F	; 15
    3be8:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3bec:	7c 01       	movw	r14, r24
    3bee:	50 ee       	ldi	r21, 0xE0	; 224
    3bf0:	25 2e       	mov	r2, r21
    3bf2:	31 2c       	mov	r3, r1
    3bf4:	2c 0c       	add	r2, r12
    3bf6:	3d 1c       	adc	r3, r13
    3bf8:	c1 01       	movw	r24, r2
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	a2 01       	movw	r20, r4
    3bfe:	93 01       	movw	r18, r6
    3c00:	0e 94 42 13 	call	0x2684	; 0x2684 <StepperMotorMosfetHBridge::initialize(StepperMotor::SteppingMotorMode, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*, DigitalOutputPin*)>
    3c04:	c5 01       	movw	r24, r10
    3c06:	60 e1       	ldi	r22, 0x10	; 16
    3c08:	0e 94 89 10 	call	0x2112	; 0x2112 <DigitalOutputShiftRegister_74HC595::createPinHandler(unsigned char)>
    3c0c:	e7 e6       	ldi	r30, 0x67	; 103
    3c0e:	f1 e0       	ldi	r31, 0x01	; 1
    3c10:	ce 0e       	add	r12, r30
    3c12:	df 1e       	adc	r13, r31
    3c14:	f6 01       	movw	r30, r12
    3c16:	91 83       	std	Z+1, r25	; 0x01
    3c18:	80 83       	st	Z, r24
    3c1a:	29 e9       	ldi	r18, 0x99	; 153
    3c1c:	3e ef       	ldi	r19, 0xFE	; 254
    3c1e:	c2 0e       	add	r12, r18
    3c20:	d3 1e       	adc	r13, r19
    3c22:	c4 01       	movw	r24, r8
    3c24:	68 e0       	ldi	r22, 0x08	; 8
    3c26:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3c2a:	8c 01       	movw	r16, r24
    3c2c:	c4 01       	movw	r24, r8
    3c2e:	60 e0       	ldi	r22, 0x00	; 0
    3c30:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3c34:	9c 01       	movw	r18, r24
    3c36:	c6 01       	movw	r24, r12
    3c38:	85 51       	subi	r24, 0x15	; 21
    3c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3c:	69 81       	ldd	r22, Y+1	; 0x01
    3c3e:	7a 81       	ldd	r23, Y+2	; 0x02
    3c40:	a8 01       	movw	r20, r16
    3c42:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    3c46:	c4 01       	movw	r24, r8
    3c48:	61 e0       	ldi	r22, 0x01	; 1
    3c4a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3c4e:	8c 01       	movw	r16, r24
    3c50:	c4 01       	movw	r24, r8
    3c52:	62 e0       	ldi	r22, 0x02	; 2
    3c54:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3c58:	9c 01       	movw	r18, r24
    3c5a:	c6 01       	movw	r24, r12
    3c5c:	86 5f       	subi	r24, 0xF6	; 246
    3c5e:	9e 4f       	sbci	r25, 0xFE	; 254
    3c60:	6b 81       	ldd	r22, Y+3	; 0x03
    3c62:	7c 81       	ldd	r23, Y+4	; 0x04
    3c64:	a8 01       	movw	r20, r16
    3c66:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    3c6a:	c4 01       	movw	r24, r8
    3c6c:	64 e0       	ldi	r22, 0x04	; 4
    3c6e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3c72:	8c 01       	movw	r16, r24
    3c74:	c4 01       	movw	r24, r8
    3c76:	63 e0       	ldi	r22, 0x03	; 3
    3c78:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3c7c:	9c 01       	movw	r18, r24
    3c7e:	c6 01       	movw	r24, r12
    3c80:	87 5d       	subi	r24, 0xD7	; 215
    3c82:	9e 4f       	sbci	r25, 0xFE	; 254
    3c84:	6d 81       	ldd	r22, Y+5	; 0x05
    3c86:	7e 81       	ldd	r23, Y+6	; 0x06
    3c88:	a8 01       	movw	r20, r16
    3c8a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    3c8e:	c4 01       	movw	r24, r8
    3c90:	65 e0       	ldi	r22, 0x05	; 5
    3c92:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3c96:	8c 01       	movw	r16, r24
    3c98:	c4 01       	movw	r24, r8
    3c9a:	66 e0       	ldi	r22, 0x06	; 6
    3c9c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DigitalInputShiftRegister::createPinHandler(unsigned char)>
    3ca0:	9c 01       	movw	r18, r24
    3ca2:	c6 01       	movw	r24, r12
    3ca4:	88 5b       	subi	r24, 0xB8	; 184
    3ca6:	9e 4f       	sbci	r25, 0xFE	; 254
    3ca8:	b1 01       	movw	r22, r2
    3caa:	a8 01       	movw	r20, r16
    3cac:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <StepperMotorAxis::initialize(StepperMotor*, DigitalInputPin*, DigitalInputPin*)>
    3cb0:	61 ef       	ldi	r22, 0xF1	; 241
    3cb2:	70 e0       	ldi	r23, 0x00	; 0
    3cb4:	c6 0e       	add	r12, r22
    3cb6:	d7 1e       	adc	r13, r23
    3cb8:	8c ed       	ldi	r24, 0xDC	; 220
    3cba:	95 e0       	ldi	r25, 0x05	; 5
    3cbc:	a0 e0       	ldi	r26, 0x00	; 0
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	f6 01       	movw	r30, r12
    3cc2:	80 83       	st	Z, r24
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	a2 83       	std	Z+2, r26	; 0x02
    3cc8:	b3 83       	std	Z+3, r27	; 0x03
    3cca:	2f e1       	ldi	r18, 0x1F	; 31
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	c2 0e       	add	r12, r18
    3cd0:	d3 1e       	adc	r13, r19
    3cd2:	f6 01       	movw	r30, r12
    3cd4:	80 83       	st	Z, r24
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	a2 83       	std	Z+2, r26	; 0x02
    3cda:	b3 83       	std	Z+3, r27	; 0x03
    3cdc:	c2 0e       	add	r12, r18
    3cde:	d3 1e       	adc	r13, r19
    3ce0:	44 ec       	ldi	r20, 0xC4	; 196
    3ce2:	e4 2e       	mov	r14, r20
    3ce4:	49 e0       	ldi	r20, 0x09	; 9
    3ce6:	f4 2e       	mov	r15, r20
    3ce8:	01 2d       	mov	r16, r1
    3cea:	11 2d       	mov	r17, r1
    3cec:	f6 01       	movw	r30, r12
    3cee:	e0 82       	st	Z, r14
    3cf0:	f1 82       	std	Z+1, r15	; 0x01
    3cf2:	02 83       	std	Z+2, r16	; 0x02
    3cf4:	13 83       	std	Z+3, r17	; 0x03
    3cf6:	c2 0e       	add	r12, r18
    3cf8:	d3 1e       	adc	r13, r19
    3cfa:	20 ed       	ldi	r18, 0xD0	; 208
    3cfc:	37 e0       	ldi	r19, 0x07	; 7
    3cfe:	40 e0       	ldi	r20, 0x00	; 0
    3d00:	50 e0       	ldi	r21, 0x00	; 0
    3d02:	f6 01       	movw	r30, r12
    3d04:	20 83       	st	Z, r18
    3d06:	31 83       	std	Z+1, r19	; 0x01
    3d08:	42 83       	std	Z+2, r20	; 0x02
    3d0a:	53 83       	std	Z+3, r21	; 0x03
    3d0c:	62 eb       	ldi	r22, 0xB2	; 178
    3d0e:	7f ef       	ldi	r23, 0xFF	; 255
    3d10:	c6 0e       	add	r12, r22
    3d12:	d7 1e       	adc	r13, r23
    3d14:	f6 01       	movw	r30, r12
    3d16:	80 83       	st	Z, r24
    3d18:	91 83       	std	Z+1, r25	; 0x01
    3d1a:	a2 83       	std	Z+2, r26	; 0x02
    3d1c:	b3 83       	std	Z+3, r27	; 0x03
    3d1e:	6f e1       	ldi	r22, 0x1F	; 31
    3d20:	70 e0       	ldi	r23, 0x00	; 0
    3d22:	c6 0e       	add	r12, r22
    3d24:	d7 1e       	adc	r13, r23
    3d26:	f6 01       	movw	r30, r12
    3d28:	80 83       	st	Z, r24
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	a2 83       	std	Z+2, r26	; 0x02
    3d2e:	b3 83       	std	Z+3, r27	; 0x03
    3d30:	c6 0e       	add	r12, r22
    3d32:	d7 1e       	adc	r13, r23
    3d34:	f6 01       	movw	r30, r12
    3d36:	e0 82       	st	Z, r14
    3d38:	f1 82       	std	Z+1, r15	; 0x01
    3d3a:	02 83       	std	Z+2, r16	; 0x02
    3d3c:	13 83       	std	Z+3, r17	; 0x03
    3d3e:	c6 0e       	add	r12, r22
    3d40:	d7 1e       	adc	r13, r23
    3d42:	f6 01       	movw	r30, r12
    3d44:	20 83       	st	Z, r18
    3d46:	31 83       	std	Z+1, r19	; 0x01
    3d48:	42 83       	std	Z+2, r20	; 0x02
    3d4a:	53 83       	std	Z+3, r21	; 0x03
    3d4c:	20 e9       	ldi	r18, 0x90	; 144
    3d4e:	3f ef       	ldi	r19, 0xFF	; 255
    3d50:	c2 0e       	add	r12, r18
    3d52:	d3 1e       	adc	r13, r19
    3d54:	27 e7       	ldi	r18, 0x77	; 119
    3d56:	3e e3       	ldi	r19, 0x3E	; 62
    3d58:	f6 01       	movw	r30, r12
    3d5a:	31 83       	std	Z+1, r19	; 0x01
    3d5c:	20 83       	st	Z, r18
    3d5e:	c6 0e       	add	r12, r22
    3d60:	d7 1e       	adc	r13, r23
    3d62:	8d e9       	ldi	r24, 0x9D	; 157
    3d64:	9e e3       	ldi	r25, 0x3E	; 62
    3d66:	f6 01       	movw	r30, r12
    3d68:	91 83       	std	Z+1, r25	; 0x01
    3d6a:	80 83       	st	Z, r24
    3d6c:	c6 0e       	add	r12, r22
    3d6e:	d7 1e       	adc	r13, r23
    3d70:	8d e1       	ldi	r24, 0x1D	; 29
    3d72:	9f e0       	ldi	r25, 0x0F	; 15
    3d74:	f6 01       	movw	r30, r12
    3d76:	91 83       	std	Z+1, r25	; 0x01
    3d78:	80 83       	st	Z, r24
    3d7a:	c6 0e       	add	r12, r22
    3d7c:	d7 1e       	adc	r13, r23
    3d7e:	f6 01       	movw	r30, r12
    3d80:	31 83       	std	Z+1, r19	; 0x01
    3d82:	20 83       	st	Z, r18
    3d84:	25 ea       	ldi	r18, 0xA5	; 165
    3d86:	3f ef       	ldi	r19, 0xFF	; 255
    3d88:	c2 0e       	add	r12, r18
    3d8a:	d3 1e       	adc	r13, r19
    3d8c:	24 eb       	ldi	r18, 0xB4	; 180
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	f6 01       	movw	r30, r12
    3d92:	31 83       	std	Z+1, r19	; 0x01
    3d94:	20 83       	st	Z, r18
    3d96:	c6 0e       	add	r12, r22
    3d98:	d7 1e       	adc	r13, r23
    3d9a:	89 e9       	ldi	r24, 0x99	; 153
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	f6 01       	movw	r30, r12
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	80 83       	st	Z, r24
    3da4:	c6 0e       	add	r12, r22
    3da6:	d7 1e       	adc	r13, r23
    3da8:	88 ea       	ldi	r24, 0xA8	; 168
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	f6 01       	movw	r30, r12
    3dae:	91 83       	std	Z+1, r25	; 0x01
    3db0:	80 83       	st	Z, r24
    3db2:	c6 0e       	add	r12, r22
    3db4:	d7 1e       	adc	r13, r23
    3db6:	f6 01       	movw	r30, r12
    3db8:	31 83       	std	Z+1, r19	; 0x01
    3dba:	20 83       	st	Z, r18
    3dbc:	26 96       	adiw	r28, 0x06	; 6
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	ff 90       	pop	r15
    3dd2:	ef 90       	pop	r14
    3dd4:	df 90       	pop	r13
    3dd6:	cf 90       	pop	r12
    3dd8:	bf 90       	pop	r11
    3dda:	af 90       	pop	r10
    3ddc:	9f 90       	pop	r9
    3dde:	8f 90       	pop	r8
    3de0:	7f 90       	pop	r7
    3de2:	6f 90       	pop	r6
    3de4:	5f 90       	pop	r5
    3de6:	4f 90       	pop	r4
    3de8:	3f 90       	pop	r3
    3dea:	2f 90       	pop	r2
    3dec:	08 95       	ret

00003dee <atof>:
    3dee:	66 27       	eor	r22, r22
    3df0:	77 27       	eor	r23, r23
    3df2:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <strtod>

00003df6 <atoi>:
    3df6:	fc 01       	movw	r30, r24
    3df8:	88 27       	eor	r24, r24
    3dfa:	99 27       	eor	r25, r25
    3dfc:	e8 94       	clt
    3dfe:	21 91       	ld	r18, Z+
    3e00:	20 32       	cpi	r18, 0x20	; 32
    3e02:	e9 f3       	breq	.-6      	; 0x3dfe <atoi+0x8>
    3e04:	29 30       	cpi	r18, 0x09	; 9
    3e06:	10 f0       	brcs	.+4      	; 0x3e0c <atoi+0x16>
    3e08:	2e 30       	cpi	r18, 0x0E	; 14
    3e0a:	c8 f3       	brcs	.-14     	; 0x3dfe <atoi+0x8>
    3e0c:	2b 32       	cpi	r18, 0x2B	; 43
    3e0e:	41 f0       	breq	.+16     	; 0x3e20 <atoi+0x2a>
    3e10:	2d 32       	cpi	r18, 0x2D	; 45
    3e12:	39 f4       	brne	.+14     	; 0x3e22 <atoi+0x2c>
    3e14:	68 94       	set
    3e16:	04 c0       	rjmp	.+8      	; 0x3e20 <atoi+0x2a>
    3e18:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__mulhi_const_10>
    3e1c:	82 0f       	add	r24, r18
    3e1e:	91 1d       	adc	r25, r1
    3e20:	21 91       	ld	r18, Z+
    3e22:	20 53       	subi	r18, 0x30	; 48
    3e24:	2a 30       	cpi	r18, 0x0A	; 10
    3e26:	c0 f3       	brcs	.-16     	; 0x3e18 <atoi+0x22>
    3e28:	1e f4       	brtc	.+6      	; 0x3e30 <atoi+0x3a>
    3e2a:	90 95       	com	r25
    3e2c:	81 95       	neg	r24
    3e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e30:	08 95       	ret

00003e32 <atol>:
    3e32:	1f 93       	push	r17
    3e34:	fc 01       	movw	r30, r24
    3e36:	99 27       	eor	r25, r25
    3e38:	88 27       	eor	r24, r24
    3e3a:	bc 01       	movw	r22, r24
    3e3c:	e8 94       	clt
    3e3e:	11 91       	ld	r17, Z+
    3e40:	10 32       	cpi	r17, 0x20	; 32
    3e42:	e9 f3       	breq	.-6      	; 0x3e3e <atol+0xc>
    3e44:	19 30       	cpi	r17, 0x09	; 9
    3e46:	10 f0       	brcs	.+4      	; 0x3e4c <atol+0x1a>
    3e48:	1e 30       	cpi	r17, 0x0E	; 14
    3e4a:	c8 f3       	brcs	.-14     	; 0x3e3e <atol+0xc>
    3e4c:	1b 32       	cpi	r17, 0x2B	; 43
    3e4e:	51 f0       	breq	.+20     	; 0x3e64 <atol+0x32>
    3e50:	1d 32       	cpi	r17, 0x2D	; 45
    3e52:	49 f4       	brne	.+18     	; 0x3e66 <atol+0x34>
    3e54:	68 94       	set
    3e56:	06 c0       	rjmp	.+12     	; 0x3e64 <atol+0x32>
    3e58:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsi_const_10>
    3e5c:	61 0f       	add	r22, r17
    3e5e:	71 1d       	adc	r23, r1
    3e60:	81 1d       	adc	r24, r1
    3e62:	91 1d       	adc	r25, r1
    3e64:	11 91       	ld	r17, Z+
    3e66:	10 53       	subi	r17, 0x30	; 48
    3e68:	1a 30       	cpi	r17, 0x0A	; 10
    3e6a:	b0 f3       	brcs	.-20     	; 0x3e58 <atol+0x26>
    3e6c:	3e f4       	brtc	.+14     	; 0x3e7c <atol+0x4a>
    3e6e:	90 95       	com	r25
    3e70:	80 95       	com	r24
    3e72:	70 95       	com	r23
    3e74:	61 95       	neg	r22
    3e76:	7f 4f       	sbci	r23, 0xFF	; 255
    3e78:	8f 4f       	sbci	r24, 0xFF	; 255
    3e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7c:	1f 91       	pop	r17
    3e7e:	08 95       	ret

00003e80 <exit>:
    3e80:	f8 94       	cli
    3e82:	0c 94 ed 22 	jmp	0x45da	; 0x45da <_exit>

00003e86 <__mulsi_const_10>:
    3e86:	59 2f       	mov	r21, r25
    3e88:	48 2f       	mov	r20, r24
    3e8a:	37 2f       	mov	r19, r23
    3e8c:	26 2f       	mov	r18, r22
    3e8e:	66 0f       	add	r22, r22
    3e90:	77 1f       	adc	r23, r23
    3e92:	88 1f       	adc	r24, r24
    3e94:	99 1f       	adc	r25, r25
    3e96:	66 0f       	add	r22, r22
    3e98:	77 1f       	adc	r23, r23
    3e9a:	88 1f       	adc	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	62 0f       	add	r22, r18
    3ea0:	73 1f       	adc	r23, r19
    3ea2:	84 1f       	adc	r24, r20
    3ea4:	95 1f       	adc	r25, r21
    3ea6:	66 0f       	add	r22, r22
    3ea8:	77 1f       	adc	r23, r23
    3eaa:	88 1f       	adc	r24, r24
    3eac:	99 1f       	adc	r25, r25
    3eae:	08 95       	ret

00003eb0 <__mulhi_const_10>:
    3eb0:	7a e0       	ldi	r23, 0x0A	; 10
    3eb2:	97 9f       	mul	r25, r23
    3eb4:	90 2d       	mov	r25, r0
    3eb6:	87 9f       	mul	r24, r23
    3eb8:	80 2d       	mov	r24, r0
    3eba:	91 0d       	add	r25, r1
    3ebc:	11 24       	eor	r1, r1
    3ebe:	08 95       	ret

00003ec0 <__cmpsf2>:
    3ec0:	71 d0       	rcall	.+226    	; 0x3fa4 <__fp_cmp>
    3ec2:	08 f4       	brcc	.+2      	; 0x3ec6 <__cmpsf2+0x6>
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	08 95       	ret

00003ec8 <__fixsfsi>:
    3ec8:	04 d0       	rcall	.+8      	; 0x3ed2 <__fixunssfsi>
    3eca:	68 94       	set
    3ecc:	b1 11       	cpse	r27, r1
    3ece:	d9 c0       	rjmp	.+434    	; 0x4082 <__fp_szero>
    3ed0:	08 95       	ret

00003ed2 <__fixunssfsi>:
    3ed2:	bc d0       	rcall	.+376    	; 0x404c <__fp_splitA>
    3ed4:	88 f0       	brcs	.+34     	; 0x3ef8 <__fixunssfsi+0x26>
    3ed6:	9f 57       	subi	r25, 0x7F	; 127
    3ed8:	90 f0       	brcs	.+36     	; 0x3efe <__fixunssfsi+0x2c>
    3eda:	b9 2f       	mov	r27, r25
    3edc:	99 27       	eor	r25, r25
    3ede:	b7 51       	subi	r27, 0x17	; 23
    3ee0:	a0 f0       	brcs	.+40     	; 0x3f0a <__fixunssfsi+0x38>
    3ee2:	d1 f0       	breq	.+52     	; 0x3f18 <__fixunssfsi+0x46>
    3ee4:	66 0f       	add	r22, r22
    3ee6:	77 1f       	adc	r23, r23
    3ee8:	88 1f       	adc	r24, r24
    3eea:	99 1f       	adc	r25, r25
    3eec:	1a f0       	brmi	.+6      	; 0x3ef4 <__fixunssfsi+0x22>
    3eee:	ba 95       	dec	r27
    3ef0:	c9 f7       	brne	.-14     	; 0x3ee4 <__fixunssfsi+0x12>
    3ef2:	12 c0       	rjmp	.+36     	; 0x3f18 <__fixunssfsi+0x46>
    3ef4:	b1 30       	cpi	r27, 0x01	; 1
    3ef6:	81 f0       	breq	.+32     	; 0x3f18 <__fixunssfsi+0x46>
    3ef8:	c3 d0       	rcall	.+390    	; 0x4080 <__fp_zero>
    3efa:	b1 e0       	ldi	r27, 0x01	; 1
    3efc:	08 95       	ret
    3efe:	c0 c0       	rjmp	.+384    	; 0x4080 <__fp_zero>
    3f00:	67 2f       	mov	r22, r23
    3f02:	78 2f       	mov	r23, r24
    3f04:	88 27       	eor	r24, r24
    3f06:	b8 5f       	subi	r27, 0xF8	; 248
    3f08:	39 f0       	breq	.+14     	; 0x3f18 <__fixunssfsi+0x46>
    3f0a:	b9 3f       	cpi	r27, 0xF9	; 249
    3f0c:	cc f3       	brlt	.-14     	; 0x3f00 <__fixunssfsi+0x2e>
    3f0e:	86 95       	lsr	r24
    3f10:	77 95       	ror	r23
    3f12:	67 95       	ror	r22
    3f14:	b3 95       	inc	r27
    3f16:	d9 f7       	brne	.-10     	; 0x3f0e <__fixunssfsi+0x3c>
    3f18:	3e f4       	brtc	.+14     	; 0x3f28 <__fixunssfsi+0x56>
    3f1a:	90 95       	com	r25
    3f1c:	80 95       	com	r24
    3f1e:	70 95       	com	r23
    3f20:	61 95       	neg	r22
    3f22:	7f 4f       	sbci	r23, 0xFF	; 255
    3f24:	8f 4f       	sbci	r24, 0xFF	; 255
    3f26:	9f 4f       	sbci	r25, 0xFF	; 255
    3f28:	08 95       	ret

00003f2a <__floatunsisf>:
    3f2a:	e8 94       	clt
    3f2c:	09 c0       	rjmp	.+18     	; 0x3f40 <__floatsisf+0x12>

00003f2e <__floatsisf>:
    3f2e:	97 fb       	bst	r25, 7
    3f30:	3e f4       	brtc	.+14     	; 0x3f40 <__floatsisf+0x12>
    3f32:	90 95       	com	r25
    3f34:	80 95       	com	r24
    3f36:	70 95       	com	r23
    3f38:	61 95       	neg	r22
    3f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f40:	99 23       	and	r25, r25
    3f42:	a9 f0       	breq	.+42     	; 0x3f6e <__floatsisf+0x40>
    3f44:	f9 2f       	mov	r31, r25
    3f46:	96 e9       	ldi	r25, 0x96	; 150
    3f48:	bb 27       	eor	r27, r27
    3f4a:	93 95       	inc	r25
    3f4c:	f6 95       	lsr	r31
    3f4e:	87 95       	ror	r24
    3f50:	77 95       	ror	r23
    3f52:	67 95       	ror	r22
    3f54:	b7 95       	ror	r27
    3f56:	f1 11       	cpse	r31, r1
    3f58:	f8 cf       	rjmp	.-16     	; 0x3f4a <__floatsisf+0x1c>
    3f5a:	fa f4       	brpl	.+62     	; 0x3f9a <__floatsisf+0x6c>
    3f5c:	bb 0f       	add	r27, r27
    3f5e:	11 f4       	brne	.+4      	; 0x3f64 <__floatsisf+0x36>
    3f60:	60 ff       	sbrs	r22, 0
    3f62:	1b c0       	rjmp	.+54     	; 0x3f9a <__floatsisf+0x6c>
    3f64:	6f 5f       	subi	r22, 0xFF	; 255
    3f66:	7f 4f       	sbci	r23, 0xFF	; 255
    3f68:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6c:	16 c0       	rjmp	.+44     	; 0x3f9a <__floatsisf+0x6c>
    3f6e:	88 23       	and	r24, r24
    3f70:	11 f0       	breq	.+4      	; 0x3f76 <__floatsisf+0x48>
    3f72:	96 e9       	ldi	r25, 0x96	; 150
    3f74:	11 c0       	rjmp	.+34     	; 0x3f98 <__floatsisf+0x6a>
    3f76:	77 23       	and	r23, r23
    3f78:	21 f0       	breq	.+8      	; 0x3f82 <__floatsisf+0x54>
    3f7a:	9e e8       	ldi	r25, 0x8E	; 142
    3f7c:	87 2f       	mov	r24, r23
    3f7e:	76 2f       	mov	r23, r22
    3f80:	05 c0       	rjmp	.+10     	; 0x3f8c <__floatsisf+0x5e>
    3f82:	66 23       	and	r22, r22
    3f84:	71 f0       	breq	.+28     	; 0x3fa2 <__floatsisf+0x74>
    3f86:	96 e8       	ldi	r25, 0x86	; 134
    3f88:	86 2f       	mov	r24, r22
    3f8a:	70 e0       	ldi	r23, 0x00	; 0
    3f8c:	60 e0       	ldi	r22, 0x00	; 0
    3f8e:	2a f0       	brmi	.+10     	; 0x3f9a <__floatsisf+0x6c>
    3f90:	9a 95       	dec	r25
    3f92:	66 0f       	add	r22, r22
    3f94:	77 1f       	adc	r23, r23
    3f96:	88 1f       	adc	r24, r24
    3f98:	da f7       	brpl	.-10     	; 0x3f90 <__floatsisf+0x62>
    3f9a:	88 0f       	add	r24, r24
    3f9c:	96 95       	lsr	r25
    3f9e:	87 95       	ror	r24
    3fa0:	97 f9       	bld	r25, 7
    3fa2:	08 95       	ret

00003fa4 <__fp_cmp>:
    3fa4:	99 0f       	add	r25, r25
    3fa6:	00 08       	sbc	r0, r0
    3fa8:	55 0f       	add	r21, r21
    3faa:	aa 0b       	sbc	r26, r26
    3fac:	e0 e8       	ldi	r30, 0x80	; 128
    3fae:	fe ef       	ldi	r31, 0xFE	; 254
    3fb0:	16 16       	cp	r1, r22
    3fb2:	17 06       	cpc	r1, r23
    3fb4:	e8 07       	cpc	r30, r24
    3fb6:	f9 07       	cpc	r31, r25
    3fb8:	c0 f0       	brcs	.+48     	; 0x3fea <__fp_cmp+0x46>
    3fba:	12 16       	cp	r1, r18
    3fbc:	13 06       	cpc	r1, r19
    3fbe:	e4 07       	cpc	r30, r20
    3fc0:	f5 07       	cpc	r31, r21
    3fc2:	98 f0       	brcs	.+38     	; 0x3fea <__fp_cmp+0x46>
    3fc4:	62 1b       	sub	r22, r18
    3fc6:	73 0b       	sbc	r23, r19
    3fc8:	84 0b       	sbc	r24, r20
    3fca:	95 0b       	sbc	r25, r21
    3fcc:	39 f4       	brne	.+14     	; 0x3fdc <__fp_cmp+0x38>
    3fce:	0a 26       	eor	r0, r26
    3fd0:	61 f0       	breq	.+24     	; 0x3fea <__fp_cmp+0x46>
    3fd2:	23 2b       	or	r18, r19
    3fd4:	24 2b       	or	r18, r20
    3fd6:	25 2b       	or	r18, r21
    3fd8:	21 f4       	brne	.+8      	; 0x3fe2 <__fp_cmp+0x3e>
    3fda:	08 95       	ret
    3fdc:	0a 26       	eor	r0, r26
    3fde:	09 f4       	brne	.+2      	; 0x3fe2 <__fp_cmp+0x3e>
    3fe0:	a1 40       	sbci	r26, 0x01	; 1
    3fe2:	a6 95       	lsr	r26
    3fe4:	8f ef       	ldi	r24, 0xFF	; 255
    3fe6:	81 1d       	adc	r24, r1
    3fe8:	81 1d       	adc	r24, r1
    3fea:	08 95       	ret

00003fec <__fp_inf>:
    3fec:	97 f9       	bld	r25, 7
    3fee:	9f 67       	ori	r25, 0x7F	; 127
    3ff0:	80 e8       	ldi	r24, 0x80	; 128
    3ff2:	70 e0       	ldi	r23, 0x00	; 0
    3ff4:	60 e0       	ldi	r22, 0x00	; 0
    3ff6:	08 95       	ret

00003ff8 <__fp_nan>:
    3ff8:	9f ef       	ldi	r25, 0xFF	; 255
    3ffa:	80 ec       	ldi	r24, 0xC0	; 192
    3ffc:	08 95       	ret

00003ffe <__fp_pscA>:
    3ffe:	00 24       	eor	r0, r0
    4000:	0a 94       	dec	r0
    4002:	16 16       	cp	r1, r22
    4004:	17 06       	cpc	r1, r23
    4006:	18 06       	cpc	r1, r24
    4008:	09 06       	cpc	r0, r25
    400a:	08 95       	ret

0000400c <__fp_pscB>:
    400c:	00 24       	eor	r0, r0
    400e:	0a 94       	dec	r0
    4010:	12 16       	cp	r1, r18
    4012:	13 06       	cpc	r1, r19
    4014:	14 06       	cpc	r1, r20
    4016:	05 06       	cpc	r0, r21
    4018:	08 95       	ret

0000401a <__fp_round>:
    401a:	09 2e       	mov	r0, r25
    401c:	03 94       	inc	r0
    401e:	00 0c       	add	r0, r0
    4020:	11 f4       	brne	.+4      	; 0x4026 <__fp_round+0xc>
    4022:	88 23       	and	r24, r24
    4024:	52 f0       	brmi	.+20     	; 0x403a <__fp_round+0x20>
    4026:	bb 0f       	add	r27, r27
    4028:	40 f4       	brcc	.+16     	; 0x403a <__fp_round+0x20>
    402a:	bf 2b       	or	r27, r31
    402c:	11 f4       	brne	.+4      	; 0x4032 <__fp_round+0x18>
    402e:	60 ff       	sbrs	r22, 0
    4030:	04 c0       	rjmp	.+8      	; 0x403a <__fp_round+0x20>
    4032:	6f 5f       	subi	r22, 0xFF	; 255
    4034:	7f 4f       	sbci	r23, 0xFF	; 255
    4036:	8f 4f       	sbci	r24, 0xFF	; 255
    4038:	9f 4f       	sbci	r25, 0xFF	; 255
    403a:	08 95       	ret

0000403c <__fp_split3>:
    403c:	57 fd       	sbrc	r21, 7
    403e:	90 58       	subi	r25, 0x80	; 128
    4040:	44 0f       	add	r20, r20
    4042:	55 1f       	adc	r21, r21
    4044:	59 f0       	breq	.+22     	; 0x405c <__fp_splitA+0x10>
    4046:	5f 3f       	cpi	r21, 0xFF	; 255
    4048:	71 f0       	breq	.+28     	; 0x4066 <__fp_splitA+0x1a>
    404a:	47 95       	ror	r20

0000404c <__fp_splitA>:
    404c:	88 0f       	add	r24, r24
    404e:	97 fb       	bst	r25, 7
    4050:	99 1f       	adc	r25, r25
    4052:	61 f0       	breq	.+24     	; 0x406c <__fp_splitA+0x20>
    4054:	9f 3f       	cpi	r25, 0xFF	; 255
    4056:	79 f0       	breq	.+30     	; 0x4076 <__fp_splitA+0x2a>
    4058:	87 95       	ror	r24
    405a:	08 95       	ret
    405c:	12 16       	cp	r1, r18
    405e:	13 06       	cpc	r1, r19
    4060:	14 06       	cpc	r1, r20
    4062:	55 1f       	adc	r21, r21
    4064:	f2 cf       	rjmp	.-28     	; 0x404a <__fp_split3+0xe>
    4066:	46 95       	lsr	r20
    4068:	f1 df       	rcall	.-30     	; 0x404c <__fp_splitA>
    406a:	08 c0       	rjmp	.+16     	; 0x407c <__fp_splitA+0x30>
    406c:	16 16       	cp	r1, r22
    406e:	17 06       	cpc	r1, r23
    4070:	18 06       	cpc	r1, r24
    4072:	99 1f       	adc	r25, r25
    4074:	f1 cf       	rjmp	.-30     	; 0x4058 <__fp_splitA+0xc>
    4076:	86 95       	lsr	r24
    4078:	71 05       	cpc	r23, r1
    407a:	61 05       	cpc	r22, r1
    407c:	08 94       	sec
    407e:	08 95       	ret

00004080 <__fp_zero>:
    4080:	e8 94       	clt

00004082 <__fp_szero>:
    4082:	bb 27       	eor	r27, r27
    4084:	66 27       	eor	r22, r22
    4086:	77 27       	eor	r23, r23
    4088:	cb 01       	movw	r24, r22
    408a:	97 f9       	bld	r25, 7
    408c:	08 95       	ret

0000408e <__mulsf3>:
    408e:	0b d0       	rcall	.+22     	; 0x40a6 <__mulsf3x>
    4090:	c4 cf       	rjmp	.-120    	; 0x401a <__fp_round>
    4092:	b5 df       	rcall	.-150    	; 0x3ffe <__fp_pscA>
    4094:	28 f0       	brcs	.+10     	; 0x40a0 <__mulsf3+0x12>
    4096:	ba df       	rcall	.-140    	; 0x400c <__fp_pscB>
    4098:	18 f0       	brcs	.+6      	; 0x40a0 <__mulsf3+0x12>
    409a:	95 23       	and	r25, r21
    409c:	09 f0       	breq	.+2      	; 0x40a0 <__mulsf3+0x12>
    409e:	a6 cf       	rjmp	.-180    	; 0x3fec <__fp_inf>
    40a0:	ab cf       	rjmp	.-170    	; 0x3ff8 <__fp_nan>
    40a2:	11 24       	eor	r1, r1
    40a4:	ee cf       	rjmp	.-36     	; 0x4082 <__fp_szero>

000040a6 <__mulsf3x>:
    40a6:	ca df       	rcall	.-108    	; 0x403c <__fp_split3>
    40a8:	a0 f3       	brcs	.-24     	; 0x4092 <__mulsf3+0x4>

000040aa <__mulsf3_pse>:
    40aa:	95 9f       	mul	r25, r21
    40ac:	d1 f3       	breq	.-12     	; 0x40a2 <__mulsf3+0x14>
    40ae:	95 0f       	add	r25, r21
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	55 1f       	adc	r21, r21
    40b4:	62 9f       	mul	r22, r18
    40b6:	f0 01       	movw	r30, r0
    40b8:	72 9f       	mul	r23, r18
    40ba:	bb 27       	eor	r27, r27
    40bc:	f0 0d       	add	r31, r0
    40be:	b1 1d       	adc	r27, r1
    40c0:	63 9f       	mul	r22, r19
    40c2:	aa 27       	eor	r26, r26
    40c4:	f0 0d       	add	r31, r0
    40c6:	b1 1d       	adc	r27, r1
    40c8:	aa 1f       	adc	r26, r26
    40ca:	64 9f       	mul	r22, r20
    40cc:	66 27       	eor	r22, r22
    40ce:	b0 0d       	add	r27, r0
    40d0:	a1 1d       	adc	r26, r1
    40d2:	66 1f       	adc	r22, r22
    40d4:	82 9f       	mul	r24, r18
    40d6:	22 27       	eor	r18, r18
    40d8:	b0 0d       	add	r27, r0
    40da:	a1 1d       	adc	r26, r1
    40dc:	62 1f       	adc	r22, r18
    40de:	73 9f       	mul	r23, r19
    40e0:	b0 0d       	add	r27, r0
    40e2:	a1 1d       	adc	r26, r1
    40e4:	62 1f       	adc	r22, r18
    40e6:	83 9f       	mul	r24, r19
    40e8:	a0 0d       	add	r26, r0
    40ea:	61 1d       	adc	r22, r1
    40ec:	22 1f       	adc	r18, r18
    40ee:	74 9f       	mul	r23, r20
    40f0:	33 27       	eor	r19, r19
    40f2:	a0 0d       	add	r26, r0
    40f4:	61 1d       	adc	r22, r1
    40f6:	23 1f       	adc	r18, r19
    40f8:	84 9f       	mul	r24, r20
    40fa:	60 0d       	add	r22, r0
    40fc:	21 1d       	adc	r18, r1
    40fe:	82 2f       	mov	r24, r18
    4100:	76 2f       	mov	r23, r22
    4102:	6a 2f       	mov	r22, r26
    4104:	11 24       	eor	r1, r1
    4106:	9f 57       	subi	r25, 0x7F	; 127
    4108:	50 40       	sbci	r21, 0x00	; 0
    410a:	8a f0       	brmi	.+34     	; 0x412e <__mulsf3_pse+0x84>
    410c:	e1 f0       	breq	.+56     	; 0x4146 <__mulsf3_pse+0x9c>
    410e:	88 23       	and	r24, r24
    4110:	4a f0       	brmi	.+18     	; 0x4124 <__mulsf3_pse+0x7a>
    4112:	ee 0f       	add	r30, r30
    4114:	ff 1f       	adc	r31, r31
    4116:	bb 1f       	adc	r27, r27
    4118:	66 1f       	adc	r22, r22
    411a:	77 1f       	adc	r23, r23
    411c:	88 1f       	adc	r24, r24
    411e:	91 50       	subi	r25, 0x01	; 1
    4120:	50 40       	sbci	r21, 0x00	; 0
    4122:	a9 f7       	brne	.-22     	; 0x410e <__mulsf3_pse+0x64>
    4124:	9e 3f       	cpi	r25, 0xFE	; 254
    4126:	51 05       	cpc	r21, r1
    4128:	70 f0       	brcs	.+28     	; 0x4146 <__mulsf3_pse+0x9c>
    412a:	60 cf       	rjmp	.-320    	; 0x3fec <__fp_inf>
    412c:	aa cf       	rjmp	.-172    	; 0x4082 <__fp_szero>
    412e:	5f 3f       	cpi	r21, 0xFF	; 255
    4130:	ec f3       	brlt	.-6      	; 0x412c <__mulsf3_pse+0x82>
    4132:	98 3e       	cpi	r25, 0xE8	; 232
    4134:	dc f3       	brlt	.-10     	; 0x412c <__mulsf3_pse+0x82>
    4136:	86 95       	lsr	r24
    4138:	77 95       	ror	r23
    413a:	67 95       	ror	r22
    413c:	b7 95       	ror	r27
    413e:	f7 95       	ror	r31
    4140:	e7 95       	ror	r30
    4142:	9f 5f       	subi	r25, 0xFF	; 255
    4144:	c1 f7       	brne	.-16     	; 0x4136 <__mulsf3_pse+0x8c>
    4146:	fe 2b       	or	r31, r30
    4148:	88 0f       	add	r24, r24
    414a:	91 1d       	adc	r25, r1
    414c:	96 95       	lsr	r25
    414e:	87 95       	ror	r24
    4150:	97 f9       	bld	r25, 7
    4152:	08 95       	ret

00004154 <strtod>:
    4154:	a0 e0       	ldi	r26, 0x00	; 0
    4156:	b0 e0       	ldi	r27, 0x00	; 0
    4158:	e0 eb       	ldi	r30, 0xB0	; 176
    415a:	f0 e2       	ldi	r31, 0x20	; 32
    415c:	0c 94 b6 22 	jmp	0x456c	; 0x456c <__prologue_saves__+0xc>
    4160:	ec 01       	movw	r28, r24
    4162:	5b 01       	movw	r10, r22
    4164:	61 15       	cp	r22, r1
    4166:	71 05       	cpc	r23, r1
    4168:	19 f0       	breq	.+6      	; 0x4170 <strtod+0x1c>
    416a:	fb 01       	movw	r30, r22
    416c:	91 83       	std	Z+1, r25	; 0x01
    416e:	80 83       	st	Z, r24
    4170:	f9 90       	ld	r15, Y+
    4172:	8f 2d       	mov	r24, r15
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	0e 94 0a 22 	call	0x4414	; 0x4414 <isspace>
    417a:	89 2b       	or	r24, r25
    417c:	c9 f7       	brne	.-14     	; 0x4170 <strtod+0x1c>
    417e:	fd e2       	ldi	r31, 0x2D	; 45
    4180:	ff 16       	cp	r15, r31
    4182:	21 f4       	brne	.+8      	; 0x418c <strtod+0x38>
    4184:	f9 90       	ld	r15, Y+
    4186:	ee 24       	eor	r14, r14
    4188:	e3 94       	inc	r14
    418a:	05 c0       	rjmp	.+10     	; 0x4196 <strtod+0x42>
    418c:	2b e2       	ldi	r18, 0x2B	; 43
    418e:	f2 16       	cp	r15, r18
    4190:	09 f4       	brne	.+2      	; 0x4194 <strtod+0x40>
    4192:	f9 90       	ld	r15, Y+
    4194:	ee 24       	eor	r14, r14
    4196:	8e 01       	movw	r16, r28
    4198:	01 50       	subi	r16, 0x01	; 1
    419a:	10 40       	sbci	r17, 0x00	; 0
    419c:	c8 01       	movw	r24, r16
    419e:	6e e2       	ldi	r22, 0x2E	; 46
    41a0:	76 e0       	ldi	r23, 0x06	; 6
    41a2:	43 e0       	ldi	r20, 0x03	; 3
    41a4:	50 e0       	ldi	r21, 0x00	; 0
    41a6:	0e 94 12 22 	call	0x4424	; 0x4424 <strncasecmp_P>
    41aa:	89 2b       	or	r24, r25
    41ac:	01 f5       	brne	.+64     	; 0x41ee <strtod+0x9a>
    41ae:	8e 01       	movw	r16, r28
    41b0:	0e 5f       	subi	r16, 0xFE	; 254
    41b2:	1f 4f       	sbci	r17, 0xFF	; 255
    41b4:	c8 01       	movw	r24, r16
    41b6:	61 e3       	ldi	r22, 0x31	; 49
    41b8:	76 e0       	ldi	r23, 0x06	; 6
    41ba:	45 e0       	ldi	r20, 0x05	; 5
    41bc:	50 e0       	ldi	r21, 0x00	; 0
    41be:	0e 94 12 22 	call	0x4424	; 0x4424 <strncasecmp_P>
    41c2:	89 2b       	or	r24, r25
    41c4:	19 f4       	brne	.+6      	; 0x41cc <strtod+0x78>
    41c6:	8e 01       	movw	r16, r28
    41c8:	09 5f       	subi	r16, 0xF9	; 249
    41ca:	1f 4f       	sbci	r17, 0xFF	; 255
    41cc:	a1 14       	cp	r10, r1
    41ce:	b1 04       	cpc	r11, r1
    41d0:	19 f0       	breq	.+6      	; 0x41d8 <strtod+0x84>
    41d2:	f5 01       	movw	r30, r10
    41d4:	11 83       	std	Z+1, r17	; 0x01
    41d6:	00 83       	st	Z, r16
    41d8:	e0 fc       	sbrc	r14, 0
    41da:	04 c0       	rjmp	.+8      	; 0x41e4 <strtod+0x90>
    41dc:	70 e0       	ldi	r23, 0x00	; 0
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	80 e8       	ldi	r24, 0x80	; 128
    41e2:	14 c0       	rjmp	.+40     	; 0x420c <strtod+0xb8>
    41e4:	70 e0       	ldi	r23, 0x00	; 0
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	80 e8       	ldi	r24, 0x80	; 128
    41ea:	6f ef       	ldi	r22, 0xFF	; 255
    41ec:	08 c1       	rjmp	.+528    	; 0x43fe <strtod+0x2aa>
    41ee:	c8 01       	movw	r24, r16
    41f0:	66 e3       	ldi	r22, 0x36	; 54
    41f2:	76 e0       	ldi	r23, 0x06	; 6
    41f4:	43 e0       	ldi	r20, 0x03	; 3
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	0e 94 12 22 	call	0x4424	; 0x4424 <strncasecmp_P>
    41fc:	89 2b       	or	r24, r25
    41fe:	69 f4       	brne	.+26     	; 0x421a <strtod+0xc6>
    4200:	a1 14       	cp	r10, r1
    4202:	b1 04       	cpc	r11, r1
    4204:	29 f4       	brne	.+10     	; 0x4210 <strtod+0xbc>
    4206:	70 e0       	ldi	r23, 0x00	; 0
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	80 ec       	ldi	r24, 0xC0	; 192
    420c:	6f e7       	ldi	r22, 0x7F	; 127
    420e:	f7 c0       	rjmp	.+494    	; 0x43fe <strtod+0x2aa>
    4210:	22 96       	adiw	r28, 0x02	; 2
    4212:	f5 01       	movw	r30, r10
    4214:	d1 83       	std	Z+1, r29	; 0x01
    4216:	c0 83       	st	Z, r28
    4218:	f6 cf       	rjmp	.-20     	; 0x4206 <strtod+0xb2>
    421a:	88 24       	eor	r8, r8
    421c:	99 24       	eor	r9, r9
    421e:	40 e0       	ldi	r20, 0x00	; 0
    4220:	50 e0       	ldi	r21, 0x00	; 0
    4222:	60 e0       	ldi	r22, 0x00	; 0
    4224:	70 e0       	ldi	r23, 0x00	; 0
    4226:	ef 2d       	mov	r30, r15
    4228:	e0 53       	subi	r30, 0x30	; 48
    422a:	ea 30       	cpi	r30, 0x0A	; 10
    422c:	a0 f5       	brcc	.+104    	; 0x4296 <strtod+0x142>
    422e:	f2 e0       	ldi	r31, 0x02	; 2
    4230:	ef 2a       	or	r14, r31
    4232:	8e 2d       	mov	r24, r14
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	9c 01       	movw	r18, r24
    4238:	28 70       	andi	r18, 0x08	; 8
    423a:	30 70       	andi	r19, 0x00	; 0
    423c:	e2 fe       	sbrs	r14, 2
    423e:	06 c0       	rjmp	.+12     	; 0x424c <strtod+0xf8>
    4240:	23 2b       	or	r18, r19
    4242:	79 f5       	brne	.+94     	; 0x42a2 <strtod+0x14e>
    4244:	08 94       	sec
    4246:	81 1c       	adc	r8, r1
    4248:	91 1c       	adc	r9, r1
    424a:	2b c0       	rjmp	.+86     	; 0x42a2 <strtod+0x14e>
    424c:	23 2b       	or	r18, r19
    424e:	19 f0       	breq	.+6      	; 0x4256 <strtod+0x102>
    4250:	08 94       	sec
    4252:	81 08       	sbc	r8, r1
    4254:	91 08       	sbc	r9, r1
    4256:	db 01       	movw	r26, r22
    4258:	ca 01       	movw	r24, r20
    425a:	12 e0       	ldi	r17, 0x02	; 2
    425c:	88 0f       	add	r24, r24
    425e:	99 1f       	adc	r25, r25
    4260:	aa 1f       	adc	r26, r26
    4262:	bb 1f       	adc	r27, r27
    4264:	1a 95       	dec	r17
    4266:	d1 f7       	brne	.-12     	; 0x425c <strtod+0x108>
    4268:	48 0f       	add	r20, r24
    426a:	59 1f       	adc	r21, r25
    426c:	6a 1f       	adc	r22, r26
    426e:	7b 1f       	adc	r23, r27
    4270:	44 0f       	add	r20, r20
    4272:	55 1f       	adc	r21, r21
    4274:	66 1f       	adc	r22, r22
    4276:	77 1f       	adc	r23, r23
    4278:	4e 0f       	add	r20, r30
    427a:	51 1d       	adc	r21, r1
    427c:	61 1d       	adc	r22, r1
    427e:	71 1d       	adc	r23, r1
    4280:	48 39       	cpi	r20, 0x98	; 152
    4282:	29 e9       	ldi	r18, 0x99	; 153
    4284:	52 07       	cpc	r21, r18
    4286:	29 e9       	ldi	r18, 0x99	; 153
    4288:	62 07       	cpc	r22, r18
    428a:	29 e1       	ldi	r18, 0x19	; 25
    428c:	72 07       	cpc	r23, r18
    428e:	48 f0       	brcs	.+18     	; 0x42a2 <strtod+0x14e>
    4290:	84 e0       	ldi	r24, 0x04	; 4
    4292:	e8 2a       	or	r14, r24
    4294:	06 c0       	rjmp	.+12     	; 0x42a2 <strtod+0x14e>
    4296:	ee 3f       	cpi	r30, 0xFE	; 254
    4298:	31 f4       	brne	.+12     	; 0x42a6 <strtod+0x152>
    429a:	e3 fc       	sbrc	r14, 3
    429c:	39 c0       	rjmp	.+114    	; 0x4310 <strtod+0x1bc>
    429e:	98 e0       	ldi	r25, 0x08	; 8
    42a0:	e9 2a       	or	r14, r25
    42a2:	f9 90       	ld	r15, Y+
    42a4:	c0 cf       	rjmp	.-128    	; 0x4226 <strtod+0xd2>
    42a6:	e5 33       	cpi	r30, 0x35	; 53
    42a8:	11 f0       	breq	.+4      	; 0x42ae <strtod+0x15a>
    42aa:	e5 31       	cpi	r30, 0x15	; 21
    42ac:	89 f5       	brne	.+98     	; 0x4310 <strtod+0x1bc>
    42ae:	29 91       	ld	r18, Y+
    42b0:	2d 32       	cpi	r18, 0x2D	; 45
    42b2:	19 f4       	brne	.+6      	; 0x42ba <strtod+0x166>
    42b4:	e0 e1       	ldi	r30, 0x10	; 16
    42b6:	ee 2a       	or	r14, r30
    42b8:	05 c0       	rjmp	.+10     	; 0x42c4 <strtod+0x170>
    42ba:	2b 32       	cpi	r18, 0x2B	; 43
    42bc:	19 f0       	breq	.+6      	; 0x42c4 <strtod+0x170>
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	03 c0       	rjmp	.+6      	; 0x42ca <strtod+0x176>
    42c4:	29 91       	ld	r18, Y+
    42c6:	82 e0       	ldi	r24, 0x02	; 2
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	e2 2f       	mov	r30, r18
    42cc:	e0 53       	subi	r30, 0x30	; 48
    42ce:	ea 30       	cpi	r30, 0x0A	; 10
    42d0:	18 f0       	brcs	.+6      	; 0x42d8 <strtod+0x184>
    42d2:	c8 1b       	sub	r28, r24
    42d4:	d9 0b       	sbc	r29, r25
    42d6:	1c c0       	rjmp	.+56     	; 0x4310 <strtod+0x1bc>
    42d8:	20 e0       	ldi	r18, 0x00	; 0
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	fc e0       	ldi	r31, 0x0C	; 12
    42de:	20 38       	cpi	r18, 0x80	; 128
    42e0:	3f 07       	cpc	r19, r31
    42e2:	5c f4       	brge	.+22     	; 0x42fa <strtod+0x1a6>
    42e4:	c9 01       	movw	r24, r18
    42e6:	88 0f       	add	r24, r24
    42e8:	99 1f       	adc	r25, r25
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	28 0f       	add	r18, r24
    42f0:	39 1f       	adc	r19, r25
    42f2:	22 0f       	add	r18, r18
    42f4:	33 1f       	adc	r19, r19
    42f6:	2e 0f       	add	r18, r30
    42f8:	31 1d       	adc	r19, r1
    42fa:	e9 91       	ld	r30, Y+
    42fc:	e0 53       	subi	r30, 0x30	; 48
    42fe:	ea 30       	cpi	r30, 0x0A	; 10
    4300:	68 f3       	brcs	.-38     	; 0x42dc <strtod+0x188>
    4302:	e4 fe       	sbrs	r14, 4
    4304:	03 c0       	rjmp	.+6      	; 0x430c <strtod+0x1b8>
    4306:	30 95       	com	r19
    4308:	21 95       	neg	r18
    430a:	3f 4f       	sbci	r19, 0xFF	; 255
    430c:	82 0e       	add	r8, r18
    430e:	93 1e       	adc	r9, r19
    4310:	ce 2c       	mov	r12, r14
    4312:	dd 24       	eor	r13, r13
    4314:	e1 fe       	sbrs	r14, 1
    4316:	07 c0       	rjmp	.+14     	; 0x4326 <strtod+0x1d2>
    4318:	a1 14       	cp	r10, r1
    431a:	b1 04       	cpc	r11, r1
    431c:	21 f0       	breq	.+8      	; 0x4326 <strtod+0x1d2>
    431e:	21 97       	sbiw	r28, 0x01	; 1
    4320:	f5 01       	movw	r30, r10
    4322:	d1 83       	std	Z+1, r29	; 0x01
    4324:	c0 83       	st	Z, r28
    4326:	cb 01       	movw	r24, r22
    4328:	ba 01       	movw	r22, r20
    432a:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__floatunsisf>
    432e:	7b 01       	movw	r14, r22
    4330:	8c 01       	movw	r16, r24
    4332:	f3 e0       	ldi	r31, 0x03	; 3
    4334:	cf 22       	and	r12, r31
    4336:	dd 24       	eor	r13, r13
    4338:	23 e0       	ldi	r18, 0x03	; 3
    433a:	c2 16       	cp	r12, r18
    433c:	d1 04       	cpc	r13, r1
    433e:	21 f4       	brne	.+8      	; 0x4348 <strtod+0x1f4>
    4340:	17 fb       	bst	r17, 7
    4342:	10 95       	com	r17
    4344:	17 f9       	bld	r17, 7
    4346:	10 95       	com	r17
    4348:	57 01       	movw	r10, r14
    434a:	68 01       	movw	r12, r16
    434c:	c8 01       	movw	r24, r16
    434e:	b7 01       	movw	r22, r14
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	50 e0       	ldi	r21, 0x00	; 0
    4358:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__cmpsf2>
    435c:	88 23       	and	r24, r24
    435e:	09 f4       	brne	.+2      	; 0x4362 <strtod+0x20e>
    4360:	4a c0       	rjmp	.+148    	; 0x43f6 <strtod+0x2a2>
    4362:	97 fe       	sbrs	r9, 7
    4364:	0d c0       	rjmp	.+26     	; 0x4380 <strtod+0x22c>
    4366:	2d e4       	ldi	r18, 0x4D	; 77
    4368:	e2 2e       	mov	r14, r18
    436a:	26 e0       	ldi	r18, 0x06	; 6
    436c:	f2 2e       	mov	r15, r18
    436e:	90 94       	com	r9
    4370:	81 94       	neg	r8
    4372:	91 08       	sbc	r9, r1
    4374:	93 94       	inc	r9
    4376:	c0 e2       	ldi	r28, 0x20	; 32
    4378:	d0 e0       	ldi	r29, 0x00	; 0
    437a:	00 e0       	ldi	r16, 0x00	; 0
    437c:	10 e0       	ldi	r17, 0x00	; 0
    437e:	12 c0       	rjmp	.+36     	; 0x43a4 <strtod+0x250>
    4380:	95 e6       	ldi	r25, 0x65	; 101
    4382:	e9 2e       	mov	r14, r25
    4384:	96 e0       	ldi	r25, 0x06	; 6
    4386:	f9 2e       	mov	r15, r25
    4388:	f6 cf       	rjmp	.-20     	; 0x4376 <strtod+0x222>
    438a:	f7 01       	movw	r30, r14
    438c:	25 91       	lpm	r18, Z+
    438e:	35 91       	lpm	r19, Z+
    4390:	45 91       	lpm	r20, Z+
    4392:	54 91       	lpm	r21, Z+
    4394:	c6 01       	movw	r24, r12
    4396:	b5 01       	movw	r22, r10
    4398:	0e 94 47 20 	call	0x408e	; 0x408e <__mulsf3>
    439c:	5b 01       	movw	r10, r22
    439e:	6c 01       	movw	r12, r24
    43a0:	8c 1a       	sub	r8, r28
    43a2:	9d 0a       	sbc	r9, r29
    43a4:	8c 16       	cp	r8, r28
    43a6:	9d 06       	cpc	r9, r29
    43a8:	84 f7       	brge	.-32     	; 0x438a <strtod+0x236>
    43aa:	d5 95       	asr	r29
    43ac:	c7 95       	ror	r28
    43ae:	0f 5f       	subi	r16, 0xFF	; 255
    43b0:	1f 4f       	sbci	r17, 0xFF	; 255
    43b2:	06 30       	cpi	r16, 0x06	; 6
    43b4:	11 05       	cpc	r17, r1
    43b6:	29 f0       	breq	.+10     	; 0x43c2 <strtod+0x26e>
    43b8:	8c ef       	ldi	r24, 0xFC	; 252
    43ba:	9f ef       	ldi	r25, 0xFF	; 255
    43bc:	e8 0e       	add	r14, r24
    43be:	f9 1e       	adc	r15, r25
    43c0:	f1 cf       	rjmp	.-30     	; 0x43a4 <strtod+0x250>
    43c2:	c5 01       	movw	r24, r10
    43c4:	d6 01       	movw	r26, r12
    43c6:	7c 01       	movw	r14, r24
    43c8:	8d 01       	movw	r16, r26
    43ca:	8c 2d       	mov	r24, r12
    43cc:	88 0f       	add	r24, r24
    43ce:	8d 2d       	mov	r24, r13
    43d0:	88 1f       	adc	r24, r24
    43d2:	8f 3f       	cpi	r24, 0xFF	; 255
    43d4:	51 f0       	breq	.+20     	; 0x43ea <strtod+0x296>
    43d6:	c6 01       	movw	r24, r12
    43d8:	b5 01       	movw	r22, r10
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	40 e0       	ldi	r20, 0x00	; 0
    43e0:	50 e0       	ldi	r21, 0x00	; 0
    43e2:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__cmpsf2>
    43e6:	88 23       	and	r24, r24
    43e8:	31 f4       	brne	.+12     	; 0x43f6 <strtod+0x2a2>
    43ea:	82 e2       	ldi	r24, 0x22	; 34
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	90 93 bb 03 	sts	0x03BB, r25
    43f2:	80 93 ba 03 	sts	0x03BA, r24
    43f6:	7e 2d       	mov	r23, r14
    43f8:	9f 2d       	mov	r25, r15
    43fa:	80 2f       	mov	r24, r16
    43fc:	61 2f       	mov	r22, r17
    43fe:	27 2f       	mov	r18, r23
    4400:	39 2f       	mov	r19, r25
    4402:	48 2f       	mov	r20, r24
    4404:	56 2f       	mov	r21, r22
    4406:	b9 01       	movw	r22, r18
    4408:	ca 01       	movw	r24, r20
    440a:	cd b7       	in	r28, 0x3d	; 61
    440c:	de b7       	in	r29, 0x3e	; 62
    440e:	ec e0       	ldi	r30, 0x0C	; 12
    4410:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__epilogue_restores__+0xc>

00004414 <isspace>:
    4414:	91 11       	cpse	r25, r1
    4416:	1e c0       	rjmp	.+60     	; 0x4454 <__ctype_isfalse>
    4418:	80 32       	cpi	r24, 0x20	; 32
    441a:	19 f0       	breq	.+6      	; 0x4422 <isspace+0xe>
    441c:	89 50       	subi	r24, 0x09	; 9
    441e:	85 50       	subi	r24, 0x05	; 5
    4420:	d0 f7       	brcc	.-12     	; 0x4416 <isspace+0x2>
    4422:	08 95       	ret

00004424 <strncasecmp_P>:
    4424:	fb 01       	movw	r30, r22
    4426:	dc 01       	movw	r26, r24
    4428:	41 50       	subi	r20, 0x01	; 1
    442a:	50 40       	sbci	r21, 0x00	; 0
    442c:	88 f0       	brcs	.+34     	; 0x4450 <strncasecmp_P+0x2c>
    442e:	8d 91       	ld	r24, X+
    4430:	81 34       	cpi	r24, 0x41	; 65
    4432:	1c f0       	brlt	.+6      	; 0x443a <strncasecmp_P+0x16>
    4434:	8b 35       	cpi	r24, 0x5B	; 91
    4436:	0c f4       	brge	.+2      	; 0x443a <strncasecmp_P+0x16>
    4438:	80 5e       	subi	r24, 0xE0	; 224
    443a:	65 91       	lpm	r22, Z+
    443c:	61 34       	cpi	r22, 0x41	; 65
    443e:	1c f0       	brlt	.+6      	; 0x4446 <strncasecmp_P+0x22>
    4440:	6b 35       	cpi	r22, 0x5B	; 91
    4442:	0c f4       	brge	.+2      	; 0x4446 <strncasecmp_P+0x22>
    4444:	60 5e       	subi	r22, 0xE0	; 224
    4446:	86 1b       	sub	r24, r22
    4448:	61 11       	cexpectedpse	r22, r1
    444a:	71 f3       	breq	.-36     	; 0x4428 <strncasecmp_P+0x4>
    444c:	99 0b       	sbc	r25, r25
    444e:	08 95       	ret
    4450:	88 1b       	sub	r24, r24
    4452:	fc cf       	rjmp	.-8      	; 0x444c <strncasecmp_P+0x28>

00004454 <__ctype_isfalse>:
    4454:	99 27       	eor	r25, r25
    4456:	88 27       	eor	r24, r24

00004458 <__ctype_istrue>:
    4458:	08 95       	ret

0000445a <__mulsi3>:
    445a:	62 9f       	mul	r22, r18
    445c:	d0 01       	movw	r26, r0
    445e:	73 9f       	mul	r23, r19
    4460:	f0 01       	movw	r30, r0
    4462:	82 9f       	mul	r24, r18
    4464:	e0 0d       	add	r30, r0
    4466:	f1 1d       	adc	r31, r1
    4468:	64 9f       	mul	r22, r20
    446a:	e0 0d       	add	r30, r0
    446c:	f1 1d       	adc	r31, r1
    446e:	92 9f       	mul	r25, r18
    4470:	f0 0d       	add	r31, r0
    4472:	83 9f       	mul	r24, r19
    4474:	f0 0d       	add	r31, r0
    4476:	74 9f       	mul	r23, r20
    4478:	f0 0d       	add	r31, r0
    447a:	65 9f       	mul	r22, r21
    447c:	f0 0d       	add	r31, r0
    447e:	99 27       	eor	r25, r25
    4480:	72 9f       	mul	r23, r18
    4482:	b0 0d       	add	r27, r0
    4484:	e1 1d       	adc	r30, r1
    4486:	f9 1f       	adc	r31, r25
    4488:	63 9f       	mul	r22, r19
    448a:	b0 0d       	add	r27, r0
    448c:	e1 1d       	adc	r30, r1
    448e:	f9 1f       	adc	r31, r25
    4490:	bd 01       	movw	r22, r26
    4492:	cf 01       	movw	r24, r30
    4494:	11 24       	eor	r1, r1
    4496:	08 95       	ret

00004498 <__udivmodhi4>:
    4498:	aa 1b       	sub	r26, r26
    449a:	bb 1b       	sub	r27, r27
    449c:	51 e1       	ldi	r21, 0x11	; 17
    449e:	07 c0       	rjmp	.+14     	; 0x44ae <__udivmodhi4_ep>

000044a0 <__udivmodhi4_loop>:
    44a0:	aa 1f       	adc	r26, r26
    44a2:	bb 1f       	adc	r27, r27
    44a4:	a6 17       	cp	r26, r22
    44a6:	b7 07       	cpc	r27, r23
    44a8:	10 f0       	brcs	.+4      	; 0x44ae <__udivmodhi4_ep>
    44aa:	a6 1b       	sub	r26, r22
    44ac:	b7 0b       	sbc	r27, r23

000044ae <__udivmodhi4_ep>:
    44ae:	88 1f       	adc	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	5a 95       	dec	r21
    44b4:	a9 f7       	brne	.-22     	; 0x44a0 <__udivmodhi4_loop>
    44b6:	80 95       	com	r24
    44b8:	90 95       	com	r25
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	08 95       	ret

000044c0 <__divmodhi4>:
    44c0:	97 fb       	bst	r25, 7
    44c2:	09 2e       	mov	r0, r25
    44c4:	07 26       	eor	r0, r23
    44c6:	0a d0       	rcall	.+20     	; 0x44dc <__divmodhi4_neg1>
    44c8:	77 fd       	sbrc	r23, 7
    44ca:	04 d0       	rcall	.+8      	; 0x44d4 <__divmodhi4_neg2>
    44cc:	e5 df       	rcall	.-54     	; 0x4498 <__udivmodhi4>
    44ce:	06 d0       	rcall	.+12     	; 0x44dc <__divmodhi4_neg1>
    44d0:	00 20       	and	r0, r0
    44d2:	1a f4       	brpl	.+6      	; 0x44da <__divmodhi4_exit>

000044d4 <__divmodhi4_neg2>:
    44d4:	70 95       	com	r23
    44d6:	61 95       	neg	r22
    44d8:	7f 4f       	sbci	r23, 0xFF	; 255

000044da <__divmodhi4_exit>:
    44da:	08 95       	ret

000044dc <__divmodhi4_neg1>:
    44dc:	f6 f7       	brtc	.-4      	; 0x44da <__divmodhi4_exit>
    44de:	90 95       	com	r25
    44e0:	81 95       	neg	r24
    44e2:	9f 4f       	sbci	r25, 0xFF	; 255
    44e4:	08 95       	ret

000044e6 <__udivmodsi4>:
    44e6:	a1 e2       	ldi	r26, 0x21	; 33
    44e8:	1a 2e       	mov	r1, r26
    44ea:	aa 1b       	sub	r26, r26
    44ec:	bb 1b       	sub	r27, r27
    44ee:	fd 01       	movw	r30, r26
    44f0:	0d c0       	rjmp	.+26     	; 0x450c <__udivmodsi4_ep>

000044f2 <__udivmodsi4_loop>:
    44f2:	aa 1f       	adc	r26, r26
    44f4:	bb 1f       	adc	r27, r27
    44f6:	ee 1f       	adc	r30, r30
    44f8:	ff 1f       	adc	r31, r31
    44fa:	a2 17       	cp	r26, r18
    44fc:	b3 07       	cpc	r27, r19
    44fe:	e4 07       	cpc	r30, r20
    4500:	f5 07       	cpc	r31, r21
    4502:	20 f0       	brcs	.+8      	; 0x450c <__udivmodsi4_ep>
    4504:	a2 1b       	sub	r26, r18
    4506:	b3 0b       	sbc	r27, r19
    4508:	e4 0b       	sbc	r30, r20
    450a:	f5 0b       	sbc	r31, r21

0000450c <__udivmodsi4_ep>:
    450c:	66 1f       	adc	r22, r22
    450e:	77 1f       	adc	r23, r23
    4510:	88 1f       	adc	r24, r24
    4512:	99 1f       	adc	r25, r25
    4514:	1a 94       	dec	r1
    4516:	69 f7       	brne	.-38     	; 0x44f2 <__udivmodsi4_loop>
    4518:	60 95       	com	r22
    451a:	70 95       	com	r23
    451c:	80 95       	com	r24
    451e:	90 95       	com	r25
    4520:	9b 01       	movw	r18, r22
    4522:	ac 01       	movw	r20, r24
    4524:	bd 01       	movw	r22, r26
    4526:	cf 01       	movw	r24, r30
    4528:	08 95       	ret

0000452a <__divmodsi4>:
    452a:	97 fb       	bst	r25, 7
    452c:	09 2e       	mov	r0, r25
    452e:	05 26       	eor	r0, r21
    4530:	0e d0       	rcall	.+28     	; 0x454e <__divmodsi4_neg1>
    4532:	57 fd       	sbrc	r21, 7
    4534:	04 d0       	rcall	.+8      	; 0x453e <__divmodsi4_neg2>
    4536:	d7 df       	rcall	.-82     	; 0x44e6 <__udivmodsi4>
    4538:	0a d0       	rcall	.+20     	; 0x454e <__divmodsi4_neg1>
    453a:	00 1c       	adc	r0, r0
    453c:	38 f4       	brcc	.+14     	; 0x454c <__divmodsi4_exit>

0000453e <__divmodsi4_neg2>:
    453e:	50 95       	com	r21
    4540:	40 95       	com	r20
    4542:	30 95       	com	r19
    4544:	21 95       	neg	r18
    4546:	3f 4f       	sbci	r19, 0xFF	; 255
    4548:	4f 4f       	sbci	r20, 0xFF	; 255
    454a:	5f 4f       	sbci	r21, 0xFF	; 255

0000454c <__divmodsi4_exit>:
    454c:	08 95       	ret

0000454e <__divmodsi4_neg1>:
    454e:	f6 f7       	brtc	.-4      	; 0x454c <__divmodsi4_exit>
    4550:	90 95       	com	r25
    4552:	80 95       	com	r24
    4554:	70 95       	com	r23
    4556:	61 95       	neg	r22
    4558:	7f 4f       	sbci	r23, 0xFF	; 255
    455a:	8f 4f       	sbci	r24, 0xFF	; 255
    455c:	9f 4f       	sbci	r25, 0xFF	; 255
    455e:	08 95       	ret

00004560 <__prologue_saves__>:
    4560:	2f 92       	push	r2
    4562:	3f 92       	push	r3
    4564:	4f 92       	push	r4
    4566:	5f 92       	push	r5
    4568:	6f 92       	push	r6
    456a:	7f 92       	push	r7
    456c:	8f 92       	push	r8
    456e:	9f 92       	push	r9
    4570:	af 92       	push	r10
    4572:	bf 92       	push	r11
    4574:	cf 92       	push	r12
    4576:	df 92       	push	r13
    4578:	ef 92       	push	r14
    457a:	ff 92       	push	r15
    457c:	0f 93       	push	r16
    457e:	1f 93       	push	r17
    4580:	cf 93       	push	r28
    4582:	df 93       	push	r29
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
    4588:	ca 1b       	sub	r28, r26
    458a:	db 0b       	sbc	r29, r27
    458c:	0f b6       	in	r0, 0x3f	; 63
    458e:	f8 94       	cli
    4590:	de bf       	out	0x3e, r29	; 62
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	cd bf       	out	0x3d, r28	; 61
    4596:	09 94       	ijmp

00004598 <__epilogue_restores__>:
    4598:	2a 88       	ldd	r2, Y+18	; 0x12
    459a:	39 88       	ldd	r3, Y+17	; 0x11
    459c:	48 88       	ldd	r4, Y+16	; 0x10
    459e:	5f 84       	ldd	r5, Y+15	; 0x0f
    45a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    45a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    45a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    45a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    45a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    45aa:	b9 84       	ldd	r11, Y+9	; 0x09
    45ac:	c8 84       	ldd	r12, Y+8	; 0x08
    45ae:	df 80       	ldd	r13, Y+7	; 0x07
    45b0:	ee 80       	ldd	r14, Y+6	; 0x06
    45b2:	fd 80       	ldd	r15, Y+5	; 0x05
    45b4:	0c 81       	ldd	r16, Y+4	; 0x04
    45b6:	1b 81       	ldd	r17, Y+3	; 0x03
    45b8:	aa 81       	ldd	r26, Y+2	; 0x02
    45ba:	b9 81       	ldd	r27, Y+1	; 0x01
    45bc:	ce 0f       	add	r28, r30
    45be:	d1 1d       	adc	r29, r1
    45c0:	0f b6       	in	r0, 0x3f	; 63
    45c2:	f8 94       	cli
    45c4:	de bf       	out	0x3e, r29	; 62
    45c6:	0f be       	out	0x3f, r0	; 63
    45c8:	cd bf       	out	0x3d, r28	; 61
    45ca:	ed 01       	movw	r28, r26
    45cc:	08 95       	ret

000045ce <__tablejump2__>:
    45ce:	ee 0f       	add	r30, r30
    45d0:	ff 1f       	adc	r31, r31

000045d2 <__tablejump__>:
    45d2:	05 90       	lpm	r0, Z+
    45d4:	f4 91       	lpm	r31, Z+
    45d6:	e0 2d       	mov	r30, r0
    45d8:	09 94       	ijmp

000045da <_exit>:
    45da:	f8 94       	cli

000045dc <__stop_program>:
    45dc:	ff cf       	rjmp	.-2      	; 0x45dc <__stop_program>
