options{
	STATIC=false;
	IGNORE_CASE=true;
}

PARSER_BEGIN(MySqlParser)

package com.slavi.parser;

import org.apache.commons.lang3.StringEscapeUtils;

public class MySqlParser extends MySqlParserHelper {
}
PARSER_END(MySqlParser)

//SKIP: {
//	" " |
//	"\t" |
//	"\r" |
//	"\n" |
//	<"--"(~["\r","\n"])*> |
//	<"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
//	<"/*" ((?!"*/").)* "*/">
//}


TOKEN: {
	<DECLARE: "declare"> |
	<BEGIN: "begin"> |
	<CREATE: "create"> |
	<OR: "or"> |
	<REPLACE: "replace"> |
	<TRIGGER: "trigger"> |
	<PACKAGE: "package"> |
	<PROCEDURE: "procedure"> |
	<FUNCTION: "function"> |
	<TYPE: "type"> |
	<SPACE: ([" ","\t","\n","\r"])+> |
	<LINE_COMMENT: "--"(~["\r","\n"])*> | 
	<MULTILINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN: {
	<S_CHAR_LITERAL: "'" (~["'"] | ("''") )* "'"> |
	<S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" > |
	<SEMICOLUMN: ";"> |
	<SLASH: "/"> |
	<AWORD: (~["'", "\"", " ", "\t", "\n", "\r", ";", "/"])+>
}

void space():
{}
{
	(
		<SPACE>					|
		<LINE_COMMENT>			|
		<MULTILINE_COMMENT>
	)							{ addComment(token); }
}

void parse():
{
}
{
	(
		space() |
		(
			<DECLARE>			{ add2(token); } |
			<BEGIN>				{ add2(token); } |
			(
				<CREATE>		{ doAdd(token); }
				space()
				(
					<OR>		{ doAdd(token); }
					space()
					<REPLACE>	{ doAdd(token); }
					space()
				)?
				(
					(
						<TRIGGER> |
						<PACKAGE> |
						<PROCEDURE> |
						<FUNCTION> |
						<TYPE>
					)				{ add2(token); } |
					<AWORD>			{ add(token); }
				)
			)
		) |
		(
			<S_CHAR_LITERAL> |
			<S_QUOTED_IDENTIFIER> |
			<AWORD> |
			<SEMICOLUMN> |
			<SLASH>
		)						{ add(token); }
	)*
	<EOF>
}
