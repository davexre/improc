options{
	STATIC=false;
}

PARSER_BEGIN(UQLParser)

package com.demo.stage2;

import java.lang.StringBuilder;

public class UQLParser {
    public final StringBuilder sqlSB = new StringBuilder();
}
PARSER_END(UQLParser) 

/**  And now, the actual parsing specifications...... */

/** Skip these characters, they are considered "white space" **/
SKIP :                              
{
    " "
    | "\t"
    | "\r"
    | "\n"

}


TOKEN: /*RESERVED TOKENS FOR UQL */
{
      <AND: "and">
   |  <OR:  "or">
   |  <TITLE: "title">
   |  <ACTOR: "actor">
   |  <DIRECTOR: "director">
   |  <KEYWORD: "keyword">
   |  <LPAREN: "(">
   |  <RPAREN: ")">
   |  <EQUALS: "=">
   |  <NOTEQUAL: "<>">
}

TOKEN : /* the keywords and comparators - QUOTEDVALUE accounts for escaped quotes as well */
{
        < STRING : (["A"-"Z","a"-"z","0"-"9"])+ >
|       < QUOTED_STRING: "\"" (~["\""])+ "\"" >
}


/** 
 *  Top level
 */
void parse() :
{
}
{
    expression()   <EOF>
              {
                    // surraound current SQL buffer with outer template
                    sqlSB.insert(0,"SELECT TITLE,DIRECTOR \nFROM MOVIE\nWHERE MOVIE_ID IN (\n");      
                    sqlSB.append(")");
              }
}

/**
 * An expression is defined to be a queryTerm followed by zero or more
 * query terms joined by either an AND or an OR.   If two query terms are joined with 
 * AND then both conditions must be met.  If two query terms are joined with an OR, then
 * one of the two conditions must be met.  
 */
void expression() :
{
}
{            queryTerm()    
            (
              ( <AND>
                { sqlSB.append("\nINTERSECT\n"); }
               | <OR> 
                { sqlSB.append("\nUNION\n"); }
              ) 
              queryTerm() )*
}

/**
 * Query terms may consist of a parenthetically separated expression or
 * may be a query criteria of the form queryName = something or queryName <> something.
 *
 */
void queryTerm() :
{
        Token tSearchName, tComparator, tComparand;
        String sComparand, table, columnName;
}
{
        ( 
          <TITLE>    {table = "movie";   columnName = "title"; } |
          <DIRECTOR> {table = "movie";   columnName = "director"; } | 
          <KEYWORD>  {table = "keyword"; columnName = "keyword"; } | 
          <ACTOR>    {table = "actor";   columnName = "name"; }  
        )
        
        ( tComparator=<EQUALS> | tComparator=<NOTEQUAL> ) 
        
        ( 
          tComparand=<STRING> { sComparand = tComparand.image; }  |
          tComparand=<QUOTED_STRING> 
          {     // need to get rid of quotes.
                sComparand = tComparand.image.substring(1,tComparand.image.length() - 1);
          }
        )
        
        { 
                sqlSB.append("SELECT MOVIE_ID FROM ").append(table);
                sqlSB.append("\nWHERE ").append(columnName);
                sqlSB.append(" ").append(tComparator.image);
                sqlSB.append(" '").append(sComparand).append("'");
        }
        |
        <LPAREN> 
        { sqlSB.append("("); }
        expression() 
        <RPAREN>        
        { sqlSB.append(")"); }
}



