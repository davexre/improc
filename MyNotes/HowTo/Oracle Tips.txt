=========================== TITLE ===========================
=========================== TITLE ===========================
=========================== TITLE ===========================
=========================== TITLE ===========================

=========================== Install Oracle instant client (Oracle HOME without database) ===========================
http://www.oracle.com/technetwork/database/database-technologies/instant-client/downloads/index.html

http://download.oracle.com/otn/linux/instantclient/122010/instantclient-basic-linux.x64-12.2.0.1.0.zip
http://download.oracle.com/otn/linux/instantclient/122010/instantclient-sqlplus-linux.x64-12.2.0.1.0.zip
http://download.oracle.com/otn/linux/instantclient/122010/instantclient-tools-linux.x64-12.2.0.1.0.zip
http://download.oracle.com/otn/linux/instantclient/122010/instantclient-odbc-linux.x64-12.2.0.1.0-2.zip
http://download.oracle.com/otn/linux/instantclient/122010/instantclient-sdk-linux.x64-12.2.0.1.0.zip
http://download.oracle.com/otn/linux/instantclient/122010/instantclient-jdbc-linux.x64-12.2.0.1.0.zip

=========================== Bitwise operations ===========================
http://www.oracledba.co.uk/tips/bitwise_ops.htm
create or replace function bitor( x in number, y in number ) return number  as
begin
	return x + y - bitand(x,y);
end;

create or replace function bitxor( x in number, y in number ) return number  as
begin
	return bitor(x,y) - bitand(x,y);
end;

=========================== Explain plan ===========================
ALTER SESSION SET EVENTS='10053 trace name context forever, level 1';
...your statement here...
ALTER SESSION SET EVENTS '10053 trace name context off';

ALTER SESSION SET sql_trace=TRUE;


=========================== Copy table statistics ===========================
exec dbms_stats.create_stat_table ( ownname => user , stattab => 'prod_stats' ) ;
exec dbms_stats.export_schema_stats ( ownname => user , stattab => 'prod_stats') ;
exp scott/tiger file=prod_stats.dmp log=prod_stats.log tables=prod_stats rows=yes 

imp dev_scott/tiger file=prod_stats.dmp fromuser=scott tables=prod_stats
exec dbms_stats.import_schema_stats ( ownname => user , stattab => 'prod_stats' );

=========================== Tools ===========================
sqlmap
dbsat

=========================== Various links ===========================
* Dynamic Performance (V$) Views
https://docs.oracle.com/database/121/REFRN/GUID-A634ED26-2334-40F5-A016-22973F54BEDA.htm#REFRN-GUID-A634ED26-2334-40F5-A016-22973F54BEDA
	** Interesting Views: V$ACTIVE_SESSION_HISTORY, 
* PL/SQL functions & SQL tuning:
	** https://oracle-base.com/articles/misc/efficient-function-calls-from-sql


=========================== SQL Developer ===========================
Nice plugin to unwrap package bodies (if wrapped)
https://www.salvis.com/blog/plsql-unwrapper-for-sql-developer/
To be installed from Help/Check for updates, Install from local file, select the downloaded file.

=========================== Execute immediate ===========================
set serveroutput on;
declare
  theSql varchar2(100);
  param  varchar2(100);
  res    varchar2(100);
begin
    param := 'AUT10000';
    theSql := 'begin select last_name into :out from customer where customer_id=:customer_id; end;';
    execute immediate theSql using out res, in param; -- The order of parameters IS important res -> :out, param -> :customer_id
    dbms_output.put_line(res);
end;
/

=========================== TOP SQLs (borrowed from SQL Developer) ===========================
-- TOP SQLs by CPU
select
	substr(sql_text,1,500) "SQL",
	(cpu_time/1000000) "CPU_Seconds",
	disk_reads "Disk_Reads",
	buffer_gets "Buffer_Gets",
	executions "Executions",
	case when rows_processed = 0 then null else round((buffer_gets/nvl(replace(rows_processed,0,1),1))) end "Buffer_gets/rows_proc",
	round((buffer_gets/nvl(replace(executions,0,1),1))) "Buffer_gets/executions",
	(elapsed_time/1000000) "Elapsed_Seconds",
	module "Module"
from gv$sql s
order by cpu_time desc nulls last

=========================== Complex select into statement with custom object, containing arrays ===========================
create or replace type my_vod as object (
	id number,
	title varchar2(200),
	price number(5,2)
);
/

create or replace type my_vod_filter as object (
	id number,
	name varchar2(200)
);
/

create or replace type my_vod_filter_response as object (
	vods my_vod_arr,
	filters my_vod_filter_arr
);
/

create or replace type my_vod_tab as table of my_vod;
/
create or replace type my_vod_filter_tab as table of my_vod_filter;
/
create or replace type my_vod_filter_response as object (
	vods my_vod_tab,
	filters my_vod_filter_tab
);
/

set serveroutput on;
declare
	r my_vod_filter_response;
begin
	with 
	va_data as (
		select new my_vod(1, 'asd 1', 2.345) v from dual union all
		select new my_vod(2, 'asd 2', 2.346) from dual union all
		select new my_vod(3, 'asd 3', 2.347) from dual
	),
	fa_data as (
		select new my_vod_filter(1, 'f1') f from dual union all
		select new my_vod_filter(2, 'f2') from dual union all
		select new my_vod_filter(3, 'f3') from dual
	)
	select new my_vod_filter_response(
		CAST (MULTISET (select v from va_data) as my_vod_tab),
		CAST (MULTISET (select f from fa_data) as my_vod_filter_tab))
	into r from dual;

	dbms_output.put_line('---');
end;
/

=========================== Use shell script to iterate over a recordset ===========================
(su - oracle -l -c "sqlplus -L -S -s md/vss@mddb" << EOF
set head off
set feedback off
set pagesize 0
select table_name, status from user_tables where rownum < 6 order by table_name
EOF
) | while read tableName tableStatus
do
	echo "table name=$tableName, stat=$tableStatus"
done

if (($? > 0)); then
	echo "Error"
	exit 1;
fi;
echo "Done."

=== OR

#!/bin/bash
RESULT=$(su - oracle -l -c "sqlplus -L -S -s md/vss@mddb" << EOF
set serveroutput on
set head off
set verify off
set feedback off
var a number
begin
	for rec in
		(select table_name, status from user_tables where rownum < 6 order by table_name)
	loop
	dbms_output.put_line(rec.table_name || ',' || rec.status);
	end loop;
	:a := 1;
end;
/
exit :a
EOF
)

if (($? > 0)); then
	echo "Error"
	exit 1;
fi;

IFS=","
echo "$RESULT" | while read tableName tableStatus
do
	echo "table name=$tableName, stat=$tableStatus"
done

echo "Done."

=========================== Отворени транзакции-not committed or rollbacked ===========================
select t.XID "Transaction ID", t.START_TIME "Tr.start", s.USERNAME, s.sid || ',' || s.serial# "sid,serial#",
	t.STATUS "Tr.status", s.STATUS "Sess.status", s.STATE "Sess.state",
	s.MACHINE, s.PROGRAM,
	t.LOG_IO "Tr.Logical I/O", t.PHY_IO "Tr.Physical I/O",
	nvl(q.SQL_FULLTEXT, prev_q.SQL_FULLTEXT) "SQL"
from v$session s
join v$transaction t on t.ses_addr = s.saddr
left join v$sqlarea q on s.SQL_ID=q.SQL_ID
left join v$sqlarea prev_q on s.PREV_SQL_ID=prev_q.SQL_ID;

=========================== Locked & locking sessions & SQLs ===========================
select 
	substr(to_char(w.session_id),1,5) wsid, 
	p1.spid wpid,
	substr(s1.username,1,12) "WAITING User",
	substr(s1.osuser,1,8) "OS User",
	substr(s1.program,1,20) "WAITING Program",
	s1.client_info "WAITING Client",
	sq1.sql_fulltext "WAITING SQL",
	substr(tO_CHAR(h.session_id),1,5) HSID, p2.spid HPID,
	substr(s2.username,1,12) "HOLDING User",
	substr(s2.osuser,1,8) "OS User",
	substr(s2.program,1,20) "HOLDING Program",
	s2.client_info "HOLDING Client",
	o.object_name "HOLDING Object",
	sq2.sql_fulltext "HOLDING SQL"
from gv$process p1
left join gv$session s1 on s1.paddr = p1.addr
left join dba_locks w on w.session_id = s1.sid
left join dba_locks h on w.lock_type = h.lock_type and w.lock_id1 = h.lock_id1 and w.lock_id2 = h.lock_id2
left join v$sql sq1 on s1.sql_id = sq1.sql_id
join dba_objects o on s1.row_wait_obj# = o.object_id
right join gv$session s2 on h.session_id = s2.sid
right join gv$process p2 on s2.paddr = p2.addr
right join v$sql sq2 on s2.sql_id = sq2.sql_id
where w.last_convert > 60 and
	h.mode_held != 'None' and
	h.mode_held != 'Null' and
	w.mode_requested != 'None'
order by w.last_convert desc;

=========================== Статистики за текущата сесия ===========================
spool my_stats

select name, value
from v$statname sn
join v$mystat ms on sn.statistic# = ms.statistic#
where ms.value != 0;

select event, total_waits, total_timeouts, time_waited, max_wait
from
	(select /*+ no_merge */ sid from v$mystat where rownum = 1) ms
	join v$session_event se on se.sid = ms.sid;

select stat_name, value
from
	(select /*+ no_merge */ sid from v$mystat where rownum = 1) ms,
	join v$sess_time_model tm on tm.sid = ms.sid
where tm.value != 0;

spool off

=========================== Списък с активни сесии и изълнявани заявки ===========================
select q.SQL_FULLTEXT, s.SADDR, 'alter system kill session ''' || s.SID || ', ' || s.SERIAL# || ''';' kill, s.USERNAME, s.STATUS, s.PROGRAM
from v$session s
join v$sqlarea q on s.SQL_ID=q.SQL_ID
order by s.STATUS;

=========================== Обновяване на статистики и sql explain plan ===========================
EXEC DBMS_STATS.GATHER_SCHEMA_STATS('<schema name>');
alter system flush shared_pool;

=========================== Генериране на alter table команди за всички constraint "on delete cascade" ===========================
WHENEVER SQLERROR CONTINUE;
WHENEVER OSERROR EXIT FAILURE;
set linesize 32767
set serveroutput on
set pagesize 0
set wrap off
set trimout on
set trimspool on
begin
	for i in (

with
d as
(select t.*, level lvl, REGEXP_REPLACE(sys_connect_by_path('"' || t.column_name || '"', ','), '^,', '') cols
from
	(select cc.*, c.r_owner, c.r_constraint_name
	from user_constraints c
	join user_cons_columns cc on c.owner=cc.owner and c.CONSTRAINT_NAME=cc.CONSTRAINT_NAME
	where c.constraint_type='R' and nvl(c.delete_rule, 'NO ACTION') <> 'CASCADE') t
start with t.position=1
connect by prior t.owner=t.owner and prior t.constraint_name=t.constraint_name and prior t.position+1=t.position),

dd as (
select d.owner, d.constraint_name, max(lvl) lvl
from d
group by d.owner, d.constraint_name)

select cmd
from (
	select 'alter table "' || d.table_name || '" drop constraint "' || d.constraint_name || '"' cmd, d.table_name, d.constraint_name, 1 orderby
	from d
	join dd on d.owner=dd.owner and d.constraint_name=dd.constraint_name and d.lvl=dd.lvl

	union all

	select 'alter table "' || d.table_name || '" add constraint "' || d.constraint_name || '" foreign key (' || d.cols || ') references "' || pk.table_name || '" on delete cascade' cmd, d.table_name, d.constraint_name, 2 orderby
	from d
	join dd on d.owner=dd.owner and d.constraint_name=dd.constraint_name and d.lvl=dd.lvl
	join user_constraints pk on d.r_owner=pk.owner and d.r_constraint_name=pk.constraint_name
	)
order by table_name, constraint_name, orderby

	)
	loop
		dbms_output.put_line(i.cmd || ';');
		--execute immediate i.cmd;
	end loop;
end;

=========================== Make a comma separated list ===========================
more examples: 
	https://oracle-base.com/articles/misc/string-aggregation-techniques
	https://oracle-base.com/articles/12c/listagg-function-enhancements-12cr2#default-listagg-functionality

select rtrim(xmlagg(XMLELEMENT(E,a.lvl,',').extract('//text()') order by a.lvl).getclobval(), ',') csv
from
	(select level lvl from dual connect by level < 10) a;

select listagg(a.lvl,',' on overflow truncate without count) within group (order by a.lvl) csv
from
	(select level lvl from dual connect by level < 10) a;

=========================== Split a column by comma ===========================
https://lalitkumarb.wordpress.com/2015/03/04/split-comma-delimited-strings-in-a-table-in-oracle/
CREATE TABLE t(id NUMBER generated always AS identity, text VARCHAR2(4000));
INSERT INTO t (text) VALUES ('word1, word2, word3');
INSERT INTO t (text) VALUES ('word4, word5, word6');
INSERT INTO t (text) VALUES ('word7, word8, word9');
INSERT INTO t (text) VALUES ('word10, word11, word12, word13');
COMMIT;

CREATE TABLE t(id NUMBER, text VARCHAR2(4000));
INSERT INTO t (id, text) VALUES (1, 'word1, word2, word3');
INSERT INTO t (id, text) VALUES (2, 'word4, word5, word6');
INSERT INTO t (id, text) VALUES (3, 'word7, word8, word9');
INSERT INTO t (id, text) VALUES (4, 'word10, word11, word12, word13');
COMMIT;

-- INSTR + CONNECT BY + LATERAL + SUBSTR (Oracle 12c +)
with t as (
select 1 id, ',word1,, word2, word3,' text from dual union all
select 2, 'word4, word5, word6' from dual union all
select 3, 'word7, word8, word9' from dual union all
select 4, 'word10, word11, word12, word13' from dual)

SELECT t.id, lines.lvl, 
	trim(substr(t.text, 
		lines.start_pos, 
		decode(lines.end_pos, 0, length(t.text), lines.end_pos - lines.start_pos))) text
FROM t,
	LATERAL(
		SELECT 
			LEVEL lvl,
			decode(level, 1, 1, instr(t.text, ',', 1, level - 1) + 1) start_pos,
			instr(t.text, ',', 1, level) end_pos
		FROM dual
			CONNECT BY instr(t.text, ',', 1, LEVEL - 1) > 0
	) lines
ORDER BY id, lines.lvl;

-- INSTR in CONNECT BY clause
SELECT t.id, trim(regexp_substr(t.text, '[^,]+', 1, lines.column_value)) text
FROM t,
	TABLE (CAST (MULTISET
	(SELECT LEVEL FROM dual
		CONNECT BY instr(t.text, ',', 1, LEVEL - 1) > 0
	) AS sys.odciNumberList ) ) lines
ORDER BY id, lines.column_value;

-- REGEXP_SUBSTR in CONNECT BY clause
SELECT t.id, trim(regexp_substr(t.text, '[^,]+', 1, lines.column_value)) text
FROM t,
	TABLE (CAST (MULTISET
	(SELECT LEVEL FROM dual
		CONNECT BY regexp_substr(t.text , '[^,]+', 1, LEVEL) IS NOT NULL
	) AS sys.odciNumberList ) ) lines
ORDER BY id, lines.column_value;

-- REGEXP_COUNT in CONNECT BY clause
SELECT t.id, trim(regexp_substr(t.text, '[^,]+', 1, lines.column_value)) text
FROM t,
	TABLE (CAST (MULTISET
	(SELECT LEVEL FROM dual
		CONNECT BY LEVEL <= regexp_count(t.text, ',')+1
	) AS sys.odciNumberList ) ) lines
ORDER BY id, lines.column_value;

-- REPLACE in CONNECT BY clause
SELECT id, text
FROM(
	SELECT t.ID,
		trim(regexp_substr(t.text, '[^,]+', 1, lines.COLUMN_VALUE)) text,
		lines.column_value cv
	FROM t
	CROSS JOIN
	(SELECT *
		FROM TABLE (CAST (MULTISET
			(SELECT LEVEL FROM dual
				CONNECT BY LEVEL <= (SELECT COUNT(REPLACE(text, ',')) FROM t)
			) AS sys.odciNumberList))
		) lines
)
WHERE text IS NOT NULL
ORDER BY id, cv;

-- XMLTABLE (not working)
SELECT id, trim(COLUMN_VALUE) text
FROM t,
	xmltable(('"'
	|| REPLACE(text, ',', '","')
	|| '"'));

-- MODEL clause
WITH
model_param AS
(SELECT
	ID,
	text AS orig_str,
	',' || text || ',' AS mod_str,
	1 AS start_pos,
	Length(text) AS end_pos,
	(LENGTH(text) - LENGTH(REPLACE(text, ','))) + 1 AS element_count,
	0 AS element_no,
	ROWNUM AS rn
FROM t)
SELECT id, trim(Substr(mod_str, start_pos, end_pos-start_pos)) text
FROM
	(SELECT *
	FROM model_param
	MODEL PARTITION BY (id, rn, orig_str, mod_str)
	DIMENSION BY (element_no)
	MEASURES (start_pos, end_pos, element_count)
	RULES ITERATE (2000)
	UNTIL (ITERATION_NUMBER+1 = element_count[0])
	(start_pos[ITERATION_NUMBER+1] = instr(cv(mod_str), ',', 1, cv(element_no)) + 1,
	   end_pos[ITERATION_NUMBER+1] = instr(cv(mod_str), ',', 1, cv(element_no) + 1) )
	)
WHERE
	element_no != 0
ORDER BY ID, mod_str, element_no;


=========================== Find most used and unused DB indexes ===========================
http://www.dba-oracle.com/oracle_tips_unused_indexes.htm

----- List the indexes
select a.executions_total, a.elapsed_time_total, i.*
from dba_indexes i
left join (
	select p.object_owner, p.object_name, sum(s.executions_total) executions_total, sum(s.elapsed_time_total) elapsed_time_total
	from WRH$_SQL_PLAN p
	join WRH$_SQLTEXT t on p.snap_id = t.snap_id and p.dbid = t.dbid
	join WRH$_SQLSTAT s on s.snap_id = t.snap_id and s.dbid = t.dbid and s.sql_id = t.sql_id
	where
		p.operation = 'INDEX' --and p.object_owner = 'MD'
		group by p.object_owner, p.object_name
	) a on i.owner = a.object_owner and i.index_name = a.object_name
where
	i.owner = 'MD'
order by 
	--i.owner, i.index_name, 
	a.executions_total desc nulls first;

----- Find which SQL-s are using the indexes
select a.*, t.sql_text 
from (
	select p.object_owner, p.object_name, t.sql_id, sum(s.executions_total) executions_total, sum(s.elapsed_time_total) elapsed_time_total
	from WRH$_SQL_PLAN p
	join WRH$_SQLTEXT t on p.snap_id = t.snap_id and p.dbid = t.dbid
	join WRH$_SQLSTAT s on s.snap_id = t.snap_id and s.dbid = t.dbid and s.sql_id = t.sql_id
	where
		p.operation = 'INDEX'
		--and p.object_owner = 'MD'
		--and p.object_name = 'CHANNEL_LINEUP_MAP_PK'
	group by p.object_owner, p.object_name, t.sql_id) a
join WRH$_SQLTEXT t on a.sql_id = t.sql_id
order by executions_total desc;

----- Find duplicated indexes
with
cols as (
	select index_name, count(*) cols
	from user_ind_columns
	group by index_name
),
dup as (
	select i1.index_name name1, i2.index_name name2, count(*) cnt
	from user_ind_columns i1
	join user_ind_columns i2 on i1.table_name = i2.table_name and i1.column_name = i2.column_name and i1.index_name != i2.index_name
	group by i1.index_name, i2.index_name
)
select dup.*, c1.cols cols1, c2.cols cols2
from dup
join cols c1 on dup.name1 = c1.index_name
join cols c2 on dup.name2 = c2.index_name
where
	(c1.cols < c2.cols or (c1.cols = c2.cols and c1.index_name < c2.index_name))
	and dup.cnt = c1.cols	-- comment this line to return possible duplication, uncomment to get a list of "full match"
order by cnt desc, dup.name1, dup.name2;

=========================== Find SQL statements using literals ===========================
Article URL: https://connormcdonald.wordpress.com/2016/05/30/sql-statements-using-literals/

create or replace function replace_constants_in_sql(p_query in varchar2) return varchar2 as
	l_query long;
	l_char  nvarchar2(1);
	l_in_quotes boolean default FALSE;
begin
	for i in 1 .. length(p_query) loop
		l_char := substr(p_query,i,1);
		if (l_char = '''' and l_in_quotes)
		then
			l_in_quotes := FALSE;
		elsif (l_char = '''' and NOT l_in_quotes)
		then
			l_in_quotes := TRUE;
			l_query := l_query || '''#';
		end if;
		if (NOT l_in_quotes) then
			l_query := l_query || l_char;
		end if;
	end loop;
	l_query := translate(l_query, '0123456789', '@@@@@@@@@@');
	for i in 0 .. 8 loop
		l_query := replace(l_query, lpad('@',10-i,'@'), '@');
		l_query := replace(l_query, lpad(' ',10-i,' '), ' ');
	end loop;
	return upper(l_query);
end;
/
with
t1 as (select sql_text, replace_constants_in_sql(sql_text) sql_text_wo_constants from (select to_char(dbms_lob.substr(sql_fulltext, 4000)) sql_text from v$sqlarea)),
t2 as (select row_number() over (order by count(*) desc) rank, count(*) occurances, sql_text_wo_constants from t1 group by sql_text_wo_constants)
select t2.occurances, t1.sql_text from t1 join t2 on t1.sql_text_wo_constants = t2.sql_text_wo_constants where t2.rank<10 order by t2.rank, t2.occurances, t1.sql_text;

=========================== User tables data to XML ===========================
select 
	xmlelement(evalname(t.table_name), 
		xmlattributes(
			t.num_rows as "ROWS"
		),
		(select xmlagg(
			xmlelement(evalname(c.column_name), xmlattributes(
				c.data_type as "TYPE",
				c.data_length as "LENGTH",
				c.nullable as "NULLABLE")))
		from user_tab_columns c
		where t.table_name = c.table_name)
	) tbls
from user_tables t;
