=========================== SQL Developer ===========================
Nice plugin to unwrap package bodies (if wrapped)
https://www.salvis.com/blog/plsql-unwrapper-for-sql-developer/
To be installed from Help/Check for updates, Install from local file, select the downloaded file.

=========================== Execute immediate ===========================
set serveroutput on;
declare
  theSql varchar2(100);
  param  varchar2(100);
  res    varchar2(100);
begin
    param := 'AUT10000';
    theSql := 'begin select last_name into :out from customer where customer_id=:customer_id; end;';
    execute immediate theSql using out res, in param; -- The order of parameters IS important res -> :out, param -> :customer_id
    dbms_output.put_line(res);
end;
/

=========================== TITLE ===========================
=========================== TITLE ===========================

=========================== Отворени транзакции-not committed or rollbacked ===========================
select t.XID "Transaction ID", t.START_TIME "Tr.start", s.USERNAME, s.sid || ',' || s.serial# "sid,serial#",
	t.STATUS "Tr.status", s.STATUS "Sess.status", s.STATE "Sess.state",
	s.MACHINE, s.PROGRAM,
	t.LOG_IO "Tr.Logical I/O", t.PHY_IO "Tr.Physical I/O",
	nvl(q.SQL_FULLTEXT, prev_q.SQL_FULLTEXT) "SQL"
from v$session s
join v$transaction t on t.ses_addr = s.saddr
left join v$sqlarea q on s.SQL_ID=q.SQL_ID
left join v$sqlarea prev_q on s.PREV_SQL_ID=prev_q.SQL_ID;

=========================== Статистики за текущата сесия ===========================
spool my_stats

select name, value
from v$statname sn
join v$mystat ms on sn.statistic# = ms.statistic#
where ms.value != 0;

select event, total_waits, total_timeouts, time_waited, max_wait
from
	(select /*+ no_merge */ sid from v$mystat where rownum = 1) ms
	join v$session_event se on se.sid = ms.sid;

select stat_name, value
from
	(select /*+ no_merge */ sid from v$mystat where rownum = 1) ms,
	join v$sess_time_model tm on tm.sid = ms.sid
where tm.value != 0;

spool off

=========================== Списък с активни сесии и изълнявани заявки ===========================
select q.SQL_FULLTEXT, s.SADDR, 'alter system kill session ''' || s.SID || ', ' || s.SERIAL# || ''';' kill, s.USERNAME, s.STATUS, s.PROGRAM
from v$session s
join v$sqlarea q on s.SQL_ID=q.SQL_ID
order by s.STATUS;

=========================== Обновяване на статистики и sql explain plan ===========================
EXEC DBMS_STATS.GATHER_SCHEMA_STATS('<schema name>');
alter system flush shared_pool;

=========================== Генериране на alter table команди за всички constraint "on delete cascade" ===========================
WHENEVER SQLERROR CONTINUE;
set serveroutput on;
begin
	for i in (

with
d as
(select t.*, level lvl, REGEXP_REPLACE(sys_connect_by_path('"' || t.column_name || '"', ','), '^,', '') cols
from
	(select cc.*, c.r_owner, c.r_constraint_name
	from user_constraints c
	join user_cons_columns cc on c.owner=cc.owner and c.CONSTRAINT_NAME=cc.CONSTRAINT_NAME
	where c.constraint_type='R' and nvl(c.delete_rule, 'NO ACTION') <> 'CASCADE') t
start with t.position=1
connect by prior t.owner=t.owner and prior t.constraint_name=t.constraint_name and prior t.position+1=t.position),

dd as (
select d.owner, d.constraint_name, max(lvl) lvl
from d
group by d.owner, d.constraint_name)

select cmd
from (
	select 'alter table "' || d.table_name || '" drop constraint "' || d.constraint_name || '"' cmd, d.table_name, d.constraint_name, 1 orderby
	from d
	join dd on d.owner=dd.owner and d.constraint_name=dd.constraint_name and d.lvl=dd.lvl

	union all

	select 'alter table "' || d.table_name || '" add constraint "' || d.constraint_name || '" foreign key (' || d.cols || ') references "' || pk.table_name || '" on delete cascade' cmd, d.table_name, d.constraint_name, 2 orderby
	from d
	join dd on d.owner=dd.owner and d.constraint_name=dd.constraint_name and d.lvl=dd.lvl
	join user_constraints pk on d.r_owner=pk.owner and d.r_constraint_name=pk.constraint_name
	)
order by table_name, constraint_name, orderby

	)
	loop
		dbms_output.put_line(i.cmd || ';');
		--execute immediate i.cmd;
	end loop;
end;

=========================== Split a column by comma ===========================
https://lalitkumarb.wordpress.com/2015/03/04/split-comma-delimited-strings-in-a-table-in-oracle/
CREATE TABLE t(id NUMBER generated always AS identity, text VARCHAR2(4000));
INSERT INTO t (text) VALUES ('word1, word2, word3');
INSERT INTO t (text) VALUES ('word4, word5, word6');
INSERT INTO t (text) VALUES ('word7, word8, word9');
INSERT INTO t (text) VALUES ('word10, word11, word12, word13');
COMMIT;

CREATE TABLE t(id NUMBER, text VARCHAR2(4000));
INSERT INTO t (id, text) VALUES (1, 'word1, word2, word3');
INSERT INTO t (id, text) VALUES (2, 'word4, word5, word6');
INSERT INTO t (id, text) VALUES (3, 'word7, word8, word9');
INSERT INTO t (id, text) VALUES (4, 'word10, word11, word12, word13');
COMMIT;

-- INSTR in CONNECT BY clause
SELECT t.id, trim(regexp_substr(t.text, '[^,]+', 1, lines.column_value)) text
FROM t,
	TABLE (CAST (MULTISET
	(SELECT LEVEL FROM dual
		CONNECT BY instr(t.text, ',', 1, LEVEL - 1) > 0
	) AS sys.odciNumberList ) ) lines
ORDER BY id, lines.column_value;

-- REGEXP_SUBSTR in CONNECT BY clause
SELECT t.id, trim(regexp_substr(t.text, '[^,]+', 1, lines.column_value)) text
FROM t,
	TABLE (CAST (MULTISET
	(SELECT LEVEL FROM dual
		CONNECT BY regexp_substr(t.text , '[^,]+', 1, LEVEL) IS NOT NULL
	) AS sys.odciNumberList ) ) lines
ORDER BY id, lines.column_value;

-- REGEXP_COUNT in CONNECT BY clause
SELECT t.id, trim(regexp_substr(t.text, '[^,]+', 1, lines.column_value)) text
FROM t,
	TABLE (CAST (MULTISET
	(SELECT LEVEL FROM dual
		CONNECT BY LEVEL <= regexp_count(t.text, ',')+1
	) AS sys.odciNumberList ) ) lines
ORDER BY id, lines.column_value;

-- REPLACE in CONNECT BY clause
SELECT id, text
FROM(
	SELECT t.ID,
		trim(regexp_substr(t.text, '[^,]+', 1, lines.COLUMN_VALUE)) text,
		lines.column_value cv
	FROM t
	CROSS JOIN
	(SELECT *
		FROM TABLE (CAST (MULTISET
			(SELECT LEVEL FROM dual
				CONNECT BY LEVEL <= (SELECT COUNT(REPLACE(text, ',')) FROM t)
			) AS sys.odciNumberList))
		) lines
)
WHERE text IS NOT NULL
ORDER BY id, cv;

-- XMLTABLE (not working)
SELECT id, trim(COLUMN_VALUE) text
FROM t,
	xmltable(('"'
	|| REPLACE(text, ',', '","')
	|| '"'));

-- MODEL clause
WITH
model_param AS
(SELECT
	ID,
	text AS orig_str,
	',' || text || ',' AS mod_str,
	1 AS start_pos,
	Length(text) AS end_pos,
	(LENGTH(text) - LENGTH(REPLACE(text, ','))) + 1 AS element_count,
	0 AS element_no,
	ROWNUM AS rn
FROM t)
SELECT id, trim(Substr(mod_str, start_pos, end_pos-start_pos)) text
FROM
	(SELECT *
	FROM model_param
	MODEL PARTITION BY (id, rn, orig_str, mod_str)
	DIMENSION BY (element_no)
	MEASURES (start_pos, end_pos, element_count)
	RULES ITERATE (2000)
	UNTIL (ITERATION_NUMBER+1 = element_count[0])
	(start_pos[ITERATION_NUMBER+1] = instr(cv(mod_str), ',', 1, cv(element_no)) + 1,
	   end_pos[ITERATION_NUMBER+1] = instr(cv(mod_str), ',', 1, cv(element_no) + 1) )
	)
WHERE
	element_no != 0
ORDER BY ID, mod_str, element_no;
