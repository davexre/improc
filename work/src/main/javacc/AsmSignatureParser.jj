options{
//	STATIC=false;
	IGNORE_CASE=false;
}

PARSER_BEGIN(AsmSignatureParser)

package com.slavi.lang.asmParser;

import java.util.HashSet;
import java.util.Set;


public abstract class AsmSignatureParser {
	StringBuilder cl = new StringBuilder();
	
	public abstract void addClass(String className);
}
PARSER_END(AsmSignatureParser)

<IDENTIFIER> TOKEN: {
	<JAVA_IDENTIFIER: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_","$"])* > : DEFAULT
}

void typeArgs(): {}
{
	"<"
	(
		"*" |
		(
			("+" | "-")?
			fieldTypeSignature()
		)+
	)
	">"
}

void classTypeSignature(): {}
{
	"L"
	(
		javaIdentifier()				{ cl.setLength(0); cl.append(token.image); }
		(
			"/" javaIdentifier()		{ cl.append("/").append(token.image); }
		)*
	)									{ addClass(cl.toString()); cl.setLength(0); }
	( typeArgs() )?
	(
		"."
		javaIdentifier()
		( typeArgs() )?
	)*
	";"
}

void typeVar(): {}
{
	"T" javaIdentifier() ";"
}

void fieldTypeSignature(): {}
{
	( classTypeSignature() ) | 
	("[" typeSignature() ) |
	( typeVar() )
}

void typeSignature(): {}
{
	"Z" | "C" | "B" | "S" | "I" | "F" | "J" | "D" |
	fieldTypeSignature()
}

void methodTypeSignature(): {}
{
	( typeParams() )?
	"("
		( typeSignature() )*
	")"
	( typeSignature() | "V" ) 
	( classTypeSignature() | typeVar() )*
}

void typeParams(): {}
{
	"<" 
	( typeParam() )+
	">"
}

void javaIdentifier():	{ token_source.SwitchTo(IDENTIFIER); }
{
	<JAVA_IDENTIFIER>	{ token_source.SwitchTo(DEFAULT); }
}

void typeParam(): {}
{
	javaIdentifier() ":" fieldTypeSignature()
}

void parseClassSignature(): {}
{
	( typeParams() )?
	( classTypeSignature() )+
	<EOF>
}

void parseMethodSignature(): {}
{
	methodTypeSignature()
	<EOF>
}

void parseTypeSignature(): {}
{
	typeSignature()
	<EOF>
}
