package com.slavi.db.spy;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class SpyStatement<TT extends Statement> extends SpyWrapper<TT> implements Statement {

	public SpyStatement(TT delegate) {
		super(delegate);
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.executeQuery(sql);
		}
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.executeUpdate(sql);
		}
	}

	@Override
	public void close() throws SQLException {
		t.close();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return t.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		t.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return t.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		t.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		t.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return t.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		t.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		t.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return t.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		t.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		t.setCursorName(name);
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.execute(sql);
		}
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return t.getResultSet();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return t.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return t.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		t.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return t.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		t.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return t.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return t.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return t.getResultSetType();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		t.addBatch(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		t.clearBatch();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return t.executeBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return new SpyConnection(t.getConnection());
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return t.getMoreResults(current);
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return t.getGeneratedKeys();
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.executeUpdate(sql, autoGeneratedKeys);
		}
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.executeUpdate(sql, columnIndexes);
		}
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.executeUpdate(sql, columnNames);
		}
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.execute(sql, autoGeneratedKeys);
		}
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.execute(sql, columnIndexes);
		}
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		try (SpyTimer tt = new SpyTimer(logSql, sql)) {
			return t.execute(sql, columnNames);
		}
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return t.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return t.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		t.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return t.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		t.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return t.isClosed();
	}
}
