/*
	Assembled from:
		https://raw.githubusercontent.com/Microsoft/sql-server-samples/master/samples/databases/northwind-pubs/instnwnd.sql
		https://raw.githubusercontent.com/Microsoft/sql-server-samples/master/samples/databases/northwind-pubs/instpubs.sql
*/

CREATE TABLE "Employees" (
	"EmployeeID" int NOT NULL,
	"LastName" varchar(20) NOT NULL,
	"FirstName" varchar(10) NOT NULL,
	"Title" varchar(30),
	"TitleOfCourtesy" varchar(25),
	"BirthDate" date,
	"HireDate" date,
	"Address" varchar(60),
	"City" varchar(15),
	"Region" varchar(15),
	"PostalCode" varchar(10),
	"Country" varchar(15),
	"HomePhone" varchar(24),
	"Extension" varchar(4),
	"Photo" blob,
	"Notes" clob,
	"ReportsTo" int,
	"PhotoPath" varchar(255),
	CONSTRAINT "PK_Employees" PRIMARY KEY ("EmployeeID")
--	CONSTRAINT "FK_Employees_Employees" FOREIGN KEY ("ReportsTo") REFERENCES "Employees" ("EmployeeID")
--	CONSTRAINT "CK_Birthdate" CHECK (BirthDate < getdate())
);

CREATE TABLE "Categories" (
	"CategoryID" int NOT NULL,
	"CategoryName" varchar(15) NOT NULL,
	"Description" clob,
	"Picture" blob,
	CONSTRAINT "PK_Categories" PRIMARY KEY("CategoryID")
);

CREATE TABLE "Customers" (
	"CustomerID" char(5) NOT NULL,
	"CompanyName" varchar(40) NOT NULL,
	"ContactName" varchar(30),
	"ContactTitle" varchar(30),
	"Address" varchar(60),
	"City" varchar(15),
	"Region" varchar(15),
	"PostalCode" varchar(10),
	"Country" varchar(15),
	"Phone" varchar(24),
	"Fax" varchar(24),
	CONSTRAINT "PK_Customers" PRIMARY KEY("CustomerID")
);

CREATE TABLE "Shippers" (
	"ShipperID" int NOT NULL,
	"CompanyName" varchar(40) NOT NULL,
	"Phone" varchar(24),
	CONSTRAINT "PK_Shippers" PRIMARY KEY("ShipperID")
);

CREATE TABLE "Suppliers" (
	"SupplierID" int NOT NULL,
	"CompanyName" varchar(40) NOT NULL ,
	"ContactName" varchar(30),
	"ContactTitle" varchar(30),
	"Address" varchar(60),
	"City" varchar(15),
	"Region" varchar(15),
	"PostalCode" varchar(10),
	"Country" varchar(15),
	"Phone" varchar(24),
	"Fax" varchar(24),
	"HomePage" clob,
	CONSTRAINT "PK_Suppliers" PRIMARY KEY("SupplierID")
);

CREATE TABLE "Orders" (
	"OrderID" int NOT NULL ,
	"CustomerID" char(5),
	"EmployeeID" int,
	"OrderDate" date,
	"RequiredDate" date,
	"ShippedDate" date,
	"ShipVia" int,
	"Freight" double,
	"ShipName" varchar(40),
	"ShipAddress" varchar(60),
	"ShipCity" varchar(15),
	"ShipRegion" varchar(15),
	"ShipPostalCode" varchar(10),
	"ShipCountry" varchar(15),
	CONSTRAINT "PK_Orders" PRIMARY KEY("OrderID"),
	CONSTRAINT "FK_Orders_Customers" FOREIGN KEY("CustomerID") REFERENCES "Customers"("CustomerID"),
	CONSTRAINT "FK_Orders_Employees" FOREIGN KEY("EmployeeID") REFERENCES "Employees"("EmployeeID"),
	CONSTRAINT "FK_Orders_Shippers" FOREIGN KEY("ShipVia") REFERENCES "Shippers"("ShipperID")
);

CREATE TABLE "Products" (
	"ProductID" int NOT NULL,
	"ProductName" varchar(40) NOT NULL ,
	"SupplierID" int,
	"CategoryID" int,
	"QuantityPerUnit" varchar(20),
	"UnitPrice" double,
	"UnitsInStock" int,
	"UnitsOnOrder" int,
	"ReorderLevel" int,
	"Discontinued" boolean,
	CONSTRAINT "PK_Products" PRIMARY KEY("ProductID"),
	CONSTRAINT "FK_Products_Categories" FOREIGN KEY("CategoryID") REFERENCES "Categories"("CategoryID"),
	CONSTRAINT "FK_Products_Suppliers" FOREIGN KEY("SupplierID") REFERENCES "Suppliers"("SupplierID")
--	CONSTRAINT "CK_Products_UnitPrice" CHECK (UnitPrice >= 0),
--	CONSTRAINT "CK_ReorderLevel" CHECK (ReorderLevel >= 0),
--	CONSTRAINT "CK_UnitsInStock" CHECK (UnitsInStock >= 0),
--	CONSTRAINT "CK_UnitsOnOrder" CHECK (UnitsOnOrder >= 0)
);

CREATE TABLE "Order Details" (
	"OrderID" int NOT NULL,
	"ProductID" int NOT NULL,
	"UnitPrice" double,
	"Quantity" int NOT NULL,
	"Discount" float NOT NULL,
	CONSTRAINT "PK_Order_Details" PRIMARY KEY("OrderID", "ProductID"),
	CONSTRAINT "FK_Order_Details_Orders" FOREIGN KEY("OrderID") REFERENCES "Orders"("OrderID"),
	CONSTRAINT "FK_Order_Details_Products" FOREIGN KEY("ProductID") REFERENCES "Products"("ProductID")
--	CONSTRAINT "CK_Discount" CHECK (Discount >= 0 and (Discount <= 1)),
--	CONSTRAINT "CK_Quantity" CHECK (Quantity > 0),
--	CONSTRAINT "CK_UnitPrice" CHECK (UnitPrice >= 0)
);

CREATE TABLE "CustomerDemographics" (
	"CustomerTypeID" char(10) NOT NULL,
	"CustomerDesc" clob,
	CONSTRAINT "PK_CustomerDemographics" PRIMARY KEY("CustomerTypeID")
);
	
CREATE TABLE "Region" (
	"RegionID" int NOT NULL,
	"RegionDescription" char(50) NOT NULL,
	CONSTRAINT "PK_Region" PRIMARY KEY("RegionID")
);

CREATE TABLE "Territories" (
	"TerritoryID" varchar(20) NOT NULL,
	"TerritoryDescription" char(50) NOT NULL,
	"RegionID" int NOT NULL,
	CONSTRAINT "PK_Territories" PRIMARY KEY("TerritoryID"),
	CONSTRAINT "FK_Territories_Region" FOREIGN KEY("RegionID") REFERENCES "Region"("RegionID")
);

CREATE TABLE "CustomerCustomerDemo" (
	"CustomerID" char(5) NOT NULL,
	"CustomerTypeID" char(10) NOT NULL,
	CONSTRAINT "PK_CustomerCustomerDemo" PRIMARY KEY("CustomerID", "CustomerTypeID"),
	CONSTRAINT "FK_CustomerCustomerDemo" FOREIGN KEY("CustomerTypeID") REFERENCES "CustomerDemographics"("CustomerTypeID"),
	CONSTRAINT "FK_CustomerCustomerDemo_Customers" FOREIGN KEY("CustomerID") REFERENCES "Customers"("CustomerID")
);

CREATE TABLE "EmployeeTerritories" (
	"EmployeeID" int NOT NULL,
	"TerritoryID" varchar(20) NOT NULL,
	CONSTRAINT "PK_EmployeeTerritories" PRIMARY KEY("EmployeeID", "TerritoryID"),
	CONSTRAINT "FK_EmployeeTerritories_Employees" FOREIGN KEY("EmployeeID") REFERENCES "Employees"("EmployeeID"),
	CONSTRAINT "FK_EmployeeTerritories_Territories" FOREIGN KEY("TerritoryID") REFERENCES "Territories"("TerritoryID")
);

---------------------------

create view "Customer and Suppliers by City" ("City", "CompanyName", "ContactName", "Relationship") AS
SELECT "City", "CompanyName", "ContactName", 'Customers'
FROM "Customers"
UNION SELECT "City", "CompanyName", "ContactName", 'Suppliers'
FROM "Suppliers";

create view "Alphabetical list of products"("ProductID", "ProductName", "SupplierID",
"CategoryID", "QuantityPerUnit", "UnitPrice", "UnitsInStock", "UnitsOnOrder",
"ReorderLevel", "Discontinued", "CategoryName") AS
SELECT "Products"."ProductID", "Products"."ProductName", "Products"."SupplierID",
"Products"."CategoryID", "Products"."QuantityPerUnit", "Products"."UnitPrice", 
"Products"."UnitsInStock", "Products"."UnitsOnOrder", "Products"."ReorderLevel", 
"Products"."Discontinued", "Categories"."CategoryName"
FROM "Categories" INNER JOIN "Products" ON "Categories"."CategoryID" = "Products"."CategoryID"
WHERE ((("Products"."Discontinued")=false));

/*
create view "Current Product List" AS
SELECT Product_List.ProductID, Product_List.ProductName
FROM "Products" AS Product_List
WHERE (((Product_List.Discontinued)=0));

create view "Orders Qry" AS
SELECT Orders.OrderID, Orders.CustomerID, Orders.EmployeeID, Orders.OrderDate, Orders.RequiredDate, 
	Orders.ShippedDate, Orders.ShipVia, Orders.Freight, Orders.ShipName, Orders.ShipAddress, Orders.ShipCity, 
	Orders.ShipRegion, Orders.ShipPostalCode, Orders.ShipCountry, 
	Customers.CompanyName, Customers.Address, Customers.City, Customers.Region, Customers.PostalCode, Customers.Country
FROM "Customers" INNER JOIN "Orders" ON Customers.CustomerID = Orders.CustomerID;

create view "Products Above Average Price" AS
SELECT Products.ProductName, Products.UnitPrice
FROM "Products"
WHERE Products.UnitPrice>(SELECT AVG(UnitPrice) From Products);

create view "Products by Category" AS
SELECT Categories.CategoryName, Products.ProductName, Products.QuantityPerUnit, Products.UnitsInStock, Products.Discontinued
FROM "Categories" INNER JOIN "Products" ON Categories.CategoryID = Products.CategoryID
WHERE Products.Discontinued <> 1;

create view "Quarterly Orders" AS
SELECT DISTINCT Customers.CustomerID, Customers.CompanyName, Customers.City, Customers.Country
FROM "Customers" RIGHT JOIN "Orders" ON Customers.CustomerID = Orders.CustomerID
WHERE Orders.OrderDate BETWEEN '19970101' And '19971231';

create view Invoices AS
SELECT Orders.ShipName, Orders.ShipAddress, Orders.ShipCity, Orders.ShipRegion, Orders.ShipPostalCode, 
	Orders.ShipCountry, Orders.CustomerID, Customers.CompanyName AS CustomerName, Customers.Address, Customers.City, 
	Customers.Region, Customers.PostalCode, Customers.Country, 
	(FirstName + ' ' + LastName) AS Salesperson, 
	Orders.OrderID, Orders.OrderDate, Orders.RequiredDate, Orders.ShippedDate, Shippers.CompanyName As ShipperName, 
	"Order Details".ProductID, Products.ProductName, "Order Details".UnitPrice, "Order Details".Quantity, 
	"Order Details".Discount, 
	(CONVERT(money,("Order Details".UnitPrice*Quantity*(1-Discount)/100))*100) AS ExtendedPrice, Orders.Freight
FROM 	Shippers INNER JOIN 
		(Products INNER JOIN 
			(
				(Employees INNER JOIN 
					(Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID) 
				ON Employees.EmployeeID = Orders.EmployeeID) 
			INNER JOIN "Order Details" ON Orders.OrderID = "Order Details".OrderID) 
		ON Products.ProductID = "Order Details".ProductID) 
	ON Shippers.ShipperID = Orders.ShipVia;

create view "Order Details Extended" AS
SELECT "Order Details".OrderID, "Order Details".ProductID, Products.ProductName, 
	"Order Details".UnitPrice, "Order Details".Quantity, "Order Details".Discount, 
	(CONVERT(money,("Order Details".UnitPrice*Quantity*(1-Discount)/100))*100) AS ExtendedPrice
FROM Products INNER JOIN "Order Details" ON Products.ProductID = "Order Details".ProductID;

create view "Order Subtotals" AS
SELECT "Order Details".OrderID, Sum(CONVERT(money,("Order Details".UnitPrice*Quantity*(1-Discount)/100))*100) AS Subtotal
FROM "Order Details"
GROUP BY "Order Details".OrderID;

create view "Product Sales for 1997" AS
SELECT Categories.CategoryName, Products.ProductName, 
Sum(CONVERT(money,("Order Details".UnitPrice*Quantity*(1-Discount)/100))*100) AS ProductSales
FROM (Categories INNER JOIN Products ON Categories.CategoryID = Products.CategoryID) 
	INNER JOIN (Orders 
		INNER JOIN "Order Details" ON Orders.OrderID = "Order Details".OrderID) 
	ON Products.ProductID = "Order Details".ProductID
WHERE (((Orders.ShippedDate) Between '19970101' And '19971231'))
GROUP BY Categories.CategoryName, Products.ProductName;

create view "Category Sales for 1997" AS
SELECT "Product Sales for 1997".CategoryName, Sum("Product Sales for 1997".ProductSales) AS CategorySales
FROM "Product Sales for 1997"
GROUP BY "Product Sales for 1997".CategoryName;

create view "Sales by Category" AS
SELECT Categories.CategoryID, Categories.CategoryName, Products.ProductName, 
	Sum("Order Details Extended".ExtendedPrice) AS ProductSales
FROM 	Categories INNER JOIN 
		(Products INNER JOIN 
			(Orders INNER JOIN "Order Details Extended" ON Orders.OrderID = "Order Details Extended".OrderID) 
		ON Products.ProductID = "Order Details Extended".ProductID) 
	ON Categories.CategoryID = Products.CategoryID
WHERE Orders.OrderDate BETWEEN '19970101' And '19971231'
GROUP BY Categories.CategoryID, Categories.CategoryName, Products.ProductName;

create view "Sales Totals by Amount" AS
SELECT "Order Subtotals".Subtotal AS SaleAmount, Orders.OrderID, Customers.CompanyName, Orders.ShippedDate
FROM 	Customers INNER JOIN 
		(Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID) 
	ON Customers.CustomerID = Orders.CustomerID
WHERE ("Order Subtotals".Subtotal >2500) AND (Orders.ShippedDate BETWEEN '19970101' And '19971231');

create view "Summary of Sales by Quarter" AS
SELECT Orders.ShippedDate, Orders.OrderID, "Order Subtotals".Subtotal
FROM Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID
WHERE Orders.ShippedDate IS NOT NULL;

create view "Summary of Sales by Year" AS
SELECT Orders.ShippedDate, Orders.OrderID, "Order Subtotals".Subtotal
FROM Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID
WHERE Orders.ShippedDate IS NOT NULL;

create procedure "Ten Most Expensive Products" AS
SET ROWCOUNT 10
SELECT Products.ProductName AS TenMostExpensiveProducts, Products.UnitPrice
FROM Products
ORDER BY Products.UnitPrice DESC;

create procedure "Employee Sales by Country" 
@Beginning_Date DateTime, @Ending_Date DateTime AS
SELECT Employees.Country, Employees.LastName, Employees.FirstName, Orders.ShippedDate, Orders.OrderID, "Order Subtotals".Subtotal AS SaleAmount
FROM Employees INNER JOIN 
	(Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID) 
	ON Employees.EmployeeID = Orders.EmployeeID
WHERE Orders.ShippedDate Between @Beginning_Date And @Ending_Date;

create procedure "Sales by Year" 
	@Beginning_Date DateTime, @Ending_Date DateTime AS
SELECT Orders.ShippedDate, Orders.OrderID, "Order Subtotals".Subtotal, DATENAME(yy,ShippedDate) AS Year
FROM Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID
WHERE Orders.ShippedDate Between @Beginning_Date And @Ending_Date;
*/
------------------

Insert Into "Region" Values (1,'Eastern');
Insert Into "Region" Values (2,'Western');
Insert Into "Region" Values (3,'Northern');
Insert Into "Region" Values (4,'Southern');

INSERT INTO "Shippers"("ShipperID","CompanyName","Phone") VALUES(1,'Speedy Express','(503) 555-9831');
INSERT INTO "Shippers"("ShipperID","CompanyName","Phone") VALUES(2,'United Package','(503) 555-3199');
INSERT INTO "Shippers"("ShipperID","CompanyName","Phone") VALUES(3,'Federal Shipping','(503) 555-9931');

Insert Into "Territories" Values ('01581','Westboro',1);
Insert Into "Territories" Values ('01730','Bedford',1);
Insert Into "Territories" Values ('01833','Georgetow',1);
Insert Into "Territories" Values ('02116','Boston',1);
Insert Into "Territories" Values ('02139','Cambridge',1);
Insert Into "Territories" Values ('02184','Braintree',1);
Insert Into "Territories" Values ('02903','Providence',1);
Insert Into "Territories" Values ('03049','Hollis',3);
Insert Into "Territories" Values ('03801','Portsmouth',3);
Insert Into "Territories" Values ('06897','Wilton',1);
Insert Into "Territories" Values ('07960','Morristown',1);
Insert Into "Territories" Values ('08837','Edison',1);
Insert Into "Territories" Values ('10019','New York',1);
Insert Into "Territories" Values ('10038','New York',1);
Insert Into "Territories" Values ('11747','Mellvile',1);
Insert Into "Territories" Values ('14450','Fairport',1);
Insert Into "Territories" Values ('19428','Philadelphia',3);
Insert Into "Territories" Values ('19713','Neward',1);
Insert Into "Territories" Values ('20852','Rockville',1);
Insert Into "Territories" Values ('27403','Greensboro',1);
Insert Into "Territories" Values ('27511','Cary',1);
Insert Into "Territories" Values ('29202','Columbia',4);
Insert Into "Territories" Values ('30346','Atlanta',4);
Insert Into "Territories" Values ('31406','Savannah',4);
Insert Into "Territories" Values ('32859','Orlando',4);
Insert Into "Territories" Values ('33607','Tampa',4);
Insert Into "Territories" Values ('40222','Louisville',1);
Insert Into "Territories" Values ('44122','Beachwood',3);
Insert Into "Territories" Values ('45839','Findlay',3);
Insert Into "Territories" Values ('48075','Southfield',3);
Insert Into "Territories" Values ('48084','Troy',3);
Insert Into "Territories" Values ('48304','Bloomfield Hills',3);
Insert Into "Territories" Values ('53404','Racine',3);
Insert Into "Territories" Values ('55113','Roseville',3);
Insert Into "Territories" Values ('55439','Minneapolis',3);
Insert Into "Territories" Values ('60179','Hoffman Estates',2);
Insert Into "Territories" Values ('60601','Chicago',2);
Insert Into "Territories" Values ('72716','Bentonville',4);
Insert Into "Territories" Values ('75234','Dallas',4);
Insert Into "Territories" Values ('78759','Austin',4);
Insert Into "Territories" Values ('80202','Denver',2);
Insert Into "Territories" Values ('80909','Colorado Springs',2);
Insert Into "Territories" Values ('85014','Phoenix',2);
Insert Into "Territories" Values ('85251','Scottsdale',2);
Insert Into "Territories" Values ('90405','Santa Monica',2);
Insert Into "Territories" Values ('94025','Menlo Park',2);
Insert Into "Territories" Values ('94105','San Francisco',2);
Insert Into "Territories" Values ('95008','Campbell',2);
Insert Into "Territories" Values ('95054','Santa Clara',2);
Insert Into "Territories" Values ('95060','Santa Cruz',2);
Insert Into "Territories" Values ('98004','Bellevue',2);
Insert Into "Territories" Values ('98052','Redmond',2);
Insert Into "Territories" Values ('98104','Seattle',2);

/*
Insert Into "EmployeeTerritories" Values (1,'06897');
Insert Into "EmployeeTerritories" Values (1,'19713');
Insert Into "EmployeeTerritories" Values (2,'01581');
Insert Into "EmployeeTerritories" Values (2,'01730');
Insert Into "EmployeeTerritories" Values (2,'01833');
Insert Into "EmployeeTerritories" Values (2,'02116');
Insert Into "EmployeeTerritories" Values (2,'02139');
Insert Into "EmployeeTerritories" Values (2,'02184');
Insert Into "EmployeeTerritories" Values (2,'40222');
Insert Into "EmployeeTerritories" Values (3,'30346');
Insert Into "EmployeeTerritories" Values (3,'31406');
Insert Into "EmployeeTerritories" Values (3,'32859');
Insert Into "EmployeeTerritories" Values (3,'33607');
Insert Into "EmployeeTerritories" Values (4,'20852');
Insert Into "EmployeeTerritories" Values (4,'27403');
Insert Into "EmployeeTerritories" Values (4,'27511');
Insert Into "EmployeeTerritories" Values (5,'02903');
Insert Into "EmployeeTerritories" Values (5,'07960');
Insert Into "EmployeeTerritories" Values (5,'08837');
Insert Into "EmployeeTerritories" Values (5,'10019');
Insert Into "EmployeeTerritories" Values (5,'10038');
Insert Into "EmployeeTerritories" Values (5,'11747');
Insert Into "EmployeeTerritories" Values (5,'14450');
Insert Into "EmployeeTerritories" Values (6,'85014');
Insert Into "EmployeeTerritories" Values (6,'85251');
Insert Into "EmployeeTerritories" Values (6,'98004');
Insert Into "EmployeeTerritories" Values (6,'98052');
Insert Into "EmployeeTerritories" Values (6,'98104');
Insert Into "EmployeeTerritories" Values (7,'60179');
Insert Into "EmployeeTerritories" Values (7,'60601');
Insert Into "EmployeeTerritories" Values (7,'80202');
Insert Into "EmployeeTerritories" Values (7,'80909');
Insert Into "EmployeeTerritories" Values (7,'90405');
Insert Into "EmployeeTerritories" Values (7,'94025');
Insert Into "EmployeeTerritories" Values (7,'94105');
Insert Into "EmployeeTerritories" Values (7,'95008');
Insert Into "EmployeeTerritories" Values (7,'95054');
Insert Into "EmployeeTerritories" Values (7,'95060');
Insert Into "EmployeeTerritories" Values (8,'19428');
Insert Into "EmployeeTerritories" Values (8,'44122');
Insert Into "EmployeeTerritories" Values (8,'45839');
Insert Into "EmployeeTerritories" Values (8,'53404');
Insert Into "EmployeeTerritories" Values (9,'03049');
Insert Into "EmployeeTerritories" Values (9,'03801');
Insert Into "EmployeeTerritories" Values (9,'48075');
Insert Into "EmployeeTerritories" Values (9,'48084');
Insert Into "EmployeeTerritories" Values (9,'48304');
Insert Into "EmployeeTerritories" Values (9,'55113');
Insert Into "EmployeeTerritories" Values (9,'55439');
*/